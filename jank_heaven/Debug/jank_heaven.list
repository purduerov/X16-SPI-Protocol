
jank_heaven.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a44  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003b04  08003b04  00004b04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b34  08003b34  0000501c  2**0
                  CONTENTS
  4 .ARM          00000000  08003b34  08003b34  0000501c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b34  08003b34  0000501c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b34  08003b34  00004b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b38  08003b38  00004b38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08003b3c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000188  2000001c  08003b58  0000501c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001a4  08003b58  000051a4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000501c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a931  00000000  00000000  00005044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cad  00000000  00000000  0000f975  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be0  00000000  00000000  00011628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000942  00000000  00000000  00012208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018032  00000000  00000000  00012b4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dd71  00000000  00000000  0002ab7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c14f  00000000  00000000  000388ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c4a3c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ae8  00000000  00000000  000c4a80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  000c7568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000001c 	.word	0x2000001c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003aec 	.word	0x08003aec

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000020 	.word	0x20000020
 8000104:	08003aec 	.word	0x08003aec

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fee0 	bl	8000fe8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f82c 	bl	8000284 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 fab6 	bl	800079c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000230:	f000 f888 	bl	8000344 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000234:	f000 f996 	bl	8000564 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000238:	f000 fa12 	bl	8000660 <MX_TIM3_Init>
  MX_TIM1_Init();
 800023c:	f000 f8bc 	bl	80003b8 <MX_TIM1_Init>
  MX_CRC_Init();
 8000240:	f000 f860 	bl	8000304 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
	EnablePWMOutput(&htim1);
 8000244:	4b09      	ldr	r3, [pc, #36]	@ (800026c <main+0x4c>)
 8000246:	0018      	movs	r0, r3
 8000248:	f000 faf0 	bl	800082c <EnablePWMOutput>
	EnablePWMOutput(&htim2);
 800024c:	4b08      	ldr	r3, [pc, #32]	@ (8000270 <main+0x50>)
 800024e:	0018      	movs	r0, r3
 8000250:	f000 faec 	bl	800082c <EnablePWMOutput>
	EnablePWMOutput(&htim3);
 8000254:	4b07      	ldr	r3, [pc, #28]	@ (8000274 <main+0x54>)
 8000256:	0018      	movs	r0, r3
 8000258:	f000 fae8 	bl	800082c <EnablePWMOutput>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	HAL_SPI_TransmitReceive_IT(&hspi1, SPI_TX_Buffer, SPI_RX_Buffer, SPI_BUFFER_SIZE);
 800025c:	4a06      	ldr	r2, [pc, #24]	@ (8000278 <main+0x58>)
 800025e:	4907      	ldr	r1, [pc, #28]	@ (800027c <main+0x5c>)
 8000260:	4807      	ldr	r0, [pc, #28]	@ (8000280 <main+0x60>)
 8000262:	230d      	movs	r3, #13
 8000264:	f002 f8b6 	bl	80023d4 <HAL_SPI_TransmitReceive_IT>
	for (;;) {
		__asm("NOP");
 8000268:	46c0      	nop			@ (mov r8, r8)
 800026a:	e7fd      	b.n	8000268 <main+0x48>
 800026c:	200000b8 	.word	0x200000b8
 8000270:	20000100 	.word	0x20000100
 8000274:	20000148 	.word	0x20000148
 8000278:	20000000 	.word	0x20000000
 800027c:	20000190 	.word	0x20000190
 8000280:	20000054 	.word	0x20000054

08000284 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000284:	b590      	push	{r4, r7, lr}
 8000286:	b093      	sub	sp, #76	@ 0x4c
 8000288:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800028a:	2414      	movs	r4, #20
 800028c:	193b      	adds	r3, r7, r4
 800028e:	0018      	movs	r0, r3
 8000290:	2334      	movs	r3, #52	@ 0x34
 8000292:	001a      	movs	r2, r3
 8000294:	2100      	movs	r1, #0
 8000296:	f003 fbf3 	bl	8003a80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800029a:	1d3b      	adds	r3, r7, #4
 800029c:	0018      	movs	r0, r3
 800029e:	2310      	movs	r3, #16
 80002a0:	001a      	movs	r2, r3
 80002a2:	2100      	movs	r1, #0
 80002a4:	f003 fbec 	bl	8003a80 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002a8:	0021      	movs	r1, r4
 80002aa:	187b      	adds	r3, r7, r1
 80002ac:	2202      	movs	r2, #2
 80002ae:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002b0:	187b      	adds	r3, r7, r1
 80002b2:	2201      	movs	r2, #1
 80002b4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002b6:	187b      	adds	r3, r7, r1
 80002b8:	2210      	movs	r2, #16
 80002ba:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002bc:	187b      	adds	r3, r7, r1
 80002be:	2200      	movs	r2, #0
 80002c0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002c2:	187b      	adds	r3, r7, r1
 80002c4:	0018      	movs	r0, r3
 80002c6:	f001 fafb 	bl	80018c0 <HAL_RCC_OscConfig>
 80002ca:	1e03      	subs	r3, r0, #0
 80002cc:	d001      	beq.n	80002d2 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 80002ce:	f000 fc97 	bl	8000c00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002d2:	1d3b      	adds	r3, r7, #4
 80002d4:	2207      	movs	r2, #7
 80002d6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002d8:	1d3b      	adds	r3, r7, #4
 80002da:	2200      	movs	r2, #0
 80002dc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	2200      	movs	r2, #0
 80002e2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002e4:	1d3b      	adds	r3, r7, #4
 80002e6:	2200      	movs	r2, #0
 80002e8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002ea:	1d3b      	adds	r3, r7, #4
 80002ec:	2100      	movs	r1, #0
 80002ee:	0018      	movs	r0, r3
 80002f0:	f001 fe6c 	bl	8001fcc <HAL_RCC_ClockConfig>
 80002f4:	1e03      	subs	r3, r0, #0
 80002f6:	d001      	beq.n	80002fc <SystemClock_Config+0x78>
  {
    Error_Handler();
 80002f8:	f000 fc82 	bl	8000c00 <Error_Handler>
  }
}
 80002fc:	46c0      	nop			@ (mov r8, r8)
 80002fe:	46bd      	mov	sp, r7
 8000300:	b013      	add	sp, #76	@ 0x4c
 8000302:	bd90      	pop	{r4, r7, pc}

08000304 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000308:	4b0c      	ldr	r3, [pc, #48]	@ (800033c <MX_CRC_Init+0x38>)
 800030a:	4a0d      	ldr	r2, [pc, #52]	@ (8000340 <MX_CRC_Init+0x3c>)
 800030c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800030e:	4b0b      	ldr	r3, [pc, #44]	@ (800033c <MX_CRC_Init+0x38>)
 8000310:	2200      	movs	r2, #0
 8000312:	711a      	strb	r2, [r3, #4]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000314:	4b09      	ldr	r3, [pc, #36]	@ (800033c <MX_CRC_Init+0x38>)
 8000316:	2200      	movs	r2, #0
 8000318:	60da      	str	r2, [r3, #12]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800031a:	4b08      	ldr	r3, [pc, #32]	@ (800033c <MX_CRC_Init+0x38>)
 800031c:	2200      	movs	r2, #0
 800031e:	611a      	str	r2, [r3, #16]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000320:	4b06      	ldr	r3, [pc, #24]	@ (800033c <MX_CRC_Init+0x38>)
 8000322:	2201      	movs	r2, #1
 8000324:	619a      	str	r2, [r3, #24]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000326:	4b05      	ldr	r3, [pc, #20]	@ (800033c <MX_CRC_Init+0x38>)
 8000328:	0018      	movs	r0, r3
 800032a:	f000 ff9f 	bl	800126c <HAL_CRC_Init>
 800032e:	1e03      	subs	r3, r0, #0
 8000330:	d001      	beq.n	8000336 <MX_CRC_Init+0x32>
  {
    Error_Handler();
 8000332:	f000 fc65 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000336:	46c0      	nop			@ (mov r8, r8)
 8000338:	46bd      	mov	sp, r7
 800033a:	bd80      	pop	{r7, pc}
 800033c:	20000038 	.word	0x20000038
 8000340:	40023000 	.word	0x40023000

08000344 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000348:	4b19      	ldr	r3, [pc, #100]	@ (80003b0 <MX_SPI1_Init+0x6c>)
 800034a:	4a1a      	ldr	r2, [pc, #104]	@ (80003b4 <MX_SPI1_Init+0x70>)
 800034c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800034e:	4b18      	ldr	r3, [pc, #96]	@ (80003b0 <MX_SPI1_Init+0x6c>)
 8000350:	2200      	movs	r2, #0
 8000352:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000354:	4b16      	ldr	r3, [pc, #88]	@ (80003b0 <MX_SPI1_Init+0x6c>)
 8000356:	2200      	movs	r2, #0
 8000358:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800035a:	4b15      	ldr	r3, [pc, #84]	@ (80003b0 <MX_SPI1_Init+0x6c>)
 800035c:	22e0      	movs	r2, #224	@ 0xe0
 800035e:	00d2      	lsls	r2, r2, #3
 8000360:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000362:	4b13      	ldr	r3, [pc, #76]	@ (80003b0 <MX_SPI1_Init+0x6c>)
 8000364:	2200      	movs	r2, #0
 8000366:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000368:	4b11      	ldr	r3, [pc, #68]	@ (80003b0 <MX_SPI1_Init+0x6c>)
 800036a:	2200      	movs	r2, #0
 800036c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800036e:	4b10      	ldr	r3, [pc, #64]	@ (80003b0 <MX_SPI1_Init+0x6c>)
 8000370:	2280      	movs	r2, #128	@ 0x80
 8000372:	0092      	lsls	r2, r2, #2
 8000374:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000376:	4b0e      	ldr	r3, [pc, #56]	@ (80003b0 <MX_SPI1_Init+0x6c>)
 8000378:	2200      	movs	r2, #0
 800037a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800037c:	4b0c      	ldr	r3, [pc, #48]	@ (80003b0 <MX_SPI1_Init+0x6c>)
 800037e:	2200      	movs	r2, #0
 8000380:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000382:	4b0b      	ldr	r3, [pc, #44]	@ (80003b0 <MX_SPI1_Init+0x6c>)
 8000384:	2200      	movs	r2, #0
 8000386:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000388:	4b09      	ldr	r3, [pc, #36]	@ (80003b0 <MX_SPI1_Init+0x6c>)
 800038a:	2207      	movs	r2, #7
 800038c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800038e:	4b08      	ldr	r3, [pc, #32]	@ (80003b0 <MX_SPI1_Init+0x6c>)
 8000390:	2200      	movs	r2, #0
 8000392:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000394:	4b06      	ldr	r3, [pc, #24]	@ (80003b0 <MX_SPI1_Init+0x6c>)
 8000396:	2200      	movs	r2, #0
 8000398:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800039a:	4b05      	ldr	r3, [pc, #20]	@ (80003b0 <MX_SPI1_Init+0x6c>)
 800039c:	0018      	movs	r0, r3
 800039e:	f001 ff61 	bl	8002264 <HAL_SPI_Init>
 80003a2:	1e03      	subs	r3, r0, #0
 80003a4:	d001      	beq.n	80003aa <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 80003a6:	f000 fc2b 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80003aa:	46c0      	nop			@ (mov r8, r8)
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	20000054 	.word	0x20000054
 80003b4:	40013000 	.word	0x40013000

080003b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b096      	sub	sp, #88	@ 0x58
 80003bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003be:	2348      	movs	r3, #72	@ 0x48
 80003c0:	18fb      	adds	r3, r7, r3
 80003c2:	0018      	movs	r0, r3
 80003c4:	2310      	movs	r3, #16
 80003c6:	001a      	movs	r2, r3
 80003c8:	2100      	movs	r1, #0
 80003ca:	f003 fb59 	bl	8003a80 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003ce:	2340      	movs	r3, #64	@ 0x40
 80003d0:	18fb      	adds	r3, r7, r3
 80003d2:	0018      	movs	r0, r3
 80003d4:	2308      	movs	r3, #8
 80003d6:	001a      	movs	r2, r3
 80003d8:	2100      	movs	r1, #0
 80003da:	f003 fb51 	bl	8003a80 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003de:	2324      	movs	r3, #36	@ 0x24
 80003e0:	18fb      	adds	r3, r7, r3
 80003e2:	0018      	movs	r0, r3
 80003e4:	231c      	movs	r3, #28
 80003e6:	001a      	movs	r2, r3
 80003e8:	2100      	movs	r1, #0
 80003ea:	f003 fb49 	bl	8003a80 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80003ee:	1d3b      	adds	r3, r7, #4
 80003f0:	0018      	movs	r0, r3
 80003f2:	2320      	movs	r3, #32
 80003f4:	001a      	movs	r2, r3
 80003f6:	2100      	movs	r1, #0
 80003f8:	f003 fb42 	bl	8003a80 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003fc:	4b57      	ldr	r3, [pc, #348]	@ (800055c <MX_TIM1_Init+0x1a4>)
 80003fe:	4a58      	ldr	r2, [pc, #352]	@ (8000560 <MX_TIM1_Init+0x1a8>)
 8000400:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 32-1;
 8000402:	4b56      	ldr	r3, [pc, #344]	@ (800055c <MX_TIM1_Init+0x1a4>)
 8000404:	221f      	movs	r2, #31
 8000406:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000408:	4b54      	ldr	r3, [pc, #336]	@ (800055c <MX_TIM1_Init+0x1a4>)
 800040a:	2200      	movs	r2, #0
 800040c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 500-1;
 800040e:	4b53      	ldr	r3, [pc, #332]	@ (800055c <MX_TIM1_Init+0x1a4>)
 8000410:	22f4      	movs	r2, #244	@ 0xf4
 8000412:	32ff      	adds	r2, #255	@ 0xff
 8000414:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000416:	4b51      	ldr	r3, [pc, #324]	@ (800055c <MX_TIM1_Init+0x1a4>)
 8000418:	2200      	movs	r2, #0
 800041a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800041c:	4b4f      	ldr	r3, [pc, #316]	@ (800055c <MX_TIM1_Init+0x1a4>)
 800041e:	2200      	movs	r2, #0
 8000420:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000422:	4b4e      	ldr	r3, [pc, #312]	@ (800055c <MX_TIM1_Init+0x1a4>)
 8000424:	2200      	movs	r2, #0
 8000426:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000428:	4b4c      	ldr	r3, [pc, #304]	@ (800055c <MX_TIM1_Init+0x1a4>)
 800042a:	0018      	movs	r0, r3
 800042c:	f002 fc78 	bl	8002d20 <HAL_TIM_Base_Init>
 8000430:	1e03      	subs	r3, r0, #0
 8000432:	d001      	beq.n	8000438 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8000434:	f000 fbe4 	bl	8000c00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000438:	2148      	movs	r1, #72	@ 0x48
 800043a:	187b      	adds	r3, r7, r1
 800043c:	2280      	movs	r2, #128	@ 0x80
 800043e:	0152      	lsls	r2, r2, #5
 8000440:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000442:	187a      	adds	r2, r7, r1
 8000444:	4b45      	ldr	r3, [pc, #276]	@ (800055c <MX_TIM1_Init+0x1a4>)
 8000446:	0011      	movs	r1, r2
 8000448:	0018      	movs	r0, r3
 800044a:	f002 fe7b 	bl	8003144 <HAL_TIM_ConfigClockSource>
 800044e:	1e03      	subs	r3, r0, #0
 8000450:	d001      	beq.n	8000456 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000452:	f000 fbd5 	bl	8000c00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000456:	4b41      	ldr	r3, [pc, #260]	@ (800055c <MX_TIM1_Init+0x1a4>)
 8000458:	0018      	movs	r0, r3
 800045a:	f002 fcb1 	bl	8002dc0 <HAL_TIM_PWM_Init>
 800045e:	1e03      	subs	r3, r0, #0
 8000460:	d001      	beq.n	8000466 <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 8000462:	f000 fbcd 	bl	8000c00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000466:	2140      	movs	r1, #64	@ 0x40
 8000468:	187b      	adds	r3, r7, r1
 800046a:	2200      	movs	r2, #0
 800046c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800046e:	187b      	adds	r3, r7, r1
 8000470:	2200      	movs	r2, #0
 8000472:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000474:	187a      	adds	r2, r7, r1
 8000476:	4b39      	ldr	r3, [pc, #228]	@ (800055c <MX_TIM1_Init+0x1a4>)
 8000478:	0011      	movs	r1, r2
 800047a:	0018      	movs	r0, r3
 800047c:	f003 fa4a 	bl	8003914 <HAL_TIMEx_MasterConfigSynchronization>
 8000480:	1e03      	subs	r3, r0, #0
 8000482:	d001      	beq.n	8000488 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8000484:	f000 fbbc 	bl	8000c00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000488:	2124      	movs	r1, #36	@ 0x24
 800048a:	187b      	adds	r3, r7, r1
 800048c:	2260      	movs	r2, #96	@ 0x60
 800048e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000490:	187b      	adds	r3, r7, r1
 8000492:	2200      	movs	r2, #0
 8000494:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000496:	187b      	adds	r3, r7, r1
 8000498:	2200      	movs	r2, #0
 800049a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800049c:	187b      	adds	r3, r7, r1
 800049e:	2200      	movs	r2, #0
 80004a0:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004a2:	187b      	adds	r3, r7, r1
 80004a4:	2200      	movs	r2, #0
 80004a6:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80004a8:	187b      	adds	r3, r7, r1
 80004aa:	2200      	movs	r2, #0
 80004ac:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80004ae:	187b      	adds	r3, r7, r1
 80004b0:	2200      	movs	r2, #0
 80004b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004b4:	1879      	adds	r1, r7, r1
 80004b6:	4b29      	ldr	r3, [pc, #164]	@ (800055c <MX_TIM1_Init+0x1a4>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	0018      	movs	r0, r3
 80004bc:	f002 fd7c 	bl	8002fb8 <HAL_TIM_PWM_ConfigChannel>
 80004c0:	1e03      	subs	r3, r0, #0
 80004c2:	d001      	beq.n	80004c8 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80004c4:	f000 fb9c 	bl	8000c00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80004c8:	2324      	movs	r3, #36	@ 0x24
 80004ca:	18f9      	adds	r1, r7, r3
 80004cc:	4b23      	ldr	r3, [pc, #140]	@ (800055c <MX_TIM1_Init+0x1a4>)
 80004ce:	2204      	movs	r2, #4
 80004d0:	0018      	movs	r0, r3
 80004d2:	f002 fd71 	bl	8002fb8 <HAL_TIM_PWM_ConfigChannel>
 80004d6:	1e03      	subs	r3, r0, #0
 80004d8:	d001      	beq.n	80004de <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 80004da:	f000 fb91 	bl	8000c00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80004de:	2324      	movs	r3, #36	@ 0x24
 80004e0:	18f9      	adds	r1, r7, r3
 80004e2:	4b1e      	ldr	r3, [pc, #120]	@ (800055c <MX_TIM1_Init+0x1a4>)
 80004e4:	2208      	movs	r2, #8
 80004e6:	0018      	movs	r0, r3
 80004e8:	f002 fd66 	bl	8002fb8 <HAL_TIM_PWM_ConfigChannel>
 80004ec:	1e03      	subs	r3, r0, #0
 80004ee:	d001      	beq.n	80004f4 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 80004f0:	f000 fb86 	bl	8000c00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80004f4:	2324      	movs	r3, #36	@ 0x24
 80004f6:	18f9      	adds	r1, r7, r3
 80004f8:	4b18      	ldr	r3, [pc, #96]	@ (800055c <MX_TIM1_Init+0x1a4>)
 80004fa:	220c      	movs	r2, #12
 80004fc:	0018      	movs	r0, r3
 80004fe:	f002 fd5b 	bl	8002fb8 <HAL_TIM_PWM_ConfigChannel>
 8000502:	1e03      	subs	r3, r0, #0
 8000504:	d001      	beq.n	800050a <MX_TIM1_Init+0x152>
  {
    Error_Handler();
 8000506:	f000 fb7b 	bl	8000c00 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800050a:	1d3b      	adds	r3, r7, #4
 800050c:	2200      	movs	r2, #0
 800050e:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000510:	1d3b      	adds	r3, r7, #4
 8000512:	2200      	movs	r2, #0
 8000514:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000516:	1d3b      	adds	r3, r7, #4
 8000518:	2200      	movs	r2, #0
 800051a:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800051c:	1d3b      	adds	r3, r7, #4
 800051e:	2200      	movs	r2, #0
 8000520:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000522:	1d3b      	adds	r3, r7, #4
 8000524:	2200      	movs	r2, #0
 8000526:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000528:	1d3b      	adds	r3, r7, #4
 800052a:	2280      	movs	r2, #128	@ 0x80
 800052c:	0192      	lsls	r2, r2, #6
 800052e:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000530:	1d3b      	adds	r3, r7, #4
 8000532:	2200      	movs	r2, #0
 8000534:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000536:	1d3a      	adds	r2, r7, #4
 8000538:	4b08      	ldr	r3, [pc, #32]	@ (800055c <MX_TIM1_Init+0x1a4>)
 800053a:	0011      	movs	r1, r2
 800053c:	0018      	movs	r0, r3
 800053e:	f003 fa41 	bl	80039c4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000542:	1e03      	subs	r3, r0, #0
 8000544:	d001      	beq.n	800054a <MX_TIM1_Init+0x192>
  {
    Error_Handler();
 8000546:	f000 fb5b 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800054a:	4b04      	ldr	r3, [pc, #16]	@ (800055c <MX_TIM1_Init+0x1a4>)
 800054c:	0018      	movs	r0, r3
 800054e:	f000 fc43 	bl	8000dd8 <HAL_TIM_MspPostInit>

}
 8000552:	46c0      	nop			@ (mov r8, r8)
 8000554:	46bd      	mov	sp, r7
 8000556:	b016      	add	sp, #88	@ 0x58
 8000558:	bd80      	pop	{r7, pc}
 800055a:	46c0      	nop			@ (mov r8, r8)
 800055c:	200000b8 	.word	0x200000b8
 8000560:	40012c00 	.word	0x40012c00

08000564 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b08a      	sub	sp, #40	@ 0x28
 8000568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800056a:	2320      	movs	r3, #32
 800056c:	18fb      	adds	r3, r7, r3
 800056e:	0018      	movs	r0, r3
 8000570:	2308      	movs	r3, #8
 8000572:	001a      	movs	r2, r3
 8000574:	2100      	movs	r1, #0
 8000576:	f003 fa83 	bl	8003a80 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800057a:	1d3b      	adds	r3, r7, #4
 800057c:	0018      	movs	r0, r3
 800057e:	231c      	movs	r3, #28
 8000580:	001a      	movs	r2, r3
 8000582:	2100      	movs	r1, #0
 8000584:	f003 fa7c 	bl	8003a80 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000588:	4b34      	ldr	r3, [pc, #208]	@ (800065c <MX_TIM2_Init+0xf8>)
 800058a:	2280      	movs	r2, #128	@ 0x80
 800058c:	05d2      	lsls	r2, r2, #23
 800058e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32-1;
 8000590:	4b32      	ldr	r3, [pc, #200]	@ (800065c <MX_TIM2_Init+0xf8>)
 8000592:	221f      	movs	r2, #31
 8000594:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000596:	4b31      	ldr	r3, [pc, #196]	@ (800065c <MX_TIM2_Init+0xf8>)
 8000598:	2200      	movs	r2, #0
 800059a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 500-1;
 800059c:	4b2f      	ldr	r3, [pc, #188]	@ (800065c <MX_TIM2_Init+0xf8>)
 800059e:	22f4      	movs	r2, #244	@ 0xf4
 80005a0:	32ff      	adds	r2, #255	@ 0xff
 80005a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005a4:	4b2d      	ldr	r3, [pc, #180]	@ (800065c <MX_TIM2_Init+0xf8>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005aa:	4b2c      	ldr	r3, [pc, #176]	@ (800065c <MX_TIM2_Init+0xf8>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80005b0:	4b2a      	ldr	r3, [pc, #168]	@ (800065c <MX_TIM2_Init+0xf8>)
 80005b2:	0018      	movs	r0, r3
 80005b4:	f002 fc04 	bl	8002dc0 <HAL_TIM_PWM_Init>
 80005b8:	1e03      	subs	r3, r0, #0
 80005ba:	d001      	beq.n	80005c0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80005bc:	f000 fb20 	bl	8000c00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005c0:	2120      	movs	r1, #32
 80005c2:	187b      	adds	r3, r7, r1
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005c8:	187b      	adds	r3, r7, r1
 80005ca:	2200      	movs	r2, #0
 80005cc:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005ce:	187a      	adds	r2, r7, r1
 80005d0:	4b22      	ldr	r3, [pc, #136]	@ (800065c <MX_TIM2_Init+0xf8>)
 80005d2:	0011      	movs	r1, r2
 80005d4:	0018      	movs	r0, r3
 80005d6:	f003 f99d 	bl	8003914 <HAL_TIMEx_MasterConfigSynchronization>
 80005da:	1e03      	subs	r3, r0, #0
 80005dc:	d001      	beq.n	80005e2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80005de:	f000 fb0f 	bl	8000c00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005e2:	1d3b      	adds	r3, r7, #4
 80005e4:	2260      	movs	r2, #96	@ 0x60
 80005e6:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 375;
 80005e8:	1d3b      	adds	r3, r7, #4
 80005ea:	2278      	movs	r2, #120	@ 0x78
 80005ec:	32ff      	adds	r2, #255	@ 0xff
 80005ee:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005f0:	1d3b      	adds	r3, r7, #4
 80005f2:	2200      	movs	r2, #0
 80005f4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005f6:	1d3b      	adds	r3, r7, #4
 80005f8:	2200      	movs	r2, #0
 80005fa:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005fc:	1d39      	adds	r1, r7, #4
 80005fe:	4b17      	ldr	r3, [pc, #92]	@ (800065c <MX_TIM2_Init+0xf8>)
 8000600:	2200      	movs	r2, #0
 8000602:	0018      	movs	r0, r3
 8000604:	f002 fcd8 	bl	8002fb8 <HAL_TIM_PWM_ConfigChannel>
 8000608:	1e03      	subs	r3, r0, #0
 800060a:	d001      	beq.n	8000610 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 800060c:	f000 faf8 	bl	8000c00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000610:	1d39      	adds	r1, r7, #4
 8000612:	4b12      	ldr	r3, [pc, #72]	@ (800065c <MX_TIM2_Init+0xf8>)
 8000614:	2204      	movs	r2, #4
 8000616:	0018      	movs	r0, r3
 8000618:	f002 fcce 	bl	8002fb8 <HAL_TIM_PWM_ConfigChannel>
 800061c:	1e03      	subs	r3, r0, #0
 800061e:	d001      	beq.n	8000624 <MX_TIM2_Init+0xc0>
  {
    Error_Handler();
 8000620:	f000 faee 	bl	8000c00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000624:	1d39      	adds	r1, r7, #4
 8000626:	4b0d      	ldr	r3, [pc, #52]	@ (800065c <MX_TIM2_Init+0xf8>)
 8000628:	2208      	movs	r2, #8
 800062a:	0018      	movs	r0, r3
 800062c:	f002 fcc4 	bl	8002fb8 <HAL_TIM_PWM_ConfigChannel>
 8000630:	1e03      	subs	r3, r0, #0
 8000632:	d001      	beq.n	8000638 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8000634:	f000 fae4 	bl	8000c00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000638:	1d39      	adds	r1, r7, #4
 800063a:	4b08      	ldr	r3, [pc, #32]	@ (800065c <MX_TIM2_Init+0xf8>)
 800063c:	220c      	movs	r2, #12
 800063e:	0018      	movs	r0, r3
 8000640:	f002 fcba 	bl	8002fb8 <HAL_TIM_PWM_ConfigChannel>
 8000644:	1e03      	subs	r3, r0, #0
 8000646:	d001      	beq.n	800064c <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8000648:	f000 fada 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800064c:	4b03      	ldr	r3, [pc, #12]	@ (800065c <MX_TIM2_Init+0xf8>)
 800064e:	0018      	movs	r0, r3
 8000650:	f000 fbc2 	bl	8000dd8 <HAL_TIM_MspPostInit>

}
 8000654:	46c0      	nop			@ (mov r8, r8)
 8000656:	46bd      	mov	sp, r7
 8000658:	b00a      	add	sp, #40	@ 0x28
 800065a:	bd80      	pop	{r7, pc}
 800065c:	20000100 	.word	0x20000100

08000660 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b08e      	sub	sp, #56	@ 0x38
 8000664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000666:	2328      	movs	r3, #40	@ 0x28
 8000668:	18fb      	adds	r3, r7, r3
 800066a:	0018      	movs	r0, r3
 800066c:	2310      	movs	r3, #16
 800066e:	001a      	movs	r2, r3
 8000670:	2100      	movs	r1, #0
 8000672:	f003 fa05 	bl	8003a80 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000676:	2320      	movs	r3, #32
 8000678:	18fb      	adds	r3, r7, r3
 800067a:	0018      	movs	r0, r3
 800067c:	2308      	movs	r3, #8
 800067e:	001a      	movs	r2, r3
 8000680:	2100      	movs	r1, #0
 8000682:	f003 f9fd 	bl	8003a80 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000686:	1d3b      	adds	r3, r7, #4
 8000688:	0018      	movs	r0, r3
 800068a:	231c      	movs	r3, #28
 800068c:	001a      	movs	r2, r3
 800068e:	2100      	movs	r1, #0
 8000690:	f003 f9f6 	bl	8003a80 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000694:	4b3f      	ldr	r3, [pc, #252]	@ (8000794 <MX_TIM3_Init+0x134>)
 8000696:	4a40      	ldr	r2, [pc, #256]	@ (8000798 <MX_TIM3_Init+0x138>)
 8000698:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48-1;
 800069a:	4b3e      	ldr	r3, [pc, #248]	@ (8000794 <MX_TIM3_Init+0x134>)
 800069c:	222f      	movs	r2, #47	@ 0x2f
 800069e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006a0:	4b3c      	ldr	r3, [pc, #240]	@ (8000794 <MX_TIM3_Init+0x134>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500-1;
 80006a6:	4b3b      	ldr	r3, [pc, #236]	@ (8000794 <MX_TIM3_Init+0x134>)
 80006a8:	22f4      	movs	r2, #244	@ 0xf4
 80006aa:	32ff      	adds	r2, #255	@ 0xff
 80006ac:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006ae:	4b39      	ldr	r3, [pc, #228]	@ (8000794 <MX_TIM3_Init+0x134>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006b4:	4b37      	ldr	r3, [pc, #220]	@ (8000794 <MX_TIM3_Init+0x134>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80006ba:	4b36      	ldr	r3, [pc, #216]	@ (8000794 <MX_TIM3_Init+0x134>)
 80006bc:	0018      	movs	r0, r3
 80006be:	f002 fb2f 	bl	8002d20 <HAL_TIM_Base_Init>
 80006c2:	1e03      	subs	r3, r0, #0
 80006c4:	d001      	beq.n	80006ca <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 80006c6:	f000 fa9b 	bl	8000c00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006ca:	2128      	movs	r1, #40	@ 0x28
 80006cc:	187b      	adds	r3, r7, r1
 80006ce:	2280      	movs	r2, #128	@ 0x80
 80006d0:	0152      	lsls	r2, r2, #5
 80006d2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80006d4:	187a      	adds	r2, r7, r1
 80006d6:	4b2f      	ldr	r3, [pc, #188]	@ (8000794 <MX_TIM3_Init+0x134>)
 80006d8:	0011      	movs	r1, r2
 80006da:	0018      	movs	r0, r3
 80006dc:	f002 fd32 	bl	8003144 <HAL_TIM_ConfigClockSource>
 80006e0:	1e03      	subs	r3, r0, #0
 80006e2:	d001      	beq.n	80006e8 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 80006e4:	f000 fa8c 	bl	8000c00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80006e8:	4b2a      	ldr	r3, [pc, #168]	@ (8000794 <MX_TIM3_Init+0x134>)
 80006ea:	0018      	movs	r0, r3
 80006ec:	f002 fb68 	bl	8002dc0 <HAL_TIM_PWM_Init>
 80006f0:	1e03      	subs	r3, r0, #0
 80006f2:	d001      	beq.n	80006f8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80006f4:	f000 fa84 	bl	8000c00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006f8:	2120      	movs	r1, #32
 80006fa:	187b      	adds	r3, r7, r1
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000700:	187b      	adds	r3, r7, r1
 8000702:	2200      	movs	r2, #0
 8000704:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000706:	187a      	adds	r2, r7, r1
 8000708:	4b22      	ldr	r3, [pc, #136]	@ (8000794 <MX_TIM3_Init+0x134>)
 800070a:	0011      	movs	r1, r2
 800070c:	0018      	movs	r0, r3
 800070e:	f003 f901 	bl	8003914 <HAL_TIMEx_MasterConfigSynchronization>
 8000712:	1e03      	subs	r3, r0, #0
 8000714:	d001      	beq.n	800071a <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 8000716:	f000 fa73 	bl	8000c00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	2260      	movs	r2, #96	@ 0x60
 800071e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 375;
 8000720:	1d3b      	adds	r3, r7, #4
 8000722:	2278      	movs	r2, #120	@ 0x78
 8000724:	32ff      	adds	r2, #255	@ 0xff
 8000726:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000728:	1d3b      	adds	r3, r7, #4
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000734:	1d39      	adds	r1, r7, #4
 8000736:	4b17      	ldr	r3, [pc, #92]	@ (8000794 <MX_TIM3_Init+0x134>)
 8000738:	2200      	movs	r2, #0
 800073a:	0018      	movs	r0, r3
 800073c:	f002 fc3c 	bl	8002fb8 <HAL_TIM_PWM_ConfigChannel>
 8000740:	1e03      	subs	r3, r0, #0
 8000742:	d001      	beq.n	8000748 <MX_TIM3_Init+0xe8>
  {
    Error_Handler();
 8000744:	f000 fa5c 	bl	8000c00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000748:	1d39      	adds	r1, r7, #4
 800074a:	4b12      	ldr	r3, [pc, #72]	@ (8000794 <MX_TIM3_Init+0x134>)
 800074c:	2204      	movs	r2, #4
 800074e:	0018      	movs	r0, r3
 8000750:	f002 fc32 	bl	8002fb8 <HAL_TIM_PWM_ConfigChannel>
 8000754:	1e03      	subs	r3, r0, #0
 8000756:	d001      	beq.n	800075c <MX_TIM3_Init+0xfc>
  {
    Error_Handler();
 8000758:	f000 fa52 	bl	8000c00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800075c:	1d39      	adds	r1, r7, #4
 800075e:	4b0d      	ldr	r3, [pc, #52]	@ (8000794 <MX_TIM3_Init+0x134>)
 8000760:	2208      	movs	r2, #8
 8000762:	0018      	movs	r0, r3
 8000764:	f002 fc28 	bl	8002fb8 <HAL_TIM_PWM_ConfigChannel>
 8000768:	1e03      	subs	r3, r0, #0
 800076a:	d001      	beq.n	8000770 <MX_TIM3_Init+0x110>
  {
    Error_Handler();
 800076c:	f000 fa48 	bl	8000c00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000770:	1d39      	adds	r1, r7, #4
 8000772:	4b08      	ldr	r3, [pc, #32]	@ (8000794 <MX_TIM3_Init+0x134>)
 8000774:	220c      	movs	r2, #12
 8000776:	0018      	movs	r0, r3
 8000778:	f002 fc1e 	bl	8002fb8 <HAL_TIM_PWM_ConfigChannel>
 800077c:	1e03      	subs	r3, r0, #0
 800077e:	d001      	beq.n	8000784 <MX_TIM3_Init+0x124>
  {
    Error_Handler();
 8000780:	f000 fa3e 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000784:	4b03      	ldr	r3, [pc, #12]	@ (8000794 <MX_TIM3_Init+0x134>)
 8000786:	0018      	movs	r0, r3
 8000788:	f000 fb26 	bl	8000dd8 <HAL_TIM_MspPostInit>

}
 800078c:	46c0      	nop			@ (mov r8, r8)
 800078e:	46bd      	mov	sp, r7
 8000790:	b00e      	add	sp, #56	@ 0x38
 8000792:	bd80      	pop	{r7, pc}
 8000794:	20000148 	.word	0x20000148
 8000798:	40000400 	.word	0x40000400

0800079c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800079c:	b590      	push	{r4, r7, lr}
 800079e:	b089      	sub	sp, #36	@ 0x24
 80007a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a2:	240c      	movs	r4, #12
 80007a4:	193b      	adds	r3, r7, r4
 80007a6:	0018      	movs	r0, r3
 80007a8:	2314      	movs	r3, #20
 80007aa:	001a      	movs	r2, r3
 80007ac:	2100      	movs	r1, #0
 80007ae:	f003 f967 	bl	8003a80 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b2:	4b1c      	ldr	r3, [pc, #112]	@ (8000824 <MX_GPIO_Init+0x88>)
 80007b4:	695a      	ldr	r2, [r3, #20]
 80007b6:	4b1b      	ldr	r3, [pc, #108]	@ (8000824 <MX_GPIO_Init+0x88>)
 80007b8:	2180      	movs	r1, #128	@ 0x80
 80007ba:	0289      	lsls	r1, r1, #10
 80007bc:	430a      	orrs	r2, r1
 80007be:	615a      	str	r2, [r3, #20]
 80007c0:	4b18      	ldr	r3, [pc, #96]	@ (8000824 <MX_GPIO_Init+0x88>)
 80007c2:	695a      	ldr	r2, [r3, #20]
 80007c4:	2380      	movs	r3, #128	@ 0x80
 80007c6:	029b      	lsls	r3, r3, #10
 80007c8:	4013      	ands	r3, r2
 80007ca:	60bb      	str	r3, [r7, #8]
 80007cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ce:	4b15      	ldr	r3, [pc, #84]	@ (8000824 <MX_GPIO_Init+0x88>)
 80007d0:	695a      	ldr	r2, [r3, #20]
 80007d2:	4b14      	ldr	r3, [pc, #80]	@ (8000824 <MX_GPIO_Init+0x88>)
 80007d4:	2180      	movs	r1, #128	@ 0x80
 80007d6:	02c9      	lsls	r1, r1, #11
 80007d8:	430a      	orrs	r2, r1
 80007da:	615a      	str	r2, [r3, #20]
 80007dc:	4b11      	ldr	r3, [pc, #68]	@ (8000824 <MX_GPIO_Init+0x88>)
 80007de:	695a      	ldr	r2, [r3, #20]
 80007e0:	2380      	movs	r3, #128	@ 0x80
 80007e2:	02db      	lsls	r3, r3, #11
 80007e4:	4013      	ands	r3, r2
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, GPIO_PIN_RESET);
 80007ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000828 <MX_GPIO_Init+0x8c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	2140      	movs	r1, #64	@ 0x40
 80007f0:	0018      	movs	r0, r3
 80007f2:	f001 f847 	bl	8001884 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DEBUG_LED_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin;
 80007f6:	0021      	movs	r1, r4
 80007f8:	187b      	adds	r3, r7, r1
 80007fa:	2240      	movs	r2, #64	@ 0x40
 80007fc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fe:	187b      	adds	r3, r7, r1
 8000800:	2201      	movs	r2, #1
 8000802:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	187b      	adds	r3, r7, r1
 8000806:	2200      	movs	r2, #0
 8000808:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080a:	187b      	adds	r3, r7, r1
 800080c:	2200      	movs	r2, #0
 800080e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DEBUG_LED_GPIO_Port, &GPIO_InitStruct);
 8000810:	187b      	adds	r3, r7, r1
 8000812:	4a05      	ldr	r2, [pc, #20]	@ (8000828 <MX_GPIO_Init+0x8c>)
 8000814:	0019      	movs	r1, r3
 8000816:	0010      	movs	r0, r2
 8000818:	f000 fecc 	bl	80015b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800081c:	46c0      	nop			@ (mov r8, r8)
 800081e:	46bd      	mov	sp, r7
 8000820:	b009      	add	sp, #36	@ 0x24
 8000822:	bd90      	pop	{r4, r7, pc}
 8000824:	40021000 	.word	0x40021000
 8000828:	48000400 	.word	0x48000400

0800082c <EnablePWMOutput>:

/* USER CODE BEGIN 4 */

void EnablePWMOutput(TIM_HandleTypeDef *_htim) {
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
	//  Set HAL Timer Channel Status
	HAL_TIM_PWM_Start(_htim, TIM_CHANNEL_1);
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	2100      	movs	r1, #0
 8000838:	0018      	movs	r0, r3
 800083a:	f002 fb11 	bl	8002e60 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(_htim, TIM_CHANNEL_2);
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	2104      	movs	r1, #4
 8000842:	0018      	movs	r0, r3
 8000844:	f002 fb0c 	bl	8002e60 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(_htim, TIM_CHANNEL_3);
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	2108      	movs	r1, #8
 800084c:	0018      	movs	r0, r3
 800084e:	f002 fb07 	bl	8002e60 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(_htim, TIM_CHANNEL_4);
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	210c      	movs	r1, #12
 8000856:	0018      	movs	r0, r3
 8000858:	f002 fb02 	bl	8002e60 <HAL_TIM_PWM_Start>
}
 800085c:	46c0      	nop			@ (mov r8, r8)
 800085e:	46bd      	mov	sp, r7
 8000860:	b002      	add	sp, #8
 8000862:	bd80      	pop	{r7, pc}

08000864 <CRC_compare_tctp>:
	uint16_t message_id;
	uint16_t crc;
} __attribute__((packed));

/* CRC INIT */
uint8_t CRC_compare_tctp(struct tctp_message received_msg) {
 8000864:	b590      	push	{r4, r7, lr}
 8000866:	b095      	sub	sp, #84	@ 0x54
 8000868:	af00      	add	r7, sp, #0
 800086a:	003c      	movs	r4, r7
 800086c:	6020      	str	r0, [r4, #0]
 800086e:	6061      	str	r1, [r4, #4]
 8000870:	60a2      	str	r2, [r4, #8]
 8000872:	60e3      	str	r3, [r4, #12]
	uint16_t received_crc = received_msg.crc;
 8000874:	234a      	movs	r3, #74	@ 0x4a
 8000876:	18fa      	adds	r2, r7, r3
 8000878:	003b      	movs	r3, r7
 800087a:	7ad9      	ldrb	r1, [r3, #11]
 800087c:	7b1b      	ldrb	r3, [r3, #12]
 800087e:	021b      	lsls	r3, r3, #8
 8000880:	430b      	orrs	r3, r1
 8000882:	8013      	strh	r3, [r2, #0]
	uint32_t SPI_RX_Buffer_32[SPI_BUFFER_SIZE];
	for (int i = 0; i < SPI_BUFFER_SIZE; i++) {
 8000884:	2300      	movs	r3, #0
 8000886:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000888:	e00c      	b.n	80008a4 <CRC_compare_tctp+0x40>
		SPI_RX_Buffer_32[i] = (uint32_t) SPI_RX_Buffer[i];
 800088a:	4a14      	ldr	r2, [pc, #80]	@ (80008dc <CRC_compare_tctp+0x78>)
 800088c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800088e:	18d3      	adds	r3, r2, r3
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	0019      	movs	r1, r3
 8000894:	2310      	movs	r3, #16
 8000896:	18fb      	adds	r3, r7, r3
 8000898:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800089a:	0092      	lsls	r2, r2, #2
 800089c:	50d1      	str	r1, [r2, r3]
	for (int i = 0; i < SPI_BUFFER_SIZE; i++) {
 800089e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80008a0:	3301      	adds	r3, #1
 80008a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80008a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80008a6:	2b0c      	cmp	r3, #12
 80008a8:	ddef      	ble.n	800088a <CRC_compare_tctp+0x26>
	}

	uint32_t calculated_crc = HAL_CRC_Calculate(&hcrc, SPI_RX_Buffer_32, 11);
 80008aa:	2310      	movs	r3, #16
 80008ac:	18f9      	adds	r1, r7, r3
 80008ae:	4b0c      	ldr	r3, [pc, #48]	@ (80008e0 <CRC_compare_tctp+0x7c>)
 80008b0:	220b      	movs	r2, #11
 80008b2:	0018      	movs	r0, r3
 80008b4:	f000 fd21 	bl	80012fa <HAL_CRC_Calculate>
 80008b8:	0003      	movs	r3, r0
 80008ba:	647b      	str	r3, [r7, #68]	@ 0x44
	calculated_crc = (uint16_t) calculated_crc;
 80008bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80008be:	b29b      	uxth	r3, r3
 80008c0:	647b      	str	r3, [r7, #68]	@ 0x44

	return received_crc == calculated_crc;
 80008c2:	234a      	movs	r3, #74	@ 0x4a
 80008c4:	18fb      	adds	r3, r7, r3
 80008c6:	881b      	ldrh	r3, [r3, #0]
 80008c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80008ca:	1ad3      	subs	r3, r2, r3
 80008cc:	425a      	negs	r2, r3
 80008ce:	4153      	adcs	r3, r2
 80008d0:	b2db      	uxtb	r3, r3
}
 80008d2:	0018      	movs	r0, r3
 80008d4:	46bd      	mov	sp, r7
 80008d6:	b015      	add	sp, #84	@ 0x54
 80008d8:	bd90      	pop	{r4, r7, pc}
 80008da:	46c0      	nop			@ (mov r8, r8)
 80008dc:	20000000 	.word	0x20000000
 80008e0:	20000038 	.word	0x20000038

080008e4 <CRC_compare_tscp>:

uint8_t CRC_compare_tscp(struct tscp_message received_msg) {
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b094      	sub	sp, #80	@ 0x50
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	1d3b      	adds	r3, r7, #4
 80008ec:	6018      	str	r0, [r3, #0]
 80008ee:	6059      	str	r1, [r3, #4]
 80008f0:	609a      	str	r2, [r3, #8]
	uint16_t received_crc = received_msg.crc;
 80008f2:	234a      	movs	r3, #74	@ 0x4a
 80008f4:	18fa      	adds	r2, r7, r3
 80008f6:	1d3b      	adds	r3, r7, #4
 80008f8:	79d9      	ldrb	r1, [r3, #7]
 80008fa:	7a1b      	ldrb	r3, [r3, #8]
 80008fc:	021b      	lsls	r3, r3, #8
 80008fe:	430b      	orrs	r3, r1
 8000900:	8013      	strh	r3, [r2, #0]
	uint32_t SPI_RX_Buffer_32[SPI_BUFFER_SIZE];
	for (int i = 0; i < SPI_BUFFER_SIZE; i++) {
 8000902:	2300      	movs	r3, #0
 8000904:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000906:	e00c      	b.n	8000922 <CRC_compare_tscp+0x3e>
		SPI_RX_Buffer_32[i] = (uint32_t) SPI_RX_Buffer[i];
 8000908:	4a13      	ldr	r2, [pc, #76]	@ (8000958 <CRC_compare_tscp+0x74>)
 800090a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800090c:	18d3      	adds	r3, r2, r3
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	0019      	movs	r1, r3
 8000912:	2310      	movs	r3, #16
 8000914:	18fb      	adds	r3, r7, r3
 8000916:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000918:	0092      	lsls	r2, r2, #2
 800091a:	50d1      	str	r1, [r2, r3]
	for (int i = 0; i < SPI_BUFFER_SIZE; i++) {
 800091c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800091e:	3301      	adds	r3, #1
 8000920:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000922:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000924:	2b0c      	cmp	r3, #12
 8000926:	ddef      	ble.n	8000908 <CRC_compare_tscp+0x24>
	}

	uint32_t calculated_crc = HAL_CRC_Calculate(&hcrc, SPI_RX_Buffer_32, 11);
 8000928:	2310      	movs	r3, #16
 800092a:	18f9      	adds	r1, r7, r3
 800092c:	4b0b      	ldr	r3, [pc, #44]	@ (800095c <CRC_compare_tscp+0x78>)
 800092e:	220b      	movs	r2, #11
 8000930:	0018      	movs	r0, r3
 8000932:	f000 fce2 	bl	80012fa <HAL_CRC_Calculate>
 8000936:	0003      	movs	r3, r0
 8000938:	647b      	str	r3, [r7, #68]	@ 0x44
	calculated_crc = (uint16_t) calculated_crc;
 800093a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800093c:	b29b      	uxth	r3, r3
 800093e:	647b      	str	r3, [r7, #68]	@ 0x44

	return received_crc == calculated_crc;
 8000940:	234a      	movs	r3, #74	@ 0x4a
 8000942:	18fb      	adds	r3, r7, r3
 8000944:	881b      	ldrh	r3, [r3, #0]
 8000946:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000948:	1ad3      	subs	r3, r2, r3
 800094a:	425a      	negs	r2, r3
 800094c:	4153      	adcs	r3, r2
 800094e:	b2db      	uxtb	r3, r3
}
 8000950:	0018      	movs	r0, r3
 8000952:	46bd      	mov	sp, r7
 8000954:	b014      	add	sp, #80	@ 0x50
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20000000 	.word	0x20000000
 800095c:	20000038 	.word	0x20000038

08000960 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 8000960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000962:	b08b      	sub	sp, #44	@ 0x2c
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
	uint8_t message_correct;
	switch(SPI_RX_Buffer[0]) {
 8000968:	4b9e      	ldr	r3, [pc, #632]	@ (8000be4 <HAL_SPI_TxRxCpltCallback+0x284>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	2b02      	cmp	r3, #2
 800096e:	d003      	beq.n	8000978 <HAL_SPI_TxRxCpltCallback+0x18>
 8000970:	2b03      	cmp	r3, #3
 8000972:	d100      	bne.n	8000976 <HAL_SPI_TxRxCpltCallback+0x16>
 8000974:	e0ad      	b.n	8000ad2 <HAL_SPI_TxRxCpltCallback+0x172>
		} else {
			//NVIC_SystemReset();
		}
		break;
	default:
		break;
 8000976:	e130      	b.n	8000bda <HAL_SPI_TxRxCpltCallback+0x27a>
		struct tctp_message *received_msg_tctp = (struct tctp_message*) SPI_RX_Buffer;
 8000978:	4b9a      	ldr	r3, [pc, #616]	@ (8000be4 <HAL_SPI_TxRxCpltCallback+0x284>)
 800097a:	617b      	str	r3, [r7, #20]
		message_correct = CRC_compare_tctp(*received_msg_tctp);
 800097c:	231b      	movs	r3, #27
 800097e:	18fc      	adds	r4, r7, r3
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	781a      	ldrb	r2, [r3, #0]
 8000984:	7859      	ldrb	r1, [r3, #1]
 8000986:	0209      	lsls	r1, r1, #8
 8000988:	430a      	orrs	r2, r1
 800098a:	7899      	ldrb	r1, [r3, #2]
 800098c:	0409      	lsls	r1, r1, #16
 800098e:	430a      	orrs	r2, r1
 8000990:	78d9      	ldrb	r1, [r3, #3]
 8000992:	0609      	lsls	r1, r1, #24
 8000994:	430a      	orrs	r2, r1
 8000996:	0010      	movs	r0, r2
 8000998:	791a      	ldrb	r2, [r3, #4]
 800099a:	7959      	ldrb	r1, [r3, #5]
 800099c:	0209      	lsls	r1, r1, #8
 800099e:	430a      	orrs	r2, r1
 80009a0:	7999      	ldrb	r1, [r3, #6]
 80009a2:	0409      	lsls	r1, r1, #16
 80009a4:	430a      	orrs	r2, r1
 80009a6:	79d9      	ldrb	r1, [r3, #7]
 80009a8:	0609      	lsls	r1, r1, #24
 80009aa:	430a      	orrs	r2, r1
 80009ac:	0016      	movs	r6, r2
 80009ae:	7a1a      	ldrb	r2, [r3, #8]
 80009b0:	7a59      	ldrb	r1, [r3, #9]
 80009b2:	0209      	lsls	r1, r1, #8
 80009b4:	430a      	orrs	r2, r1
 80009b6:	7a99      	ldrb	r1, [r3, #10]
 80009b8:	0409      	lsls	r1, r1, #16
 80009ba:	430a      	orrs	r2, r1
 80009bc:	7ad9      	ldrb	r1, [r3, #11]
 80009be:	0609      	lsls	r1, r1, #24
 80009c0:	430a      	orrs	r2, r1
 80009c2:	0015      	movs	r5, r2
 80009c4:	7b1a      	ldrb	r2, [r3, #12]
 80009c6:	2300      	movs	r3, #0
 80009c8:	21ff      	movs	r1, #255	@ 0xff
 80009ca:	400a      	ands	r2, r1
 80009cc:	21ff      	movs	r1, #255	@ 0xff
 80009ce:	438b      	bics	r3, r1
 80009d0:	4313      	orrs	r3, r2
 80009d2:	0031      	movs	r1, r6
 80009d4:	002a      	movs	r2, r5
 80009d6:	f7ff ff45 	bl	8000864 <CRC_compare_tctp>
 80009da:	0003      	movs	r3, r0
 80009dc:	7023      	strb	r3, [r4, #0]
		if (message_correct) {
 80009de:	231b      	movs	r3, #27
 80009e0:	18fb      	adds	r3, r7, r3
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d003      	beq.n	80009f0 <HAL_SPI_TxRxCpltCallback+0x90>
			SPI_TX_Buffer[0] = ACK;
 80009e8:	4b7f      	ldr	r3, [pc, #508]	@ (8000be8 <HAL_SPI_TxRxCpltCallback+0x288>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	701a      	strb	r2, [r3, #0]
 80009ee:	e002      	b.n	80009f6 <HAL_SPI_TxRxCpltCallback+0x96>
			SPI_TX_Buffer[0] = NACK;
 80009f0:	4b7d      	ldr	r3, [pc, #500]	@ (8000be8 <HAL_SPI_TxRxCpltCallback+0x288>)
 80009f2:	2201      	movs	r2, #1
 80009f4:	701a      	strb	r2, [r3, #0]
		SPI_TX_Buffer[1] = SPI_RX_Buffer[1];
 80009f6:	4b7b      	ldr	r3, [pc, #492]	@ (8000be4 <HAL_SPI_TxRxCpltCallback+0x284>)
 80009f8:	785a      	ldrb	r2, [r3, #1]
 80009fa:	4b7b      	ldr	r3, [pc, #492]	@ (8000be8 <HAL_SPI_TxRxCpltCallback+0x288>)
 80009fc:	705a      	strb	r2, [r3, #1]
		SPI_TX_Buffer[2] = SPI_RX_Buffer[2];
 80009fe:	4b79      	ldr	r3, [pc, #484]	@ (8000be4 <HAL_SPI_TxRxCpltCallback+0x284>)
 8000a00:	789a      	ldrb	r2, [r3, #2]
 8000a02:	4b79      	ldr	r3, [pc, #484]	@ (8000be8 <HAL_SPI_TxRxCpltCallback+0x288>)
 8000a04:	709a      	strb	r2, [r3, #2]
		SPI_TX_Buffer[3] = SPI_RX_Buffer[11];
 8000a06:	4b77      	ldr	r3, [pc, #476]	@ (8000be4 <HAL_SPI_TxRxCpltCallback+0x284>)
 8000a08:	7ada      	ldrb	r2, [r3, #11]
 8000a0a:	4b77      	ldr	r3, [pc, #476]	@ (8000be8 <HAL_SPI_TxRxCpltCallback+0x288>)
 8000a0c:	70da      	strb	r2, [r3, #3]
		SPI_TX_Buffer[4] = SPI_RX_Buffer[12];
 8000a0e:	4b75      	ldr	r3, [pc, #468]	@ (8000be4 <HAL_SPI_TxRxCpltCallback+0x284>)
 8000a10:	7b1a      	ldrb	r2, [r3, #12]
 8000a12:	4b75      	ldr	r3, [pc, #468]	@ (8000be8 <HAL_SPI_TxRxCpltCallback+0x288>)
 8000a14:	711a      	strb	r2, [r3, #4]
		for (int i = 5; i < 13; i++) {
 8000a16:	2305      	movs	r3, #5
 8000a18:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a1a:	e007      	b.n	8000a2c <HAL_SPI_TxRxCpltCallback+0xcc>
			SPI_TX_Buffer[i] = 0;
 8000a1c:	4a72      	ldr	r2, [pc, #456]	@ (8000be8 <HAL_SPI_TxRxCpltCallback+0x288>)
 8000a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a20:	18d3      	adds	r3, r2, r3
 8000a22:	2200      	movs	r2, #0
 8000a24:	701a      	strb	r2, [r3, #0]
		for (int i = 5; i < 13; i++) {
 8000a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a28:	3301      	adds	r3, #1
 8000a2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a2e:	2b0c      	cmp	r3, #12
 8000a30:	ddf4      	ble.n	8000a1c <HAL_SPI_TxRxCpltCallback+0xbc>
		HAL_SPI_TransmitReceive_IT(&hspi1, SPI_TX_Buffer, SPI_RX_Buffer, SPI_BUFFER_SIZE);
 8000a32:	4a6c      	ldr	r2, [pc, #432]	@ (8000be4 <HAL_SPI_TxRxCpltCallback+0x284>)
 8000a34:	496c      	ldr	r1, [pc, #432]	@ (8000be8 <HAL_SPI_TxRxCpltCallback+0x288>)
 8000a36:	486d      	ldr	r0, [pc, #436]	@ (8000bec <HAL_SPI_TxRxCpltCallback+0x28c>)
 8000a38:	230d      	movs	r3, #13
 8000a3a:	f001 fccb 	bl	80023d4 <HAL_SPI_TransmitReceive_IT>
		memcpy(received_payload_tctp, received_msg_tctp->data.full_thrust_values,	NUM_THRUSTERS);
 8000a3e:	697b      	ldr	r3, [r7, #20]
 8000a40:	3303      	adds	r3, #3
 8000a42:	240c      	movs	r4, #12
 8000a44:	193a      	adds	r2, r7, r4
 8000a46:	0010      	movs	r0, r2
 8000a48:	0019      	movs	r1, r3
 8000a4a:	2308      	movs	r3, #8
 8000a4c:	001a      	movs	r2, r3
 8000a4e:	f003 f843 	bl	8003ad8 <memcpy>
		if (message_correct) {
 8000a52:	231b      	movs	r3, #27
 8000a54:	18fb      	adds	r3, r7, r3
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d100      	bne.n	8000a5e <HAL_SPI_TxRxCpltCallback+0xfe>
 8000a5c:	e0ba      	b.n	8000bd4 <HAL_SPI_TxRxCpltCallback+0x274>
			htim1.Instance->CCR1 = (uint32_t) received_payload_tctp[0] + 250;
 8000a5e:	0021      	movs	r1, r4
 8000a60:	187b      	adds	r3, r7, r1
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	001a      	movs	r2, r3
 8000a66:	4b62      	ldr	r3, [pc, #392]	@ (8000bf0 <HAL_SPI_TxRxCpltCallback+0x290>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	32fa      	adds	r2, #250	@ 0xfa
 8000a6c:	635a      	str	r2, [r3, #52]	@ 0x34
			htim1.Instance->CCR2 = (uint32_t) received_payload_tctp[1] + 250;
 8000a6e:	187b      	adds	r3, r7, r1
 8000a70:	785b      	ldrb	r3, [r3, #1]
 8000a72:	001a      	movs	r2, r3
 8000a74:	4b5e      	ldr	r3, [pc, #376]	@ (8000bf0 <HAL_SPI_TxRxCpltCallback+0x290>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	32fa      	adds	r2, #250	@ 0xfa
 8000a7a:	639a      	str	r2, [r3, #56]	@ 0x38
			htim1.Instance->CCR3 = (uint32_t) received_payload_tctp[2] + 250;
 8000a7c:	187b      	adds	r3, r7, r1
 8000a7e:	789b      	ldrb	r3, [r3, #2]
 8000a80:	001a      	movs	r2, r3
 8000a82:	4b5b      	ldr	r3, [pc, #364]	@ (8000bf0 <HAL_SPI_TxRxCpltCallback+0x290>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	32fa      	adds	r2, #250	@ 0xfa
 8000a88:	63da      	str	r2, [r3, #60]	@ 0x3c
			htim1.Instance->CCR4 = (uint32_t) received_payload_tctp[3] + 250;
 8000a8a:	187b      	adds	r3, r7, r1
 8000a8c:	78db      	ldrb	r3, [r3, #3]
 8000a8e:	001a      	movs	r2, r3
 8000a90:	4b57      	ldr	r3, [pc, #348]	@ (8000bf0 <HAL_SPI_TxRxCpltCallback+0x290>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	32fa      	adds	r2, #250	@ 0xfa
 8000a96:	641a      	str	r2, [r3, #64]	@ 0x40
			htim2.Instance->CCR1 = (uint32_t) received_payload_tctp[4] + 250;
 8000a98:	187b      	adds	r3, r7, r1
 8000a9a:	791b      	ldrb	r3, [r3, #4]
 8000a9c:	001a      	movs	r2, r3
 8000a9e:	4b55      	ldr	r3, [pc, #340]	@ (8000bf4 <HAL_SPI_TxRxCpltCallback+0x294>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	32fa      	adds	r2, #250	@ 0xfa
 8000aa4:	635a      	str	r2, [r3, #52]	@ 0x34
			htim2.Instance->CCR2 = (uint32_t) received_payload_tctp[5] + 250;
 8000aa6:	187b      	adds	r3, r7, r1
 8000aa8:	795b      	ldrb	r3, [r3, #5]
 8000aaa:	001a      	movs	r2, r3
 8000aac:	4b51      	ldr	r3, [pc, #324]	@ (8000bf4 <HAL_SPI_TxRxCpltCallback+0x294>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	32fa      	adds	r2, #250	@ 0xfa
 8000ab2:	639a      	str	r2, [r3, #56]	@ 0x38
			htim2.Instance->CCR3 = (uint32_t) received_payload_tctp[6] + 250;
 8000ab4:	187b      	adds	r3, r7, r1
 8000ab6:	799b      	ldrb	r3, [r3, #6]
 8000ab8:	001a      	movs	r2, r3
 8000aba:	4b4e      	ldr	r3, [pc, #312]	@ (8000bf4 <HAL_SPI_TxRxCpltCallback+0x294>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	32fa      	adds	r2, #250	@ 0xfa
 8000ac0:	63da      	str	r2, [r3, #60]	@ 0x3c
			htim2.Instance->CCR4 = (uint32_t) received_payload_tctp[7] + 250;
 8000ac2:	187b      	adds	r3, r7, r1
 8000ac4:	79db      	ldrb	r3, [r3, #7]
 8000ac6:	001a      	movs	r2, r3
 8000ac8:	4b4a      	ldr	r3, [pc, #296]	@ (8000bf4 <HAL_SPI_TxRxCpltCallback+0x294>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	32fa      	adds	r2, #250	@ 0xfa
 8000ace:	641a      	str	r2, [r3, #64]	@ 0x40
		break;
 8000ad0:	e080      	b.n	8000bd4 <HAL_SPI_TxRxCpltCallback+0x274>
		HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, GPIO_PIN_SET);
 8000ad2:	4b49      	ldr	r3, [pc, #292]	@ (8000bf8 <HAL_SPI_TxRxCpltCallback+0x298>)
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	2140      	movs	r1, #64	@ 0x40
 8000ad8:	0018      	movs	r0, r3
 8000ada:	f000 fed3 	bl	8001884 <HAL_GPIO_WritePin>
		struct tscp_message *received_msg_tscp = (struct tscp_message*) SPI_RX_Buffer;
 8000ade:	4b41      	ldr	r3, [pc, #260]	@ (8000be4 <HAL_SPI_TxRxCpltCallback+0x284>)
 8000ae0:	61fb      	str	r3, [r7, #28]
		message_correct = CRC_compare_tscp(*received_msg_tscp);
 8000ae2:	261b      	movs	r6, #27
 8000ae4:	19bc      	adds	r4, r7, r6
 8000ae6:	69fb      	ldr	r3, [r7, #28]
 8000ae8:	781a      	ldrb	r2, [r3, #0]
 8000aea:	7859      	ldrb	r1, [r3, #1]
 8000aec:	0209      	lsls	r1, r1, #8
 8000aee:	430a      	orrs	r2, r1
 8000af0:	7899      	ldrb	r1, [r3, #2]
 8000af2:	0409      	lsls	r1, r1, #16
 8000af4:	430a      	orrs	r2, r1
 8000af6:	78d9      	ldrb	r1, [r3, #3]
 8000af8:	0609      	lsls	r1, r1, #24
 8000afa:	430a      	orrs	r2, r1
 8000afc:	0010      	movs	r0, r2
 8000afe:	791a      	ldrb	r2, [r3, #4]
 8000b00:	7959      	ldrb	r1, [r3, #5]
 8000b02:	0209      	lsls	r1, r1, #8
 8000b04:	430a      	orrs	r2, r1
 8000b06:	7999      	ldrb	r1, [r3, #6]
 8000b08:	0409      	lsls	r1, r1, #16
 8000b0a:	430a      	orrs	r2, r1
 8000b0c:	79d9      	ldrb	r1, [r3, #7]
 8000b0e:	0609      	lsls	r1, r1, #24
 8000b10:	430a      	orrs	r2, r1
 8000b12:	0015      	movs	r5, r2
 8000b14:	7a1a      	ldrb	r2, [r3, #8]
 8000b16:	2300      	movs	r3, #0
 8000b18:	21ff      	movs	r1, #255	@ 0xff
 8000b1a:	400a      	ands	r2, r1
 8000b1c:	21ff      	movs	r1, #255	@ 0xff
 8000b1e:	438b      	bics	r3, r1
 8000b20:	4313      	orrs	r3, r2
 8000b22:	0029      	movs	r1, r5
 8000b24:	001a      	movs	r2, r3
 8000b26:	f7ff fedd 	bl	80008e4 <CRC_compare_tscp>
 8000b2a:	0003      	movs	r3, r0
 8000b2c:	7023      	strb	r3, [r4, #0]
		if (message_correct) {
 8000b2e:	19bb      	adds	r3, r7, r6
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d003      	beq.n	8000b3e <HAL_SPI_TxRxCpltCallback+0x1de>
			SPI_TX_Buffer[0] = ACK;
 8000b36:	4b2c      	ldr	r3, [pc, #176]	@ (8000be8 <HAL_SPI_TxRxCpltCallback+0x288>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	701a      	strb	r2, [r3, #0]
 8000b3c:	e002      	b.n	8000b44 <HAL_SPI_TxRxCpltCallback+0x1e4>
			SPI_TX_Buffer[0] = NACK;
 8000b3e:	4b2a      	ldr	r3, [pc, #168]	@ (8000be8 <HAL_SPI_TxRxCpltCallback+0x288>)
 8000b40:	2201      	movs	r2, #1
 8000b42:	701a      	strb	r2, [r3, #0]
		SPI_TX_Buffer[1] = SPI_RX_Buffer[1];
 8000b44:	4b27      	ldr	r3, [pc, #156]	@ (8000be4 <HAL_SPI_TxRxCpltCallback+0x284>)
 8000b46:	785a      	ldrb	r2, [r3, #1]
 8000b48:	4b27      	ldr	r3, [pc, #156]	@ (8000be8 <HAL_SPI_TxRxCpltCallback+0x288>)
 8000b4a:	705a      	strb	r2, [r3, #1]
		SPI_TX_Buffer[2] = SPI_RX_Buffer[2];
 8000b4c:	4b25      	ldr	r3, [pc, #148]	@ (8000be4 <HAL_SPI_TxRxCpltCallback+0x284>)
 8000b4e:	789a      	ldrb	r2, [r3, #2]
 8000b50:	4b25      	ldr	r3, [pc, #148]	@ (8000be8 <HAL_SPI_TxRxCpltCallback+0x288>)
 8000b52:	709a      	strb	r2, [r3, #2]
		SPI_TX_Buffer[3] = SPI_RX_Buffer[11];
 8000b54:	4b23      	ldr	r3, [pc, #140]	@ (8000be4 <HAL_SPI_TxRxCpltCallback+0x284>)
 8000b56:	7ada      	ldrb	r2, [r3, #11]
 8000b58:	4b23      	ldr	r3, [pc, #140]	@ (8000be8 <HAL_SPI_TxRxCpltCallback+0x288>)
 8000b5a:	70da      	strb	r2, [r3, #3]
		SPI_TX_Buffer[4] = SPI_RX_Buffer[12];
 8000b5c:	4b21      	ldr	r3, [pc, #132]	@ (8000be4 <HAL_SPI_TxRxCpltCallback+0x284>)
 8000b5e:	7b1a      	ldrb	r2, [r3, #12]
 8000b60:	4b21      	ldr	r3, [pc, #132]	@ (8000be8 <HAL_SPI_TxRxCpltCallback+0x288>)
 8000b62:	711a      	strb	r2, [r3, #4]
		for (int i = 5; i < 13; i++) {
 8000b64:	2305      	movs	r3, #5
 8000b66:	623b      	str	r3, [r7, #32]
 8000b68:	e007      	b.n	8000b7a <HAL_SPI_TxRxCpltCallback+0x21a>
			SPI_TX_Buffer[i] = 0;
 8000b6a:	4a1f      	ldr	r2, [pc, #124]	@ (8000be8 <HAL_SPI_TxRxCpltCallback+0x288>)
 8000b6c:	6a3b      	ldr	r3, [r7, #32]
 8000b6e:	18d3      	adds	r3, r2, r3
 8000b70:	2200      	movs	r2, #0
 8000b72:	701a      	strb	r2, [r3, #0]
		for (int i = 5; i < 13; i++) {
 8000b74:	6a3b      	ldr	r3, [r7, #32]
 8000b76:	3301      	adds	r3, #1
 8000b78:	623b      	str	r3, [r7, #32]
 8000b7a:	6a3b      	ldr	r3, [r7, #32]
 8000b7c:	2b0c      	cmp	r3, #12
 8000b7e:	ddf4      	ble.n	8000b6a <HAL_SPI_TxRxCpltCallback+0x20a>
		HAL_SPI_TransmitReceive_IT(&hspi1, SPI_TX_Buffer, SPI_RX_Buffer, SPI_BUFFER_SIZE);
 8000b80:	4a18      	ldr	r2, [pc, #96]	@ (8000be4 <HAL_SPI_TxRxCpltCallback+0x284>)
 8000b82:	4919      	ldr	r1, [pc, #100]	@ (8000be8 <HAL_SPI_TxRxCpltCallback+0x288>)
 8000b84:	4819      	ldr	r0, [pc, #100]	@ (8000bec <HAL_SPI_TxRxCpltCallback+0x28c>)
 8000b86:	230d      	movs	r3, #13
 8000b88:	f001 fc24 	bl	80023d4 <HAL_SPI_TransmitReceive_IT>
		memcpy(received_payload_tscp, received_msg_tscp->data.tools_servo_values,	NUM_TOOLS);
 8000b8c:	69fb      	ldr	r3, [r7, #28]
 8000b8e:	3303      	adds	r3, #3
 8000b90:	2408      	movs	r4, #8
 8000b92:	193a      	adds	r2, r7, r4
 8000b94:	0010      	movs	r0, r2
 8000b96:	0019      	movs	r1, r3
 8000b98:	2304      	movs	r3, #4
 8000b9a:	001a      	movs	r2, r3
 8000b9c:	f002 ff9c 	bl	8003ad8 <memcpy>
		if (message_correct) {
 8000ba0:	231b      	movs	r3, #27
 8000ba2:	18fb      	adds	r3, r7, r3
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d016      	beq.n	8000bd8 <HAL_SPI_TxRxCpltCallback+0x278>
			htim3.Instance->CCR1 = (uint32_t) received_payload_tscp[0] * (500 / 0xFF);
 8000baa:	193b      	adds	r3, r7, r4
 8000bac:	781a      	ldrb	r2, [r3, #0]
 8000bae:	4b13      	ldr	r3, [pc, #76]	@ (8000bfc <HAL_SPI_TxRxCpltCallback+0x29c>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	635a      	str	r2, [r3, #52]	@ 0x34
			htim3.Instance->CCR2 = (uint32_t) received_payload_tscp[1] * (500 / 0xFF);
 8000bb4:	193b      	adds	r3, r7, r4
 8000bb6:	785a      	ldrb	r2, [r3, #1]
 8000bb8:	4b10      	ldr	r3, [pc, #64]	@ (8000bfc <HAL_SPI_TxRxCpltCallback+0x29c>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	639a      	str	r2, [r3, #56]	@ 0x38
			htim3.Instance->CCR3 = (uint32_t) received_payload_tscp[2] * (500 / 0xFF);
 8000bbe:	193b      	adds	r3, r7, r4
 8000bc0:	789a      	ldrb	r2, [r3, #2]
 8000bc2:	4b0e      	ldr	r3, [pc, #56]	@ (8000bfc <HAL_SPI_TxRxCpltCallback+0x29c>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	63da      	str	r2, [r3, #60]	@ 0x3c
			htim3.Instance->CCR4 = (uint32_t) received_payload_tscp[3] * (500 / 0xFF);
 8000bc8:	193b      	adds	r3, r7, r4
 8000bca:	78da      	ldrb	r2, [r3, #3]
 8000bcc:	4b0b      	ldr	r3, [pc, #44]	@ (8000bfc <HAL_SPI_TxRxCpltCallback+0x29c>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	641a      	str	r2, [r3, #64]	@ 0x40
		break;
 8000bd2:	e001      	b.n	8000bd8 <HAL_SPI_TxRxCpltCallback+0x278>
		break;
 8000bd4:	46c0      	nop			@ (mov r8, r8)
 8000bd6:	e000      	b.n	8000bda <HAL_SPI_TxRxCpltCallback+0x27a>
		break;
 8000bd8:	46c0      	nop			@ (mov r8, r8)
	}

}
 8000bda:	46c0      	nop			@ (mov r8, r8)
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	b00b      	add	sp, #44	@ 0x2c
 8000be0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000be2:	46c0      	nop			@ (mov r8, r8)
 8000be4:	20000000 	.word	0x20000000
 8000be8:	20000190 	.word	0x20000190
 8000bec:	20000054 	.word	0x20000054
 8000bf0:	200000b8 	.word	0x200000b8
 8000bf4:	20000100 	.word	0x20000100
 8000bf8:	48000400 	.word	0x48000400
 8000bfc:	20000148 	.word	0x20000148

08000c00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c04:	46c0      	nop			@ (mov r8, r8)
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
	...

08000c0c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c12:	4b0f      	ldr	r3, [pc, #60]	@ (8000c50 <HAL_MspInit+0x44>)
 8000c14:	699a      	ldr	r2, [r3, #24]
 8000c16:	4b0e      	ldr	r3, [pc, #56]	@ (8000c50 <HAL_MspInit+0x44>)
 8000c18:	2101      	movs	r1, #1
 8000c1a:	430a      	orrs	r2, r1
 8000c1c:	619a      	str	r2, [r3, #24]
 8000c1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c50 <HAL_MspInit+0x44>)
 8000c20:	699b      	ldr	r3, [r3, #24]
 8000c22:	2201      	movs	r2, #1
 8000c24:	4013      	ands	r3, r2
 8000c26:	607b      	str	r3, [r7, #4]
 8000c28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c2a:	4b09      	ldr	r3, [pc, #36]	@ (8000c50 <HAL_MspInit+0x44>)
 8000c2c:	69da      	ldr	r2, [r3, #28]
 8000c2e:	4b08      	ldr	r3, [pc, #32]	@ (8000c50 <HAL_MspInit+0x44>)
 8000c30:	2180      	movs	r1, #128	@ 0x80
 8000c32:	0549      	lsls	r1, r1, #21
 8000c34:	430a      	orrs	r2, r1
 8000c36:	61da      	str	r2, [r3, #28]
 8000c38:	4b05      	ldr	r3, [pc, #20]	@ (8000c50 <HAL_MspInit+0x44>)
 8000c3a:	69da      	ldr	r2, [r3, #28]
 8000c3c:	2380      	movs	r3, #128	@ 0x80
 8000c3e:	055b      	lsls	r3, r3, #21
 8000c40:	4013      	ands	r3, r2
 8000c42:	603b      	str	r3, [r7, #0]
 8000c44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c46:	46c0      	nop			@ (mov r8, r8)
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	b002      	add	sp, #8
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	46c0      	nop			@ (mov r8, r8)
 8000c50:	40021000 	.word	0x40021000

08000c54 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a09      	ldr	r2, [pc, #36]	@ (8000c88 <HAL_CRC_MspInit+0x34>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d10b      	bne.n	8000c7e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000c66:	4b09      	ldr	r3, [pc, #36]	@ (8000c8c <HAL_CRC_MspInit+0x38>)
 8000c68:	695a      	ldr	r2, [r3, #20]
 8000c6a:	4b08      	ldr	r3, [pc, #32]	@ (8000c8c <HAL_CRC_MspInit+0x38>)
 8000c6c:	2140      	movs	r1, #64	@ 0x40
 8000c6e:	430a      	orrs	r2, r1
 8000c70:	615a      	str	r2, [r3, #20]
 8000c72:	4b06      	ldr	r3, [pc, #24]	@ (8000c8c <HAL_CRC_MspInit+0x38>)
 8000c74:	695b      	ldr	r3, [r3, #20]
 8000c76:	2240      	movs	r2, #64	@ 0x40
 8000c78:	4013      	ands	r3, r2
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000c7e:	46c0      	nop			@ (mov r8, r8)
 8000c80:	46bd      	mov	sp, r7
 8000c82:	b004      	add	sp, #16
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	46c0      	nop			@ (mov r8, r8)
 8000c88:	40023000 	.word	0x40023000
 8000c8c:	40021000 	.word	0x40021000

08000c90 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c90:	b590      	push	{r4, r7, lr}
 8000c92:	b08b      	sub	sp, #44	@ 0x2c
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c98:	2414      	movs	r4, #20
 8000c9a:	193b      	adds	r3, r7, r4
 8000c9c:	0018      	movs	r0, r3
 8000c9e:	2314      	movs	r3, #20
 8000ca0:	001a      	movs	r2, r3
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	f002 feec 	bl	8003a80 <memset>
  if(hspi->Instance==SPI1)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a20      	ldr	r2, [pc, #128]	@ (8000d30 <HAL_SPI_MspInit+0xa0>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d13a      	bne.n	8000d28 <HAL_SPI_MspInit+0x98>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cb2:	4b20      	ldr	r3, [pc, #128]	@ (8000d34 <HAL_SPI_MspInit+0xa4>)
 8000cb4:	699a      	ldr	r2, [r3, #24]
 8000cb6:	4b1f      	ldr	r3, [pc, #124]	@ (8000d34 <HAL_SPI_MspInit+0xa4>)
 8000cb8:	2180      	movs	r1, #128	@ 0x80
 8000cba:	0149      	lsls	r1, r1, #5
 8000cbc:	430a      	orrs	r2, r1
 8000cbe:	619a      	str	r2, [r3, #24]
 8000cc0:	4b1c      	ldr	r3, [pc, #112]	@ (8000d34 <HAL_SPI_MspInit+0xa4>)
 8000cc2:	699a      	ldr	r2, [r3, #24]
 8000cc4:	2380      	movs	r3, #128	@ 0x80
 8000cc6:	015b      	lsls	r3, r3, #5
 8000cc8:	4013      	ands	r3, r2
 8000cca:	613b      	str	r3, [r7, #16]
 8000ccc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cce:	4b19      	ldr	r3, [pc, #100]	@ (8000d34 <HAL_SPI_MspInit+0xa4>)
 8000cd0:	695a      	ldr	r2, [r3, #20]
 8000cd2:	4b18      	ldr	r3, [pc, #96]	@ (8000d34 <HAL_SPI_MspInit+0xa4>)
 8000cd4:	2180      	movs	r1, #128	@ 0x80
 8000cd6:	0289      	lsls	r1, r1, #10
 8000cd8:	430a      	orrs	r2, r1
 8000cda:	615a      	str	r2, [r3, #20]
 8000cdc:	4b15      	ldr	r3, [pc, #84]	@ (8000d34 <HAL_SPI_MspInit+0xa4>)
 8000cde:	695a      	ldr	r2, [r3, #20]
 8000ce0:	2380      	movs	r3, #128	@ 0x80
 8000ce2:	029b      	lsls	r3, r3, #10
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000cea:	0021      	movs	r1, r4
 8000cec:	187b      	adds	r3, r7, r1
 8000cee:	22e0      	movs	r2, #224	@ 0xe0
 8000cf0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf2:	187b      	adds	r3, r7, r1
 8000cf4:	2202      	movs	r2, #2
 8000cf6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	187b      	adds	r3, r7, r1
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cfe:	187b      	adds	r3, r7, r1
 8000d00:	2203      	movs	r2, #3
 8000d02:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000d04:	187b      	adds	r3, r7, r1
 8000d06:	2200      	movs	r2, #0
 8000d08:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0a:	187a      	adds	r2, r7, r1
 8000d0c:	2390      	movs	r3, #144	@ 0x90
 8000d0e:	05db      	lsls	r3, r3, #23
 8000d10:	0011      	movs	r1, r2
 8000d12:	0018      	movs	r0, r3
 8000d14:	f000 fc4e 	bl	80015b4 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	2019      	movs	r0, #25
 8000d1e:	f000 fa73 	bl	8001208 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000d22:	2019      	movs	r0, #25
 8000d24:	f000 fa85 	bl	8001232 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d28:	46c0      	nop			@ (mov r8, r8)
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	b00b      	add	sp, #44	@ 0x2c
 8000d2e:	bd90      	pop	{r4, r7, pc}
 8000d30:	40013000 	.word	0x40013000
 8000d34:	40021000 	.word	0x40021000

08000d38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a13      	ldr	r2, [pc, #76]	@ (8000d94 <HAL_TIM_Base_MspInit+0x5c>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d10e      	bne.n	8000d68 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d4a:	4b13      	ldr	r3, [pc, #76]	@ (8000d98 <HAL_TIM_Base_MspInit+0x60>)
 8000d4c:	699a      	ldr	r2, [r3, #24]
 8000d4e:	4b12      	ldr	r3, [pc, #72]	@ (8000d98 <HAL_TIM_Base_MspInit+0x60>)
 8000d50:	2180      	movs	r1, #128	@ 0x80
 8000d52:	0109      	lsls	r1, r1, #4
 8000d54:	430a      	orrs	r2, r1
 8000d56:	619a      	str	r2, [r3, #24]
 8000d58:	4b0f      	ldr	r3, [pc, #60]	@ (8000d98 <HAL_TIM_Base_MspInit+0x60>)
 8000d5a:	699a      	ldr	r2, [r3, #24]
 8000d5c:	2380      	movs	r3, #128	@ 0x80
 8000d5e:	011b      	lsls	r3, r3, #4
 8000d60:	4013      	ands	r3, r2
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000d66:	e010      	b.n	8000d8a <HAL_TIM_Base_MspInit+0x52>
  else if(htim_base->Instance==TIM3)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a0b      	ldr	r2, [pc, #44]	@ (8000d9c <HAL_TIM_Base_MspInit+0x64>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d10b      	bne.n	8000d8a <HAL_TIM_Base_MspInit+0x52>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d72:	4b09      	ldr	r3, [pc, #36]	@ (8000d98 <HAL_TIM_Base_MspInit+0x60>)
 8000d74:	69da      	ldr	r2, [r3, #28]
 8000d76:	4b08      	ldr	r3, [pc, #32]	@ (8000d98 <HAL_TIM_Base_MspInit+0x60>)
 8000d78:	2102      	movs	r1, #2
 8000d7a:	430a      	orrs	r2, r1
 8000d7c:	61da      	str	r2, [r3, #28]
 8000d7e:	4b06      	ldr	r3, [pc, #24]	@ (8000d98 <HAL_TIM_Base_MspInit+0x60>)
 8000d80:	69db      	ldr	r3, [r3, #28]
 8000d82:	2202      	movs	r2, #2
 8000d84:	4013      	ands	r3, r2
 8000d86:	60bb      	str	r3, [r7, #8]
 8000d88:	68bb      	ldr	r3, [r7, #8]
}
 8000d8a:	46c0      	nop			@ (mov r8, r8)
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	b004      	add	sp, #16
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	46c0      	nop			@ (mov r8, r8)
 8000d94:	40012c00 	.word	0x40012c00
 8000d98:	40021000 	.word	0x40021000
 8000d9c:	40000400 	.word	0x40000400

08000da0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	2380      	movs	r3, #128	@ 0x80
 8000dae:	05db      	lsls	r3, r3, #23
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d10b      	bne.n	8000dcc <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000db4:	4b07      	ldr	r3, [pc, #28]	@ (8000dd4 <HAL_TIM_PWM_MspInit+0x34>)
 8000db6:	69da      	ldr	r2, [r3, #28]
 8000db8:	4b06      	ldr	r3, [pc, #24]	@ (8000dd4 <HAL_TIM_PWM_MspInit+0x34>)
 8000dba:	2101      	movs	r1, #1
 8000dbc:	430a      	orrs	r2, r1
 8000dbe:	61da      	str	r2, [r3, #28]
 8000dc0:	4b04      	ldr	r3, [pc, #16]	@ (8000dd4 <HAL_TIM_PWM_MspInit+0x34>)
 8000dc2:	69db      	ldr	r3, [r3, #28]
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	60fb      	str	r3, [r7, #12]
 8000dca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000dcc:	46c0      	nop			@ (mov r8, r8)
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	b004      	add	sp, #16
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40021000 	.word	0x40021000

08000dd8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000dd8:	b590      	push	{r4, r7, lr}
 8000dda:	b08b      	sub	sp, #44	@ 0x2c
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de0:	2414      	movs	r4, #20
 8000de2:	193b      	adds	r3, r7, r4
 8000de4:	0018      	movs	r0, r3
 8000de6:	2314      	movs	r3, #20
 8000de8:	001a      	movs	r2, r3
 8000dea:	2100      	movs	r1, #0
 8000dec:	f002 fe48 	bl	8003a80 <memset>
  if(htim->Instance==TIM1)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a41      	ldr	r2, [pc, #260]	@ (8000efc <HAL_TIM_MspPostInit+0x124>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d126      	bne.n	8000e48 <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfa:	4b41      	ldr	r3, [pc, #260]	@ (8000f00 <HAL_TIM_MspPostInit+0x128>)
 8000dfc:	695a      	ldr	r2, [r3, #20]
 8000dfe:	4b40      	ldr	r3, [pc, #256]	@ (8000f00 <HAL_TIM_MspPostInit+0x128>)
 8000e00:	2180      	movs	r1, #128	@ 0x80
 8000e02:	0289      	lsls	r1, r1, #10
 8000e04:	430a      	orrs	r2, r1
 8000e06:	615a      	str	r2, [r3, #20]
 8000e08:	4b3d      	ldr	r3, [pc, #244]	@ (8000f00 <HAL_TIM_MspPostInit+0x128>)
 8000e0a:	695a      	ldr	r2, [r3, #20]
 8000e0c:	2380      	movs	r3, #128	@ 0x80
 8000e0e:	029b      	lsls	r3, r3, #10
 8000e10:	4013      	ands	r3, r2
 8000e12:	613b      	str	r3, [r7, #16]
 8000e14:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000e16:	193b      	adds	r3, r7, r4
 8000e18:	22f0      	movs	r2, #240	@ 0xf0
 8000e1a:	0112      	lsls	r2, r2, #4
 8000e1c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1e:	0021      	movs	r1, r4
 8000e20:	187b      	adds	r3, r7, r1
 8000e22:	2202      	movs	r2, #2
 8000e24:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	187b      	adds	r3, r7, r1
 8000e28:	2200      	movs	r2, #0
 8000e2a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2c:	187b      	adds	r3, r7, r1
 8000e2e:	2200      	movs	r2, #0
 8000e30:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000e32:	187b      	adds	r3, r7, r1
 8000e34:	2202      	movs	r2, #2
 8000e36:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e38:	187a      	adds	r2, r7, r1
 8000e3a:	2390      	movs	r3, #144	@ 0x90
 8000e3c:	05db      	lsls	r3, r3, #23
 8000e3e:	0011      	movs	r1, r2
 8000e40:	0018      	movs	r0, r3
 8000e42:	f000 fbb7 	bl	80015b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000e46:	e054      	b.n	8000ef2 <HAL_TIM_MspPostInit+0x11a>
  else if(htim->Instance==TIM2)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	2380      	movs	r3, #128	@ 0x80
 8000e4e:	05db      	lsls	r3, r3, #23
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d125      	bne.n	8000ea0 <HAL_TIM_MspPostInit+0xc8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e54:	4b2a      	ldr	r3, [pc, #168]	@ (8000f00 <HAL_TIM_MspPostInit+0x128>)
 8000e56:	695a      	ldr	r2, [r3, #20]
 8000e58:	4b29      	ldr	r3, [pc, #164]	@ (8000f00 <HAL_TIM_MspPostInit+0x128>)
 8000e5a:	2180      	movs	r1, #128	@ 0x80
 8000e5c:	0289      	lsls	r1, r1, #10
 8000e5e:	430a      	orrs	r2, r1
 8000e60:	615a      	str	r2, [r3, #20]
 8000e62:	4b27      	ldr	r3, [pc, #156]	@ (8000f00 <HAL_TIM_MspPostInit+0x128>)
 8000e64:	695a      	ldr	r2, [r3, #20]
 8000e66:	2380      	movs	r3, #128	@ 0x80
 8000e68:	029b      	lsls	r3, r3, #10
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	60fb      	str	r3, [r7, #12]
 8000e6e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000e70:	2114      	movs	r1, #20
 8000e72:	187b      	adds	r3, r7, r1
 8000e74:	220f      	movs	r2, #15
 8000e76:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e78:	187b      	adds	r3, r7, r1
 8000e7a:	2202      	movs	r2, #2
 8000e7c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	187b      	adds	r3, r7, r1
 8000e80:	2200      	movs	r2, #0
 8000e82:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e84:	187b      	adds	r3, r7, r1
 8000e86:	2200      	movs	r2, #0
 8000e88:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000e8a:	187b      	adds	r3, r7, r1
 8000e8c:	2202      	movs	r2, #2
 8000e8e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e90:	187a      	adds	r2, r7, r1
 8000e92:	2390      	movs	r3, #144	@ 0x90
 8000e94:	05db      	lsls	r3, r3, #23
 8000e96:	0011      	movs	r1, r2
 8000e98:	0018      	movs	r0, r3
 8000e9a:	f000 fb8b 	bl	80015b4 <HAL_GPIO_Init>
}
 8000e9e:	e028      	b.n	8000ef2 <HAL_TIM_MspPostInit+0x11a>
  else if(htim->Instance==TIM3)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a17      	ldr	r2, [pc, #92]	@ (8000f04 <HAL_TIM_MspPostInit+0x12c>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d123      	bne.n	8000ef2 <HAL_TIM_MspPostInit+0x11a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eaa:	4b15      	ldr	r3, [pc, #84]	@ (8000f00 <HAL_TIM_MspPostInit+0x128>)
 8000eac:	695a      	ldr	r2, [r3, #20]
 8000eae:	4b14      	ldr	r3, [pc, #80]	@ (8000f00 <HAL_TIM_MspPostInit+0x128>)
 8000eb0:	2180      	movs	r1, #128	@ 0x80
 8000eb2:	02c9      	lsls	r1, r1, #11
 8000eb4:	430a      	orrs	r2, r1
 8000eb6:	615a      	str	r2, [r3, #20]
 8000eb8:	4b11      	ldr	r3, [pc, #68]	@ (8000f00 <HAL_TIM_MspPostInit+0x128>)
 8000eba:	695a      	ldr	r2, [r3, #20]
 8000ebc:	2380      	movs	r3, #128	@ 0x80
 8000ebe:	02db      	lsls	r3, r3, #11
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	60bb      	str	r3, [r7, #8]
 8000ec4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000ec6:	2114      	movs	r1, #20
 8000ec8:	187b      	adds	r3, r7, r1
 8000eca:	2233      	movs	r2, #51	@ 0x33
 8000ecc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ece:	187b      	adds	r3, r7, r1
 8000ed0:	2202      	movs	r2, #2
 8000ed2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	187b      	adds	r3, r7, r1
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eda:	187b      	adds	r3, r7, r1
 8000edc:	2200      	movs	r2, #0
 8000ede:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000ee0:	187b      	adds	r3, r7, r1
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee6:	187b      	adds	r3, r7, r1
 8000ee8:	4a07      	ldr	r2, [pc, #28]	@ (8000f08 <HAL_TIM_MspPostInit+0x130>)
 8000eea:	0019      	movs	r1, r3
 8000eec:	0010      	movs	r0, r2
 8000eee:	f000 fb61 	bl	80015b4 <HAL_GPIO_Init>
}
 8000ef2:	46c0      	nop			@ (mov r8, r8)
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	b00b      	add	sp, #44	@ 0x2c
 8000ef8:	bd90      	pop	{r4, r7, pc}
 8000efa:	46c0      	nop			@ (mov r8, r8)
 8000efc:	40012c00 	.word	0x40012c00
 8000f00:	40021000 	.word	0x40021000
 8000f04:	40000400 	.word	0x40000400
 8000f08:	48000400 	.word	0x48000400

08000f0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f10:	46c0      	nop			@ (mov r8, r8)
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f1a:	46c0      	nop			@ (mov r8, r8)
 8000f1c:	e7fd      	b.n	8000f1a <HardFault_Handler+0x4>

08000f1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000f22:	46c0      	nop			@ (mov r8, r8)
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f2c:	46c0      	nop			@ (mov r8, r8)
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f36:	f000 f89f 	bl	8001078 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f3a:	46c0      	nop			@ (mov r8, r8)
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000f44:	4b03      	ldr	r3, [pc, #12]	@ (8000f54 <SPI1_IRQHandler+0x14>)
 8000f46:	0018      	movs	r0, r3
 8000f48:	f001 fb0e 	bl	8002568 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000f4c:	46c0      	nop			@ (mov r8, r8)
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	46c0      	nop			@ (mov r8, r8)
 8000f54:	20000054 	.word	0x20000054

08000f58 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000f5c:	46c0      	nop			@ (mov r8, r8)
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
	...

08000f64 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f64:	4813      	ldr	r0, [pc, #76]	@ (8000fb4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f66:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8000f68:	4813      	ldr	r0, [pc, #76]	@ (8000fb8 <LoopForever+0x6>)
    LDR R1, [R0]
 8000f6a:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000f6c:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000f6e:	4a13      	ldr	r2, [pc, #76]	@ (8000fbc <LoopForever+0xa>)
    CMP R1, R2
 8000f70:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000f72:	d105      	bne.n	8000f80 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000f74:	4812      	ldr	r0, [pc, #72]	@ (8000fc0 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000f76:	4913      	ldr	r1, [pc, #76]	@ (8000fc4 <LoopForever+0x12>)
    STR R1, [R0]
 8000f78:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000f7a:	4813      	ldr	r0, [pc, #76]	@ (8000fc8 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000f7c:	4913      	ldr	r1, [pc, #76]	@ (8000fcc <LoopForever+0x1a>)
    STR R1, [R0]
 8000f7e:	6001      	str	r1, [r0, #0]

08000f80 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f80:	4813      	ldr	r0, [pc, #76]	@ (8000fd0 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000f82:	4914      	ldr	r1, [pc, #80]	@ (8000fd4 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000f84:	4a14      	ldr	r2, [pc, #80]	@ (8000fd8 <LoopForever+0x26>)
  movs r3, #0
 8000f86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f88:	e002      	b.n	8000f90 <LoopCopyDataInit>

08000f8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f8e:	3304      	adds	r3, #4

08000f90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f94:	d3f9      	bcc.n	8000f8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f96:	4a11      	ldr	r2, [pc, #68]	@ (8000fdc <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000f98:	4c11      	ldr	r4, [pc, #68]	@ (8000fe0 <LoopForever+0x2e>)
  movs r3, #0
 8000f9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f9c:	e001      	b.n	8000fa2 <LoopFillZerobss>

08000f9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fa0:	3204      	adds	r2, #4

08000fa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fa4:	d3fb      	bcc.n	8000f9e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000fa6:	f7ff ffd7 	bl	8000f58 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000faa:	f002 fd71 	bl	8003a90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fae:	f7ff f937 	bl	8000220 <main>

08000fb2 <LoopForever>:

LoopForever:
    b LoopForever
 8000fb2:	e7fe      	b.n	8000fb2 <LoopForever>
  ldr   r0, =_estack
 8000fb4:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000fb8:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000fbc:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000fc0:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000fc4:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000fc8:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000fcc:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000fd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fd4:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000fd8:	08003b3c 	.word	0x08003b3c
  ldr r2, =_sbss
 8000fdc:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000fe0:	200001a4 	.word	0x200001a4

08000fe4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fe4:	e7fe      	b.n	8000fe4 <ADC1_IRQHandler>
	...

08000fe8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fec:	4b07      	ldr	r3, [pc, #28]	@ (800100c <HAL_Init+0x24>)
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	4b06      	ldr	r3, [pc, #24]	@ (800100c <HAL_Init+0x24>)
 8000ff2:	2110      	movs	r1, #16
 8000ff4:	430a      	orrs	r2, r1
 8000ff6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000ff8:	2003      	movs	r0, #3
 8000ffa:	f000 f809 	bl	8001010 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ffe:	f7ff fe05 	bl	8000c0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001002:	2300      	movs	r3, #0
}
 8001004:	0018      	movs	r0, r3
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	46c0      	nop			@ (mov r8, r8)
 800100c:	40022000 	.word	0x40022000

08001010 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001010:	b590      	push	{r4, r7, lr}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001018:	4b14      	ldr	r3, [pc, #80]	@ (800106c <HAL_InitTick+0x5c>)
 800101a:	681c      	ldr	r4, [r3, #0]
 800101c:	4b14      	ldr	r3, [pc, #80]	@ (8001070 <HAL_InitTick+0x60>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	0019      	movs	r1, r3
 8001022:	23fa      	movs	r3, #250	@ 0xfa
 8001024:	0098      	lsls	r0, r3, #2
 8001026:	f7ff f86f 	bl	8000108 <__udivsi3>
 800102a:	0003      	movs	r3, r0
 800102c:	0019      	movs	r1, r3
 800102e:	0020      	movs	r0, r4
 8001030:	f7ff f86a 	bl	8000108 <__udivsi3>
 8001034:	0003      	movs	r3, r0
 8001036:	0018      	movs	r0, r3
 8001038:	f000 f90b 	bl	8001252 <HAL_SYSTICK_Config>
 800103c:	1e03      	subs	r3, r0, #0
 800103e:	d001      	beq.n	8001044 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001040:	2301      	movs	r3, #1
 8001042:	e00f      	b.n	8001064 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2b03      	cmp	r3, #3
 8001048:	d80b      	bhi.n	8001062 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800104a:	6879      	ldr	r1, [r7, #4]
 800104c:	2301      	movs	r3, #1
 800104e:	425b      	negs	r3, r3
 8001050:	2200      	movs	r2, #0
 8001052:	0018      	movs	r0, r3
 8001054:	f000 f8d8 	bl	8001208 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001058:	4b06      	ldr	r3, [pc, #24]	@ (8001074 <HAL_InitTick+0x64>)
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800105e:	2300      	movs	r3, #0
 8001060:	e000      	b.n	8001064 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
}
 8001064:	0018      	movs	r0, r3
 8001066:	46bd      	mov	sp, r7
 8001068:	b003      	add	sp, #12
 800106a:	bd90      	pop	{r4, r7, pc}
 800106c:	20000010 	.word	0x20000010
 8001070:	20000018 	.word	0x20000018
 8001074:	20000014 	.word	0x20000014

08001078 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800107c:	4b05      	ldr	r3, [pc, #20]	@ (8001094 <HAL_IncTick+0x1c>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	001a      	movs	r2, r3
 8001082:	4b05      	ldr	r3, [pc, #20]	@ (8001098 <HAL_IncTick+0x20>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	18d2      	adds	r2, r2, r3
 8001088:	4b03      	ldr	r3, [pc, #12]	@ (8001098 <HAL_IncTick+0x20>)
 800108a:	601a      	str	r2, [r3, #0]
}
 800108c:	46c0      	nop			@ (mov r8, r8)
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	46c0      	nop			@ (mov r8, r8)
 8001094:	20000018 	.word	0x20000018
 8001098:	200001a0 	.word	0x200001a0

0800109c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  return uwTick;
 80010a0:	4b02      	ldr	r3, [pc, #8]	@ (80010ac <HAL_GetTick+0x10>)
 80010a2:	681b      	ldr	r3, [r3, #0]
}
 80010a4:	0018      	movs	r0, r3
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	46c0      	nop			@ (mov r8, r8)
 80010ac:	200001a0 	.word	0x200001a0

080010b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	0002      	movs	r2, r0
 80010b8:	1dfb      	adds	r3, r7, #7
 80010ba:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80010bc:	1dfb      	adds	r3, r7, #7
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	2b7f      	cmp	r3, #127	@ 0x7f
 80010c2:	d809      	bhi.n	80010d8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010c4:	1dfb      	adds	r3, r7, #7
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	001a      	movs	r2, r3
 80010ca:	231f      	movs	r3, #31
 80010cc:	401a      	ands	r2, r3
 80010ce:	4b04      	ldr	r3, [pc, #16]	@ (80010e0 <__NVIC_EnableIRQ+0x30>)
 80010d0:	2101      	movs	r1, #1
 80010d2:	4091      	lsls	r1, r2
 80010d4:	000a      	movs	r2, r1
 80010d6:	601a      	str	r2, [r3, #0]
  }
}
 80010d8:	46c0      	nop			@ (mov r8, r8)
 80010da:	46bd      	mov	sp, r7
 80010dc:	b002      	add	sp, #8
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	e000e100 	.word	0xe000e100

080010e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010e4:	b590      	push	{r4, r7, lr}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	0002      	movs	r2, r0
 80010ec:	6039      	str	r1, [r7, #0]
 80010ee:	1dfb      	adds	r3, r7, #7
 80010f0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80010f2:	1dfb      	adds	r3, r7, #7
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	2b7f      	cmp	r3, #127	@ 0x7f
 80010f8:	d828      	bhi.n	800114c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010fa:	4a2f      	ldr	r2, [pc, #188]	@ (80011b8 <__NVIC_SetPriority+0xd4>)
 80010fc:	1dfb      	adds	r3, r7, #7
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	b25b      	sxtb	r3, r3
 8001102:	089b      	lsrs	r3, r3, #2
 8001104:	33c0      	adds	r3, #192	@ 0xc0
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	589b      	ldr	r3, [r3, r2]
 800110a:	1dfa      	adds	r2, r7, #7
 800110c:	7812      	ldrb	r2, [r2, #0]
 800110e:	0011      	movs	r1, r2
 8001110:	2203      	movs	r2, #3
 8001112:	400a      	ands	r2, r1
 8001114:	00d2      	lsls	r2, r2, #3
 8001116:	21ff      	movs	r1, #255	@ 0xff
 8001118:	4091      	lsls	r1, r2
 800111a:	000a      	movs	r2, r1
 800111c:	43d2      	mvns	r2, r2
 800111e:	401a      	ands	r2, r3
 8001120:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	019b      	lsls	r3, r3, #6
 8001126:	22ff      	movs	r2, #255	@ 0xff
 8001128:	401a      	ands	r2, r3
 800112a:	1dfb      	adds	r3, r7, #7
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	0018      	movs	r0, r3
 8001130:	2303      	movs	r3, #3
 8001132:	4003      	ands	r3, r0
 8001134:	00db      	lsls	r3, r3, #3
 8001136:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001138:	481f      	ldr	r0, [pc, #124]	@ (80011b8 <__NVIC_SetPriority+0xd4>)
 800113a:	1dfb      	adds	r3, r7, #7
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	b25b      	sxtb	r3, r3
 8001140:	089b      	lsrs	r3, r3, #2
 8001142:	430a      	orrs	r2, r1
 8001144:	33c0      	adds	r3, #192	@ 0xc0
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800114a:	e031      	b.n	80011b0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800114c:	4a1b      	ldr	r2, [pc, #108]	@ (80011bc <__NVIC_SetPriority+0xd8>)
 800114e:	1dfb      	adds	r3, r7, #7
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	0019      	movs	r1, r3
 8001154:	230f      	movs	r3, #15
 8001156:	400b      	ands	r3, r1
 8001158:	3b08      	subs	r3, #8
 800115a:	089b      	lsrs	r3, r3, #2
 800115c:	3306      	adds	r3, #6
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	18d3      	adds	r3, r2, r3
 8001162:	3304      	adds	r3, #4
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	1dfa      	adds	r2, r7, #7
 8001168:	7812      	ldrb	r2, [r2, #0]
 800116a:	0011      	movs	r1, r2
 800116c:	2203      	movs	r2, #3
 800116e:	400a      	ands	r2, r1
 8001170:	00d2      	lsls	r2, r2, #3
 8001172:	21ff      	movs	r1, #255	@ 0xff
 8001174:	4091      	lsls	r1, r2
 8001176:	000a      	movs	r2, r1
 8001178:	43d2      	mvns	r2, r2
 800117a:	401a      	ands	r2, r3
 800117c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	019b      	lsls	r3, r3, #6
 8001182:	22ff      	movs	r2, #255	@ 0xff
 8001184:	401a      	ands	r2, r3
 8001186:	1dfb      	adds	r3, r7, #7
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	0018      	movs	r0, r3
 800118c:	2303      	movs	r3, #3
 800118e:	4003      	ands	r3, r0
 8001190:	00db      	lsls	r3, r3, #3
 8001192:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001194:	4809      	ldr	r0, [pc, #36]	@ (80011bc <__NVIC_SetPriority+0xd8>)
 8001196:	1dfb      	adds	r3, r7, #7
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	001c      	movs	r4, r3
 800119c:	230f      	movs	r3, #15
 800119e:	4023      	ands	r3, r4
 80011a0:	3b08      	subs	r3, #8
 80011a2:	089b      	lsrs	r3, r3, #2
 80011a4:	430a      	orrs	r2, r1
 80011a6:	3306      	adds	r3, #6
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	18c3      	adds	r3, r0, r3
 80011ac:	3304      	adds	r3, #4
 80011ae:	601a      	str	r2, [r3, #0]
}
 80011b0:	46c0      	nop			@ (mov r8, r8)
 80011b2:	46bd      	mov	sp, r7
 80011b4:	b003      	add	sp, #12
 80011b6:	bd90      	pop	{r4, r7, pc}
 80011b8:	e000e100 	.word	0xe000e100
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	1e5a      	subs	r2, r3, #1
 80011cc:	2380      	movs	r3, #128	@ 0x80
 80011ce:	045b      	lsls	r3, r3, #17
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d301      	bcc.n	80011d8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011d4:	2301      	movs	r3, #1
 80011d6:	e010      	b.n	80011fa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001204 <SysTick_Config+0x44>)
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	3a01      	subs	r2, #1
 80011de:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011e0:	2301      	movs	r3, #1
 80011e2:	425b      	negs	r3, r3
 80011e4:	2103      	movs	r1, #3
 80011e6:	0018      	movs	r0, r3
 80011e8:	f7ff ff7c 	bl	80010e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011ec:	4b05      	ldr	r3, [pc, #20]	@ (8001204 <SysTick_Config+0x44>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011f2:	4b04      	ldr	r3, [pc, #16]	@ (8001204 <SysTick_Config+0x44>)
 80011f4:	2207      	movs	r2, #7
 80011f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	0018      	movs	r0, r3
 80011fc:	46bd      	mov	sp, r7
 80011fe:	b002      	add	sp, #8
 8001200:	bd80      	pop	{r7, pc}
 8001202:	46c0      	nop			@ (mov r8, r8)
 8001204:	e000e010 	.word	0xe000e010

08001208 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	60b9      	str	r1, [r7, #8]
 8001210:	607a      	str	r2, [r7, #4]
 8001212:	210f      	movs	r1, #15
 8001214:	187b      	adds	r3, r7, r1
 8001216:	1c02      	adds	r2, r0, #0
 8001218:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800121a:	68ba      	ldr	r2, [r7, #8]
 800121c:	187b      	adds	r3, r7, r1
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	b25b      	sxtb	r3, r3
 8001222:	0011      	movs	r1, r2
 8001224:	0018      	movs	r0, r3
 8001226:	f7ff ff5d 	bl	80010e4 <__NVIC_SetPriority>
}
 800122a:	46c0      	nop			@ (mov r8, r8)
 800122c:	46bd      	mov	sp, r7
 800122e:	b004      	add	sp, #16
 8001230:	bd80      	pop	{r7, pc}

08001232 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b082      	sub	sp, #8
 8001236:	af00      	add	r7, sp, #0
 8001238:	0002      	movs	r2, r0
 800123a:	1dfb      	adds	r3, r7, #7
 800123c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800123e:	1dfb      	adds	r3, r7, #7
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	b25b      	sxtb	r3, r3
 8001244:	0018      	movs	r0, r3
 8001246:	f7ff ff33 	bl	80010b0 <__NVIC_EnableIRQ>
}
 800124a:	46c0      	nop			@ (mov r8, r8)
 800124c:	46bd      	mov	sp, r7
 800124e:	b002      	add	sp, #8
 8001250:	bd80      	pop	{r7, pc}

08001252 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	b082      	sub	sp, #8
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	0018      	movs	r0, r3
 800125e:	f7ff ffaf 	bl	80011c0 <SysTick_Config>
 8001262:	0003      	movs	r3, r0
}
 8001264:	0018      	movs	r0, r3
 8001266:	46bd      	mov	sp, r7
 8001268:	b002      	add	sp, #8
 800126a:	bd80      	pop	{r7, pc}

0800126c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d101      	bne.n	800127e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e039      	b.n	80012f2 <HAL_CRC_Init+0x86>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	7d5b      	ldrb	r3, [r3, #21]
 8001282:	b2db      	uxtb	r3, r3
 8001284:	2b00      	cmp	r3, #0
 8001286:	d106      	bne.n	8001296 <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2200      	movs	r2, #0
 800128c:	751a      	strb	r2, [r3, #20]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	0018      	movs	r0, r3
 8001292:	f7ff fcdf 	bl	8000c54 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2202      	movs	r2, #2
 800129a:	755a      	strb	r2, [r3, #21]
#endif /* CRC_POL_POL */

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	791b      	ldrb	r3, [r3, #4]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d105      	bne.n	80012b0 <HAL_CRC_Init+0x44>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2201      	movs	r2, #1
 80012aa:	4252      	negs	r2, r2
 80012ac:	611a      	str	r2, [r3, #16]
 80012ae:	e004      	b.n	80012ba <HAL_CRC_Init+0x4e>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	687a      	ldr	r2, [r7, #4]
 80012b6:	6892      	ldr	r2, [r2, #8]
 80012b8:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	2260      	movs	r2, #96	@ 0x60
 80012c2:	4393      	bics	r3, r2
 80012c4:	0019      	movs	r1, r3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	68da      	ldr	r2, [r3, #12]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	430a      	orrs	r2, r1
 80012d0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	2280      	movs	r2, #128	@ 0x80
 80012da:	4393      	bics	r3, r2
 80012dc:	0019      	movs	r1, r3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	691a      	ldr	r2, [r3, #16]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	430a      	orrs	r2, r1
 80012e8:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2201      	movs	r2, #1
 80012ee:	755a      	strb	r2, [r3, #21]

  /* Return function status */
  return HAL_OK;
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	0018      	movs	r0, r3
 80012f4:	46bd      	mov	sp, r7
 80012f6:	b002      	add	sp, #8
 80012f8:	bd80      	pop	{r7, pc}

080012fa <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b086      	sub	sp, #24
 80012fe:	af00      	add	r7, sp, #0
 8001300:	60f8      	str	r0, [r7, #12]
 8001302:	60b9      	str	r1, [r7, #8]
 8001304:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001306:	2300      	movs	r3, #0
 8001308:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	2202      	movs	r2, #2
 800130e:	755a      	strb	r2, [r3, #21]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	689a      	ldr	r2, [r3, #8]
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2101      	movs	r1, #1
 800131c:	430a      	orrs	r2, r1
 800131e:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	2b03      	cmp	r3, #3
 8001326:	d005      	beq.n	8001334 <HAL_CRC_Calculate+0x3a>
 8001328:	d82d      	bhi.n	8001386 <HAL_CRC_Calculate+0x8c>
 800132a:	2b01      	cmp	r3, #1
 800132c:	d019      	beq.n	8001362 <HAL_CRC_Calculate+0x68>
 800132e:	2b02      	cmp	r3, #2
 8001330:	d020      	beq.n	8001374 <HAL_CRC_Calculate+0x7a>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8001332:	e028      	b.n	8001386 <HAL_CRC_Calculate+0x8c>
      for (index = 0U; index < BufferLength; index++)
 8001334:	2300      	movs	r3, #0
 8001336:	617b      	str	r3, [r7, #20]
 8001338:	e00a      	b.n	8001350 <HAL_CRC_Calculate+0x56>
        hcrc->Instance->DR = pBuffer[index];
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	68ba      	ldr	r2, [r7, #8]
 8001340:	18d2      	adds	r2, r2, r3
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	6812      	ldr	r2, [r2, #0]
 8001348:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	3301      	adds	r3, #1
 800134e:	617b      	str	r3, [r7, #20]
 8001350:	697a      	ldr	r2, [r7, #20]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	429a      	cmp	r2, r3
 8001356:	d3f0      	bcc.n	800133a <HAL_CRC_Calculate+0x40>
      temp = hcrc->Instance->DR;
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	613b      	str	r3, [r7, #16]
      break;
 8001360:	e012      	b.n	8001388 <HAL_CRC_Calculate+0x8e>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	68b9      	ldr	r1, [r7, #8]
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	0018      	movs	r0, r3
 800136a:	f000 f815 	bl	8001398 <CRC_Handle_8>
 800136e:	0003      	movs	r3, r0
 8001370:	613b      	str	r3, [r7, #16]
      break;
 8001372:	e009      	b.n	8001388 <HAL_CRC_Calculate+0x8e>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8001374:	687a      	ldr	r2, [r7, #4]
 8001376:	68b9      	ldr	r1, [r7, #8]
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	0018      	movs	r0, r3
 800137c:	f000 f89d 	bl	80014ba <CRC_Handle_16>
 8001380:	0003      	movs	r3, r0
 8001382:	613b      	str	r3, [r7, #16]
      break;
 8001384:	e000      	b.n	8001388 <HAL_CRC_Calculate+0x8e>
      break;
 8001386:	46c0      	nop			@ (mov r8, r8)
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	2201      	movs	r2, #1
 800138c:	755a      	strb	r2, [r3, #21]

  /* Return the CRC computed value */
  return temp;
 800138e:	693b      	ldr	r3, [r7, #16]
}
 8001390:	0018      	movs	r0, r3
 8001392:	46bd      	mov	sp, r7
 8001394:	b006      	add	sp, #24
 8001396:	bd80      	pop	{r7, pc}

08001398 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b088      	sub	sp, #32
 800139c:	af00      	add	r7, sp, #0
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	60b9      	str	r1, [r7, #8]
 80013a2:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 80013a4:	2300      	movs	r3, #0
 80013a6:	61fb      	str	r3, [r7, #28]
 80013a8:	e023      	b.n	80013f2 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	68ba      	ldr	r2, [r7, #8]
 80013b0:	18d3      	adds	r3, r2, r3
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	3301      	adds	r3, #1
 80013bc:	68b9      	ldr	r1, [r7, #8]
 80013be:	18cb      	adds	r3, r1, r3
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80013c4:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	3302      	adds	r3, #2
 80013cc:	68b9      	ldr	r1, [r7, #8]
 80013ce:	18cb      	adds	r3, r1, r3
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80013d4:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	3303      	adds	r3, #3
 80013dc:	68b9      	ldr	r1, [r7, #8]
 80013de:	18cb      	adds	r3, r1, r3
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	0019      	movs	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80013e8:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80013ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	3301      	adds	r3, #1
 80013f0:	61fb      	str	r3, [r7, #28]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	089b      	lsrs	r3, r3, #2
 80013f6:	69fa      	ldr	r2, [r7, #28]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d3d6      	bcc.n	80013aa <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2203      	movs	r2, #3
 8001400:	4013      	ands	r3, r2
 8001402:	d053      	beq.n	80014ac <CRC_Handle_8+0x114>
  {
    if ((BufferLength % 4U) == 1U)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2203      	movs	r2, #3
 8001408:	4013      	ands	r3, r2
 800140a:	2b01      	cmp	r3, #1
 800140c:	d107      	bne.n	800141e <CRC_Handle_8+0x86>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	68ba      	ldr	r2, [r7, #8]
 8001414:	18d2      	adds	r2, r2, r3
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	7812      	ldrb	r2, [r2, #0]
 800141c:	701a      	strb	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 2U)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2203      	movs	r2, #3
 8001422:	4013      	ands	r3, r2
 8001424:	2b02      	cmp	r3, #2
 8001426:	d119      	bne.n	800145c <CRC_Handle_8+0xc4>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	68ba      	ldr	r2, [r7, #8]
 800142e:	18d3      	adds	r3, r2, r3
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	021b      	lsls	r3, r3, #8
 8001434:	b21a      	sxth	r2, r3
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	3301      	adds	r3, #1
 800143c:	68b9      	ldr	r1, [r7, #8]
 800143e:	18cb      	adds	r3, r1, r3
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	b21b      	sxth	r3, r3
 8001444:	4313      	orrs	r3, r2
 8001446:	b21a      	sxth	r2, r3
 8001448:	211a      	movs	r1, #26
 800144a:	187b      	adds	r3, r7, r1
 800144c:	801a      	strh	r2, [r3, #0]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	187a      	adds	r2, r7, r1
 8001458:	8812      	ldrh	r2, [r2, #0]
 800145a:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2203      	movs	r2, #3
 8001460:	4013      	ands	r3, r2
 8001462:	2b03      	cmp	r3, #3
 8001464:	d122      	bne.n	80014ac <CRC_Handle_8+0x114>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	68ba      	ldr	r2, [r7, #8]
 800146c:	18d3      	adds	r3, r2, r3
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	021b      	lsls	r3, r3, #8
 8001472:	b21a      	sxth	r2, r3
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	3301      	adds	r3, #1
 800147a:	68b9      	ldr	r1, [r7, #8]
 800147c:	18cb      	adds	r3, r1, r3
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	b21b      	sxth	r3, r3
 8001482:	4313      	orrs	r3, r2
 8001484:	b21a      	sxth	r2, r3
 8001486:	211a      	movs	r1, #26
 8001488:	187b      	adds	r3, r7, r1
 800148a:	801a      	strh	r2, [r3, #0]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	187a      	adds	r2, r7, r1
 8001496:	8812      	ldrh	r2, [r2, #0]
 8001498:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	3302      	adds	r3, #2
 80014a0:	68ba      	ldr	r2, [r7, #8]
 80014a2:	18d2      	adds	r2, r2, r3
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	7812      	ldrb	r2, [r2, #0]
 80014aa:	701a      	strb	r2, [r3, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	681b      	ldr	r3, [r3, #0]
}
 80014b2:	0018      	movs	r0, r3
 80014b4:	46bd      	mov	sp, r7
 80014b6:	b008      	add	sp, #32
 80014b8:	bd80      	pop	{r7, pc}

080014ba <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b086      	sub	sp, #24
 80014be:	af00      	add	r7, sp, #0
 80014c0:	60f8      	str	r0, [r7, #12]
 80014c2:	60b9      	str	r1, [r7, #8]
 80014c4:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 80014c6:	2300      	movs	r3, #0
 80014c8:	617b      	str	r3, [r7, #20]
 80014ca:	e013      	b.n	80014f4 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	68ba      	ldr	r2, [r7, #8]
 80014d2:	18d3      	adds	r3, r2, r3
 80014d4:	881b      	ldrh	r3, [r3, #0]
 80014d6:	041a      	lsls	r2, r3, #16
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	3302      	adds	r3, #2
 80014de:	68b9      	ldr	r1, [r7, #8]
 80014e0:	18cb      	adds	r3, r1, r3
 80014e2:	881b      	ldrh	r3, [r3, #0]
 80014e4:	0019      	movs	r1, r3
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	430a      	orrs	r2, r1
 80014ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	3301      	adds	r3, #1
 80014f2:	617b      	str	r3, [r7, #20]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	085b      	lsrs	r3, r3, #1
 80014f8:	697a      	ldr	r2, [r7, #20]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d3e6      	bcc.n	80014cc <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2201      	movs	r2, #1
 8001502:	4013      	ands	r3, r2
 8001504:	d009      	beq.n	800151a <CRC_Handle_16+0x60>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	68ba      	ldr	r2, [r7, #8]
 8001512:	18d3      	adds	r3, r2, r3
 8001514:	881a      	ldrh	r2, [r3, #0]
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	681b      	ldr	r3, [r3, #0]
}
 8001520:	0018      	movs	r0, r3
 8001522:	46bd      	mov	sp, r7
 8001524:	b006      	add	sp, #24
 8001526:	bd80      	pop	{r7, pc}

08001528 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001530:	210f      	movs	r1, #15
 8001532:	187b      	adds	r3, r7, r1
 8001534:	2200      	movs	r2, #0
 8001536:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2221      	movs	r2, #33	@ 0x21
 800153c:	5c9b      	ldrb	r3, [r3, r2]
 800153e:	b2db      	uxtb	r3, r3
 8001540:	2b02      	cmp	r3, #2
 8001542:	d006      	beq.n	8001552 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2204      	movs	r2, #4
 8001548:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 800154a:	187b      	adds	r3, r7, r1
 800154c:	2201      	movs	r2, #1
 800154e:	701a      	strb	r2, [r3, #0]
 8001550:	e028      	b.n	80015a4 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	210e      	movs	r1, #14
 800155e:	438a      	bics	r2, r1
 8001560:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2101      	movs	r1, #1
 800156e:	438a      	bics	r2, r1
 8001570:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800157a:	2101      	movs	r1, #1
 800157c:	4091      	lsls	r1, r2
 800157e:	000a      	movs	r2, r1
 8001580:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2221      	movs	r2, #33	@ 0x21
 8001586:	2101      	movs	r1, #1
 8001588:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2220      	movs	r2, #32
 800158e:	2100      	movs	r1, #0
 8001590:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001596:	2b00      	cmp	r3, #0
 8001598:	d004      	beq.n	80015a4 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	0010      	movs	r0, r2
 80015a2:	4798      	blx	r3
    }
  }
  return status;
 80015a4:	230f      	movs	r3, #15
 80015a6:	18fb      	adds	r3, r7, r3
 80015a8:	781b      	ldrb	r3, [r3, #0]
}
 80015aa:	0018      	movs	r0, r3
 80015ac:	46bd      	mov	sp, r7
 80015ae:	b004      	add	sp, #16
 80015b0:	bd80      	pop	{r7, pc}
	...

080015b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b086      	sub	sp, #24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015be:	2300      	movs	r3, #0
 80015c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015c2:	e149      	b.n	8001858 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2101      	movs	r1, #1
 80015ca:	697a      	ldr	r2, [r7, #20]
 80015cc:	4091      	lsls	r1, r2
 80015ce:	000a      	movs	r2, r1
 80015d0:	4013      	ands	r3, r2
 80015d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d100      	bne.n	80015dc <HAL_GPIO_Init+0x28>
 80015da:	e13a      	b.n	8001852 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	2203      	movs	r2, #3
 80015e2:	4013      	ands	r3, r2
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d005      	beq.n	80015f4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	2203      	movs	r2, #3
 80015ee:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d130      	bne.n	8001656 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	2203      	movs	r2, #3
 8001600:	409a      	lsls	r2, r3
 8001602:	0013      	movs	r3, r2
 8001604:	43da      	mvns	r2, r3
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	4013      	ands	r3, r2
 800160a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	68da      	ldr	r2, [r3, #12]
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	409a      	lsls	r2, r3
 8001616:	0013      	movs	r3, r2
 8001618:	693a      	ldr	r2, [r7, #16]
 800161a:	4313      	orrs	r3, r2
 800161c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	693a      	ldr	r2, [r7, #16]
 8001622:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800162a:	2201      	movs	r2, #1
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	409a      	lsls	r2, r3
 8001630:	0013      	movs	r3, r2
 8001632:	43da      	mvns	r2, r3
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	4013      	ands	r3, r2
 8001638:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	091b      	lsrs	r3, r3, #4
 8001640:	2201      	movs	r2, #1
 8001642:	401a      	ands	r2, r3
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	409a      	lsls	r2, r3
 8001648:	0013      	movs	r3, r2
 800164a:	693a      	ldr	r2, [r7, #16]
 800164c:	4313      	orrs	r3, r2
 800164e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	2203      	movs	r2, #3
 800165c:	4013      	ands	r3, r2
 800165e:	2b03      	cmp	r3, #3
 8001660:	d017      	beq.n	8001692 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	68db      	ldr	r3, [r3, #12]
 8001666:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	2203      	movs	r2, #3
 800166e:	409a      	lsls	r2, r3
 8001670:	0013      	movs	r3, r2
 8001672:	43da      	mvns	r2, r3
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	4013      	ands	r3, r2
 8001678:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	689a      	ldr	r2, [r3, #8]
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	409a      	lsls	r2, r3
 8001684:	0013      	movs	r3, r2
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	4313      	orrs	r3, r2
 800168a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	693a      	ldr	r2, [r7, #16]
 8001690:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	2203      	movs	r2, #3
 8001698:	4013      	ands	r3, r2
 800169a:	2b02      	cmp	r3, #2
 800169c:	d123      	bne.n	80016e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	08da      	lsrs	r2, r3, #3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	3208      	adds	r2, #8
 80016a6:	0092      	lsls	r2, r2, #2
 80016a8:	58d3      	ldr	r3, [r2, r3]
 80016aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	2207      	movs	r2, #7
 80016b0:	4013      	ands	r3, r2
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	220f      	movs	r2, #15
 80016b6:	409a      	lsls	r2, r3
 80016b8:	0013      	movs	r3, r2
 80016ba:	43da      	mvns	r2, r3
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	4013      	ands	r3, r2
 80016c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	691a      	ldr	r2, [r3, #16]
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	2107      	movs	r1, #7
 80016ca:	400b      	ands	r3, r1
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	409a      	lsls	r2, r3
 80016d0:	0013      	movs	r3, r2
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	08da      	lsrs	r2, r3, #3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	3208      	adds	r2, #8
 80016e0:	0092      	lsls	r2, r2, #2
 80016e2:	6939      	ldr	r1, [r7, #16]
 80016e4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	2203      	movs	r2, #3
 80016f2:	409a      	lsls	r2, r3
 80016f4:	0013      	movs	r3, r2
 80016f6:	43da      	mvns	r2, r3
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	4013      	ands	r3, r2
 80016fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	2203      	movs	r2, #3
 8001704:	401a      	ands	r2, r3
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	409a      	lsls	r2, r3
 800170c:	0013      	movs	r3, r2
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	4313      	orrs	r3, r2
 8001712:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	693a      	ldr	r2, [r7, #16]
 8001718:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685a      	ldr	r2, [r3, #4]
 800171e:	23c0      	movs	r3, #192	@ 0xc0
 8001720:	029b      	lsls	r3, r3, #10
 8001722:	4013      	ands	r3, r2
 8001724:	d100      	bne.n	8001728 <HAL_GPIO_Init+0x174>
 8001726:	e094      	b.n	8001852 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001728:	4b51      	ldr	r3, [pc, #324]	@ (8001870 <HAL_GPIO_Init+0x2bc>)
 800172a:	699a      	ldr	r2, [r3, #24]
 800172c:	4b50      	ldr	r3, [pc, #320]	@ (8001870 <HAL_GPIO_Init+0x2bc>)
 800172e:	2101      	movs	r1, #1
 8001730:	430a      	orrs	r2, r1
 8001732:	619a      	str	r2, [r3, #24]
 8001734:	4b4e      	ldr	r3, [pc, #312]	@ (8001870 <HAL_GPIO_Init+0x2bc>)
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	2201      	movs	r2, #1
 800173a:	4013      	ands	r3, r2
 800173c:	60bb      	str	r3, [r7, #8]
 800173e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001740:	4a4c      	ldr	r2, [pc, #304]	@ (8001874 <HAL_GPIO_Init+0x2c0>)
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	089b      	lsrs	r3, r3, #2
 8001746:	3302      	adds	r3, #2
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	589b      	ldr	r3, [r3, r2]
 800174c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	2203      	movs	r2, #3
 8001752:	4013      	ands	r3, r2
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	220f      	movs	r2, #15
 8001758:	409a      	lsls	r2, r3
 800175a:	0013      	movs	r3, r2
 800175c:	43da      	mvns	r2, r3
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	4013      	ands	r3, r2
 8001762:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	2390      	movs	r3, #144	@ 0x90
 8001768:	05db      	lsls	r3, r3, #23
 800176a:	429a      	cmp	r2, r3
 800176c:	d00d      	beq.n	800178a <HAL_GPIO_Init+0x1d6>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a41      	ldr	r2, [pc, #260]	@ (8001878 <HAL_GPIO_Init+0x2c4>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d007      	beq.n	8001786 <HAL_GPIO_Init+0x1d2>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a40      	ldr	r2, [pc, #256]	@ (800187c <HAL_GPIO_Init+0x2c8>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d101      	bne.n	8001782 <HAL_GPIO_Init+0x1ce>
 800177e:	2302      	movs	r3, #2
 8001780:	e004      	b.n	800178c <HAL_GPIO_Init+0x1d8>
 8001782:	2305      	movs	r3, #5
 8001784:	e002      	b.n	800178c <HAL_GPIO_Init+0x1d8>
 8001786:	2301      	movs	r3, #1
 8001788:	e000      	b.n	800178c <HAL_GPIO_Init+0x1d8>
 800178a:	2300      	movs	r3, #0
 800178c:	697a      	ldr	r2, [r7, #20]
 800178e:	2103      	movs	r1, #3
 8001790:	400a      	ands	r2, r1
 8001792:	0092      	lsls	r2, r2, #2
 8001794:	4093      	lsls	r3, r2
 8001796:	693a      	ldr	r2, [r7, #16]
 8001798:	4313      	orrs	r3, r2
 800179a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800179c:	4935      	ldr	r1, [pc, #212]	@ (8001874 <HAL_GPIO_Init+0x2c0>)
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	089b      	lsrs	r3, r3, #2
 80017a2:	3302      	adds	r3, #2
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017aa:	4b35      	ldr	r3, [pc, #212]	@ (8001880 <HAL_GPIO_Init+0x2cc>)
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	43da      	mvns	r2, r3
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	4013      	ands	r3, r2
 80017b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685a      	ldr	r2, [r3, #4]
 80017be:	2380      	movs	r3, #128	@ 0x80
 80017c0:	035b      	lsls	r3, r3, #13
 80017c2:	4013      	ands	r3, r2
 80017c4:	d003      	beq.n	80017ce <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80017ce:	4b2c      	ldr	r3, [pc, #176]	@ (8001880 <HAL_GPIO_Init+0x2cc>)
 80017d0:	693a      	ldr	r2, [r7, #16]
 80017d2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80017d4:	4b2a      	ldr	r3, [pc, #168]	@ (8001880 <HAL_GPIO_Init+0x2cc>)
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	43da      	mvns	r2, r3
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	4013      	ands	r3, r2
 80017e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685a      	ldr	r2, [r3, #4]
 80017e8:	2380      	movs	r3, #128	@ 0x80
 80017ea:	039b      	lsls	r3, r3, #14
 80017ec:	4013      	ands	r3, r2
 80017ee:	d003      	beq.n	80017f8 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80017f0:	693a      	ldr	r2, [r7, #16]
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80017f8:	4b21      	ldr	r3, [pc, #132]	@ (8001880 <HAL_GPIO_Init+0x2cc>)
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80017fe:	4b20      	ldr	r3, [pc, #128]	@ (8001880 <HAL_GPIO_Init+0x2cc>)
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	43da      	mvns	r2, r3
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	4013      	ands	r3, r2
 800180c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685a      	ldr	r2, [r3, #4]
 8001812:	2380      	movs	r3, #128	@ 0x80
 8001814:	029b      	lsls	r3, r3, #10
 8001816:	4013      	ands	r3, r2
 8001818:	d003      	beq.n	8001822 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800181a:	693a      	ldr	r2, [r7, #16]
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	4313      	orrs	r3, r2
 8001820:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001822:	4b17      	ldr	r3, [pc, #92]	@ (8001880 <HAL_GPIO_Init+0x2cc>)
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001828:	4b15      	ldr	r3, [pc, #84]	@ (8001880 <HAL_GPIO_Init+0x2cc>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	43da      	mvns	r2, r3
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	4013      	ands	r3, r2
 8001836:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685a      	ldr	r2, [r3, #4]
 800183c:	2380      	movs	r3, #128	@ 0x80
 800183e:	025b      	lsls	r3, r3, #9
 8001840:	4013      	ands	r3, r2
 8001842:	d003      	beq.n	800184c <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8001844:	693a      	ldr	r2, [r7, #16]
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	4313      	orrs	r3, r2
 800184a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800184c:	4b0c      	ldr	r3, [pc, #48]	@ (8001880 <HAL_GPIO_Init+0x2cc>)
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	3301      	adds	r3, #1
 8001856:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	40da      	lsrs	r2, r3
 8001860:	1e13      	subs	r3, r2, #0
 8001862:	d000      	beq.n	8001866 <HAL_GPIO_Init+0x2b2>
 8001864:	e6ae      	b.n	80015c4 <HAL_GPIO_Init+0x10>
  } 
}
 8001866:	46c0      	nop			@ (mov r8, r8)
 8001868:	46c0      	nop			@ (mov r8, r8)
 800186a:	46bd      	mov	sp, r7
 800186c:	b006      	add	sp, #24
 800186e:	bd80      	pop	{r7, pc}
 8001870:	40021000 	.word	0x40021000
 8001874:	40010000 	.word	0x40010000
 8001878:	48000400 	.word	0x48000400
 800187c:	48000800 	.word	0x48000800
 8001880:	40010400 	.word	0x40010400

08001884 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	0008      	movs	r0, r1
 800188e:	0011      	movs	r1, r2
 8001890:	1cbb      	adds	r3, r7, #2
 8001892:	1c02      	adds	r2, r0, #0
 8001894:	801a      	strh	r2, [r3, #0]
 8001896:	1c7b      	adds	r3, r7, #1
 8001898:	1c0a      	adds	r2, r1, #0
 800189a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800189c:	1c7b      	adds	r3, r7, #1
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d004      	beq.n	80018ae <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018a4:	1cbb      	adds	r3, r7, #2
 80018a6:	881a      	ldrh	r2, [r3, #0]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018ac:	e003      	b.n	80018b6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018ae:	1cbb      	adds	r3, r7, #2
 80018b0:	881a      	ldrh	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80018b6:	46c0      	nop			@ (mov r8, r8)
 80018b8:	46bd      	mov	sp, r7
 80018ba:	b002      	add	sp, #8
 80018bc:	bd80      	pop	{r7, pc}
	...

080018c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b088      	sub	sp, #32
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d102      	bne.n	80018d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	f000 fb76 	bl	8001fc0 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2201      	movs	r2, #1
 80018da:	4013      	ands	r3, r2
 80018dc:	d100      	bne.n	80018e0 <HAL_RCC_OscConfig+0x20>
 80018de:	e08e      	b.n	80019fe <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80018e0:	4bc5      	ldr	r3, [pc, #788]	@ (8001bf8 <HAL_RCC_OscConfig+0x338>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	220c      	movs	r2, #12
 80018e6:	4013      	ands	r3, r2
 80018e8:	2b04      	cmp	r3, #4
 80018ea:	d00e      	beq.n	800190a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018ec:	4bc2      	ldr	r3, [pc, #776]	@ (8001bf8 <HAL_RCC_OscConfig+0x338>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	220c      	movs	r2, #12
 80018f2:	4013      	ands	r3, r2
 80018f4:	2b08      	cmp	r3, #8
 80018f6:	d117      	bne.n	8001928 <HAL_RCC_OscConfig+0x68>
 80018f8:	4bbf      	ldr	r3, [pc, #764]	@ (8001bf8 <HAL_RCC_OscConfig+0x338>)
 80018fa:	685a      	ldr	r2, [r3, #4]
 80018fc:	23c0      	movs	r3, #192	@ 0xc0
 80018fe:	025b      	lsls	r3, r3, #9
 8001900:	401a      	ands	r2, r3
 8001902:	2380      	movs	r3, #128	@ 0x80
 8001904:	025b      	lsls	r3, r3, #9
 8001906:	429a      	cmp	r2, r3
 8001908:	d10e      	bne.n	8001928 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800190a:	4bbb      	ldr	r3, [pc, #748]	@ (8001bf8 <HAL_RCC_OscConfig+0x338>)
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	2380      	movs	r3, #128	@ 0x80
 8001910:	029b      	lsls	r3, r3, #10
 8001912:	4013      	ands	r3, r2
 8001914:	d100      	bne.n	8001918 <HAL_RCC_OscConfig+0x58>
 8001916:	e071      	b.n	80019fc <HAL_RCC_OscConfig+0x13c>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d000      	beq.n	8001922 <HAL_RCC_OscConfig+0x62>
 8001920:	e06c      	b.n	80019fc <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	f000 fb4c 	bl	8001fc0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	2b01      	cmp	r3, #1
 800192e:	d107      	bne.n	8001940 <HAL_RCC_OscConfig+0x80>
 8001930:	4bb1      	ldr	r3, [pc, #708]	@ (8001bf8 <HAL_RCC_OscConfig+0x338>)
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	4bb0      	ldr	r3, [pc, #704]	@ (8001bf8 <HAL_RCC_OscConfig+0x338>)
 8001936:	2180      	movs	r1, #128	@ 0x80
 8001938:	0249      	lsls	r1, r1, #9
 800193a:	430a      	orrs	r2, r1
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	e02f      	b.n	80019a0 <HAL_RCC_OscConfig+0xe0>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d10c      	bne.n	8001962 <HAL_RCC_OscConfig+0xa2>
 8001948:	4bab      	ldr	r3, [pc, #684]	@ (8001bf8 <HAL_RCC_OscConfig+0x338>)
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	4baa      	ldr	r3, [pc, #680]	@ (8001bf8 <HAL_RCC_OscConfig+0x338>)
 800194e:	49ab      	ldr	r1, [pc, #684]	@ (8001bfc <HAL_RCC_OscConfig+0x33c>)
 8001950:	400a      	ands	r2, r1
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	4ba8      	ldr	r3, [pc, #672]	@ (8001bf8 <HAL_RCC_OscConfig+0x338>)
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	4ba7      	ldr	r3, [pc, #668]	@ (8001bf8 <HAL_RCC_OscConfig+0x338>)
 800195a:	49a9      	ldr	r1, [pc, #676]	@ (8001c00 <HAL_RCC_OscConfig+0x340>)
 800195c:	400a      	ands	r2, r1
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	e01e      	b.n	80019a0 <HAL_RCC_OscConfig+0xe0>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	2b05      	cmp	r3, #5
 8001968:	d10e      	bne.n	8001988 <HAL_RCC_OscConfig+0xc8>
 800196a:	4ba3      	ldr	r3, [pc, #652]	@ (8001bf8 <HAL_RCC_OscConfig+0x338>)
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	4ba2      	ldr	r3, [pc, #648]	@ (8001bf8 <HAL_RCC_OscConfig+0x338>)
 8001970:	2180      	movs	r1, #128	@ 0x80
 8001972:	02c9      	lsls	r1, r1, #11
 8001974:	430a      	orrs	r2, r1
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	4b9f      	ldr	r3, [pc, #636]	@ (8001bf8 <HAL_RCC_OscConfig+0x338>)
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	4b9e      	ldr	r3, [pc, #632]	@ (8001bf8 <HAL_RCC_OscConfig+0x338>)
 800197e:	2180      	movs	r1, #128	@ 0x80
 8001980:	0249      	lsls	r1, r1, #9
 8001982:	430a      	orrs	r2, r1
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	e00b      	b.n	80019a0 <HAL_RCC_OscConfig+0xe0>
 8001988:	4b9b      	ldr	r3, [pc, #620]	@ (8001bf8 <HAL_RCC_OscConfig+0x338>)
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	4b9a      	ldr	r3, [pc, #616]	@ (8001bf8 <HAL_RCC_OscConfig+0x338>)
 800198e:	499b      	ldr	r1, [pc, #620]	@ (8001bfc <HAL_RCC_OscConfig+0x33c>)
 8001990:	400a      	ands	r2, r1
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	4b98      	ldr	r3, [pc, #608]	@ (8001bf8 <HAL_RCC_OscConfig+0x338>)
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	4b97      	ldr	r3, [pc, #604]	@ (8001bf8 <HAL_RCC_OscConfig+0x338>)
 800199a:	4999      	ldr	r1, [pc, #612]	@ (8001c00 <HAL_RCC_OscConfig+0x340>)
 800199c:	400a      	ands	r2, r1
 800199e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d014      	beq.n	80019d2 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a8:	f7ff fb78 	bl	800109c <HAL_GetTick>
 80019ac:	0003      	movs	r3, r0
 80019ae:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019b0:	e008      	b.n	80019c4 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019b2:	f7ff fb73 	bl	800109c <HAL_GetTick>
 80019b6:	0002      	movs	r2, r0
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	2b64      	cmp	r3, #100	@ 0x64
 80019be:	d901      	bls.n	80019c4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80019c0:	2303      	movs	r3, #3
 80019c2:	e2fd      	b.n	8001fc0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019c4:	4b8c      	ldr	r3, [pc, #560]	@ (8001bf8 <HAL_RCC_OscConfig+0x338>)
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	2380      	movs	r3, #128	@ 0x80
 80019ca:	029b      	lsls	r3, r3, #10
 80019cc:	4013      	ands	r3, r2
 80019ce:	d0f0      	beq.n	80019b2 <HAL_RCC_OscConfig+0xf2>
 80019d0:	e015      	b.n	80019fe <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d2:	f7ff fb63 	bl	800109c <HAL_GetTick>
 80019d6:	0003      	movs	r3, r0
 80019d8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019da:	e008      	b.n	80019ee <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019dc:	f7ff fb5e 	bl	800109c <HAL_GetTick>
 80019e0:	0002      	movs	r2, r0
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b64      	cmp	r3, #100	@ 0x64
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e2e8      	b.n	8001fc0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ee:	4b82      	ldr	r3, [pc, #520]	@ (8001bf8 <HAL_RCC_OscConfig+0x338>)
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	2380      	movs	r3, #128	@ 0x80
 80019f4:	029b      	lsls	r3, r3, #10
 80019f6:	4013      	ands	r3, r2
 80019f8:	d1f0      	bne.n	80019dc <HAL_RCC_OscConfig+0x11c>
 80019fa:	e000      	b.n	80019fe <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019fc:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2202      	movs	r2, #2
 8001a04:	4013      	ands	r3, r2
 8001a06:	d100      	bne.n	8001a0a <HAL_RCC_OscConfig+0x14a>
 8001a08:	e06c      	b.n	8001ae4 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001a0a:	4b7b      	ldr	r3, [pc, #492]	@ (8001bf8 <HAL_RCC_OscConfig+0x338>)
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	220c      	movs	r2, #12
 8001a10:	4013      	ands	r3, r2
 8001a12:	d00e      	beq.n	8001a32 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001a14:	4b78      	ldr	r3, [pc, #480]	@ (8001bf8 <HAL_RCC_OscConfig+0x338>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	220c      	movs	r2, #12
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	2b08      	cmp	r3, #8
 8001a1e:	d11f      	bne.n	8001a60 <HAL_RCC_OscConfig+0x1a0>
 8001a20:	4b75      	ldr	r3, [pc, #468]	@ (8001bf8 <HAL_RCC_OscConfig+0x338>)
 8001a22:	685a      	ldr	r2, [r3, #4]
 8001a24:	23c0      	movs	r3, #192	@ 0xc0
 8001a26:	025b      	lsls	r3, r3, #9
 8001a28:	401a      	ands	r2, r3
 8001a2a:	2380      	movs	r3, #128	@ 0x80
 8001a2c:	021b      	lsls	r3, r3, #8
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d116      	bne.n	8001a60 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a32:	4b71      	ldr	r3, [pc, #452]	@ (8001bf8 <HAL_RCC_OscConfig+0x338>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2202      	movs	r2, #2
 8001a38:	4013      	ands	r3, r2
 8001a3a:	d005      	beq.n	8001a48 <HAL_RCC_OscConfig+0x188>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d001      	beq.n	8001a48 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e2bb      	b.n	8001fc0 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a48:	4b6b      	ldr	r3, [pc, #428]	@ (8001bf8 <HAL_RCC_OscConfig+0x338>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	22f8      	movs	r2, #248	@ 0xf8
 8001a4e:	4393      	bics	r3, r2
 8001a50:	0019      	movs	r1, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	691b      	ldr	r3, [r3, #16]
 8001a56:	00da      	lsls	r2, r3, #3
 8001a58:	4b67      	ldr	r3, [pc, #412]	@ (8001bf8 <HAL_RCC_OscConfig+0x338>)
 8001a5a:	430a      	orrs	r2, r1
 8001a5c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a5e:	e041      	b.n	8001ae4 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d024      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a68:	4b63      	ldr	r3, [pc, #396]	@ (8001bf8 <HAL_RCC_OscConfig+0x338>)
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	4b62      	ldr	r3, [pc, #392]	@ (8001bf8 <HAL_RCC_OscConfig+0x338>)
 8001a6e:	2101      	movs	r1, #1
 8001a70:	430a      	orrs	r2, r1
 8001a72:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a74:	f7ff fb12 	bl	800109c <HAL_GetTick>
 8001a78:	0003      	movs	r3, r0
 8001a7a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a7c:	e008      	b.n	8001a90 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a7e:	f7ff fb0d 	bl	800109c <HAL_GetTick>
 8001a82:	0002      	movs	r2, r0
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e297      	b.n	8001fc0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a90:	4b59      	ldr	r3, [pc, #356]	@ (8001bf8 <HAL_RCC_OscConfig+0x338>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2202      	movs	r2, #2
 8001a96:	4013      	ands	r3, r2
 8001a98:	d0f1      	beq.n	8001a7e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a9a:	4b57      	ldr	r3, [pc, #348]	@ (8001bf8 <HAL_RCC_OscConfig+0x338>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	22f8      	movs	r2, #248	@ 0xf8
 8001aa0:	4393      	bics	r3, r2
 8001aa2:	0019      	movs	r1, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	691b      	ldr	r3, [r3, #16]
 8001aa8:	00da      	lsls	r2, r3, #3
 8001aaa:	4b53      	ldr	r3, [pc, #332]	@ (8001bf8 <HAL_RCC_OscConfig+0x338>)
 8001aac:	430a      	orrs	r2, r1
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	e018      	b.n	8001ae4 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ab2:	4b51      	ldr	r3, [pc, #324]	@ (8001bf8 <HAL_RCC_OscConfig+0x338>)
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	4b50      	ldr	r3, [pc, #320]	@ (8001bf8 <HAL_RCC_OscConfig+0x338>)
 8001ab8:	2101      	movs	r1, #1
 8001aba:	438a      	bics	r2, r1
 8001abc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001abe:	f7ff faed 	bl	800109c <HAL_GetTick>
 8001ac2:	0003      	movs	r3, r0
 8001ac4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ac6:	e008      	b.n	8001ada <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ac8:	f7ff fae8 	bl	800109c <HAL_GetTick>
 8001acc:	0002      	movs	r2, r0
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e272      	b.n	8001fc0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ada:	4b47      	ldr	r3, [pc, #284]	@ (8001bf8 <HAL_RCC_OscConfig+0x338>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2202      	movs	r2, #2
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	d1f1      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2208      	movs	r2, #8
 8001aea:	4013      	ands	r3, r2
 8001aec:	d036      	beq.n	8001b5c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	69db      	ldr	r3, [r3, #28]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d019      	beq.n	8001b2a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001af6:	4b40      	ldr	r3, [pc, #256]	@ (8001bf8 <HAL_RCC_OscConfig+0x338>)
 8001af8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001afa:	4b3f      	ldr	r3, [pc, #252]	@ (8001bf8 <HAL_RCC_OscConfig+0x338>)
 8001afc:	2101      	movs	r1, #1
 8001afe:	430a      	orrs	r2, r1
 8001b00:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b02:	f7ff facb 	bl	800109c <HAL_GetTick>
 8001b06:	0003      	movs	r3, r0
 8001b08:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b0a:	e008      	b.n	8001b1e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b0c:	f7ff fac6 	bl	800109c <HAL_GetTick>
 8001b10:	0002      	movs	r2, r0
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e250      	b.n	8001fc0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b1e:	4b36      	ldr	r3, [pc, #216]	@ (8001bf8 <HAL_RCC_OscConfig+0x338>)
 8001b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b22:	2202      	movs	r2, #2
 8001b24:	4013      	ands	r3, r2
 8001b26:	d0f1      	beq.n	8001b0c <HAL_RCC_OscConfig+0x24c>
 8001b28:	e018      	b.n	8001b5c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b2a:	4b33      	ldr	r3, [pc, #204]	@ (8001bf8 <HAL_RCC_OscConfig+0x338>)
 8001b2c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b2e:	4b32      	ldr	r3, [pc, #200]	@ (8001bf8 <HAL_RCC_OscConfig+0x338>)
 8001b30:	2101      	movs	r1, #1
 8001b32:	438a      	bics	r2, r1
 8001b34:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b36:	f7ff fab1 	bl	800109c <HAL_GetTick>
 8001b3a:	0003      	movs	r3, r0
 8001b3c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b3e:	e008      	b.n	8001b52 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b40:	f7ff faac 	bl	800109c <HAL_GetTick>
 8001b44:	0002      	movs	r2, r0
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e236      	b.n	8001fc0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b52:	4b29      	ldr	r3, [pc, #164]	@ (8001bf8 <HAL_RCC_OscConfig+0x338>)
 8001b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b56:	2202      	movs	r2, #2
 8001b58:	4013      	ands	r3, r2
 8001b5a:	d1f1      	bne.n	8001b40 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2204      	movs	r2, #4
 8001b62:	4013      	ands	r3, r2
 8001b64:	d100      	bne.n	8001b68 <HAL_RCC_OscConfig+0x2a8>
 8001b66:	e0b5      	b.n	8001cd4 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b68:	201f      	movs	r0, #31
 8001b6a:	183b      	adds	r3, r7, r0
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b70:	4b21      	ldr	r3, [pc, #132]	@ (8001bf8 <HAL_RCC_OscConfig+0x338>)
 8001b72:	69da      	ldr	r2, [r3, #28]
 8001b74:	2380      	movs	r3, #128	@ 0x80
 8001b76:	055b      	lsls	r3, r3, #21
 8001b78:	4013      	ands	r3, r2
 8001b7a:	d110      	bne.n	8001b9e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b7c:	4b1e      	ldr	r3, [pc, #120]	@ (8001bf8 <HAL_RCC_OscConfig+0x338>)
 8001b7e:	69da      	ldr	r2, [r3, #28]
 8001b80:	4b1d      	ldr	r3, [pc, #116]	@ (8001bf8 <HAL_RCC_OscConfig+0x338>)
 8001b82:	2180      	movs	r1, #128	@ 0x80
 8001b84:	0549      	lsls	r1, r1, #21
 8001b86:	430a      	orrs	r2, r1
 8001b88:	61da      	str	r2, [r3, #28]
 8001b8a:	4b1b      	ldr	r3, [pc, #108]	@ (8001bf8 <HAL_RCC_OscConfig+0x338>)
 8001b8c:	69da      	ldr	r2, [r3, #28]
 8001b8e:	2380      	movs	r3, #128	@ 0x80
 8001b90:	055b      	lsls	r3, r3, #21
 8001b92:	4013      	ands	r3, r2
 8001b94:	60fb      	str	r3, [r7, #12]
 8001b96:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001b98:	183b      	adds	r3, r7, r0
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b9e:	4b19      	ldr	r3, [pc, #100]	@ (8001c04 <HAL_RCC_OscConfig+0x344>)
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	2380      	movs	r3, #128	@ 0x80
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	d11a      	bne.n	8001be0 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001baa:	4b16      	ldr	r3, [pc, #88]	@ (8001c04 <HAL_RCC_OscConfig+0x344>)
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	4b15      	ldr	r3, [pc, #84]	@ (8001c04 <HAL_RCC_OscConfig+0x344>)
 8001bb0:	2180      	movs	r1, #128	@ 0x80
 8001bb2:	0049      	lsls	r1, r1, #1
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bb8:	f7ff fa70 	bl	800109c <HAL_GetTick>
 8001bbc:	0003      	movs	r3, r0
 8001bbe:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bc0:	e008      	b.n	8001bd4 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bc2:	f7ff fa6b 	bl	800109c <HAL_GetTick>
 8001bc6:	0002      	movs	r2, r0
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	2b64      	cmp	r3, #100	@ 0x64
 8001bce:	d901      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e1f5      	b.n	8001fc0 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bd4:	4b0b      	ldr	r3, [pc, #44]	@ (8001c04 <HAL_RCC_OscConfig+0x344>)
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	2380      	movs	r3, #128	@ 0x80
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	4013      	ands	r3, r2
 8001bde:	d0f0      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d10f      	bne.n	8001c08 <HAL_RCC_OscConfig+0x348>
 8001be8:	4b03      	ldr	r3, [pc, #12]	@ (8001bf8 <HAL_RCC_OscConfig+0x338>)
 8001bea:	6a1a      	ldr	r2, [r3, #32]
 8001bec:	4b02      	ldr	r3, [pc, #8]	@ (8001bf8 <HAL_RCC_OscConfig+0x338>)
 8001bee:	2101      	movs	r1, #1
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	621a      	str	r2, [r3, #32]
 8001bf4:	e036      	b.n	8001c64 <HAL_RCC_OscConfig+0x3a4>
 8001bf6:	46c0      	nop			@ (mov r8, r8)
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	fffeffff 	.word	0xfffeffff
 8001c00:	fffbffff 	.word	0xfffbffff
 8001c04:	40007000 	.word	0x40007000
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d10c      	bne.n	8001c2a <HAL_RCC_OscConfig+0x36a>
 8001c10:	4bca      	ldr	r3, [pc, #808]	@ (8001f3c <HAL_RCC_OscConfig+0x67c>)
 8001c12:	6a1a      	ldr	r2, [r3, #32]
 8001c14:	4bc9      	ldr	r3, [pc, #804]	@ (8001f3c <HAL_RCC_OscConfig+0x67c>)
 8001c16:	2101      	movs	r1, #1
 8001c18:	438a      	bics	r2, r1
 8001c1a:	621a      	str	r2, [r3, #32]
 8001c1c:	4bc7      	ldr	r3, [pc, #796]	@ (8001f3c <HAL_RCC_OscConfig+0x67c>)
 8001c1e:	6a1a      	ldr	r2, [r3, #32]
 8001c20:	4bc6      	ldr	r3, [pc, #792]	@ (8001f3c <HAL_RCC_OscConfig+0x67c>)
 8001c22:	2104      	movs	r1, #4
 8001c24:	438a      	bics	r2, r1
 8001c26:	621a      	str	r2, [r3, #32]
 8001c28:	e01c      	b.n	8001c64 <HAL_RCC_OscConfig+0x3a4>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	2b05      	cmp	r3, #5
 8001c30:	d10c      	bne.n	8001c4c <HAL_RCC_OscConfig+0x38c>
 8001c32:	4bc2      	ldr	r3, [pc, #776]	@ (8001f3c <HAL_RCC_OscConfig+0x67c>)
 8001c34:	6a1a      	ldr	r2, [r3, #32]
 8001c36:	4bc1      	ldr	r3, [pc, #772]	@ (8001f3c <HAL_RCC_OscConfig+0x67c>)
 8001c38:	2104      	movs	r1, #4
 8001c3a:	430a      	orrs	r2, r1
 8001c3c:	621a      	str	r2, [r3, #32]
 8001c3e:	4bbf      	ldr	r3, [pc, #764]	@ (8001f3c <HAL_RCC_OscConfig+0x67c>)
 8001c40:	6a1a      	ldr	r2, [r3, #32]
 8001c42:	4bbe      	ldr	r3, [pc, #760]	@ (8001f3c <HAL_RCC_OscConfig+0x67c>)
 8001c44:	2101      	movs	r1, #1
 8001c46:	430a      	orrs	r2, r1
 8001c48:	621a      	str	r2, [r3, #32]
 8001c4a:	e00b      	b.n	8001c64 <HAL_RCC_OscConfig+0x3a4>
 8001c4c:	4bbb      	ldr	r3, [pc, #748]	@ (8001f3c <HAL_RCC_OscConfig+0x67c>)
 8001c4e:	6a1a      	ldr	r2, [r3, #32]
 8001c50:	4bba      	ldr	r3, [pc, #744]	@ (8001f3c <HAL_RCC_OscConfig+0x67c>)
 8001c52:	2101      	movs	r1, #1
 8001c54:	438a      	bics	r2, r1
 8001c56:	621a      	str	r2, [r3, #32]
 8001c58:	4bb8      	ldr	r3, [pc, #736]	@ (8001f3c <HAL_RCC_OscConfig+0x67c>)
 8001c5a:	6a1a      	ldr	r2, [r3, #32]
 8001c5c:	4bb7      	ldr	r3, [pc, #732]	@ (8001f3c <HAL_RCC_OscConfig+0x67c>)
 8001c5e:	2104      	movs	r1, #4
 8001c60:	438a      	bics	r2, r1
 8001c62:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d014      	beq.n	8001c96 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c6c:	f7ff fa16 	bl	800109c <HAL_GetTick>
 8001c70:	0003      	movs	r3, r0
 8001c72:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c74:	e009      	b.n	8001c8a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c76:	f7ff fa11 	bl	800109c <HAL_GetTick>
 8001c7a:	0002      	movs	r2, r0
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	4aaf      	ldr	r2, [pc, #700]	@ (8001f40 <HAL_RCC_OscConfig+0x680>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e19a      	b.n	8001fc0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c8a:	4bac      	ldr	r3, [pc, #688]	@ (8001f3c <HAL_RCC_OscConfig+0x67c>)
 8001c8c:	6a1b      	ldr	r3, [r3, #32]
 8001c8e:	2202      	movs	r2, #2
 8001c90:	4013      	ands	r3, r2
 8001c92:	d0f0      	beq.n	8001c76 <HAL_RCC_OscConfig+0x3b6>
 8001c94:	e013      	b.n	8001cbe <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c96:	f7ff fa01 	bl	800109c <HAL_GetTick>
 8001c9a:	0003      	movs	r3, r0
 8001c9c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c9e:	e009      	b.n	8001cb4 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ca0:	f7ff f9fc 	bl	800109c <HAL_GetTick>
 8001ca4:	0002      	movs	r2, r0
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	4aa5      	ldr	r2, [pc, #660]	@ (8001f40 <HAL_RCC_OscConfig+0x680>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d901      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e185      	b.n	8001fc0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cb4:	4ba1      	ldr	r3, [pc, #644]	@ (8001f3c <HAL_RCC_OscConfig+0x67c>)
 8001cb6:	6a1b      	ldr	r3, [r3, #32]
 8001cb8:	2202      	movs	r2, #2
 8001cba:	4013      	ands	r3, r2
 8001cbc:	d1f0      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001cbe:	231f      	movs	r3, #31
 8001cc0:	18fb      	adds	r3, r7, r3
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d105      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cc8:	4b9c      	ldr	r3, [pc, #624]	@ (8001f3c <HAL_RCC_OscConfig+0x67c>)
 8001cca:	69da      	ldr	r2, [r3, #28]
 8001ccc:	4b9b      	ldr	r3, [pc, #620]	@ (8001f3c <HAL_RCC_OscConfig+0x67c>)
 8001cce:	499d      	ldr	r1, [pc, #628]	@ (8001f44 <HAL_RCC_OscConfig+0x684>)
 8001cd0:	400a      	ands	r2, r1
 8001cd2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2210      	movs	r2, #16
 8001cda:	4013      	ands	r3, r2
 8001cdc:	d063      	beq.n	8001da6 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	695b      	ldr	r3, [r3, #20]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d12a      	bne.n	8001d3c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001ce6:	4b95      	ldr	r3, [pc, #596]	@ (8001f3c <HAL_RCC_OscConfig+0x67c>)
 8001ce8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001cea:	4b94      	ldr	r3, [pc, #592]	@ (8001f3c <HAL_RCC_OscConfig+0x67c>)
 8001cec:	2104      	movs	r1, #4
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001cf2:	4b92      	ldr	r3, [pc, #584]	@ (8001f3c <HAL_RCC_OscConfig+0x67c>)
 8001cf4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001cf6:	4b91      	ldr	r3, [pc, #580]	@ (8001f3c <HAL_RCC_OscConfig+0x67c>)
 8001cf8:	2101      	movs	r1, #1
 8001cfa:	430a      	orrs	r2, r1
 8001cfc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cfe:	f7ff f9cd 	bl	800109c <HAL_GetTick>
 8001d02:	0003      	movs	r3, r0
 8001d04:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001d06:	e008      	b.n	8001d1a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001d08:	f7ff f9c8 	bl	800109c <HAL_GetTick>
 8001d0c:	0002      	movs	r2, r0
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e152      	b.n	8001fc0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001d1a:	4b88      	ldr	r3, [pc, #544]	@ (8001f3c <HAL_RCC_OscConfig+0x67c>)
 8001d1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d1e:	2202      	movs	r2, #2
 8001d20:	4013      	ands	r3, r2
 8001d22:	d0f1      	beq.n	8001d08 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001d24:	4b85      	ldr	r3, [pc, #532]	@ (8001f3c <HAL_RCC_OscConfig+0x67c>)
 8001d26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d28:	22f8      	movs	r2, #248	@ 0xf8
 8001d2a:	4393      	bics	r3, r2
 8001d2c:	0019      	movs	r1, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	00da      	lsls	r2, r3, #3
 8001d34:	4b81      	ldr	r3, [pc, #516]	@ (8001f3c <HAL_RCC_OscConfig+0x67c>)
 8001d36:	430a      	orrs	r2, r1
 8001d38:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d3a:	e034      	b.n	8001da6 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	695b      	ldr	r3, [r3, #20]
 8001d40:	3305      	adds	r3, #5
 8001d42:	d111      	bne.n	8001d68 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001d44:	4b7d      	ldr	r3, [pc, #500]	@ (8001f3c <HAL_RCC_OscConfig+0x67c>)
 8001d46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d48:	4b7c      	ldr	r3, [pc, #496]	@ (8001f3c <HAL_RCC_OscConfig+0x67c>)
 8001d4a:	2104      	movs	r1, #4
 8001d4c:	438a      	bics	r2, r1
 8001d4e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001d50:	4b7a      	ldr	r3, [pc, #488]	@ (8001f3c <HAL_RCC_OscConfig+0x67c>)
 8001d52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d54:	22f8      	movs	r2, #248	@ 0xf8
 8001d56:	4393      	bics	r3, r2
 8001d58:	0019      	movs	r1, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	699b      	ldr	r3, [r3, #24]
 8001d5e:	00da      	lsls	r2, r3, #3
 8001d60:	4b76      	ldr	r3, [pc, #472]	@ (8001f3c <HAL_RCC_OscConfig+0x67c>)
 8001d62:	430a      	orrs	r2, r1
 8001d64:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d66:	e01e      	b.n	8001da6 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001d68:	4b74      	ldr	r3, [pc, #464]	@ (8001f3c <HAL_RCC_OscConfig+0x67c>)
 8001d6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d6c:	4b73      	ldr	r3, [pc, #460]	@ (8001f3c <HAL_RCC_OscConfig+0x67c>)
 8001d6e:	2104      	movs	r1, #4
 8001d70:	430a      	orrs	r2, r1
 8001d72:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001d74:	4b71      	ldr	r3, [pc, #452]	@ (8001f3c <HAL_RCC_OscConfig+0x67c>)
 8001d76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d78:	4b70      	ldr	r3, [pc, #448]	@ (8001f3c <HAL_RCC_OscConfig+0x67c>)
 8001d7a:	2101      	movs	r1, #1
 8001d7c:	438a      	bics	r2, r1
 8001d7e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d80:	f7ff f98c 	bl	800109c <HAL_GetTick>
 8001d84:	0003      	movs	r3, r0
 8001d86:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001d88:	e008      	b.n	8001d9c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001d8a:	f7ff f987 	bl	800109c <HAL_GetTick>
 8001d8e:	0002      	movs	r2, r0
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d901      	bls.n	8001d9c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	e111      	b.n	8001fc0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001d9c:	4b67      	ldr	r3, [pc, #412]	@ (8001f3c <HAL_RCC_OscConfig+0x67c>)
 8001d9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001da0:	2202      	movs	r2, #2
 8001da2:	4013      	ands	r3, r2
 8001da4:	d1f1      	bne.n	8001d8a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2220      	movs	r2, #32
 8001dac:	4013      	ands	r3, r2
 8001dae:	d05c      	beq.n	8001e6a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001db0:	4b62      	ldr	r3, [pc, #392]	@ (8001f3c <HAL_RCC_OscConfig+0x67c>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	220c      	movs	r2, #12
 8001db6:	4013      	ands	r3, r2
 8001db8:	2b0c      	cmp	r3, #12
 8001dba:	d00e      	beq.n	8001dda <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001dbc:	4b5f      	ldr	r3, [pc, #380]	@ (8001f3c <HAL_RCC_OscConfig+0x67c>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	220c      	movs	r2, #12
 8001dc2:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001dc4:	2b08      	cmp	r3, #8
 8001dc6:	d114      	bne.n	8001df2 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001dc8:	4b5c      	ldr	r3, [pc, #368]	@ (8001f3c <HAL_RCC_OscConfig+0x67c>)
 8001dca:	685a      	ldr	r2, [r3, #4]
 8001dcc:	23c0      	movs	r3, #192	@ 0xc0
 8001dce:	025b      	lsls	r3, r3, #9
 8001dd0:	401a      	ands	r2, r3
 8001dd2:	23c0      	movs	r3, #192	@ 0xc0
 8001dd4:	025b      	lsls	r3, r3, #9
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d10b      	bne.n	8001df2 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001dda:	4b58      	ldr	r3, [pc, #352]	@ (8001f3c <HAL_RCC_OscConfig+0x67c>)
 8001ddc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001dde:	2380      	movs	r3, #128	@ 0x80
 8001de0:	029b      	lsls	r3, r3, #10
 8001de2:	4013      	ands	r3, r2
 8001de4:	d040      	beq.n	8001e68 <HAL_RCC_OscConfig+0x5a8>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6a1b      	ldr	r3, [r3, #32]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d03c      	beq.n	8001e68 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e0e6      	b.n	8001fc0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6a1b      	ldr	r3, [r3, #32]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d01b      	beq.n	8001e32 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001dfa:	4b50      	ldr	r3, [pc, #320]	@ (8001f3c <HAL_RCC_OscConfig+0x67c>)
 8001dfc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001dfe:	4b4f      	ldr	r3, [pc, #316]	@ (8001f3c <HAL_RCC_OscConfig+0x67c>)
 8001e00:	2180      	movs	r1, #128	@ 0x80
 8001e02:	0249      	lsls	r1, r1, #9
 8001e04:	430a      	orrs	r2, r1
 8001e06:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e08:	f7ff f948 	bl	800109c <HAL_GetTick>
 8001e0c:	0003      	movs	r3, r0
 8001e0e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001e10:	e008      	b.n	8001e24 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e12:	f7ff f943 	bl	800109c <HAL_GetTick>
 8001e16:	0002      	movs	r2, r0
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d901      	bls.n	8001e24 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e0cd      	b.n	8001fc0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001e24:	4b45      	ldr	r3, [pc, #276]	@ (8001f3c <HAL_RCC_OscConfig+0x67c>)
 8001e26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e28:	2380      	movs	r3, #128	@ 0x80
 8001e2a:	029b      	lsls	r3, r3, #10
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	d0f0      	beq.n	8001e12 <HAL_RCC_OscConfig+0x552>
 8001e30:	e01b      	b.n	8001e6a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001e32:	4b42      	ldr	r3, [pc, #264]	@ (8001f3c <HAL_RCC_OscConfig+0x67c>)
 8001e34:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e36:	4b41      	ldr	r3, [pc, #260]	@ (8001f3c <HAL_RCC_OscConfig+0x67c>)
 8001e38:	4943      	ldr	r1, [pc, #268]	@ (8001f48 <HAL_RCC_OscConfig+0x688>)
 8001e3a:	400a      	ands	r2, r1
 8001e3c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e3e:	f7ff f92d 	bl	800109c <HAL_GetTick>
 8001e42:	0003      	movs	r3, r0
 8001e44:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001e46:	e008      	b.n	8001e5a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e48:	f7ff f928 	bl	800109c <HAL_GetTick>
 8001e4c:	0002      	movs	r2, r0
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e0b2      	b.n	8001fc0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001e5a:	4b38      	ldr	r3, [pc, #224]	@ (8001f3c <HAL_RCC_OscConfig+0x67c>)
 8001e5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e5e:	2380      	movs	r3, #128	@ 0x80
 8001e60:	029b      	lsls	r3, r3, #10
 8001e62:	4013      	ands	r3, r2
 8001e64:	d1f0      	bne.n	8001e48 <HAL_RCC_OscConfig+0x588>
 8001e66:	e000      	b.n	8001e6a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001e68:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d100      	bne.n	8001e74 <HAL_RCC_OscConfig+0x5b4>
 8001e72:	e0a4      	b.n	8001fbe <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e74:	4b31      	ldr	r3, [pc, #196]	@ (8001f3c <HAL_RCC_OscConfig+0x67c>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	220c      	movs	r2, #12
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	2b08      	cmp	r3, #8
 8001e7e:	d100      	bne.n	8001e82 <HAL_RCC_OscConfig+0x5c2>
 8001e80:	e078      	b.n	8001f74 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d14c      	bne.n	8001f24 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e8a:	4b2c      	ldr	r3, [pc, #176]	@ (8001f3c <HAL_RCC_OscConfig+0x67c>)
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	4b2b      	ldr	r3, [pc, #172]	@ (8001f3c <HAL_RCC_OscConfig+0x67c>)
 8001e90:	492e      	ldr	r1, [pc, #184]	@ (8001f4c <HAL_RCC_OscConfig+0x68c>)
 8001e92:	400a      	ands	r2, r1
 8001e94:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e96:	f7ff f901 	bl	800109c <HAL_GetTick>
 8001e9a:	0003      	movs	r3, r0
 8001e9c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e9e:	e008      	b.n	8001eb2 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ea0:	f7ff f8fc 	bl	800109c <HAL_GetTick>
 8001ea4:	0002      	movs	r2, r0
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e086      	b.n	8001fc0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eb2:	4b22      	ldr	r3, [pc, #136]	@ (8001f3c <HAL_RCC_OscConfig+0x67c>)
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	2380      	movs	r3, #128	@ 0x80
 8001eb8:	049b      	lsls	r3, r3, #18
 8001eba:	4013      	ands	r3, r2
 8001ebc:	d1f0      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ebe:	4b1f      	ldr	r3, [pc, #124]	@ (8001f3c <HAL_RCC_OscConfig+0x67c>)
 8001ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ec2:	220f      	movs	r2, #15
 8001ec4:	4393      	bics	r3, r2
 8001ec6:	0019      	movs	r1, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ecc:	4b1b      	ldr	r3, [pc, #108]	@ (8001f3c <HAL_RCC_OscConfig+0x67c>)
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001ed2:	4b1a      	ldr	r3, [pc, #104]	@ (8001f3c <HAL_RCC_OscConfig+0x67c>)
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	4a1e      	ldr	r2, [pc, #120]	@ (8001f50 <HAL_RCC_OscConfig+0x690>)
 8001ed8:	4013      	ands	r3, r2
 8001eda:	0019      	movs	r1, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ee4:	431a      	orrs	r2, r3
 8001ee6:	4b15      	ldr	r3, [pc, #84]	@ (8001f3c <HAL_RCC_OscConfig+0x67c>)
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001eec:	4b13      	ldr	r3, [pc, #76]	@ (8001f3c <HAL_RCC_OscConfig+0x67c>)
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	4b12      	ldr	r3, [pc, #72]	@ (8001f3c <HAL_RCC_OscConfig+0x67c>)
 8001ef2:	2180      	movs	r1, #128	@ 0x80
 8001ef4:	0449      	lsls	r1, r1, #17
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efa:	f7ff f8cf 	bl	800109c <HAL_GetTick>
 8001efe:	0003      	movs	r3, r0
 8001f00:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f04:	f7ff f8ca 	bl	800109c <HAL_GetTick>
 8001f08:	0002      	movs	r2, r0
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e054      	b.n	8001fc0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f16:	4b09      	ldr	r3, [pc, #36]	@ (8001f3c <HAL_RCC_OscConfig+0x67c>)
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	2380      	movs	r3, #128	@ 0x80
 8001f1c:	049b      	lsls	r3, r3, #18
 8001f1e:	4013      	ands	r3, r2
 8001f20:	d0f0      	beq.n	8001f04 <HAL_RCC_OscConfig+0x644>
 8001f22:	e04c      	b.n	8001fbe <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f24:	4b05      	ldr	r3, [pc, #20]	@ (8001f3c <HAL_RCC_OscConfig+0x67c>)
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	4b04      	ldr	r3, [pc, #16]	@ (8001f3c <HAL_RCC_OscConfig+0x67c>)
 8001f2a:	4908      	ldr	r1, [pc, #32]	@ (8001f4c <HAL_RCC_OscConfig+0x68c>)
 8001f2c:	400a      	ands	r2, r1
 8001f2e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f30:	f7ff f8b4 	bl	800109c <HAL_GetTick>
 8001f34:	0003      	movs	r3, r0
 8001f36:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f38:	e015      	b.n	8001f66 <HAL_RCC_OscConfig+0x6a6>
 8001f3a:	46c0      	nop			@ (mov r8, r8)
 8001f3c:	40021000 	.word	0x40021000
 8001f40:	00001388 	.word	0x00001388
 8001f44:	efffffff 	.word	0xefffffff
 8001f48:	fffeffff 	.word	0xfffeffff
 8001f4c:	feffffff 	.word	0xfeffffff
 8001f50:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f54:	f7ff f8a2 	bl	800109c <HAL_GetTick>
 8001f58:	0002      	movs	r2, r0
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e02c      	b.n	8001fc0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f66:	4b18      	ldr	r3, [pc, #96]	@ (8001fc8 <HAL_RCC_OscConfig+0x708>)
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	2380      	movs	r3, #128	@ 0x80
 8001f6c:	049b      	lsls	r3, r3, #18
 8001f6e:	4013      	ands	r3, r2
 8001f70:	d1f0      	bne.n	8001f54 <HAL_RCC_OscConfig+0x694>
 8001f72:	e024      	b.n	8001fbe <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d101      	bne.n	8001f80 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e01f      	b.n	8001fc0 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001f80:	4b11      	ldr	r3, [pc, #68]	@ (8001fc8 <HAL_RCC_OscConfig+0x708>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001f86:	4b10      	ldr	r3, [pc, #64]	@ (8001fc8 <HAL_RCC_OscConfig+0x708>)
 8001f88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f8a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f8c:	697a      	ldr	r2, [r7, #20]
 8001f8e:	23c0      	movs	r3, #192	@ 0xc0
 8001f90:	025b      	lsls	r3, r3, #9
 8001f92:	401a      	ands	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d10e      	bne.n	8001fba <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	220f      	movs	r2, #15
 8001fa0:	401a      	ands	r2, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d107      	bne.n	8001fba <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001faa:	697a      	ldr	r2, [r7, #20]
 8001fac:	23f0      	movs	r3, #240	@ 0xf0
 8001fae:	039b      	lsls	r3, r3, #14
 8001fb0:	401a      	ands	r2, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d001      	beq.n	8001fbe <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e000      	b.n	8001fc0 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001fbe:	2300      	movs	r3, #0
}
 8001fc0:	0018      	movs	r0, r3
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	b008      	add	sp, #32
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	40021000 	.word	0x40021000

08001fcc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d101      	bne.n	8001fe0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e0bf      	b.n	8002160 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fe0:	4b61      	ldr	r3, [pc, #388]	@ (8002168 <HAL_RCC_ClockConfig+0x19c>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	683a      	ldr	r2, [r7, #0]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d911      	bls.n	8002012 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fee:	4b5e      	ldr	r3, [pc, #376]	@ (8002168 <HAL_RCC_ClockConfig+0x19c>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	4393      	bics	r3, r2
 8001ff6:	0019      	movs	r1, r3
 8001ff8:	4b5b      	ldr	r3, [pc, #364]	@ (8002168 <HAL_RCC_ClockConfig+0x19c>)
 8001ffa:	683a      	ldr	r2, [r7, #0]
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002000:	4b59      	ldr	r3, [pc, #356]	@ (8002168 <HAL_RCC_ClockConfig+0x19c>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2201      	movs	r2, #1
 8002006:	4013      	ands	r3, r2
 8002008:	683a      	ldr	r2, [r7, #0]
 800200a:	429a      	cmp	r2, r3
 800200c:	d001      	beq.n	8002012 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e0a6      	b.n	8002160 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2202      	movs	r2, #2
 8002018:	4013      	ands	r3, r2
 800201a:	d015      	beq.n	8002048 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2204      	movs	r2, #4
 8002022:	4013      	ands	r3, r2
 8002024:	d006      	beq.n	8002034 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002026:	4b51      	ldr	r3, [pc, #324]	@ (800216c <HAL_RCC_ClockConfig+0x1a0>)
 8002028:	685a      	ldr	r2, [r3, #4]
 800202a:	4b50      	ldr	r3, [pc, #320]	@ (800216c <HAL_RCC_ClockConfig+0x1a0>)
 800202c:	21e0      	movs	r1, #224	@ 0xe0
 800202e:	00c9      	lsls	r1, r1, #3
 8002030:	430a      	orrs	r2, r1
 8002032:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002034:	4b4d      	ldr	r3, [pc, #308]	@ (800216c <HAL_RCC_ClockConfig+0x1a0>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	22f0      	movs	r2, #240	@ 0xf0
 800203a:	4393      	bics	r3, r2
 800203c:	0019      	movs	r1, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	689a      	ldr	r2, [r3, #8]
 8002042:	4b4a      	ldr	r3, [pc, #296]	@ (800216c <HAL_RCC_ClockConfig+0x1a0>)
 8002044:	430a      	orrs	r2, r1
 8002046:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2201      	movs	r2, #1
 800204e:	4013      	ands	r3, r2
 8002050:	d04c      	beq.n	80020ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d107      	bne.n	800206a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800205a:	4b44      	ldr	r3, [pc, #272]	@ (800216c <HAL_RCC_ClockConfig+0x1a0>)
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	2380      	movs	r3, #128	@ 0x80
 8002060:	029b      	lsls	r3, r3, #10
 8002062:	4013      	ands	r3, r2
 8002064:	d120      	bne.n	80020a8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e07a      	b.n	8002160 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	2b02      	cmp	r3, #2
 8002070:	d107      	bne.n	8002082 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002072:	4b3e      	ldr	r3, [pc, #248]	@ (800216c <HAL_RCC_ClockConfig+0x1a0>)
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	2380      	movs	r3, #128	@ 0x80
 8002078:	049b      	lsls	r3, r3, #18
 800207a:	4013      	ands	r3, r2
 800207c:	d114      	bne.n	80020a8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e06e      	b.n	8002160 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	2b03      	cmp	r3, #3
 8002088:	d107      	bne.n	800209a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800208a:	4b38      	ldr	r3, [pc, #224]	@ (800216c <HAL_RCC_ClockConfig+0x1a0>)
 800208c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800208e:	2380      	movs	r3, #128	@ 0x80
 8002090:	029b      	lsls	r3, r3, #10
 8002092:	4013      	ands	r3, r2
 8002094:	d108      	bne.n	80020a8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e062      	b.n	8002160 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800209a:	4b34      	ldr	r3, [pc, #208]	@ (800216c <HAL_RCC_ClockConfig+0x1a0>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2202      	movs	r2, #2
 80020a0:	4013      	ands	r3, r2
 80020a2:	d101      	bne.n	80020a8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e05b      	b.n	8002160 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020a8:	4b30      	ldr	r3, [pc, #192]	@ (800216c <HAL_RCC_ClockConfig+0x1a0>)
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	2203      	movs	r2, #3
 80020ae:	4393      	bics	r3, r2
 80020b0:	0019      	movs	r1, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685a      	ldr	r2, [r3, #4]
 80020b6:	4b2d      	ldr	r3, [pc, #180]	@ (800216c <HAL_RCC_ClockConfig+0x1a0>)
 80020b8:	430a      	orrs	r2, r1
 80020ba:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020bc:	f7fe ffee 	bl	800109c <HAL_GetTick>
 80020c0:	0003      	movs	r3, r0
 80020c2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020c4:	e009      	b.n	80020da <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020c6:	f7fe ffe9 	bl	800109c <HAL_GetTick>
 80020ca:	0002      	movs	r2, r0
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	4a27      	ldr	r2, [pc, #156]	@ (8002170 <HAL_RCC_ClockConfig+0x1a4>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e042      	b.n	8002160 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020da:	4b24      	ldr	r3, [pc, #144]	@ (800216c <HAL_RCC_ClockConfig+0x1a0>)
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	220c      	movs	r2, #12
 80020e0:	401a      	ands	r2, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d1ec      	bne.n	80020c6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020ec:	4b1e      	ldr	r3, [pc, #120]	@ (8002168 <HAL_RCC_ClockConfig+0x19c>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2201      	movs	r2, #1
 80020f2:	4013      	ands	r3, r2
 80020f4:	683a      	ldr	r2, [r7, #0]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d211      	bcs.n	800211e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020fa:	4b1b      	ldr	r3, [pc, #108]	@ (8002168 <HAL_RCC_ClockConfig+0x19c>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	2201      	movs	r2, #1
 8002100:	4393      	bics	r3, r2
 8002102:	0019      	movs	r1, r3
 8002104:	4b18      	ldr	r3, [pc, #96]	@ (8002168 <HAL_RCC_ClockConfig+0x19c>)
 8002106:	683a      	ldr	r2, [r7, #0]
 8002108:	430a      	orrs	r2, r1
 800210a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800210c:	4b16      	ldr	r3, [pc, #88]	@ (8002168 <HAL_RCC_ClockConfig+0x19c>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2201      	movs	r2, #1
 8002112:	4013      	ands	r3, r2
 8002114:	683a      	ldr	r2, [r7, #0]
 8002116:	429a      	cmp	r2, r3
 8002118:	d001      	beq.n	800211e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e020      	b.n	8002160 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2204      	movs	r2, #4
 8002124:	4013      	ands	r3, r2
 8002126:	d009      	beq.n	800213c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002128:	4b10      	ldr	r3, [pc, #64]	@ (800216c <HAL_RCC_ClockConfig+0x1a0>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	4a11      	ldr	r2, [pc, #68]	@ (8002174 <HAL_RCC_ClockConfig+0x1a8>)
 800212e:	4013      	ands	r3, r2
 8002130:	0019      	movs	r1, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	68da      	ldr	r2, [r3, #12]
 8002136:	4b0d      	ldr	r3, [pc, #52]	@ (800216c <HAL_RCC_ClockConfig+0x1a0>)
 8002138:	430a      	orrs	r2, r1
 800213a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800213c:	f000 f820 	bl	8002180 <HAL_RCC_GetSysClockFreq>
 8002140:	0001      	movs	r1, r0
 8002142:	4b0a      	ldr	r3, [pc, #40]	@ (800216c <HAL_RCC_ClockConfig+0x1a0>)
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	091b      	lsrs	r3, r3, #4
 8002148:	220f      	movs	r2, #15
 800214a:	4013      	ands	r3, r2
 800214c:	4a0a      	ldr	r2, [pc, #40]	@ (8002178 <HAL_RCC_ClockConfig+0x1ac>)
 800214e:	5cd3      	ldrb	r3, [r2, r3]
 8002150:	000a      	movs	r2, r1
 8002152:	40da      	lsrs	r2, r3
 8002154:	4b09      	ldr	r3, [pc, #36]	@ (800217c <HAL_RCC_ClockConfig+0x1b0>)
 8002156:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002158:	2003      	movs	r0, #3
 800215a:	f7fe ff59 	bl	8001010 <HAL_InitTick>
  
  return HAL_OK;
 800215e:	2300      	movs	r3, #0
}
 8002160:	0018      	movs	r0, r3
 8002162:	46bd      	mov	sp, r7
 8002164:	b004      	add	sp, #16
 8002166:	bd80      	pop	{r7, pc}
 8002168:	40022000 	.word	0x40022000
 800216c:	40021000 	.word	0x40021000
 8002170:	00001388 	.word	0x00001388
 8002174:	fffff8ff 	.word	0xfffff8ff
 8002178:	08003b04 	.word	0x08003b04
 800217c:	20000010 	.word	0x20000010

08002180 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002186:	2300      	movs	r3, #0
 8002188:	60fb      	str	r3, [r7, #12]
 800218a:	2300      	movs	r3, #0
 800218c:	60bb      	str	r3, [r7, #8]
 800218e:	2300      	movs	r3, #0
 8002190:	617b      	str	r3, [r7, #20]
 8002192:	2300      	movs	r3, #0
 8002194:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002196:	2300      	movs	r3, #0
 8002198:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800219a:	4b2d      	ldr	r3, [pc, #180]	@ (8002250 <HAL_RCC_GetSysClockFreq+0xd0>)
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	220c      	movs	r2, #12
 80021a4:	4013      	ands	r3, r2
 80021a6:	2b0c      	cmp	r3, #12
 80021a8:	d046      	beq.n	8002238 <HAL_RCC_GetSysClockFreq+0xb8>
 80021aa:	d848      	bhi.n	800223e <HAL_RCC_GetSysClockFreq+0xbe>
 80021ac:	2b04      	cmp	r3, #4
 80021ae:	d002      	beq.n	80021b6 <HAL_RCC_GetSysClockFreq+0x36>
 80021b0:	2b08      	cmp	r3, #8
 80021b2:	d003      	beq.n	80021bc <HAL_RCC_GetSysClockFreq+0x3c>
 80021b4:	e043      	b.n	800223e <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021b6:	4b27      	ldr	r3, [pc, #156]	@ (8002254 <HAL_RCC_GetSysClockFreq+0xd4>)
 80021b8:	613b      	str	r3, [r7, #16]
      break;
 80021ba:	e043      	b.n	8002244 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	0c9b      	lsrs	r3, r3, #18
 80021c0:	220f      	movs	r2, #15
 80021c2:	4013      	ands	r3, r2
 80021c4:	4a24      	ldr	r2, [pc, #144]	@ (8002258 <HAL_RCC_GetSysClockFreq+0xd8>)
 80021c6:	5cd3      	ldrb	r3, [r2, r3]
 80021c8:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80021ca:	4b21      	ldr	r3, [pc, #132]	@ (8002250 <HAL_RCC_GetSysClockFreq+0xd0>)
 80021cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ce:	220f      	movs	r2, #15
 80021d0:	4013      	ands	r3, r2
 80021d2:	4a22      	ldr	r2, [pc, #136]	@ (800225c <HAL_RCC_GetSysClockFreq+0xdc>)
 80021d4:	5cd3      	ldrb	r3, [r2, r3]
 80021d6:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80021d8:	68fa      	ldr	r2, [r7, #12]
 80021da:	23c0      	movs	r3, #192	@ 0xc0
 80021dc:	025b      	lsls	r3, r3, #9
 80021de:	401a      	ands	r2, r3
 80021e0:	2380      	movs	r3, #128	@ 0x80
 80021e2:	025b      	lsls	r3, r3, #9
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d109      	bne.n	80021fc <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80021e8:	68b9      	ldr	r1, [r7, #8]
 80021ea:	481a      	ldr	r0, [pc, #104]	@ (8002254 <HAL_RCC_GetSysClockFreq+0xd4>)
 80021ec:	f7fd ff8c 	bl	8000108 <__udivsi3>
 80021f0:	0003      	movs	r3, r0
 80021f2:	001a      	movs	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	4353      	muls	r3, r2
 80021f8:	617b      	str	r3, [r7, #20]
 80021fa:	e01a      	b.n	8002232 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80021fc:	68fa      	ldr	r2, [r7, #12]
 80021fe:	23c0      	movs	r3, #192	@ 0xc0
 8002200:	025b      	lsls	r3, r3, #9
 8002202:	401a      	ands	r2, r3
 8002204:	23c0      	movs	r3, #192	@ 0xc0
 8002206:	025b      	lsls	r3, r3, #9
 8002208:	429a      	cmp	r2, r3
 800220a:	d109      	bne.n	8002220 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800220c:	68b9      	ldr	r1, [r7, #8]
 800220e:	4814      	ldr	r0, [pc, #80]	@ (8002260 <HAL_RCC_GetSysClockFreq+0xe0>)
 8002210:	f7fd ff7a 	bl	8000108 <__udivsi3>
 8002214:	0003      	movs	r3, r0
 8002216:	001a      	movs	r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	4353      	muls	r3, r2
 800221c:	617b      	str	r3, [r7, #20]
 800221e:	e008      	b.n	8002232 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002220:	68b9      	ldr	r1, [r7, #8]
 8002222:	480c      	ldr	r0, [pc, #48]	@ (8002254 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002224:	f7fd ff70 	bl	8000108 <__udivsi3>
 8002228:	0003      	movs	r3, r0
 800222a:	001a      	movs	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4353      	muls	r3, r2
 8002230:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	613b      	str	r3, [r7, #16]
      break;
 8002236:	e005      	b.n	8002244 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002238:	4b09      	ldr	r3, [pc, #36]	@ (8002260 <HAL_RCC_GetSysClockFreq+0xe0>)
 800223a:	613b      	str	r3, [r7, #16]
      break;
 800223c:	e002      	b.n	8002244 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800223e:	4b05      	ldr	r3, [pc, #20]	@ (8002254 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002240:	613b      	str	r3, [r7, #16]
      break;
 8002242:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002244:	693b      	ldr	r3, [r7, #16]
}
 8002246:	0018      	movs	r0, r3
 8002248:	46bd      	mov	sp, r7
 800224a:	b006      	add	sp, #24
 800224c:	bd80      	pop	{r7, pc}
 800224e:	46c0      	nop			@ (mov r8, r8)
 8002250:	40021000 	.word	0x40021000
 8002254:	007a1200 	.word	0x007a1200
 8002258:	08003b14 	.word	0x08003b14
 800225c:	08003b24 	.word	0x08003b24
 8002260:	02dc6c00 	.word	0x02dc6c00

08002264 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d101      	bne.n	8002276 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e0a8      	b.n	80023c8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800227a:	2b00      	cmp	r3, #0
 800227c:	d109      	bne.n	8002292 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685a      	ldr	r2, [r3, #4]
 8002282:	2382      	movs	r3, #130	@ 0x82
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	429a      	cmp	r2, r3
 8002288:	d009      	beq.n	800229e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	61da      	str	r2, [r3, #28]
 8002290:	e005      	b.n	800229e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	225d      	movs	r2, #93	@ 0x5d
 80022a8:	5c9b      	ldrb	r3, [r3, r2]
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d107      	bne.n	80022c0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	225c      	movs	r2, #92	@ 0x5c
 80022b4:	2100      	movs	r1, #0
 80022b6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	0018      	movs	r0, r3
 80022bc:	f7fe fce8 	bl	8000c90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	225d      	movs	r2, #93	@ 0x5d
 80022c4:	2102      	movs	r1, #2
 80022c6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2140      	movs	r1, #64	@ 0x40
 80022d4:	438a      	bics	r2, r1
 80022d6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	68da      	ldr	r2, [r3, #12]
 80022dc:	23e0      	movs	r3, #224	@ 0xe0
 80022de:	00db      	lsls	r3, r3, #3
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d902      	bls.n	80022ea <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80022e4:	2300      	movs	r3, #0
 80022e6:	60fb      	str	r3, [r7, #12]
 80022e8:	e002      	b.n	80022f0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80022ea:	2380      	movs	r3, #128	@ 0x80
 80022ec:	015b      	lsls	r3, r3, #5
 80022ee:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	68da      	ldr	r2, [r3, #12]
 80022f4:	23f0      	movs	r3, #240	@ 0xf0
 80022f6:	011b      	lsls	r3, r3, #4
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d008      	beq.n	800230e <HAL_SPI_Init+0xaa>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	68da      	ldr	r2, [r3, #12]
 8002300:	23e0      	movs	r3, #224	@ 0xe0
 8002302:	00db      	lsls	r3, r3, #3
 8002304:	429a      	cmp	r2, r3
 8002306:	d002      	beq.n	800230e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685a      	ldr	r2, [r3, #4]
 8002312:	2382      	movs	r3, #130	@ 0x82
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	401a      	ands	r2, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6899      	ldr	r1, [r3, #8]
 800231c:	2384      	movs	r3, #132	@ 0x84
 800231e:	021b      	lsls	r3, r3, #8
 8002320:	400b      	ands	r3, r1
 8002322:	431a      	orrs	r2, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	691b      	ldr	r3, [r3, #16]
 8002328:	2102      	movs	r1, #2
 800232a:	400b      	ands	r3, r1
 800232c:	431a      	orrs	r2, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	695b      	ldr	r3, [r3, #20]
 8002332:	2101      	movs	r1, #1
 8002334:	400b      	ands	r3, r1
 8002336:	431a      	orrs	r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6999      	ldr	r1, [r3, #24]
 800233c:	2380      	movs	r3, #128	@ 0x80
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	400b      	ands	r3, r1
 8002342:	431a      	orrs	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	69db      	ldr	r3, [r3, #28]
 8002348:	2138      	movs	r1, #56	@ 0x38
 800234a:	400b      	ands	r3, r1
 800234c:	431a      	orrs	r2, r3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6a1b      	ldr	r3, [r3, #32]
 8002352:	2180      	movs	r1, #128	@ 0x80
 8002354:	400b      	ands	r3, r1
 8002356:	431a      	orrs	r2, r3
 8002358:	0011      	movs	r1, r2
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800235e:	2380      	movs	r3, #128	@ 0x80
 8002360:	019b      	lsls	r3, r3, #6
 8002362:	401a      	ands	r2, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	430a      	orrs	r2, r1
 800236a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	0c1b      	lsrs	r3, r3, #16
 8002372:	2204      	movs	r2, #4
 8002374:	401a      	ands	r2, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800237a:	2110      	movs	r1, #16
 800237c:	400b      	ands	r3, r1
 800237e:	431a      	orrs	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002384:	2108      	movs	r1, #8
 8002386:	400b      	ands	r3, r1
 8002388:	431a      	orrs	r2, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	68d9      	ldr	r1, [r3, #12]
 800238e:	23f0      	movs	r3, #240	@ 0xf0
 8002390:	011b      	lsls	r3, r3, #4
 8002392:	400b      	ands	r3, r1
 8002394:	431a      	orrs	r2, r3
 8002396:	0011      	movs	r1, r2
 8002398:	68fa      	ldr	r2, [r7, #12]
 800239a:	2380      	movs	r3, #128	@ 0x80
 800239c:	015b      	lsls	r3, r3, #5
 800239e:	401a      	ands	r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	430a      	orrs	r2, r1
 80023a6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	69da      	ldr	r2, [r3, #28]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4907      	ldr	r1, [pc, #28]	@ (80023d0 <HAL_SPI_Init+0x16c>)
 80023b4:	400a      	ands	r2, r1
 80023b6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	225d      	movs	r2, #93	@ 0x5d
 80023c2:	2101      	movs	r1, #1
 80023c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80023c6:	2300      	movs	r3, #0
}
 80023c8:	0018      	movs	r0, r3
 80023ca:	46bd      	mov	sp, r7
 80023cc:	b004      	add	sp, #16
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	fffff7ff 	.word	0xfffff7ff

080023d4 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	607a      	str	r2, [r7, #4]
 80023e0:	001a      	movs	r2, r3
 80023e2:	1cbb      	adds	r3, r7, #2
 80023e4:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80023e6:	2317      	movs	r3, #23
 80023e8:	18fb      	adds	r3, r7, r3
 80023ea:	2200      	movs	r2, #0
 80023ec:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	225c      	movs	r2, #92	@ 0x5c
 80023f2:	5c9b      	ldrb	r3, [r3, r2]
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d101      	bne.n	80023fc <HAL_SPI_TransmitReceive_IT+0x28>
 80023f8:	2302      	movs	r3, #2
 80023fa:	e0a6      	b.n	800254a <HAL_SPI_TransmitReceive_IT+0x176>
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	225c      	movs	r2, #92	@ 0x5c
 8002400:	2101      	movs	r1, #1
 8002402:	5499      	strb	r1, [r3, r2]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002404:	2016      	movs	r0, #22
 8002406:	183b      	adds	r3, r7, r0
 8002408:	68fa      	ldr	r2, [r7, #12]
 800240a:	215d      	movs	r1, #93	@ 0x5d
 800240c:	5c52      	ldrb	r2, [r2, r1]
 800240e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002416:	0001      	movs	r1, r0
 8002418:	187b      	adds	r3, r7, r1
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d011      	beq.n	8002444 <HAL_SPI_TransmitReceive_IT+0x70>
 8002420:	693a      	ldr	r2, [r7, #16]
 8002422:	2382      	movs	r3, #130	@ 0x82
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	429a      	cmp	r2, r3
 8002428:	d107      	bne.n	800243a <HAL_SPI_TransmitReceive_IT+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d103      	bne.n	800243a <HAL_SPI_TransmitReceive_IT+0x66>
 8002432:	187b      	adds	r3, r7, r1
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	2b04      	cmp	r3, #4
 8002438:	d004      	beq.n	8002444 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_BUSY;
 800243a:	2317      	movs	r3, #23
 800243c:	18fb      	adds	r3, r7, r3
 800243e:	2202      	movs	r2, #2
 8002440:	701a      	strb	r2, [r3, #0]
    goto error;
 8002442:	e07b      	b.n	800253c <HAL_SPI_TransmitReceive_IT+0x168>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d006      	beq.n	8002458 <HAL_SPI_TransmitReceive_IT+0x84>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d003      	beq.n	8002458 <HAL_SPI_TransmitReceive_IT+0x84>
 8002450:	1cbb      	adds	r3, r7, #2
 8002452:	881b      	ldrh	r3, [r3, #0]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d104      	bne.n	8002462 <HAL_SPI_TransmitReceive_IT+0x8e>
  {
    errorcode = HAL_ERROR;
 8002458:	2317      	movs	r3, #23
 800245a:	18fb      	adds	r3, r7, r3
 800245c:	2201      	movs	r2, #1
 800245e:	701a      	strb	r2, [r3, #0]
    goto error;
 8002460:	e06c      	b.n	800253c <HAL_SPI_TransmitReceive_IT+0x168>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	225d      	movs	r2, #93	@ 0x5d
 8002466:	5c9b      	ldrb	r3, [r3, r2]
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b04      	cmp	r3, #4
 800246c:	d003      	beq.n	8002476 <HAL_SPI_TransmitReceive_IT+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	225d      	movs	r2, #93	@ 0x5d
 8002472:	2105      	movs	r1, #5
 8002474:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2200      	movs	r2, #0
 800247a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	68ba      	ldr	r2, [r7, #8]
 8002480:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	1cba      	adds	r2, r7, #2
 8002486:	8812      	ldrh	r2, [r2, #0]
 8002488:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	1cba      	adds	r2, r7, #2
 800248e:	8812      	ldrh	r2, [r2, #0]
 8002490:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	1cba      	adds	r2, r7, #2
 800249c:	2144      	movs	r1, #68	@ 0x44
 800249e:	8812      	ldrh	r2, [r2, #0]
 80024a0:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	1cba      	adds	r2, r7, #2
 80024a6:	2146      	movs	r1, #70	@ 0x46
 80024a8:	8812      	ldrh	r2, [r2, #0]
 80024aa:	525a      	strh	r2, [r3, r1]

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	68da      	ldr	r2, [r3, #12]
 80024b0:	23e0      	movs	r3, #224	@ 0xe0
 80024b2:	00db      	lsls	r3, r3, #3
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d906      	bls.n	80024c6 <HAL_SPI_TransmitReceive_IT+0xf2>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	4a26      	ldr	r2, [pc, #152]	@ (8002554 <HAL_SPI_TransmitReceive_IT+0x180>)
 80024bc:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	4a25      	ldr	r2, [pc, #148]	@ (8002558 <HAL_SPI_TransmitReceive_IT+0x184>)
 80024c2:	651a      	str	r2, [r3, #80]	@ 0x50
 80024c4:	e005      	b.n	80024d2 <HAL_SPI_TransmitReceive_IT+0xfe>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	4a24      	ldr	r2, [pc, #144]	@ (800255c <HAL_SPI_TransmitReceive_IT+0x188>)
 80024ca:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	4a24      	ldr	r2, [pc, #144]	@ (8002560 <HAL_SPI_TransmitReceive_IT+0x18c>)
 80024d0:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	68da      	ldr	r2, [r3, #12]
 80024d6:	23e0      	movs	r3, #224	@ 0xe0
 80024d8:	00db      	lsls	r3, r3, #3
 80024da:	429a      	cmp	r2, r3
 80024dc:	d803      	bhi.n	80024e6 <HAL_SPI_TransmitReceive_IT+0x112>
 80024de:	1cbb      	adds	r3, r7, #2
 80024e0:	881b      	ldrh	r3, [r3, #0]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d908      	bls.n	80024f8 <HAL_SPI_TransmitReceive_IT+0x124>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	685a      	ldr	r2, [r3, #4]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	491c      	ldr	r1, [pc, #112]	@ (8002564 <HAL_SPI_TransmitReceive_IT+0x190>)
 80024f2:	400a      	ands	r2, r1
 80024f4:	605a      	str	r2, [r3, #4]
 80024f6:	e008      	b.n	800250a <HAL_SPI_TransmitReceive_IT+0x136>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	685a      	ldr	r2, [r3, #4]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2180      	movs	r1, #128	@ 0x80
 8002504:	0149      	lsls	r1, r1, #5
 8002506:	430a      	orrs	r2, r1
 8002508:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	685a      	ldr	r2, [r3, #4]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	21e0      	movs	r1, #224	@ 0xe0
 8002516:	430a      	orrs	r2, r1
 8002518:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2240      	movs	r2, #64	@ 0x40
 8002522:	4013      	ands	r3, r2
 8002524:	2b40      	cmp	r3, #64	@ 0x40
 8002526:	d008      	beq.n	800253a <HAL_SPI_TransmitReceive_IT+0x166>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2140      	movs	r1, #64	@ 0x40
 8002534:	430a      	orrs	r2, r1
 8002536:	601a      	str	r2, [r3, #0]
 8002538:	e000      	b.n	800253c <HAL_SPI_TransmitReceive_IT+0x168>
  }

error :
 800253a:	46c0      	nop			@ (mov r8, r8)
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	225c      	movs	r2, #92	@ 0x5c
 8002540:	2100      	movs	r1, #0
 8002542:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002544:	2317      	movs	r3, #23
 8002546:	18fb      	adds	r3, r7, r3
 8002548:	781b      	ldrb	r3, [r3, #0]
}
 800254a:	0018      	movs	r0, r3
 800254c:	46bd      	mov	sp, r7
 800254e:	b006      	add	sp, #24
 8002550:	bd80      	pop	{r7, pc}
 8002552:	46c0      	nop			@ (mov r8, r8)
 8002554:	080028df 	.word	0x080028df
 8002558:	08002947 	.word	0x08002947
 800255c:	08002789 	.word	0x08002789
 8002560:	0800284b 	.word	0x0800284b
 8002564:	ffffefff 	.word	0xffffefff

08002568 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b088      	sub	sp, #32
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	2240      	movs	r2, #64	@ 0x40
 8002584:	4013      	ands	r3, r2
 8002586:	d10d      	bne.n	80025a4 <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	2201      	movs	r2, #1
 800258c:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800258e:	d009      	beq.n	80025a4 <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	2240      	movs	r2, #64	@ 0x40
 8002594:	4013      	ands	r3, r2
 8002596:	d005      	beq.n	80025a4 <HAL_SPI_IRQHandler+0x3c>
  {
    hspi->RxISR(hspi);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	0010      	movs	r0, r2
 80025a0:	4798      	blx	r3
    return;
 80025a2:	e0c5      	b.n	8002730 <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	2202      	movs	r2, #2
 80025a8:	4013      	ands	r3, r2
 80025aa:	d009      	beq.n	80025c0 <HAL_SPI_IRQHandler+0x58>
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	2280      	movs	r2, #128	@ 0x80
 80025b0:	4013      	ands	r3, r2
 80025b2:	d005      	beq.n	80025c0 <HAL_SPI_IRQHandler+0x58>
  {
    hspi->TxISR(hspi);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	0010      	movs	r0, r2
 80025bc:	4798      	blx	r3
    return;
 80025be:	e0b7      	b.n	8002730 <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	2220      	movs	r2, #32
 80025c4:	4013      	ands	r3, r2
 80025c6:	d109      	bne.n	80025dc <HAL_SPI_IRQHandler+0x74>
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	2240      	movs	r2, #64	@ 0x40
 80025cc:	4013      	ands	r3, r2
 80025ce:	d105      	bne.n	80025dc <HAL_SPI_IRQHandler+0x74>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	2380      	movs	r3, #128	@ 0x80
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	4013      	ands	r3, r2
 80025d8:	d100      	bne.n	80025dc <HAL_SPI_IRQHandler+0x74>
 80025da:	e0a9      	b.n	8002730 <HAL_SPI_IRQHandler+0x1c8>
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	2220      	movs	r2, #32
 80025e0:	4013      	ands	r3, r2
 80025e2:	d100      	bne.n	80025e6 <HAL_SPI_IRQHandler+0x7e>
 80025e4:	e0a4      	b.n	8002730 <HAL_SPI_IRQHandler+0x1c8>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	2240      	movs	r2, #64	@ 0x40
 80025ea:	4013      	ands	r3, r2
 80025ec:	d023      	beq.n	8002636 <HAL_SPI_IRQHandler+0xce>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	225d      	movs	r2, #93	@ 0x5d
 80025f2:	5c9b      	ldrb	r3, [r3, r2]
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	2b03      	cmp	r3, #3
 80025f8:	d011      	beq.n	800261e <HAL_SPI_IRQHandler+0xb6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025fe:	2204      	movs	r2, #4
 8002600:	431a      	orrs	r2, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002606:	2300      	movs	r3, #0
 8002608:	617b      	str	r3, [r7, #20]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	617b      	str	r3, [r7, #20]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	617b      	str	r3, [r7, #20]
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	e00b      	b.n	8002636 <HAL_SPI_IRQHandler+0xce>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800261e:	2300      	movs	r3, #0
 8002620:	613b      	str	r3, [r7, #16]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	613b      	str	r3, [r7, #16]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	613b      	str	r3, [r7, #16]
 8002632:	693b      	ldr	r3, [r7, #16]
        return;
 8002634:	e07c      	b.n	8002730 <HAL_SPI_IRQHandler+0x1c8>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	2220      	movs	r2, #32
 800263a:	4013      	ands	r3, r2
 800263c:	d014      	beq.n	8002668 <HAL_SPI_IRQHandler+0x100>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002642:	2201      	movs	r2, #1
 8002644:	431a      	orrs	r2, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800264a:	2300      	movs	r3, #0
 800264c:	60fb      	str	r3, [r7, #12]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	60fb      	str	r3, [r7, #12]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2140      	movs	r1, #64	@ 0x40
 8002662:	438a      	bics	r2, r1
 8002664:	601a      	str	r2, [r3, #0]
 8002666:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	2380      	movs	r3, #128	@ 0x80
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	4013      	ands	r3, r2
 8002670:	d00c      	beq.n	800268c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002676:	2208      	movs	r2, #8
 8002678:	431a      	orrs	r2, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800267e:	2300      	movs	r3, #0
 8002680:	60bb      	str	r3, [r7, #8]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	60bb      	str	r3, [r7, #8]
 800268a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002690:	2b00      	cmp	r3, #0
 8002692:	d04c      	beq.n	800272e <HAL_SPI_IRQHandler+0x1c6>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	685a      	ldr	r2, [r3, #4]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	21e0      	movs	r1, #224	@ 0xe0
 80026a0:	438a      	bics	r2, r1
 80026a2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	225d      	movs	r2, #93	@ 0x5d
 80026a8:	2101      	movs	r1, #1
 80026aa:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	2202      	movs	r2, #2
 80026b0:	4013      	ands	r3, r2
 80026b2:	d103      	bne.n	80026bc <HAL_SPI_IRQHandler+0x154>
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	2201      	movs	r2, #1
 80026b8:	4013      	ands	r3, r2
 80026ba:	d032      	beq.n	8002722 <HAL_SPI_IRQHandler+0x1ba>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	685a      	ldr	r2, [r3, #4]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2103      	movs	r1, #3
 80026c8:	438a      	bics	r2, r1
 80026ca:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d010      	beq.n	80026f6 <HAL_SPI_IRQHandler+0x18e>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026d8:	4a17      	ldr	r2, [pc, #92]	@ (8002738 <HAL_SPI_IRQHandler+0x1d0>)
 80026da:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026e0:	0018      	movs	r0, r3
 80026e2:	f7fe ff21 	bl	8001528 <HAL_DMA_Abort_IT>
 80026e6:	1e03      	subs	r3, r0, #0
 80026e8:	d005      	beq.n	80026f6 <HAL_SPI_IRQHandler+0x18e>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026ee:	2240      	movs	r2, #64	@ 0x40
 80026f0:	431a      	orrs	r2, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d016      	beq.n	800272c <HAL_SPI_IRQHandler+0x1c4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002702:	4a0d      	ldr	r2, [pc, #52]	@ (8002738 <HAL_SPI_IRQHandler+0x1d0>)
 8002704:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800270a:	0018      	movs	r0, r3
 800270c:	f7fe ff0c 	bl	8001528 <HAL_DMA_Abort_IT>
 8002710:	1e03      	subs	r3, r0, #0
 8002712:	d00b      	beq.n	800272c <HAL_SPI_IRQHandler+0x1c4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002718:	2240      	movs	r2, #64	@ 0x40
 800271a:	431a      	orrs	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8002720:	e004      	b.n	800272c <HAL_SPI_IRQHandler+0x1c4>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	0018      	movs	r0, r3
 8002726:	f000 f811 	bl	800274c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800272a:	e000      	b.n	800272e <HAL_SPI_IRQHandler+0x1c6>
        if (hspi->hdmatx != NULL)
 800272c:	46c0      	nop			@ (mov r8, r8)
    return;
 800272e:	46c0      	nop			@ (mov r8, r8)
  }
}
 8002730:	46bd      	mov	sp, r7
 8002732:	b008      	add	sp, #32
 8002734:	bd80      	pop	{r7, pc}
 8002736:	46c0      	nop			@ (mov r8, r8)
 8002738:	0800275d 	.word	0x0800275d

0800273c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8002744:	46c0      	nop			@ (mov r8, r8)
 8002746:	46bd      	mov	sp, r7
 8002748:	b002      	add	sp, #8
 800274a:	bd80      	pop	{r7, pc}

0800274c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002754:	46c0      	nop			@ (mov r8, r8)
 8002756:	46bd      	mov	sp, r7
 8002758:	b002      	add	sp, #8
 800275a:	bd80      	pop	{r7, pc}

0800275c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002768:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2246      	movs	r2, #70	@ 0x46
 800276e:	2100      	movs	r1, #0
 8002770:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2200      	movs	r2, #0
 8002776:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	0018      	movs	r0, r3
 800277c:	f7ff ffe6 	bl	800274c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002780:	46c0      	nop			@ (mov r8, r8)
 8002782:	46bd      	mov	sp, r7
 8002784:	b004      	add	sp, #16
 8002786:	bd80      	pop	{r7, pc}

08002788 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2246      	movs	r2, #70	@ 0x46
 8002794:	5a9b      	ldrh	r3, [r3, r2]
 8002796:	b29b      	uxth	r3, r3
 8002798:	2b01      	cmp	r3, #1
 800279a:	d924      	bls.n	80027e6 <SPI_2linesRxISR_8BIT+0x5e>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	68da      	ldr	r2, [r3, #12]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a6:	b292      	uxth	r2, r2
 80027a8:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ae:	1c9a      	adds	r2, r3, #2
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount -= 2U;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2246      	movs	r2, #70	@ 0x46
 80027b8:	5a9b      	ldrh	r3, [r3, r2]
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	3b02      	subs	r3, #2
 80027be:	b299      	uxth	r1, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2246      	movs	r2, #70	@ 0x46
 80027c4:	5299      	strh	r1, [r3, r2]
    if (hspi->RxXferCount == 1U)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2246      	movs	r2, #70	@ 0x46
 80027ca:	5a9b      	ldrh	r3, [r3, r2]
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d120      	bne.n	8002814 <SPI_2linesRxISR_8BIT+0x8c>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	685a      	ldr	r2, [r3, #4]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2180      	movs	r1, #128	@ 0x80
 80027de:	0149      	lsls	r1, r1, #5
 80027e0:	430a      	orrs	r2, r1
 80027e2:	605a      	str	r2, [r3, #4]
 80027e4:	e016      	b.n	8002814 <SPI_2linesRxISR_8BIT+0x8c>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	330c      	adds	r3, #12
 80027ec:	001a      	movs	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f2:	7812      	ldrb	r2, [r2, #0]
 80027f4:	b2d2      	uxtb	r2, r2
 80027f6:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027fc:	1c5a      	adds	r2, r3, #1
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount--;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2246      	movs	r2, #70	@ 0x46
 8002806:	5a9b      	ldrh	r3, [r3, r2]
 8002808:	b29b      	uxth	r3, r3
 800280a:	3b01      	subs	r3, #1
 800280c:	b299      	uxth	r1, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2246      	movs	r2, #70	@ 0x46
 8002812:	5299      	strh	r1, [r3, r2]
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2246      	movs	r2, #70	@ 0x46
 8002818:	5a9b      	ldrh	r3, [r3, r2]
 800281a:	b29b      	uxth	r3, r3
 800281c:	2b00      	cmp	r3, #0
 800281e:	d110      	bne.n	8002842 <SPI_2linesRxISR_8BIT+0xba>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	685a      	ldr	r2, [r3, #4]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2160      	movs	r1, #96	@ 0x60
 800282c:	438a      	bics	r2, r1
 800282e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002834:	b29b      	uxth	r3, r3
 8002836:	2b00      	cmp	r3, #0
 8002838:	d103      	bne.n	8002842 <SPI_2linesRxISR_8BIT+0xba>
    {
      SPI_CloseRxTx_ISR(hspi);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	0018      	movs	r0, r3
 800283e:	f000 fa29 	bl	8002c94 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002842:	46c0      	nop			@ (mov r8, r8)
 8002844:	46bd      	mov	sp, r7
 8002846:	b002      	add	sp, #8
 8002848:	bd80      	pop	{r7, pc}

0800284a <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800284a:	b580      	push	{r7, lr}
 800284c:	b082      	sub	sp, #8
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002856:	b29b      	uxth	r3, r3
 8002858:	2b01      	cmp	r3, #1
 800285a:	d912      	bls.n	8002882 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002860:	881a      	ldrh	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800286c:	1c9a      	adds	r2, r3, #2
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount -= 2U;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002876:	b29b      	uxth	r3, r3
 8002878:	3b02      	subs	r3, #2
 800287a:	b29a      	uxth	r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002880:	e012      	b.n	80028a8 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	330c      	adds	r3, #12
 800288c:	7812      	ldrb	r2, [r2, #0]
 800288e:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002894:	1c5a      	adds	r2, r3, #1
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount--;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800289e:	b29b      	uxth	r3, r3
 80028a0:	3b01      	subs	r3, #1
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d111      	bne.n	80028d6 <SPI_2linesTxISR_8BIT+0x8c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	685a      	ldr	r2, [r3, #4]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2180      	movs	r1, #128	@ 0x80
 80028be:	438a      	bics	r2, r1
 80028c0:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2246      	movs	r2, #70	@ 0x46
 80028c6:	5a9b      	ldrh	r3, [r3, r2]
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d103      	bne.n	80028d6 <SPI_2linesTxISR_8BIT+0x8c>
    {
      SPI_CloseRxTx_ISR(hspi);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	0018      	movs	r0, r3
 80028d2:	f000 f9df 	bl	8002c94 <SPI_CloseRxTx_ISR>
    }
  }
}
 80028d6:	46c0      	nop			@ (mov r8, r8)
 80028d8:	46bd      	mov	sp, r7
 80028da:	b002      	add	sp, #8
 80028dc:	bd80      	pop	{r7, pc}

080028de <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	b082      	sub	sp, #8
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	68da      	ldr	r2, [r3, #12]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f0:	b292      	uxth	r2, r2
 80028f2:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f8:	1c9a      	adds	r2, r3, #2
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2246      	movs	r2, #70	@ 0x46
 8002902:	5a9b      	ldrh	r3, [r3, r2]
 8002904:	b29b      	uxth	r3, r3
 8002906:	3b01      	subs	r3, #1
 8002908:	b299      	uxth	r1, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2246      	movs	r2, #70	@ 0x46
 800290e:	5299      	strh	r1, [r3, r2]

  if (hspi->RxXferCount == 0U)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2246      	movs	r2, #70	@ 0x46
 8002914:	5a9b      	ldrh	r3, [r3, r2]
 8002916:	b29b      	uxth	r3, r3
 8002918:	2b00      	cmp	r3, #0
 800291a:	d110      	bne.n	800293e <SPI_2linesRxISR_16BIT+0x60>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	685a      	ldr	r2, [r3, #4]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2140      	movs	r1, #64	@ 0x40
 8002928:	438a      	bics	r2, r1
 800292a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002930:	b29b      	uxth	r3, r3
 8002932:	2b00      	cmp	r3, #0
 8002934:	d103      	bne.n	800293e <SPI_2linesRxISR_16BIT+0x60>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	0018      	movs	r0, r3
 800293a:	f000 f9ab 	bl	8002c94 <SPI_CloseRxTx_ISR>
    }
  }
}
 800293e:	46c0      	nop			@ (mov r8, r8)
 8002940:	46bd      	mov	sp, r7
 8002942:	b002      	add	sp, #8
 8002944:	bd80      	pop	{r7, pc}

08002946 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b082      	sub	sp, #8
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002952:	881a      	ldrh	r2, [r3, #0]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800295e:	1c9a      	adds	r2, r3, #2
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002968:	b29b      	uxth	r3, r3
 800296a:	3b01      	subs	r3, #1
 800296c:	b29a      	uxth	r2, r3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002976:	b29b      	uxth	r3, r3
 8002978:	2b00      	cmp	r3, #0
 800297a:	d111      	bne.n	80029a0 <SPI_2linesTxISR_16BIT+0x5a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	685a      	ldr	r2, [r3, #4]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2180      	movs	r1, #128	@ 0x80
 8002988:	438a      	bics	r2, r1
 800298a:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2246      	movs	r2, #70	@ 0x46
 8002990:	5a9b      	ldrh	r3, [r3, r2]
 8002992:	b29b      	uxth	r3, r3
 8002994:	2b00      	cmp	r3, #0
 8002996:	d103      	bne.n	80029a0 <SPI_2linesTxISR_16BIT+0x5a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	0018      	movs	r0, r3
 800299c:	f000 f97a 	bl	8002c94 <SPI_CloseRxTx_ISR>
    }
  }
}
 80029a0:	46c0      	nop			@ (mov r8, r8)
 80029a2:	46bd      	mov	sp, r7
 80029a4:	b002      	add	sp, #8
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b088      	sub	sp, #32
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	603b      	str	r3, [r7, #0]
 80029b4:	1dfb      	adds	r3, r7, #7
 80029b6:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80029b8:	f7fe fb70 	bl	800109c <HAL_GetTick>
 80029bc:	0002      	movs	r2, r0
 80029be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029c0:	1a9b      	subs	r3, r3, r2
 80029c2:	683a      	ldr	r2, [r7, #0]
 80029c4:	18d3      	adds	r3, r2, r3
 80029c6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80029c8:	f7fe fb68 	bl	800109c <HAL_GetTick>
 80029cc:	0003      	movs	r3, r0
 80029ce:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80029d0:	4b3a      	ldr	r3, [pc, #232]	@ (8002abc <SPI_WaitFlagStateUntilTimeout+0x114>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	015b      	lsls	r3, r3, #5
 80029d6:	0d1b      	lsrs	r3, r3, #20
 80029d8:	69fa      	ldr	r2, [r7, #28]
 80029da:	4353      	muls	r3, r2
 80029dc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80029de:	e058      	b.n	8002a92 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	3301      	adds	r3, #1
 80029e4:	d055      	beq.n	8002a92 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80029e6:	f7fe fb59 	bl	800109c <HAL_GetTick>
 80029ea:	0002      	movs	r2, r0
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	69fa      	ldr	r2, [r7, #28]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d902      	bls.n	80029fc <SPI_WaitFlagStateUntilTimeout+0x54>
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d142      	bne.n	8002a82 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	685a      	ldr	r2, [r3, #4]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	21e0      	movs	r1, #224	@ 0xe0
 8002a08:	438a      	bics	r2, r1
 8002a0a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	685a      	ldr	r2, [r3, #4]
 8002a10:	2382      	movs	r3, #130	@ 0x82
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d113      	bne.n	8002a40 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	689a      	ldr	r2, [r3, #8]
 8002a1c:	2380      	movs	r3, #128	@ 0x80
 8002a1e:	021b      	lsls	r3, r3, #8
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d005      	beq.n	8002a30 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	689a      	ldr	r2, [r3, #8]
 8002a28:	2380      	movs	r3, #128	@ 0x80
 8002a2a:	00db      	lsls	r3, r3, #3
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d107      	bne.n	8002a40 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2140      	movs	r1, #64	@ 0x40
 8002a3c:	438a      	bics	r2, r1
 8002a3e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a44:	2380      	movs	r3, #128	@ 0x80
 8002a46:	019b      	lsls	r3, r3, #6
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d110      	bne.n	8002a6e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	491a      	ldr	r1, [pc, #104]	@ (8002ac0 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002a58:	400a      	ands	r2, r1
 8002a5a:	601a      	str	r2, [r3, #0]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2180      	movs	r1, #128	@ 0x80
 8002a68:	0189      	lsls	r1, r1, #6
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	225d      	movs	r2, #93	@ 0x5d
 8002a72:	2101      	movs	r1, #1
 8002a74:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	225c      	movs	r2, #92	@ 0x5c
 8002a7a:	2100      	movs	r1, #0
 8002a7c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e017      	b.n	8002ab2 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d101      	bne.n	8002a8c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	68ba      	ldr	r2, [r7, #8]
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	68ba      	ldr	r2, [r7, #8]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	425a      	negs	r2, r3
 8002aa2:	4153      	adcs	r3, r2
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	001a      	movs	r2, r3
 8002aa8:	1dfb      	adds	r3, r7, #7
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d197      	bne.n	80029e0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	0018      	movs	r0, r3
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	b008      	add	sp, #32
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	46c0      	nop			@ (mov r8, r8)
 8002abc:	20000010 	.word	0x20000010
 8002ac0:	ffffdfff 	.word	0xffffdfff

08002ac4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b08a      	sub	sp, #40	@ 0x28
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	607a      	str	r2, [r7, #4]
 8002ad0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002ad2:	2317      	movs	r3, #23
 8002ad4:	18fb      	adds	r3, r7, r3
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002ada:	f7fe fadf 	bl	800109c <HAL_GetTick>
 8002ade:	0002      	movs	r2, r0
 8002ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ae2:	1a9b      	subs	r3, r3, r2
 8002ae4:	683a      	ldr	r2, [r7, #0]
 8002ae6:	18d3      	adds	r3, r2, r3
 8002ae8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8002aea:	f7fe fad7 	bl	800109c <HAL_GetTick>
 8002aee:	0003      	movs	r3, r0
 8002af0:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	330c      	adds	r3, #12
 8002af8:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002afa:	4b41      	ldr	r3, [pc, #260]	@ (8002c00 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	0013      	movs	r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	189b      	adds	r3, r3, r2
 8002b04:	00da      	lsls	r2, r3, #3
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	0d1b      	lsrs	r3, r3, #20
 8002b0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b0c:	4353      	muls	r3, r2
 8002b0e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002b10:	e068      	b.n	8002be4 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002b12:	68ba      	ldr	r2, [r7, #8]
 8002b14:	23c0      	movs	r3, #192	@ 0xc0
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d10a      	bne.n	8002b32 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d107      	bne.n	8002b32 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	b2da      	uxtb	r2, r3
 8002b28:	2117      	movs	r1, #23
 8002b2a:	187b      	adds	r3, r7, r1
 8002b2c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002b2e:	187b      	adds	r3, r7, r1
 8002b30:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	3301      	adds	r3, #1
 8002b36:	d055      	beq.n	8002be4 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002b38:	f7fe fab0 	bl	800109c <HAL_GetTick>
 8002b3c:	0002      	movs	r2, r0
 8002b3e:	6a3b      	ldr	r3, [r7, #32]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d902      	bls.n	8002b4e <SPI_WaitFifoStateUntilTimeout+0x8a>
 8002b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d142      	bne.n	8002bd4 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	685a      	ldr	r2, [r3, #4]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	21e0      	movs	r1, #224	@ 0xe0
 8002b5a:	438a      	bics	r2, r1
 8002b5c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	685a      	ldr	r2, [r3, #4]
 8002b62:	2382      	movs	r3, #130	@ 0x82
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d113      	bne.n	8002b92 <SPI_WaitFifoStateUntilTimeout+0xce>
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	689a      	ldr	r2, [r3, #8]
 8002b6e:	2380      	movs	r3, #128	@ 0x80
 8002b70:	021b      	lsls	r3, r3, #8
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d005      	beq.n	8002b82 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	689a      	ldr	r2, [r3, #8]
 8002b7a:	2380      	movs	r3, #128	@ 0x80
 8002b7c:	00db      	lsls	r3, r3, #3
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d107      	bne.n	8002b92 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2140      	movs	r1, #64	@ 0x40
 8002b8e:	438a      	bics	r2, r1
 8002b90:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b96:	2380      	movs	r3, #128	@ 0x80
 8002b98:	019b      	lsls	r3, r3, #6
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d110      	bne.n	8002bc0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4916      	ldr	r1, [pc, #88]	@ (8002c04 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8002baa:	400a      	ands	r2, r1
 8002bac:	601a      	str	r2, [r3, #0]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2180      	movs	r1, #128	@ 0x80
 8002bba:	0189      	lsls	r1, r1, #6
 8002bbc:	430a      	orrs	r2, r1
 8002bbe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	225d      	movs	r2, #93	@ 0x5d
 8002bc4:	2101      	movs	r1, #1
 8002bc6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	225c      	movs	r2, #92	@ 0x5c
 8002bcc:	2100      	movs	r1, #0
 8002bce:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e010      	b.n	8002bf6 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d101      	bne.n	8002bde <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	3b01      	subs	r3, #1
 8002be2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	68ba      	ldr	r2, [r7, #8]
 8002bec:	4013      	ands	r3, r2
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d18e      	bne.n	8002b12 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	0018      	movs	r0, r3
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	b00a      	add	sp, #40	@ 0x28
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	46c0      	nop			@ (mov r8, r8)
 8002c00:	20000010 	.word	0x20000010
 8002c04:	ffffdfff 	.word	0xffffdfff

08002c08 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b086      	sub	sp, #24
 8002c0c:	af02      	add	r7, sp, #8
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002c14:	68ba      	ldr	r2, [r7, #8]
 8002c16:	23c0      	movs	r3, #192	@ 0xc0
 8002c18:	0159      	lsls	r1, r3, #5
 8002c1a:	68f8      	ldr	r0, [r7, #12]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	9300      	str	r3, [sp, #0]
 8002c20:	0013      	movs	r3, r2
 8002c22:	2200      	movs	r2, #0
 8002c24:	f7ff ff4e 	bl	8002ac4 <SPI_WaitFifoStateUntilTimeout>
 8002c28:	1e03      	subs	r3, r0, #0
 8002c2a:	d007      	beq.n	8002c3c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c30:	2220      	movs	r2, #32
 8002c32:	431a      	orrs	r2, r3
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e027      	b.n	8002c8c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002c3c:	68ba      	ldr	r2, [r7, #8]
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	9300      	str	r3, [sp, #0]
 8002c44:	0013      	movs	r3, r2
 8002c46:	2200      	movs	r2, #0
 8002c48:	2180      	movs	r1, #128	@ 0x80
 8002c4a:	f7ff fead 	bl	80029a8 <SPI_WaitFlagStateUntilTimeout>
 8002c4e:	1e03      	subs	r3, r0, #0
 8002c50:	d007      	beq.n	8002c62 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c56:	2220      	movs	r2, #32
 8002c58:	431a      	orrs	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e014      	b.n	8002c8c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002c62:	68ba      	ldr	r2, [r7, #8]
 8002c64:	23c0      	movs	r3, #192	@ 0xc0
 8002c66:	00d9      	lsls	r1, r3, #3
 8002c68:	68f8      	ldr	r0, [r7, #12]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	9300      	str	r3, [sp, #0]
 8002c6e:	0013      	movs	r3, r2
 8002c70:	2200      	movs	r2, #0
 8002c72:	f7ff ff27 	bl	8002ac4 <SPI_WaitFifoStateUntilTimeout>
 8002c76:	1e03      	subs	r3, r0, #0
 8002c78:	d007      	beq.n	8002c8a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c7e:	2220      	movs	r2, #32
 8002c80:	431a      	orrs	r2, r3
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e000      	b.n	8002c8c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002c8a:	2300      	movs	r3, #0
}
 8002c8c:	0018      	movs	r0, r3
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	b004      	add	sp, #16
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002c9c:	f7fe f9fe 	bl	800109c <HAL_GetTick>
 8002ca0:	0003      	movs	r3, r0
 8002ca2:	60fb      	str	r3, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	685a      	ldr	r2, [r3, #4]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2120      	movs	r1, #32
 8002cb0:	438a      	bics	r2, r1
 8002cb2:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002cb4:	68fa      	ldr	r2, [r7, #12]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2164      	movs	r1, #100	@ 0x64
 8002cba:	0018      	movs	r0, r3
 8002cbc:	f7ff ffa4 	bl	8002c08 <SPI_EndRxTxTransaction>
 8002cc0:	1e03      	subs	r3, r0, #0
 8002cc2:	d005      	beq.n	8002cd0 <SPI_CloseRxTx_ISR+0x3c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cc8:	2220      	movs	r2, #32
 8002cca:	431a      	orrs	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	661a      	str	r2, [r3, #96]	@ 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d117      	bne.n	8002d08 <SPI_CloseRxTx_ISR+0x74>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	225d      	movs	r2, #93	@ 0x5d
 8002cdc:	5c9b      	ldrb	r3, [r3, r2]
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	2b04      	cmp	r3, #4
 8002ce2:	d108      	bne.n	8002cf6 <SPI_CloseRxTx_ISR+0x62>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	225d      	movs	r2, #93	@ 0x5d
 8002ce8:	2101      	movs	r1, #1
 8002cea:	5499      	strb	r1, [r3, r2]
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	0018      	movs	r0, r3
 8002cf0:	f7ff fd24 	bl	800273c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8002cf4:	e010      	b.n	8002d18 <SPI_CloseRxTx_ISR+0x84>
        hspi->State = HAL_SPI_STATE_READY;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	225d      	movs	r2, #93	@ 0x5d
 8002cfa:	2101      	movs	r1, #1
 8002cfc:	5499      	strb	r1, [r3, r2]
        HAL_SPI_TxRxCpltCallback(hspi);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	0018      	movs	r0, r3
 8002d02:	f7fd fe2d 	bl	8000960 <HAL_SPI_TxRxCpltCallback>
}
 8002d06:	e007      	b.n	8002d18 <SPI_CloseRxTx_ISR+0x84>
      hspi->State = HAL_SPI_STATE_READY;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	225d      	movs	r2, #93	@ 0x5d
 8002d0c:	2101      	movs	r1, #1
 8002d0e:	5499      	strb	r1, [r3, r2]
      HAL_SPI_ErrorCallback(hspi);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	0018      	movs	r0, r3
 8002d14:	f7ff fd1a 	bl	800274c <HAL_SPI_ErrorCallback>
}
 8002d18:	46c0      	nop			@ (mov r8, r8)
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	b004      	add	sp, #16
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d101      	bne.n	8002d32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e042      	b.n	8002db8 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	223d      	movs	r2, #61	@ 0x3d
 8002d36:	5c9b      	ldrb	r3, [r3, r2]
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d107      	bne.n	8002d4e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	223c      	movs	r2, #60	@ 0x3c
 8002d42:	2100      	movs	r1, #0
 8002d44:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	0018      	movs	r0, r3
 8002d4a:	f7fd fff5 	bl	8000d38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	223d      	movs	r2, #61	@ 0x3d
 8002d52:	2102      	movs	r1, #2
 8002d54:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	3304      	adds	r3, #4
 8002d5e:	0019      	movs	r1, r3
 8002d60:	0010      	movs	r0, r2
 8002d62:	f000 fac3 	bl	80032ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2246      	movs	r2, #70	@ 0x46
 8002d6a:	2101      	movs	r1, #1
 8002d6c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	223e      	movs	r2, #62	@ 0x3e
 8002d72:	2101      	movs	r1, #1
 8002d74:	5499      	strb	r1, [r3, r2]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	223f      	movs	r2, #63	@ 0x3f
 8002d7a:	2101      	movs	r1, #1
 8002d7c:	5499      	strb	r1, [r3, r2]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2240      	movs	r2, #64	@ 0x40
 8002d82:	2101      	movs	r1, #1
 8002d84:	5499      	strb	r1, [r3, r2]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2241      	movs	r2, #65	@ 0x41
 8002d8a:	2101      	movs	r1, #1
 8002d8c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2242      	movs	r2, #66	@ 0x42
 8002d92:	2101      	movs	r1, #1
 8002d94:	5499      	strb	r1, [r3, r2]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2243      	movs	r2, #67	@ 0x43
 8002d9a:	2101      	movs	r1, #1
 8002d9c:	5499      	strb	r1, [r3, r2]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2244      	movs	r2, #68	@ 0x44
 8002da2:	2101      	movs	r1, #1
 8002da4:	5499      	strb	r1, [r3, r2]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2245      	movs	r2, #69	@ 0x45
 8002daa:	2101      	movs	r1, #1
 8002dac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	223d      	movs	r2, #61	@ 0x3d
 8002db2:	2101      	movs	r1, #1
 8002db4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	0018      	movs	r0, r3
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	b002      	add	sp, #8
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d101      	bne.n	8002dd2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e042      	b.n	8002e58 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	223d      	movs	r2, #61	@ 0x3d
 8002dd6:	5c9b      	ldrb	r3, [r3, r2]
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d107      	bne.n	8002dee <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	223c      	movs	r2, #60	@ 0x3c
 8002de2:	2100      	movs	r1, #0
 8002de4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	0018      	movs	r0, r3
 8002dea:	f7fd ffd9 	bl	8000da0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	223d      	movs	r2, #61	@ 0x3d
 8002df2:	2102      	movs	r1, #2
 8002df4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	3304      	adds	r3, #4
 8002dfe:	0019      	movs	r1, r3
 8002e00:	0010      	movs	r0, r2
 8002e02:	f000 fa73 	bl	80032ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2246      	movs	r2, #70	@ 0x46
 8002e0a:	2101      	movs	r1, #1
 8002e0c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	223e      	movs	r2, #62	@ 0x3e
 8002e12:	2101      	movs	r1, #1
 8002e14:	5499      	strb	r1, [r3, r2]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	223f      	movs	r2, #63	@ 0x3f
 8002e1a:	2101      	movs	r1, #1
 8002e1c:	5499      	strb	r1, [r3, r2]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2240      	movs	r2, #64	@ 0x40
 8002e22:	2101      	movs	r1, #1
 8002e24:	5499      	strb	r1, [r3, r2]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2241      	movs	r2, #65	@ 0x41
 8002e2a:	2101      	movs	r1, #1
 8002e2c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2242      	movs	r2, #66	@ 0x42
 8002e32:	2101      	movs	r1, #1
 8002e34:	5499      	strb	r1, [r3, r2]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2243      	movs	r2, #67	@ 0x43
 8002e3a:	2101      	movs	r1, #1
 8002e3c:	5499      	strb	r1, [r3, r2]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2244      	movs	r2, #68	@ 0x44
 8002e42:	2101      	movs	r1, #1
 8002e44:	5499      	strb	r1, [r3, r2]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2245      	movs	r2, #69	@ 0x45
 8002e4a:	2101      	movs	r1, #1
 8002e4c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	223d      	movs	r2, #61	@ 0x3d
 8002e52:	2101      	movs	r1, #1
 8002e54:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	0018      	movs	r0, r3
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	b002      	add	sp, #8
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d108      	bne.n	8002e82 <HAL_TIM_PWM_Start+0x22>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	223e      	movs	r2, #62	@ 0x3e
 8002e74:	5c9b      	ldrb	r3, [r3, r2]
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	3b01      	subs	r3, #1
 8002e7a:	1e5a      	subs	r2, r3, #1
 8002e7c:	4193      	sbcs	r3, r2
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	e01f      	b.n	8002ec2 <HAL_TIM_PWM_Start+0x62>
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	2b04      	cmp	r3, #4
 8002e86:	d108      	bne.n	8002e9a <HAL_TIM_PWM_Start+0x3a>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	223f      	movs	r2, #63	@ 0x3f
 8002e8c:	5c9b      	ldrb	r3, [r3, r2]
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	3b01      	subs	r3, #1
 8002e92:	1e5a      	subs	r2, r3, #1
 8002e94:	4193      	sbcs	r3, r2
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	e013      	b.n	8002ec2 <HAL_TIM_PWM_Start+0x62>
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	2b08      	cmp	r3, #8
 8002e9e:	d108      	bne.n	8002eb2 <HAL_TIM_PWM_Start+0x52>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2240      	movs	r2, #64	@ 0x40
 8002ea4:	5c9b      	ldrb	r3, [r3, r2]
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	3b01      	subs	r3, #1
 8002eaa:	1e5a      	subs	r2, r3, #1
 8002eac:	4193      	sbcs	r3, r2
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	e007      	b.n	8002ec2 <HAL_TIM_PWM_Start+0x62>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2241      	movs	r2, #65	@ 0x41
 8002eb6:	5c9b      	ldrb	r3, [r3, r2]
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	1e5a      	subs	r2, r3, #1
 8002ebe:	4193      	sbcs	r3, r2
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e06a      	b.n	8002fa0 <HAL_TIM_PWM_Start+0x140>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d104      	bne.n	8002eda <HAL_TIM_PWM_Start+0x7a>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	223e      	movs	r2, #62	@ 0x3e
 8002ed4:	2102      	movs	r1, #2
 8002ed6:	5499      	strb	r1, [r3, r2]
 8002ed8:	e013      	b.n	8002f02 <HAL_TIM_PWM_Start+0xa2>
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	2b04      	cmp	r3, #4
 8002ede:	d104      	bne.n	8002eea <HAL_TIM_PWM_Start+0x8a>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	223f      	movs	r2, #63	@ 0x3f
 8002ee4:	2102      	movs	r1, #2
 8002ee6:	5499      	strb	r1, [r3, r2]
 8002ee8:	e00b      	b.n	8002f02 <HAL_TIM_PWM_Start+0xa2>
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	2b08      	cmp	r3, #8
 8002eee:	d104      	bne.n	8002efa <HAL_TIM_PWM_Start+0x9a>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2240      	movs	r2, #64	@ 0x40
 8002ef4:	2102      	movs	r1, #2
 8002ef6:	5499      	strb	r1, [r3, r2]
 8002ef8:	e003      	b.n	8002f02 <HAL_TIM_PWM_Start+0xa2>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2241      	movs	r2, #65	@ 0x41
 8002efe:	2102      	movs	r1, #2
 8002f00:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	6839      	ldr	r1, [r7, #0]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	0018      	movs	r0, r3
 8002f0c:	f000 fcde 	bl	80038cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a24      	ldr	r2, [pc, #144]	@ (8002fa8 <HAL_TIM_PWM_Start+0x148>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d009      	beq.n	8002f2e <HAL_TIM_PWM_Start+0xce>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a23      	ldr	r2, [pc, #140]	@ (8002fac <HAL_TIM_PWM_Start+0x14c>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d004      	beq.n	8002f2e <HAL_TIM_PWM_Start+0xce>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a21      	ldr	r2, [pc, #132]	@ (8002fb0 <HAL_TIM_PWM_Start+0x150>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d101      	bne.n	8002f32 <HAL_TIM_PWM_Start+0xd2>
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e000      	b.n	8002f34 <HAL_TIM_PWM_Start+0xd4>
 8002f32:	2300      	movs	r3, #0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d008      	beq.n	8002f4a <HAL_TIM_PWM_Start+0xea>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2180      	movs	r1, #128	@ 0x80
 8002f44:	0209      	lsls	r1, r1, #8
 8002f46:	430a      	orrs	r2, r1
 8002f48:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a16      	ldr	r2, [pc, #88]	@ (8002fa8 <HAL_TIM_PWM_Start+0x148>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d00a      	beq.n	8002f6a <HAL_TIM_PWM_Start+0x10a>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	2380      	movs	r3, #128	@ 0x80
 8002f5a:	05db      	lsls	r3, r3, #23
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d004      	beq.n	8002f6a <HAL_TIM_PWM_Start+0x10a>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a13      	ldr	r2, [pc, #76]	@ (8002fb4 <HAL_TIM_PWM_Start+0x154>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d111      	bne.n	8002f8e <HAL_TIM_PWM_Start+0x12e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	2207      	movs	r2, #7
 8002f72:	4013      	ands	r3, r2
 8002f74:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2b06      	cmp	r3, #6
 8002f7a:	d010      	beq.n	8002f9e <HAL_TIM_PWM_Start+0x13e>
    {
      __HAL_TIM_ENABLE(htim);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2101      	movs	r1, #1
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f8c:	e007      	b.n	8002f9e <HAL_TIM_PWM_Start+0x13e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2101      	movs	r1, #1
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	0018      	movs	r0, r3
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	b004      	add	sp, #16
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	40012c00 	.word	0x40012c00
 8002fac:	40014400 	.word	0x40014400
 8002fb0:	40014800 	.word	0x40014800
 8002fb4:	40000400 	.word	0x40000400

08002fb8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b086      	sub	sp, #24
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fc4:	2317      	movs	r3, #23
 8002fc6:	18fb      	adds	r3, r7, r3
 8002fc8:	2200      	movs	r2, #0
 8002fca:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	223c      	movs	r2, #60	@ 0x3c
 8002fd0:	5c9b      	ldrb	r3, [r3, r2]
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d101      	bne.n	8002fda <HAL_TIM_PWM_ConfigChannel+0x22>
 8002fd6:	2302      	movs	r3, #2
 8002fd8:	e0ad      	b.n	8003136 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	223c      	movs	r2, #60	@ 0x3c
 8002fde:	2101      	movs	r1, #1
 8002fe0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2b0c      	cmp	r3, #12
 8002fe6:	d100      	bne.n	8002fea <HAL_TIM_PWM_ConfigChannel+0x32>
 8002fe8:	e076      	b.n	80030d8 <HAL_TIM_PWM_ConfigChannel+0x120>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2b0c      	cmp	r3, #12
 8002fee:	d900      	bls.n	8002ff2 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002ff0:	e095      	b.n	800311e <HAL_TIM_PWM_ConfigChannel+0x166>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2b08      	cmp	r3, #8
 8002ff6:	d04e      	beq.n	8003096 <HAL_TIM_PWM_ConfigChannel+0xde>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2b08      	cmp	r3, #8
 8002ffc:	d900      	bls.n	8003000 <HAL_TIM_PWM_ConfigChannel+0x48>
 8002ffe:	e08e      	b.n	800311e <HAL_TIM_PWM_ConfigChannel+0x166>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d003      	beq.n	800300e <HAL_TIM_PWM_ConfigChannel+0x56>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2b04      	cmp	r3, #4
 800300a:	d021      	beq.n	8003050 <HAL_TIM_PWM_ConfigChannel+0x98>
 800300c:	e087      	b.n	800311e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68ba      	ldr	r2, [r7, #8]
 8003014:	0011      	movs	r1, r2
 8003016:	0018      	movs	r0, r3
 8003018:	f000 f9de 	bl	80033d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	699a      	ldr	r2, [r3, #24]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2108      	movs	r1, #8
 8003028:	430a      	orrs	r2, r1
 800302a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	699a      	ldr	r2, [r3, #24]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2104      	movs	r1, #4
 8003038:	438a      	bics	r2, r1
 800303a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	6999      	ldr	r1, [r3, #24]
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	691a      	ldr	r2, [r3, #16]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	430a      	orrs	r2, r1
 800304c:	619a      	str	r2, [r3, #24]
      break;
 800304e:	e06b      	b.n	8003128 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68ba      	ldr	r2, [r7, #8]
 8003056:	0011      	movs	r1, r2
 8003058:	0018      	movs	r0, r3
 800305a:	f000 fa3b 	bl	80034d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	699a      	ldr	r2, [r3, #24]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2180      	movs	r1, #128	@ 0x80
 800306a:	0109      	lsls	r1, r1, #4
 800306c:	430a      	orrs	r2, r1
 800306e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	699a      	ldr	r2, [r3, #24]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4931      	ldr	r1, [pc, #196]	@ (8003140 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800307c:	400a      	ands	r2, r1
 800307e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	6999      	ldr	r1, [r3, #24]
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	021a      	lsls	r2, r3, #8
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	430a      	orrs	r2, r1
 8003092:	619a      	str	r2, [r3, #24]
      break;
 8003094:	e048      	b.n	8003128 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	68ba      	ldr	r2, [r7, #8]
 800309c:	0011      	movs	r1, r2
 800309e:	0018      	movs	r0, r3
 80030a0:	f000 fa96 	bl	80035d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	69da      	ldr	r2, [r3, #28]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2108      	movs	r1, #8
 80030b0:	430a      	orrs	r2, r1
 80030b2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	69da      	ldr	r2, [r3, #28]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2104      	movs	r1, #4
 80030c0:	438a      	bics	r2, r1
 80030c2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	69d9      	ldr	r1, [r3, #28]
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	691a      	ldr	r2, [r3, #16]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	430a      	orrs	r2, r1
 80030d4:	61da      	str	r2, [r3, #28]
      break;
 80030d6:	e027      	b.n	8003128 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	68ba      	ldr	r2, [r7, #8]
 80030de:	0011      	movs	r1, r2
 80030e0:	0018      	movs	r0, r3
 80030e2:	f000 faf5 	bl	80036d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	69da      	ldr	r2, [r3, #28]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2180      	movs	r1, #128	@ 0x80
 80030f2:	0109      	lsls	r1, r1, #4
 80030f4:	430a      	orrs	r2, r1
 80030f6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	69da      	ldr	r2, [r3, #28]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	490f      	ldr	r1, [pc, #60]	@ (8003140 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003104:	400a      	ands	r2, r1
 8003106:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	69d9      	ldr	r1, [r3, #28]
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	021a      	lsls	r2, r3, #8
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	430a      	orrs	r2, r1
 800311a:	61da      	str	r2, [r3, #28]
      break;
 800311c:	e004      	b.n	8003128 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800311e:	2317      	movs	r3, #23
 8003120:	18fb      	adds	r3, r7, r3
 8003122:	2201      	movs	r2, #1
 8003124:	701a      	strb	r2, [r3, #0]
      break;
 8003126:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	223c      	movs	r2, #60	@ 0x3c
 800312c:	2100      	movs	r1, #0
 800312e:	5499      	strb	r1, [r3, r2]

  return status;
 8003130:	2317      	movs	r3, #23
 8003132:	18fb      	adds	r3, r7, r3
 8003134:	781b      	ldrb	r3, [r3, #0]
}
 8003136:	0018      	movs	r0, r3
 8003138:	46bd      	mov	sp, r7
 800313a:	b006      	add	sp, #24
 800313c:	bd80      	pop	{r7, pc}
 800313e:	46c0      	nop			@ (mov r8, r8)
 8003140:	fffffbff 	.word	0xfffffbff

08003144 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800314e:	230f      	movs	r3, #15
 8003150:	18fb      	adds	r3, r7, r3
 8003152:	2200      	movs	r2, #0
 8003154:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	223c      	movs	r2, #60	@ 0x3c
 800315a:	5c9b      	ldrb	r3, [r3, r2]
 800315c:	2b01      	cmp	r3, #1
 800315e:	d101      	bne.n	8003164 <HAL_TIM_ConfigClockSource+0x20>
 8003160:	2302      	movs	r3, #2
 8003162:	e0bc      	b.n	80032de <HAL_TIM_ConfigClockSource+0x19a>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	223c      	movs	r2, #60	@ 0x3c
 8003168:	2101      	movs	r1, #1
 800316a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	223d      	movs	r2, #61	@ 0x3d
 8003170:	2102      	movs	r1, #2
 8003172:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	2277      	movs	r2, #119	@ 0x77
 8003180:	4393      	bics	r3, r2
 8003182:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	4a58      	ldr	r2, [pc, #352]	@ (80032e8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003188:	4013      	ands	r3, r2
 800318a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	68ba      	ldr	r2, [r7, #8]
 8003192:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2280      	movs	r2, #128	@ 0x80
 800319a:	0192      	lsls	r2, r2, #6
 800319c:	4293      	cmp	r3, r2
 800319e:	d040      	beq.n	8003222 <HAL_TIM_ConfigClockSource+0xde>
 80031a0:	2280      	movs	r2, #128	@ 0x80
 80031a2:	0192      	lsls	r2, r2, #6
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d900      	bls.n	80031aa <HAL_TIM_ConfigClockSource+0x66>
 80031a8:	e088      	b.n	80032bc <HAL_TIM_ConfigClockSource+0x178>
 80031aa:	2280      	movs	r2, #128	@ 0x80
 80031ac:	0152      	lsls	r2, r2, #5
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d100      	bne.n	80031b4 <HAL_TIM_ConfigClockSource+0x70>
 80031b2:	e088      	b.n	80032c6 <HAL_TIM_ConfigClockSource+0x182>
 80031b4:	2280      	movs	r2, #128	@ 0x80
 80031b6:	0152      	lsls	r2, r2, #5
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d900      	bls.n	80031be <HAL_TIM_ConfigClockSource+0x7a>
 80031bc:	e07e      	b.n	80032bc <HAL_TIM_ConfigClockSource+0x178>
 80031be:	2b70      	cmp	r3, #112	@ 0x70
 80031c0:	d018      	beq.n	80031f4 <HAL_TIM_ConfigClockSource+0xb0>
 80031c2:	d900      	bls.n	80031c6 <HAL_TIM_ConfigClockSource+0x82>
 80031c4:	e07a      	b.n	80032bc <HAL_TIM_ConfigClockSource+0x178>
 80031c6:	2b60      	cmp	r3, #96	@ 0x60
 80031c8:	d04f      	beq.n	800326a <HAL_TIM_ConfigClockSource+0x126>
 80031ca:	d900      	bls.n	80031ce <HAL_TIM_ConfigClockSource+0x8a>
 80031cc:	e076      	b.n	80032bc <HAL_TIM_ConfigClockSource+0x178>
 80031ce:	2b50      	cmp	r3, #80	@ 0x50
 80031d0:	d03b      	beq.n	800324a <HAL_TIM_ConfigClockSource+0x106>
 80031d2:	d900      	bls.n	80031d6 <HAL_TIM_ConfigClockSource+0x92>
 80031d4:	e072      	b.n	80032bc <HAL_TIM_ConfigClockSource+0x178>
 80031d6:	2b40      	cmp	r3, #64	@ 0x40
 80031d8:	d057      	beq.n	800328a <HAL_TIM_ConfigClockSource+0x146>
 80031da:	d900      	bls.n	80031de <HAL_TIM_ConfigClockSource+0x9a>
 80031dc:	e06e      	b.n	80032bc <HAL_TIM_ConfigClockSource+0x178>
 80031de:	2b30      	cmp	r3, #48	@ 0x30
 80031e0:	d063      	beq.n	80032aa <HAL_TIM_ConfigClockSource+0x166>
 80031e2:	d86b      	bhi.n	80032bc <HAL_TIM_ConfigClockSource+0x178>
 80031e4:	2b20      	cmp	r3, #32
 80031e6:	d060      	beq.n	80032aa <HAL_TIM_ConfigClockSource+0x166>
 80031e8:	d868      	bhi.n	80032bc <HAL_TIM_ConfigClockSource+0x178>
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d05d      	beq.n	80032aa <HAL_TIM_ConfigClockSource+0x166>
 80031ee:	2b10      	cmp	r3, #16
 80031f0:	d05b      	beq.n	80032aa <HAL_TIM_ConfigClockSource+0x166>
 80031f2:	e063      	b.n	80032bc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003204:	f000 fb42 	bl	800388c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	2277      	movs	r2, #119	@ 0x77
 8003214:	4313      	orrs	r3, r2
 8003216:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	68ba      	ldr	r2, [r7, #8]
 800321e:	609a      	str	r2, [r3, #8]
      break;
 8003220:	e052      	b.n	80032c8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003232:	f000 fb2b 	bl	800388c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	689a      	ldr	r2, [r3, #8]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2180      	movs	r1, #128	@ 0x80
 8003242:	01c9      	lsls	r1, r1, #7
 8003244:	430a      	orrs	r2, r1
 8003246:	609a      	str	r2, [r3, #8]
      break;
 8003248:	e03e      	b.n	80032c8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003256:	001a      	movs	r2, r3
 8003258:	f000 fa9e 	bl	8003798 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2150      	movs	r1, #80	@ 0x50
 8003262:	0018      	movs	r0, r3
 8003264:	f000 faf8 	bl	8003858 <TIM_ITRx_SetConfig>
      break;
 8003268:	e02e      	b.n	80032c8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003276:	001a      	movs	r2, r3
 8003278:	f000 fabc 	bl	80037f4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2160      	movs	r1, #96	@ 0x60
 8003282:	0018      	movs	r0, r3
 8003284:	f000 fae8 	bl	8003858 <TIM_ITRx_SetConfig>
      break;
 8003288:	e01e      	b.n	80032c8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003296:	001a      	movs	r2, r3
 8003298:	f000 fa7e 	bl	8003798 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2140      	movs	r1, #64	@ 0x40
 80032a2:	0018      	movs	r0, r3
 80032a4:	f000 fad8 	bl	8003858 <TIM_ITRx_SetConfig>
      break;
 80032a8:	e00e      	b.n	80032c8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	0019      	movs	r1, r3
 80032b4:	0010      	movs	r0, r2
 80032b6:	f000 facf 	bl	8003858 <TIM_ITRx_SetConfig>
      break;
 80032ba:	e005      	b.n	80032c8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80032bc:	230f      	movs	r3, #15
 80032be:	18fb      	adds	r3, r7, r3
 80032c0:	2201      	movs	r2, #1
 80032c2:	701a      	strb	r2, [r3, #0]
      break;
 80032c4:	e000      	b.n	80032c8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80032c6:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	223d      	movs	r2, #61	@ 0x3d
 80032cc:	2101      	movs	r1, #1
 80032ce:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	223c      	movs	r2, #60	@ 0x3c
 80032d4:	2100      	movs	r1, #0
 80032d6:	5499      	strb	r1, [r3, r2]

  return status;
 80032d8:	230f      	movs	r3, #15
 80032da:	18fb      	adds	r3, r7, r3
 80032dc:	781b      	ldrb	r3, [r3, #0]
}
 80032de:	0018      	movs	r0, r3
 80032e0:	46bd      	mov	sp, r7
 80032e2:	b004      	add	sp, #16
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	46c0      	nop			@ (mov r8, r8)
 80032e8:	ffff00ff 	.word	0xffff00ff

080032ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4a30      	ldr	r2, [pc, #192]	@ (80033c0 <TIM_Base_SetConfig+0xd4>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d008      	beq.n	8003316 <TIM_Base_SetConfig+0x2a>
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	2380      	movs	r3, #128	@ 0x80
 8003308:	05db      	lsls	r3, r3, #23
 800330a:	429a      	cmp	r2, r3
 800330c:	d003      	beq.n	8003316 <TIM_Base_SetConfig+0x2a>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a2c      	ldr	r2, [pc, #176]	@ (80033c4 <TIM_Base_SetConfig+0xd8>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d108      	bne.n	8003328 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2270      	movs	r2, #112	@ 0x70
 800331a:	4393      	bics	r3, r2
 800331c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	4313      	orrs	r3, r2
 8003326:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a25      	ldr	r2, [pc, #148]	@ (80033c0 <TIM_Base_SetConfig+0xd4>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d014      	beq.n	800335a <TIM_Base_SetConfig+0x6e>
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	2380      	movs	r3, #128	@ 0x80
 8003334:	05db      	lsls	r3, r3, #23
 8003336:	429a      	cmp	r2, r3
 8003338:	d00f      	beq.n	800335a <TIM_Base_SetConfig+0x6e>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a21      	ldr	r2, [pc, #132]	@ (80033c4 <TIM_Base_SetConfig+0xd8>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d00b      	beq.n	800335a <TIM_Base_SetConfig+0x6e>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a20      	ldr	r2, [pc, #128]	@ (80033c8 <TIM_Base_SetConfig+0xdc>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d007      	beq.n	800335a <TIM_Base_SetConfig+0x6e>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a1f      	ldr	r2, [pc, #124]	@ (80033cc <TIM_Base_SetConfig+0xe0>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d003      	beq.n	800335a <TIM_Base_SetConfig+0x6e>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a1e      	ldr	r2, [pc, #120]	@ (80033d0 <TIM_Base_SetConfig+0xe4>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d108      	bne.n	800336c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	4a1d      	ldr	r2, [pc, #116]	@ (80033d4 <TIM_Base_SetConfig+0xe8>)
 800335e:	4013      	ands	r3, r2
 8003360:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	4313      	orrs	r3, r2
 800336a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2280      	movs	r2, #128	@ 0x80
 8003370:	4393      	bics	r3, r2
 8003372:	001a      	movs	r2, r3
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	695b      	ldr	r3, [r3, #20]
 8003378:	4313      	orrs	r3, r2
 800337a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	689a      	ldr	r2, [r3, #8]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a0a      	ldr	r2, [pc, #40]	@ (80033c0 <TIM_Base_SetConfig+0xd4>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d007      	beq.n	80033aa <TIM_Base_SetConfig+0xbe>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a0b      	ldr	r2, [pc, #44]	@ (80033cc <TIM_Base_SetConfig+0xe0>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d003      	beq.n	80033aa <TIM_Base_SetConfig+0xbe>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a0a      	ldr	r2, [pc, #40]	@ (80033d0 <TIM_Base_SetConfig+0xe4>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d103      	bne.n	80033b2 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	691a      	ldr	r2, [r3, #16]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2201      	movs	r2, #1
 80033b6:	615a      	str	r2, [r3, #20]
}
 80033b8:	46c0      	nop			@ (mov r8, r8)
 80033ba:	46bd      	mov	sp, r7
 80033bc:	b004      	add	sp, #16
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	40012c00 	.word	0x40012c00
 80033c4:	40000400 	.word	0x40000400
 80033c8:	40002000 	.word	0x40002000
 80033cc:	40014400 	.word	0x40014400
 80033d0:	40014800 	.word	0x40014800
 80033d4:	fffffcff 	.word	0xfffffcff

080033d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b086      	sub	sp, #24
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a1b      	ldr	r3, [r3, #32]
 80033e6:	2201      	movs	r2, #1
 80033e8:	4393      	bics	r3, r2
 80033ea:	001a      	movs	r2, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a1b      	ldr	r3, [r3, #32]
 80033f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2270      	movs	r2, #112	@ 0x70
 8003406:	4393      	bics	r3, r2
 8003408:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2203      	movs	r2, #3
 800340e:	4393      	bics	r3, r2
 8003410:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	68fa      	ldr	r2, [r7, #12]
 8003418:	4313      	orrs	r3, r2
 800341a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	2202      	movs	r2, #2
 8003420:	4393      	bics	r3, r2
 8003422:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	697a      	ldr	r2, [r7, #20]
 800342a:	4313      	orrs	r3, r2
 800342c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a23      	ldr	r2, [pc, #140]	@ (80034c0 <TIM_OC1_SetConfig+0xe8>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d007      	beq.n	8003446 <TIM_OC1_SetConfig+0x6e>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a22      	ldr	r2, [pc, #136]	@ (80034c4 <TIM_OC1_SetConfig+0xec>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d003      	beq.n	8003446 <TIM_OC1_SetConfig+0x6e>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a21      	ldr	r2, [pc, #132]	@ (80034c8 <TIM_OC1_SetConfig+0xf0>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d10c      	bne.n	8003460 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	2208      	movs	r2, #8
 800344a:	4393      	bics	r3, r2
 800344c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	697a      	ldr	r2, [r7, #20]
 8003454:	4313      	orrs	r3, r2
 8003456:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	2204      	movs	r2, #4
 800345c:	4393      	bics	r3, r2
 800345e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	4a17      	ldr	r2, [pc, #92]	@ (80034c0 <TIM_OC1_SetConfig+0xe8>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d007      	beq.n	8003478 <TIM_OC1_SetConfig+0xa0>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	4a16      	ldr	r2, [pc, #88]	@ (80034c4 <TIM_OC1_SetConfig+0xec>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d003      	beq.n	8003478 <TIM_OC1_SetConfig+0xa0>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	4a15      	ldr	r2, [pc, #84]	@ (80034c8 <TIM_OC1_SetConfig+0xf0>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d111      	bne.n	800349c <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	4a14      	ldr	r2, [pc, #80]	@ (80034cc <TIM_OC1_SetConfig+0xf4>)
 800347c:	4013      	ands	r3, r2
 800347e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	4a13      	ldr	r2, [pc, #76]	@ (80034d0 <TIM_OC1_SetConfig+0xf8>)
 8003484:	4013      	ands	r3, r2
 8003486:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	695b      	ldr	r3, [r3, #20]
 800348c:	693a      	ldr	r2, [r7, #16]
 800348e:	4313      	orrs	r3, r2
 8003490:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	4313      	orrs	r3, r2
 800349a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	693a      	ldr	r2, [r7, #16]
 80034a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	68fa      	ldr	r2, [r7, #12]
 80034a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	685a      	ldr	r2, [r3, #4]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	697a      	ldr	r2, [r7, #20]
 80034b4:	621a      	str	r2, [r3, #32]
}
 80034b6:	46c0      	nop			@ (mov r8, r8)
 80034b8:	46bd      	mov	sp, r7
 80034ba:	b006      	add	sp, #24
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	46c0      	nop			@ (mov r8, r8)
 80034c0:	40012c00 	.word	0x40012c00
 80034c4:	40014400 	.word	0x40014400
 80034c8:	40014800 	.word	0x40014800
 80034cc:	fffffeff 	.word	0xfffffeff
 80034d0:	fffffdff 	.word	0xfffffdff

080034d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b086      	sub	sp, #24
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a1b      	ldr	r3, [r3, #32]
 80034e2:	2210      	movs	r2, #16
 80034e4:	4393      	bics	r3, r2
 80034e6:	001a      	movs	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a1b      	ldr	r3, [r3, #32]
 80034f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	699b      	ldr	r3, [r3, #24]
 80034fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	4a2c      	ldr	r2, [pc, #176]	@ (80035b4 <TIM_OC2_SetConfig+0xe0>)
 8003502:	4013      	ands	r3, r2
 8003504:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	4a2b      	ldr	r2, [pc, #172]	@ (80035b8 <TIM_OC2_SetConfig+0xe4>)
 800350a:	4013      	ands	r3, r2
 800350c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	021b      	lsls	r3, r3, #8
 8003514:	68fa      	ldr	r2, [r7, #12]
 8003516:	4313      	orrs	r3, r2
 8003518:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	2220      	movs	r2, #32
 800351e:	4393      	bics	r3, r2
 8003520:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	011b      	lsls	r3, r3, #4
 8003528:	697a      	ldr	r2, [r7, #20]
 800352a:	4313      	orrs	r3, r2
 800352c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a22      	ldr	r2, [pc, #136]	@ (80035bc <TIM_OC2_SetConfig+0xe8>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d10d      	bne.n	8003552 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	2280      	movs	r2, #128	@ 0x80
 800353a:	4393      	bics	r3, r2
 800353c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	011b      	lsls	r3, r3, #4
 8003544:	697a      	ldr	r2, [r7, #20]
 8003546:	4313      	orrs	r3, r2
 8003548:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	2240      	movs	r2, #64	@ 0x40
 800354e:	4393      	bics	r3, r2
 8003550:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a19      	ldr	r2, [pc, #100]	@ (80035bc <TIM_OC2_SetConfig+0xe8>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d007      	beq.n	800356a <TIM_OC2_SetConfig+0x96>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a18      	ldr	r2, [pc, #96]	@ (80035c0 <TIM_OC2_SetConfig+0xec>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d003      	beq.n	800356a <TIM_OC2_SetConfig+0x96>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a17      	ldr	r2, [pc, #92]	@ (80035c4 <TIM_OC2_SetConfig+0xf0>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d113      	bne.n	8003592 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	4a16      	ldr	r2, [pc, #88]	@ (80035c8 <TIM_OC2_SetConfig+0xf4>)
 800356e:	4013      	ands	r3, r2
 8003570:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	4a15      	ldr	r2, [pc, #84]	@ (80035cc <TIM_OC2_SetConfig+0xf8>)
 8003576:	4013      	ands	r3, r2
 8003578:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	695b      	ldr	r3, [r3, #20]
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	693a      	ldr	r2, [r7, #16]
 8003582:	4313      	orrs	r3, r2
 8003584:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	693a      	ldr	r2, [r7, #16]
 800358e:	4313      	orrs	r3, r2
 8003590:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	693a      	ldr	r2, [r7, #16]
 8003596:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	685a      	ldr	r2, [r3, #4]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	697a      	ldr	r2, [r7, #20]
 80035aa:	621a      	str	r2, [r3, #32]
}
 80035ac:	46c0      	nop			@ (mov r8, r8)
 80035ae:	46bd      	mov	sp, r7
 80035b0:	b006      	add	sp, #24
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	ffff8fff 	.word	0xffff8fff
 80035b8:	fffffcff 	.word	0xfffffcff
 80035bc:	40012c00 	.word	0x40012c00
 80035c0:	40014400 	.word	0x40014400
 80035c4:	40014800 	.word	0x40014800
 80035c8:	fffffbff 	.word	0xfffffbff
 80035cc:	fffff7ff 	.word	0xfffff7ff

080035d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b086      	sub	sp, #24
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a1b      	ldr	r3, [r3, #32]
 80035de:	4a33      	ldr	r2, [pc, #204]	@ (80036ac <TIM_OC3_SetConfig+0xdc>)
 80035e0:	401a      	ands	r2, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	69db      	ldr	r3, [r3, #28]
 80035f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2270      	movs	r2, #112	@ 0x70
 80035fc:	4393      	bics	r3, r2
 80035fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2203      	movs	r2, #3
 8003604:	4393      	bics	r3, r2
 8003606:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68fa      	ldr	r2, [r7, #12]
 800360e:	4313      	orrs	r3, r2
 8003610:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	4a26      	ldr	r2, [pc, #152]	@ (80036b0 <TIM_OC3_SetConfig+0xe0>)
 8003616:	4013      	ands	r3, r2
 8003618:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	021b      	lsls	r3, r3, #8
 8003620:	697a      	ldr	r2, [r7, #20]
 8003622:	4313      	orrs	r3, r2
 8003624:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a22      	ldr	r2, [pc, #136]	@ (80036b4 <TIM_OC3_SetConfig+0xe4>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d10d      	bne.n	800364a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	4a21      	ldr	r2, [pc, #132]	@ (80036b8 <TIM_OC3_SetConfig+0xe8>)
 8003632:	4013      	ands	r3, r2
 8003634:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	021b      	lsls	r3, r3, #8
 800363c:	697a      	ldr	r2, [r7, #20]
 800363e:	4313      	orrs	r3, r2
 8003640:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	4a1d      	ldr	r2, [pc, #116]	@ (80036bc <TIM_OC3_SetConfig+0xec>)
 8003646:	4013      	ands	r3, r2
 8003648:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a19      	ldr	r2, [pc, #100]	@ (80036b4 <TIM_OC3_SetConfig+0xe4>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d007      	beq.n	8003662 <TIM_OC3_SetConfig+0x92>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a1a      	ldr	r2, [pc, #104]	@ (80036c0 <TIM_OC3_SetConfig+0xf0>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d003      	beq.n	8003662 <TIM_OC3_SetConfig+0x92>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a19      	ldr	r2, [pc, #100]	@ (80036c4 <TIM_OC3_SetConfig+0xf4>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d113      	bne.n	800368a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	4a18      	ldr	r2, [pc, #96]	@ (80036c8 <TIM_OC3_SetConfig+0xf8>)
 8003666:	4013      	ands	r3, r2
 8003668:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	4a17      	ldr	r2, [pc, #92]	@ (80036cc <TIM_OC3_SetConfig+0xfc>)
 800366e:	4013      	ands	r3, r2
 8003670:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	011b      	lsls	r3, r3, #4
 8003678:	693a      	ldr	r2, [r7, #16]
 800367a:	4313      	orrs	r3, r2
 800367c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	699b      	ldr	r3, [r3, #24]
 8003682:	011b      	lsls	r3, r3, #4
 8003684:	693a      	ldr	r2, [r7, #16]
 8003686:	4313      	orrs	r3, r2
 8003688:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	693a      	ldr	r2, [r7, #16]
 800368e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	68fa      	ldr	r2, [r7, #12]
 8003694:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	685a      	ldr	r2, [r3, #4]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	697a      	ldr	r2, [r7, #20]
 80036a2:	621a      	str	r2, [r3, #32]
}
 80036a4:	46c0      	nop			@ (mov r8, r8)
 80036a6:	46bd      	mov	sp, r7
 80036a8:	b006      	add	sp, #24
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	fffffeff 	.word	0xfffffeff
 80036b0:	fffffdff 	.word	0xfffffdff
 80036b4:	40012c00 	.word	0x40012c00
 80036b8:	fffff7ff 	.word	0xfffff7ff
 80036bc:	fffffbff 	.word	0xfffffbff
 80036c0:	40014400 	.word	0x40014400
 80036c4:	40014800 	.word	0x40014800
 80036c8:	ffffefff 	.word	0xffffefff
 80036cc:	ffffdfff 	.word	0xffffdfff

080036d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b086      	sub	sp, #24
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a1b      	ldr	r3, [r3, #32]
 80036de:	4a26      	ldr	r2, [pc, #152]	@ (8003778 <TIM_OC4_SetConfig+0xa8>)
 80036e0:	401a      	ands	r2, r3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a1b      	ldr	r3, [r3, #32]
 80036ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	69db      	ldr	r3, [r3, #28]
 80036f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	4a20      	ldr	r2, [pc, #128]	@ (800377c <TIM_OC4_SetConfig+0xac>)
 80036fc:	4013      	ands	r3, r2
 80036fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	4a1f      	ldr	r2, [pc, #124]	@ (8003780 <TIM_OC4_SetConfig+0xb0>)
 8003704:	4013      	ands	r3, r2
 8003706:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	021b      	lsls	r3, r3, #8
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	4313      	orrs	r3, r2
 8003712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	4a1b      	ldr	r2, [pc, #108]	@ (8003784 <TIM_OC4_SetConfig+0xb4>)
 8003718:	4013      	ands	r3, r2
 800371a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	031b      	lsls	r3, r3, #12
 8003722:	693a      	ldr	r2, [r7, #16]
 8003724:	4313      	orrs	r3, r2
 8003726:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a17      	ldr	r2, [pc, #92]	@ (8003788 <TIM_OC4_SetConfig+0xb8>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d007      	beq.n	8003740 <TIM_OC4_SetConfig+0x70>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4a16      	ldr	r2, [pc, #88]	@ (800378c <TIM_OC4_SetConfig+0xbc>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d003      	beq.n	8003740 <TIM_OC4_SetConfig+0x70>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4a15      	ldr	r2, [pc, #84]	@ (8003790 <TIM_OC4_SetConfig+0xc0>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d109      	bne.n	8003754 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	4a14      	ldr	r2, [pc, #80]	@ (8003794 <TIM_OC4_SetConfig+0xc4>)
 8003744:	4013      	ands	r3, r2
 8003746:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	695b      	ldr	r3, [r3, #20]
 800374c:	019b      	lsls	r3, r3, #6
 800374e:	697a      	ldr	r2, [r7, #20]
 8003750:	4313      	orrs	r3, r2
 8003752:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	697a      	ldr	r2, [r7, #20]
 8003758:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	685a      	ldr	r2, [r3, #4]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	693a      	ldr	r2, [r7, #16]
 800376c:	621a      	str	r2, [r3, #32]
}
 800376e:	46c0      	nop			@ (mov r8, r8)
 8003770:	46bd      	mov	sp, r7
 8003772:	b006      	add	sp, #24
 8003774:	bd80      	pop	{r7, pc}
 8003776:	46c0      	nop			@ (mov r8, r8)
 8003778:	ffffefff 	.word	0xffffefff
 800377c:	ffff8fff 	.word	0xffff8fff
 8003780:	fffffcff 	.word	0xfffffcff
 8003784:	ffffdfff 	.word	0xffffdfff
 8003788:	40012c00 	.word	0x40012c00
 800378c:	40014400 	.word	0x40014400
 8003790:	40014800 	.word	0x40014800
 8003794:	ffffbfff 	.word	0xffffbfff

08003798 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b086      	sub	sp, #24
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6a1b      	ldr	r3, [r3, #32]
 80037a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6a1b      	ldr	r3, [r3, #32]
 80037ae:	2201      	movs	r2, #1
 80037b0:	4393      	bics	r3, r2
 80037b2:	001a      	movs	r2, r3
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	699b      	ldr	r3, [r3, #24]
 80037bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	22f0      	movs	r2, #240	@ 0xf0
 80037c2:	4393      	bics	r3, r2
 80037c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	011b      	lsls	r3, r3, #4
 80037ca:	693a      	ldr	r2, [r7, #16]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	220a      	movs	r2, #10
 80037d4:	4393      	bics	r3, r2
 80037d6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80037d8:	697a      	ldr	r2, [r7, #20]
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	4313      	orrs	r3, r2
 80037de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	693a      	ldr	r2, [r7, #16]
 80037e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	697a      	ldr	r2, [r7, #20]
 80037ea:	621a      	str	r2, [r3, #32]
}
 80037ec:	46c0      	nop			@ (mov r8, r8)
 80037ee:	46bd      	mov	sp, r7
 80037f0:	b006      	add	sp, #24
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b086      	sub	sp, #24
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6a1b      	ldr	r3, [r3, #32]
 8003804:	2210      	movs	r2, #16
 8003806:	4393      	bics	r3, r2
 8003808:	001a      	movs	r2, r3
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	699b      	ldr	r3, [r3, #24]
 8003812:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6a1b      	ldr	r3, [r3, #32]
 8003818:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	4a0d      	ldr	r2, [pc, #52]	@ (8003854 <TIM_TI2_ConfigInputStage+0x60>)
 800381e:	4013      	ands	r3, r2
 8003820:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	031b      	lsls	r3, r3, #12
 8003826:	697a      	ldr	r2, [r7, #20]
 8003828:	4313      	orrs	r3, r2
 800382a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	22a0      	movs	r2, #160	@ 0xa0
 8003830:	4393      	bics	r3, r2
 8003832:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	011b      	lsls	r3, r3, #4
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	4313      	orrs	r3, r2
 800383c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	697a      	ldr	r2, [r7, #20]
 8003842:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	693a      	ldr	r2, [r7, #16]
 8003848:	621a      	str	r2, [r3, #32]
}
 800384a:	46c0      	nop			@ (mov r8, r8)
 800384c:	46bd      	mov	sp, r7
 800384e:	b006      	add	sp, #24
 8003850:	bd80      	pop	{r7, pc}
 8003852:	46c0      	nop			@ (mov r8, r8)
 8003854:	ffff0fff 	.word	0xffff0fff

08003858 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2270      	movs	r2, #112	@ 0x70
 800386c:	4393      	bics	r3, r2
 800386e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003870:	683a      	ldr	r2, [r7, #0]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	4313      	orrs	r3, r2
 8003876:	2207      	movs	r2, #7
 8003878:	4313      	orrs	r3, r2
 800387a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	68fa      	ldr	r2, [r7, #12]
 8003880:	609a      	str	r2, [r3, #8]
}
 8003882:	46c0      	nop			@ (mov r8, r8)
 8003884:	46bd      	mov	sp, r7
 8003886:	b004      	add	sp, #16
 8003888:	bd80      	pop	{r7, pc}
	...

0800388c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b086      	sub	sp, #24
 8003890:	af00      	add	r7, sp, #0
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	60b9      	str	r1, [r7, #8]
 8003896:	607a      	str	r2, [r7, #4]
 8003898:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	4a09      	ldr	r2, [pc, #36]	@ (80038c8 <TIM_ETR_SetConfig+0x3c>)
 80038a4:	4013      	ands	r3, r2
 80038a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	021a      	lsls	r2, r3, #8
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	431a      	orrs	r2, r3
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	697a      	ldr	r2, [r7, #20]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	697a      	ldr	r2, [r7, #20]
 80038be:	609a      	str	r2, [r3, #8]
}
 80038c0:	46c0      	nop			@ (mov r8, r8)
 80038c2:	46bd      	mov	sp, r7
 80038c4:	b006      	add	sp, #24
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	ffff00ff 	.word	0xffff00ff

080038cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b086      	sub	sp, #24
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	221f      	movs	r2, #31
 80038dc:	4013      	ands	r3, r2
 80038de:	2201      	movs	r2, #1
 80038e0:	409a      	lsls	r2, r3
 80038e2:	0013      	movs	r3, r2
 80038e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6a1b      	ldr	r3, [r3, #32]
 80038ea:	697a      	ldr	r2, [r7, #20]
 80038ec:	43d2      	mvns	r2, r2
 80038ee:	401a      	ands	r2, r3
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6a1a      	ldr	r2, [r3, #32]
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	211f      	movs	r1, #31
 80038fc:	400b      	ands	r3, r1
 80038fe:	6879      	ldr	r1, [r7, #4]
 8003900:	4099      	lsls	r1, r3
 8003902:	000b      	movs	r3, r1
 8003904:	431a      	orrs	r2, r3
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	621a      	str	r2, [r3, #32]
}
 800390a:	46c0      	nop			@ (mov r8, r8)
 800390c:	46bd      	mov	sp, r7
 800390e:	b006      	add	sp, #24
 8003910:	bd80      	pop	{r7, pc}
	...

08003914 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	223c      	movs	r2, #60	@ 0x3c
 8003922:	5c9b      	ldrb	r3, [r3, r2]
 8003924:	2b01      	cmp	r3, #1
 8003926:	d101      	bne.n	800392c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003928:	2302      	movs	r3, #2
 800392a:	e042      	b.n	80039b2 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	223c      	movs	r2, #60	@ 0x3c
 8003930:	2101      	movs	r1, #1
 8003932:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	223d      	movs	r2, #61	@ 0x3d
 8003938:	2102      	movs	r1, #2
 800393a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2270      	movs	r2, #112	@ 0x70
 8003950:	4393      	bics	r3, r2
 8003952:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68fa      	ldr	r2, [r7, #12]
 800395a:	4313      	orrs	r3, r2
 800395c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	68fa      	ldr	r2, [r7, #12]
 8003964:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a14      	ldr	r2, [pc, #80]	@ (80039bc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d00a      	beq.n	8003986 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	2380      	movs	r3, #128	@ 0x80
 8003976:	05db      	lsls	r3, r3, #23
 8003978:	429a      	cmp	r2, r3
 800397a:	d004      	beq.n	8003986 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a0f      	ldr	r2, [pc, #60]	@ (80039c0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d10c      	bne.n	80039a0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	2280      	movs	r2, #128	@ 0x80
 800398a:	4393      	bics	r3, r2
 800398c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	68ba      	ldr	r2, [r7, #8]
 8003994:	4313      	orrs	r3, r2
 8003996:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68ba      	ldr	r2, [r7, #8]
 800399e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	223d      	movs	r2, #61	@ 0x3d
 80039a4:	2101      	movs	r1, #1
 80039a6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	223c      	movs	r2, #60	@ 0x3c
 80039ac:	2100      	movs	r1, #0
 80039ae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	0018      	movs	r0, r3
 80039b4:	46bd      	mov	sp, r7
 80039b6:	b004      	add	sp, #16
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	46c0      	nop			@ (mov r8, r8)
 80039bc:	40012c00 	.word	0x40012c00
 80039c0:	40000400 	.word	0x40000400

080039c4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80039ce:	2300      	movs	r3, #0
 80039d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	223c      	movs	r2, #60	@ 0x3c
 80039d6:	5c9b      	ldrb	r3, [r3, r2]
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d101      	bne.n	80039e0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80039dc:	2302      	movs	r3, #2
 80039de:	e03e      	b.n	8003a5e <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	223c      	movs	r2, #60	@ 0x3c
 80039e4:	2101      	movs	r1, #1
 80039e6:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	22ff      	movs	r2, #255	@ 0xff
 80039ec:	4393      	bics	r3, r2
 80039ee:	001a      	movs	r2, r3
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	4a1b      	ldr	r2, [pc, #108]	@ (8003a68 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 80039fc:	401a      	ands	r2, r3
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	4a18      	ldr	r2, [pc, #96]	@ (8003a6c <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8003a0a:	401a      	ands	r2, r3
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	4a16      	ldr	r2, [pc, #88]	@ (8003a70 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8003a18:	401a      	ands	r2, r3
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	4a13      	ldr	r2, [pc, #76]	@ (8003a74 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8003a26:	401a      	ands	r2, r3
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	691b      	ldr	r3, [r3, #16]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	4a11      	ldr	r2, [pc, #68]	@ (8003a78 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8003a34:	401a      	ands	r2, r3
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	695b      	ldr	r3, [r3, #20]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	4a0e      	ldr	r2, [pc, #56]	@ (8003a7c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8003a42:	401a      	ands	r2, r3
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	69db      	ldr	r3, [r3, #28]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68fa      	ldr	r2, [r7, #12]
 8003a52:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	223c      	movs	r2, #60	@ 0x3c
 8003a58:	2100      	movs	r1, #0
 8003a5a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	0018      	movs	r0, r3
 8003a60:	46bd      	mov	sp, r7
 8003a62:	b004      	add	sp, #16
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	46c0      	nop			@ (mov r8, r8)
 8003a68:	fffffcff 	.word	0xfffffcff
 8003a6c:	fffffbff 	.word	0xfffffbff
 8003a70:	fffff7ff 	.word	0xfffff7ff
 8003a74:	ffffefff 	.word	0xffffefff
 8003a78:	ffffdfff 	.word	0xffffdfff
 8003a7c:	ffffbfff 	.word	0xffffbfff

08003a80 <memset>:
 8003a80:	0003      	movs	r3, r0
 8003a82:	1882      	adds	r2, r0, r2
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d100      	bne.n	8003a8a <memset+0xa>
 8003a88:	4770      	bx	lr
 8003a8a:	7019      	strb	r1, [r3, #0]
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	e7f9      	b.n	8003a84 <memset+0x4>

08003a90 <__libc_init_array>:
 8003a90:	b570      	push	{r4, r5, r6, lr}
 8003a92:	2600      	movs	r6, #0
 8003a94:	4c0c      	ldr	r4, [pc, #48]	@ (8003ac8 <__libc_init_array+0x38>)
 8003a96:	4d0d      	ldr	r5, [pc, #52]	@ (8003acc <__libc_init_array+0x3c>)
 8003a98:	1b64      	subs	r4, r4, r5
 8003a9a:	10a4      	asrs	r4, r4, #2
 8003a9c:	42a6      	cmp	r6, r4
 8003a9e:	d109      	bne.n	8003ab4 <__libc_init_array+0x24>
 8003aa0:	2600      	movs	r6, #0
 8003aa2:	f000 f823 	bl	8003aec <_init>
 8003aa6:	4c0a      	ldr	r4, [pc, #40]	@ (8003ad0 <__libc_init_array+0x40>)
 8003aa8:	4d0a      	ldr	r5, [pc, #40]	@ (8003ad4 <__libc_init_array+0x44>)
 8003aaa:	1b64      	subs	r4, r4, r5
 8003aac:	10a4      	asrs	r4, r4, #2
 8003aae:	42a6      	cmp	r6, r4
 8003ab0:	d105      	bne.n	8003abe <__libc_init_array+0x2e>
 8003ab2:	bd70      	pop	{r4, r5, r6, pc}
 8003ab4:	00b3      	lsls	r3, r6, #2
 8003ab6:	58eb      	ldr	r3, [r5, r3]
 8003ab8:	4798      	blx	r3
 8003aba:	3601      	adds	r6, #1
 8003abc:	e7ee      	b.n	8003a9c <__libc_init_array+0xc>
 8003abe:	00b3      	lsls	r3, r6, #2
 8003ac0:	58eb      	ldr	r3, [r5, r3]
 8003ac2:	4798      	blx	r3
 8003ac4:	3601      	adds	r6, #1
 8003ac6:	e7f2      	b.n	8003aae <__libc_init_array+0x1e>
 8003ac8:	08003b34 	.word	0x08003b34
 8003acc:	08003b34 	.word	0x08003b34
 8003ad0:	08003b38 	.word	0x08003b38
 8003ad4:	08003b34 	.word	0x08003b34

08003ad8 <memcpy>:
 8003ad8:	2300      	movs	r3, #0
 8003ada:	b510      	push	{r4, lr}
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d100      	bne.n	8003ae2 <memcpy+0xa>
 8003ae0:	bd10      	pop	{r4, pc}
 8003ae2:	5ccc      	ldrb	r4, [r1, r3]
 8003ae4:	54c4      	strb	r4, [r0, r3]
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	e7f8      	b.n	8003adc <memcpy+0x4>
	...

08003aec <_init>:
 8003aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aee:	46c0      	nop			@ (mov r8, r8)
 8003af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003af2:	bc08      	pop	{r3}
 8003af4:	469e      	mov	lr, r3
 8003af6:	4770      	bx	lr

08003af8 <_fini>:
 8003af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003afa:	46c0      	nop			@ (mov r8, r8)
 8003afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003afe:	bc08      	pop	{r3}
 8003b00:	469e      	mov	lr, r3
 8003b02:	4770      	bx	lr
