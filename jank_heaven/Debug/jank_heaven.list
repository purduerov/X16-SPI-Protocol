
jank_heaven.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000386c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  0800392c  0800392c  0001392c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800395c  0800395c  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  0800395c  0800395c  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800395c  0800395c  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800395c  0800395c  0001395c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003960  08003960  00013960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08003964  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000188  2000001c  08003980  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001a4  08003980  000201a4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a7d4  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c97  00000000  00000000  0002a85b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bd8  00000000  00000000  0002c4f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000093c  00000000  00000000  0002d0d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001889a  00000000  00000000  0002da0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dd5f  00000000  00000000  000462a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f193  00000000  00000000  00054005  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002ac8  00000000  00000000  000e3198  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000c7  00000000  00000000  000e5c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000001c 	.word	0x2000001c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003914 	.word	0x08003914

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000020 	.word	0x20000020
 8000104:	08003914 	.word	0x08003914

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000224:	f000 fdf4 	bl	8000e10 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000228:	f000 f826 	bl	8000278 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
//	for (int i = 0; i < 5000000; i++);
	MX_GPIO_Init();
 800022c:	f000 fa92 	bl	8000754 <MX_GPIO_Init>
	MX_SPI1_Init();
 8000230:	f000 f882 	bl	8000338 <MX_SPI1_Init>
	MX_TIM2_Init();
 8000234:	f000 f990 	bl	8000558 <MX_TIM2_Init>
	MX_TIM3_Init();
 8000238:	f000 fa0c 	bl	8000654 <MX_TIM3_Init>
	MX_CRC_Init();
 800023c:	f000 f85c 	bl	80002f8 <MX_CRC_Init>
	MX_TIM1_Init();
 8000240:	f000 f8b4 	bl	80003ac <MX_TIM1_Init>

	/* USER CODE BEGIN 2 */
	EnablePWMOutput(&htim1);
 8000244:	4b07      	ldr	r3, [pc, #28]	; (8000264 <main+0x44>)
 8000246:	0018      	movs	r0, r3
 8000248:	f000 facc 	bl	80007e4 <EnablePWMOutput>
	EnablePWMOutput(&htim2);
 800024c:	4b06      	ldr	r3, [pc, #24]	; (8000268 <main+0x48>)
 800024e:	0018      	movs	r0, r3
 8000250:	f000 fac8 	bl	80007e4 <EnablePWMOutput>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	HAL_SPI_TransmitReceive_IT(&hspi1, SPI_TX_Buffer, SPI_RX_Buffer, SPI_BUFFER_SIZE);
 8000254:	4a05      	ldr	r2, [pc, #20]	; (800026c <main+0x4c>)
 8000256:	4906      	ldr	r1, [pc, #24]	; (8000270 <main+0x50>)
 8000258:	4806      	ldr	r0, [pc, #24]	; (8000274 <main+0x54>)
 800025a:	230d      	movs	r3, #13
 800025c:	f001 ffce 	bl	80021fc <HAL_SPI_TransmitReceive_IT>
	for (;;) {
		__asm("NOP");
 8000260:	46c0      	nop			; (mov r8, r8)
 8000262:	e7fd      	b.n	8000260 <main+0x40>
 8000264:	200000b8 	.word	0x200000b8
 8000268:	20000100 	.word	0x20000100
 800026c:	20000000 	.word	0x20000000
 8000270:	20000190 	.word	0x20000190
 8000274:	20000054 	.word	0x20000054

08000278 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000278:	b590      	push	{r4, r7, lr}
 800027a:	b093      	sub	sp, #76	; 0x4c
 800027c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800027e:	2414      	movs	r4, #20
 8000280:	193b      	adds	r3, r7, r4
 8000282:	0018      	movs	r0, r3
 8000284:	2334      	movs	r3, #52	; 0x34
 8000286:	001a      	movs	r2, r3
 8000288:	2100      	movs	r1, #0
 800028a:	f003 fb0d 	bl	80038a8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800028e:	1d3b      	adds	r3, r7, #4
 8000290:	0018      	movs	r0, r3
 8000292:	2310      	movs	r3, #16
 8000294:	001a      	movs	r2, r3
 8000296:	2100      	movs	r1, #0
 8000298:	f003 fb06 	bl	80038a8 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800029c:	0021      	movs	r1, r4
 800029e:	187b      	adds	r3, r7, r1
 80002a0:	2202      	movs	r2, #2
 80002a2:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002a4:	187b      	adds	r3, r7, r1
 80002a6:	2201      	movs	r2, #1
 80002a8:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002aa:	187b      	adds	r3, r7, r1
 80002ac:	2210      	movs	r2, #16
 80002ae:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002b0:	187b      	adds	r3, r7, r1
 80002b2:	2200      	movs	r2, #0
 80002b4:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80002b6:	187b      	adds	r3, r7, r1
 80002b8:	0018      	movs	r0, r3
 80002ba:	f001 fa15 	bl	80016e8 <HAL_RCC_OscConfig>
 80002be:	1e03      	subs	r3, r0, #0
 80002c0:	d001      	beq.n	80002c6 <SystemClock_Config+0x4e>
		Error_Handler();
 80002c2:	f000 fbb1 	bl	8000a28 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80002c6:	1d3b      	adds	r3, r7, #4
 80002c8:	2207      	movs	r2, #7
 80002ca:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002cc:	1d3b      	adds	r3, r7, #4
 80002ce:	2200      	movs	r2, #0
 80002d0:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002d2:	1d3b      	adds	r3, r7, #4
 80002d4:	2200      	movs	r2, #0
 80002d6:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002d8:	1d3b      	adds	r3, r7, #4
 80002da:	2200      	movs	r2, #0
 80002dc:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	2100      	movs	r1, #0
 80002e2:	0018      	movs	r0, r3
 80002e4:	f001 fd86 	bl	8001df4 <HAL_RCC_ClockConfig>
 80002e8:	1e03      	subs	r3, r0, #0
 80002ea:	d001      	beq.n	80002f0 <SystemClock_Config+0x78>
		Error_Handler();
 80002ec:	f000 fb9c 	bl	8000a28 <Error_Handler>
	}
}
 80002f0:	46c0      	nop			; (mov r8, r8)
 80002f2:	46bd      	mov	sp, r7
 80002f4:	b013      	add	sp, #76	; 0x4c
 80002f6:	bd90      	pop	{r4, r7, pc}

080002f8 <MX_CRC_Init>:
/**
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void) {
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 80002fc:	4b0c      	ldr	r3, [pc, #48]	; (8000330 <MX_CRC_Init+0x38>)
 80002fe:	4a0d      	ldr	r2, [pc, #52]	; (8000334 <MX_CRC_Init+0x3c>)
 8000300:	601a      	str	r2, [r3, #0]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000302:	4b0b      	ldr	r3, [pc, #44]	; (8000330 <MX_CRC_Init+0x38>)
 8000304:	2200      	movs	r2, #0
 8000306:	711a      	strb	r2, [r3, #4]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000308:	4b09      	ldr	r3, [pc, #36]	; (8000330 <MX_CRC_Init+0x38>)
 800030a:	2200      	movs	r2, #0
 800030c:	60da      	str	r2, [r3, #12]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800030e:	4b08      	ldr	r3, [pc, #32]	; (8000330 <MX_CRC_Init+0x38>)
 8000310:	2200      	movs	r2, #0
 8000312:	611a      	str	r2, [r3, #16]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 8000314:	4b06      	ldr	r3, [pc, #24]	; (8000330 <MX_CRC_Init+0x38>)
 8000316:	2203      	movs	r2, #3
 8000318:	619a      	str	r2, [r3, #24]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 800031a:	4b05      	ldr	r3, [pc, #20]	; (8000330 <MX_CRC_Init+0x38>)
 800031c:	0018      	movs	r0, r3
 800031e:	f000 feb9 	bl	8001094 <HAL_CRC_Init>
 8000322:	1e03      	subs	r3, r0, #0
 8000324:	d001      	beq.n	800032a <MX_CRC_Init+0x32>
		Error_Handler();
 8000326:	f000 fb7f 	bl	8000a28 <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 800032a:	46c0      	nop			; (mov r8, r8)
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}
 8000330:	20000038 	.word	0x20000038
 8000334:	40023000 	.word	0x40023000

08000338 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 800033c:	4b19      	ldr	r3, [pc, #100]	; (80003a4 <MX_SPI1_Init+0x6c>)
 800033e:	4a1a      	ldr	r2, [pc, #104]	; (80003a8 <MX_SPI1_Init+0x70>)
 8000340:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000342:	4b18      	ldr	r3, [pc, #96]	; (80003a4 <MX_SPI1_Init+0x6c>)
 8000344:	2200      	movs	r2, #0
 8000346:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000348:	4b16      	ldr	r3, [pc, #88]	; (80003a4 <MX_SPI1_Init+0x6c>)
 800034a:	2200      	movs	r2, #0
 800034c:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800034e:	4b15      	ldr	r3, [pc, #84]	; (80003a4 <MX_SPI1_Init+0x6c>)
 8000350:	22e0      	movs	r2, #224	; 0xe0
 8000352:	00d2      	lsls	r2, r2, #3
 8000354:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000356:	4b13      	ldr	r3, [pc, #76]	; (80003a4 <MX_SPI1_Init+0x6c>)
 8000358:	2200      	movs	r2, #0
 800035a:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800035c:	4b11      	ldr	r3, [pc, #68]	; (80003a4 <MX_SPI1_Init+0x6c>)
 800035e:	2200      	movs	r2, #0
 8000360:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000362:	4b10      	ldr	r3, [pc, #64]	; (80003a4 <MX_SPI1_Init+0x6c>)
 8000364:	2280      	movs	r2, #128	; 0x80
 8000366:	0092      	lsls	r2, r2, #2
 8000368:	619a      	str	r2, [r3, #24]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800036a:	4b0e      	ldr	r3, [pc, #56]	; (80003a4 <MX_SPI1_Init+0x6c>)
 800036c:	2200      	movs	r2, #0
 800036e:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000370:	4b0c      	ldr	r3, [pc, #48]	; (80003a4 <MX_SPI1_Init+0x6c>)
 8000372:	2200      	movs	r2, #0
 8000374:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000376:	4b0b      	ldr	r3, [pc, #44]	; (80003a4 <MX_SPI1_Init+0x6c>)
 8000378:	2200      	movs	r2, #0
 800037a:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 800037c:	4b09      	ldr	r3, [pc, #36]	; (80003a4 <MX_SPI1_Init+0x6c>)
 800037e:	2207      	movs	r2, #7
 8000380:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000382:	4b08      	ldr	r3, [pc, #32]	; (80003a4 <MX_SPI1_Init+0x6c>)
 8000384:	2200      	movs	r2, #0
 8000386:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000388:	4b06      	ldr	r3, [pc, #24]	; (80003a4 <MX_SPI1_Init+0x6c>)
 800038a:	2200      	movs	r2, #0
 800038c:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 800038e:	4b05      	ldr	r3, [pc, #20]	; (80003a4 <MX_SPI1_Init+0x6c>)
 8000390:	0018      	movs	r0, r3
 8000392:	f001 fe7b 	bl	800208c <HAL_SPI_Init>
 8000396:	1e03      	subs	r3, r0, #0
 8000398:	d001      	beq.n	800039e <MX_SPI1_Init+0x66>
		Error_Handler();
 800039a:	f000 fb45 	bl	8000a28 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 800039e:	46c0      	nop			; (mov r8, r8)
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	20000054 	.word	0x20000054
 80003a8:	40013000 	.word	0x40013000

080003ac <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b096      	sub	sp, #88	; 0x58
 80003b0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	  /* USER CODE END TIM1_Init 0 */

	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003b2:	2348      	movs	r3, #72	; 0x48
 80003b4:	18fb      	adds	r3, r7, r3
 80003b6:	0018      	movs	r0, r3
 80003b8:	2310      	movs	r3, #16
 80003ba:	001a      	movs	r2, r3
 80003bc:	2100      	movs	r1, #0
 80003be:	f003 fa73 	bl	80038a8 <memset>
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003c2:	2340      	movs	r3, #64	; 0x40
 80003c4:	18fb      	adds	r3, r7, r3
 80003c6:	0018      	movs	r0, r3
 80003c8:	2308      	movs	r3, #8
 80003ca:	001a      	movs	r2, r3
 80003cc:	2100      	movs	r1, #0
 80003ce:	f003 fa6b 	bl	80038a8 <memset>
	  TIM_OC_InitTypeDef sConfigOC = {0};
 80003d2:	2324      	movs	r3, #36	; 0x24
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	0018      	movs	r0, r3
 80003d8:	231c      	movs	r3, #28
 80003da:	001a      	movs	r2, r3
 80003dc:	2100      	movs	r1, #0
 80003de:	f003 fa63 	bl	80038a8 <memset>
	  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80003e2:	1d3b      	adds	r3, r7, #4
 80003e4:	0018      	movs	r0, r3
 80003e6:	2320      	movs	r3, #32
 80003e8:	001a      	movs	r2, r3
 80003ea:	2100      	movs	r1, #0
 80003ec:	f003 fa5c 	bl	80038a8 <memset>

	  /* USER CODE BEGIN TIM1_Init 1 */

	  /* USER CODE END TIM1_Init 1 */
	  htim1.Instance = TIM1;
 80003f0:	4b57      	ldr	r3, [pc, #348]	; (8000550 <MX_TIM1_Init+0x1a4>)
 80003f2:	4a58      	ldr	r2, [pc, #352]	; (8000554 <MX_TIM1_Init+0x1a8>)
 80003f4:	601a      	str	r2, [r3, #0]
	  htim1.Init.Prescaler = 32-1;
 80003f6:	4b56      	ldr	r3, [pc, #344]	; (8000550 <MX_TIM1_Init+0x1a4>)
 80003f8:	221f      	movs	r2, #31
 80003fa:	605a      	str	r2, [r3, #4]
	  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003fc:	4b54      	ldr	r3, [pc, #336]	; (8000550 <MX_TIM1_Init+0x1a4>)
 80003fe:	2200      	movs	r2, #0
 8000400:	609a      	str	r2, [r3, #8]
	  htim1.Init.Period = 500-1;
 8000402:	4b53      	ldr	r3, [pc, #332]	; (8000550 <MX_TIM1_Init+0x1a4>)
 8000404:	22f4      	movs	r2, #244	; 0xf4
 8000406:	32ff      	adds	r2, #255	; 0xff
 8000408:	60da      	str	r2, [r3, #12]
	  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800040a:	4b51      	ldr	r3, [pc, #324]	; (8000550 <MX_TIM1_Init+0x1a4>)
 800040c:	2200      	movs	r2, #0
 800040e:	611a      	str	r2, [r3, #16]
	  htim1.Init.RepetitionCounter = 0;
 8000410:	4b4f      	ldr	r3, [pc, #316]	; (8000550 <MX_TIM1_Init+0x1a4>)
 8000412:	2200      	movs	r2, #0
 8000414:	615a      	str	r2, [r3, #20]
	  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000416:	4b4e      	ldr	r3, [pc, #312]	; (8000550 <MX_TIM1_Init+0x1a4>)
 8000418:	2200      	movs	r2, #0
 800041a:	619a      	str	r2, [r3, #24]
	  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800041c:	4b4c      	ldr	r3, [pc, #304]	; (8000550 <MX_TIM1_Init+0x1a4>)
 800041e:	0018      	movs	r0, r3
 8000420:	f002 fb92 	bl	8002b48 <HAL_TIM_Base_Init>
 8000424:	1e03      	subs	r3, r0, #0
 8000426:	d001      	beq.n	800042c <MX_TIM1_Init+0x80>
	  {
	    Error_Handler();
 8000428:	f000 fafe 	bl	8000a28 <Error_Handler>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800042c:	2148      	movs	r1, #72	; 0x48
 800042e:	187b      	adds	r3, r7, r1
 8000430:	2280      	movs	r2, #128	; 0x80
 8000432:	0152      	lsls	r2, r2, #5
 8000434:	601a      	str	r2, [r3, #0]
	  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000436:	187a      	adds	r2, r7, r1
 8000438:	4b45      	ldr	r3, [pc, #276]	; (8000550 <MX_TIM1_Init+0x1a4>)
 800043a:	0011      	movs	r1, r2
 800043c:	0018      	movs	r0, r3
 800043e:	f002 fd95 	bl	8002f6c <HAL_TIM_ConfigClockSource>
 8000442:	1e03      	subs	r3, r0, #0
 8000444:	d001      	beq.n	800044a <MX_TIM1_Init+0x9e>
	  {
	    Error_Handler();
 8000446:	f000 faef 	bl	8000a28 <Error_Handler>
	  }
	  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800044a:	4b41      	ldr	r3, [pc, #260]	; (8000550 <MX_TIM1_Init+0x1a4>)
 800044c:	0018      	movs	r0, r3
 800044e:	f002 fbcb 	bl	8002be8 <HAL_TIM_PWM_Init>
 8000452:	1e03      	subs	r3, r0, #0
 8000454:	d001      	beq.n	800045a <MX_TIM1_Init+0xae>
	  {
	    Error_Handler();
 8000456:	f000 fae7 	bl	8000a28 <Error_Handler>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800045a:	2140      	movs	r1, #64	; 0x40
 800045c:	187b      	adds	r3, r7, r1
 800045e:	2200      	movs	r2, #0
 8000460:	601a      	str	r2, [r3, #0]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000462:	187b      	adds	r3, r7, r1
 8000464:	2200      	movs	r2, #0
 8000466:	605a      	str	r2, [r3, #4]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000468:	187a      	adds	r2, r7, r1
 800046a:	4b39      	ldr	r3, [pc, #228]	; (8000550 <MX_TIM1_Init+0x1a4>)
 800046c:	0011      	movs	r1, r2
 800046e:	0018      	movs	r0, r3
 8000470:	f003 f964 	bl	800373c <HAL_TIMEx_MasterConfigSynchronization>
 8000474:	1e03      	subs	r3, r0, #0
 8000476:	d001      	beq.n	800047c <MX_TIM1_Init+0xd0>
	  {
	    Error_Handler();
 8000478:	f000 fad6 	bl	8000a28 <Error_Handler>
	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800047c:	2124      	movs	r1, #36	; 0x24
 800047e:	187b      	adds	r3, r7, r1
 8000480:	2260      	movs	r2, #96	; 0x60
 8000482:	601a      	str	r2, [r3, #0]
	  sConfigOC.Pulse = 375;
 8000484:	187b      	adds	r3, r7, r1
 8000486:	2278      	movs	r2, #120	; 0x78
 8000488:	32ff      	adds	r2, #255	; 0xff
 800048a:	605a      	str	r2, [r3, #4]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800048c:	187b      	adds	r3, r7, r1
 800048e:	2200      	movs	r2, #0
 8000490:	609a      	str	r2, [r3, #8]
	  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000492:	187b      	adds	r3, r7, r1
 8000494:	2200      	movs	r2, #0
 8000496:	60da      	str	r2, [r3, #12]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000498:	187b      	adds	r3, r7, r1
 800049a:	2200      	movs	r2, #0
 800049c:	611a      	str	r2, [r3, #16]
	  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800049e:	187b      	adds	r3, r7, r1
 80004a0:	2200      	movs	r2, #0
 80004a2:	615a      	str	r2, [r3, #20]
	  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80004a4:	187b      	adds	r3, r7, r1
 80004a6:	2200      	movs	r2, #0
 80004a8:	619a      	str	r2, [r3, #24]
	  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004aa:	1879      	adds	r1, r7, r1
 80004ac:	4b28      	ldr	r3, [pc, #160]	; (8000550 <MX_TIM1_Init+0x1a4>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	0018      	movs	r0, r3
 80004b2:	f002 fc95 	bl	8002de0 <HAL_TIM_PWM_ConfigChannel>
 80004b6:	1e03      	subs	r3, r0, #0
 80004b8:	d001      	beq.n	80004be <MX_TIM1_Init+0x112>
	  {
	    Error_Handler();
 80004ba:	f000 fab5 	bl	8000a28 <Error_Handler>
	  }
	  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80004be:	2324      	movs	r3, #36	; 0x24
 80004c0:	18f9      	adds	r1, r7, r3
 80004c2:	4b23      	ldr	r3, [pc, #140]	; (8000550 <MX_TIM1_Init+0x1a4>)
 80004c4:	2204      	movs	r2, #4
 80004c6:	0018      	movs	r0, r3
 80004c8:	f002 fc8a 	bl	8002de0 <HAL_TIM_PWM_ConfigChannel>
 80004cc:	1e03      	subs	r3, r0, #0
 80004ce:	d001      	beq.n	80004d4 <MX_TIM1_Init+0x128>
	  {
	    Error_Handler();
 80004d0:	f000 faaa 	bl	8000a28 <Error_Handler>
	  }
	  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80004d4:	2324      	movs	r3, #36	; 0x24
 80004d6:	18f9      	adds	r1, r7, r3
 80004d8:	4b1d      	ldr	r3, [pc, #116]	; (8000550 <MX_TIM1_Init+0x1a4>)
 80004da:	2208      	movs	r2, #8
 80004dc:	0018      	movs	r0, r3
 80004de:	f002 fc7f 	bl	8002de0 <HAL_TIM_PWM_ConfigChannel>
 80004e2:	1e03      	subs	r3, r0, #0
 80004e4:	d001      	beq.n	80004ea <MX_TIM1_Init+0x13e>
	  {
	    Error_Handler();
 80004e6:	f000 fa9f 	bl	8000a28 <Error_Handler>
	  }
	  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80004ea:	2324      	movs	r3, #36	; 0x24
 80004ec:	18f9      	adds	r1, r7, r3
 80004ee:	4b18      	ldr	r3, [pc, #96]	; (8000550 <MX_TIM1_Init+0x1a4>)
 80004f0:	220c      	movs	r2, #12
 80004f2:	0018      	movs	r0, r3
 80004f4:	f002 fc74 	bl	8002de0 <HAL_TIM_PWM_ConfigChannel>
 80004f8:	1e03      	subs	r3, r0, #0
 80004fa:	d001      	beq.n	8000500 <MX_TIM1_Init+0x154>
	  {
	    Error_Handler();
 80004fc:	f000 fa94 	bl	8000a28 <Error_Handler>
	  }
	  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000500:	1d3b      	adds	r3, r7, #4
 8000502:	2200      	movs	r2, #0
 8000504:	601a      	str	r2, [r3, #0]
	  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000506:	1d3b      	adds	r3, r7, #4
 8000508:	2200      	movs	r2, #0
 800050a:	605a      	str	r2, [r3, #4]
	  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800050c:	1d3b      	adds	r3, r7, #4
 800050e:	2200      	movs	r2, #0
 8000510:	609a      	str	r2, [r3, #8]
	  sBreakDeadTimeConfig.DeadTime = 0;
 8000512:	1d3b      	adds	r3, r7, #4
 8000514:	2200      	movs	r2, #0
 8000516:	60da      	str	r2, [r3, #12]
	  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000518:	1d3b      	adds	r3, r7, #4
 800051a:	2200      	movs	r2, #0
 800051c:	611a      	str	r2, [r3, #16]
	  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800051e:	1d3b      	adds	r3, r7, #4
 8000520:	2280      	movs	r2, #128	; 0x80
 8000522:	0192      	lsls	r2, r2, #6
 8000524:	615a      	str	r2, [r3, #20]
	  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000526:	1d3b      	adds	r3, r7, #4
 8000528:	2200      	movs	r2, #0
 800052a:	61da      	str	r2, [r3, #28]
	  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800052c:	1d3a      	adds	r2, r7, #4
 800052e:	4b08      	ldr	r3, [pc, #32]	; (8000550 <MX_TIM1_Init+0x1a4>)
 8000530:	0011      	movs	r1, r2
 8000532:	0018      	movs	r0, r3
 8000534:	f003 f95a 	bl	80037ec <HAL_TIMEx_ConfigBreakDeadTime>
 8000538:	1e03      	subs	r3, r0, #0
 800053a:	d001      	beq.n	8000540 <MX_TIM1_Init+0x194>
	  {
	    Error_Handler();
 800053c:	f000 fa74 	bl	8000a28 <Error_Handler>
	  }
	  /* USER CODE BEGIN TIM1_Init 2 */

	  /* USER CODE END TIM1_Init 2 */
	  HAL_TIM_MspPostInit(&htim1);
 8000540:	4b03      	ldr	r3, [pc, #12]	; (8000550 <MX_TIM1_Init+0x1a4>)
 8000542:	0018      	movs	r0, r3
 8000544:	f000 fb5c 	bl	8000c00 <HAL_TIM_MspPostInit>

}
 8000548:	46c0      	nop			; (mov r8, r8)
 800054a:	46bd      	mov	sp, r7
 800054c:	b016      	add	sp, #88	; 0x58
 800054e:	bd80      	pop	{r7, pc}
 8000550:	200000b8 	.word	0x200000b8
 8000554:	40012c00 	.word	0x40012c00

08000558 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000558:	b580      	push	{r7, lr}
 800055a:	b08a      	sub	sp, #40	; 0x28
 800055c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800055e:	2320      	movs	r3, #32
 8000560:	18fb      	adds	r3, r7, r3
 8000562:	0018      	movs	r0, r3
 8000564:	2308      	movs	r3, #8
 8000566:	001a      	movs	r2, r3
 8000568:	2100      	movs	r1, #0
 800056a:	f003 f99d 	bl	80038a8 <memset>
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800056e:	1d3b      	adds	r3, r7, #4
 8000570:	0018      	movs	r0, r3
 8000572:	231c      	movs	r3, #28
 8000574:	001a      	movs	r2, r3
 8000576:	2100      	movs	r1, #0
 8000578:	f003 f996 	bl	80038a8 <memset>

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800057c:	4b34      	ldr	r3, [pc, #208]	; (8000650 <MX_TIM2_Init+0xf8>)
 800057e:	2280      	movs	r2, #128	; 0x80
 8000580:	05d2      	lsls	r2, r2, #23
 8000582:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 32 - 1;
 8000584:	4b32      	ldr	r3, [pc, #200]	; (8000650 <MX_TIM2_Init+0xf8>)
 8000586:	221f      	movs	r2, #31
 8000588:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800058a:	4b31      	ldr	r3, [pc, #196]	; (8000650 <MX_TIM2_Init+0xf8>)
 800058c:	2200      	movs	r2, #0
 800058e:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 500 - 1;
 8000590:	4b2f      	ldr	r3, [pc, #188]	; (8000650 <MX_TIM2_Init+0xf8>)
 8000592:	22f4      	movs	r2, #244	; 0xf4
 8000594:	32ff      	adds	r2, #255	; 0xff
 8000596:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000598:	4b2d      	ldr	r3, [pc, #180]	; (8000650 <MX_TIM2_Init+0xf8>)
 800059a:	2200      	movs	r2, #0
 800059c:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800059e:	4b2c      	ldr	r3, [pc, #176]	; (8000650 <MX_TIM2_Init+0xf8>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 80005a4:	4b2a      	ldr	r3, [pc, #168]	; (8000650 <MX_TIM2_Init+0xf8>)
 80005a6:	0018      	movs	r0, r3
 80005a8:	f002 fb1e 	bl	8002be8 <HAL_TIM_PWM_Init>
 80005ac:	1e03      	subs	r3, r0, #0
 80005ae:	d001      	beq.n	80005b4 <MX_TIM2_Init+0x5c>
		Error_Handler();
 80005b0:	f000 fa3a 	bl	8000a28 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005b4:	2120      	movs	r1, #32
 80005b6:	187b      	adds	r3, r7, r1
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005bc:	187b      	adds	r3, r7, r1
 80005be:	2200      	movs	r2, #0
 80005c0:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80005c2:	187a      	adds	r2, r7, r1
 80005c4:	4b22      	ldr	r3, [pc, #136]	; (8000650 <MX_TIM2_Init+0xf8>)
 80005c6:	0011      	movs	r1, r2
 80005c8:	0018      	movs	r0, r3
 80005ca:	f003 f8b7 	bl	800373c <HAL_TIMEx_MasterConfigSynchronization>
 80005ce:	1e03      	subs	r3, r0, #0
 80005d0:	d001      	beq.n	80005d6 <MX_TIM2_Init+0x7e>
			!= HAL_OK) {
		Error_Handler();
 80005d2:	f000 fa29 	bl	8000a28 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005d6:	1d3b      	adds	r3, r7, #4
 80005d8:	2260      	movs	r2, #96	; 0x60
 80005da:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = 375;
 80005dc:	1d3b      	adds	r3, r7, #4
 80005de:	2278      	movs	r2, #120	; 0x78
 80005e0:	32ff      	adds	r2, #255	; 0xff
 80005e2:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005e4:	1d3b      	adds	r3, r7, #4
 80005e6:	2200      	movs	r2, #0
 80005e8:	609a      	str	r2, [r3, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005ea:	1d3b      	adds	r3, r7, #4
 80005ec:	2200      	movs	r2, #0
 80005ee:	611a      	str	r2, [r3, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 80005f0:	1d39      	adds	r1, r7, #4
 80005f2:	4b17      	ldr	r3, [pc, #92]	; (8000650 <MX_TIM2_Init+0xf8>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	0018      	movs	r0, r3
 80005f8:	f002 fbf2 	bl	8002de0 <HAL_TIM_PWM_ConfigChannel>
 80005fc:	1e03      	subs	r3, r0, #0
 80005fe:	d001      	beq.n	8000604 <MX_TIM2_Init+0xac>
			!= HAL_OK) {
		Error_Handler();
 8000600:	f000 fa12 	bl	8000a28 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2)
 8000604:	1d39      	adds	r1, r7, #4
 8000606:	4b12      	ldr	r3, [pc, #72]	; (8000650 <MX_TIM2_Init+0xf8>)
 8000608:	2204      	movs	r2, #4
 800060a:	0018      	movs	r0, r3
 800060c:	f002 fbe8 	bl	8002de0 <HAL_TIM_PWM_ConfigChannel>
 8000610:	1e03      	subs	r3, r0, #0
 8000612:	d001      	beq.n	8000618 <MX_TIM2_Init+0xc0>
			!= HAL_OK) {
		Error_Handler();
 8000614:	f000 fa08 	bl	8000a28 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3)
 8000618:	1d39      	adds	r1, r7, #4
 800061a:	4b0d      	ldr	r3, [pc, #52]	; (8000650 <MX_TIM2_Init+0xf8>)
 800061c:	2208      	movs	r2, #8
 800061e:	0018      	movs	r0, r3
 8000620:	f002 fbde 	bl	8002de0 <HAL_TIM_PWM_ConfigChannel>
 8000624:	1e03      	subs	r3, r0, #0
 8000626:	d001      	beq.n	800062c <MX_TIM2_Init+0xd4>
			!= HAL_OK) {
		Error_Handler();
 8000628:	f000 f9fe 	bl	8000a28 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4)
 800062c:	1d39      	adds	r1, r7, #4
 800062e:	4b08      	ldr	r3, [pc, #32]	; (8000650 <MX_TIM2_Init+0xf8>)
 8000630:	220c      	movs	r2, #12
 8000632:	0018      	movs	r0, r3
 8000634:	f002 fbd4 	bl	8002de0 <HAL_TIM_PWM_ConfigChannel>
 8000638:	1e03      	subs	r3, r0, #0
 800063a:	d001      	beq.n	8000640 <MX_TIM2_Init+0xe8>
			!= HAL_OK) {
		Error_Handler();
 800063c:	f000 f9f4 	bl	8000a28 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8000640:	4b03      	ldr	r3, [pc, #12]	; (8000650 <MX_TIM2_Init+0xf8>)
 8000642:	0018      	movs	r0, r3
 8000644:	f000 fadc 	bl	8000c00 <HAL_TIM_MspPostInit>

}
 8000648:	46c0      	nop			; (mov r8, r8)
 800064a:	46bd      	mov	sp, r7
 800064c:	b00a      	add	sp, #40	; 0x28
 800064e:	bd80      	pop	{r7, pc}
 8000650:	20000100 	.word	0x20000100

08000654 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8000654:	b580      	push	{r7, lr}
 8000656:	b08a      	sub	sp, #40	; 0x28
 8000658:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800065a:	2320      	movs	r3, #32
 800065c:	18fb      	adds	r3, r7, r3
 800065e:	0018      	movs	r0, r3
 8000660:	2308      	movs	r3, #8
 8000662:	001a      	movs	r2, r3
 8000664:	2100      	movs	r1, #0
 8000666:	f003 f91f 	bl	80038a8 <memset>
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800066a:	1d3b      	adds	r3, r7, #4
 800066c:	0018      	movs	r0, r3
 800066e:	231c      	movs	r3, #28
 8000670:	001a      	movs	r2, r3
 8000672:	2100      	movs	r1, #0
 8000674:	f003 f918 	bl	80038a8 <memset>

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000678:	4b34      	ldr	r3, [pc, #208]	; (800074c <MX_TIM3_Init+0xf8>)
 800067a:	4a35      	ldr	r2, [pc, #212]	; (8000750 <MX_TIM3_Init+0xfc>)
 800067c:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 32 - 1;
 800067e:	4b33      	ldr	r3, [pc, #204]	; (800074c <MX_TIM3_Init+0xf8>)
 8000680:	221f      	movs	r2, #31
 8000682:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000684:	4b31      	ldr	r3, [pc, #196]	; (800074c <MX_TIM3_Init+0xf8>)
 8000686:	2200      	movs	r2, #0
 8000688:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 500 - 1;
 800068a:	4b30      	ldr	r3, [pc, #192]	; (800074c <MX_TIM3_Init+0xf8>)
 800068c:	22f4      	movs	r2, #244	; 0xf4
 800068e:	32ff      	adds	r2, #255	; 0xff
 8000690:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000692:	4b2e      	ldr	r3, [pc, #184]	; (800074c <MX_TIM3_Init+0xf8>)
 8000694:	2200      	movs	r2, #0
 8000696:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000698:	4b2c      	ldr	r3, [pc, #176]	; (800074c <MX_TIM3_Init+0xf8>)
 800069a:	2200      	movs	r2, #0
 800069c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 800069e:	4b2b      	ldr	r3, [pc, #172]	; (800074c <MX_TIM3_Init+0xf8>)
 80006a0:	0018      	movs	r0, r3
 80006a2:	f002 faa1 	bl	8002be8 <HAL_TIM_PWM_Init>
 80006a6:	1e03      	subs	r3, r0, #0
 80006a8:	d001      	beq.n	80006ae <MX_TIM3_Init+0x5a>
		Error_Handler();
 80006aa:	f000 f9bd 	bl	8000a28 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006ae:	2120      	movs	r1, #32
 80006b0:	187b      	adds	r3, r7, r1
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006b6:	187b      	adds	r3, r7, r1
 80006b8:	2200      	movs	r2, #0
 80006ba:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80006bc:	187a      	adds	r2, r7, r1
 80006be:	4b23      	ldr	r3, [pc, #140]	; (800074c <MX_TIM3_Init+0xf8>)
 80006c0:	0011      	movs	r1, r2
 80006c2:	0018      	movs	r0, r3
 80006c4:	f003 f83a 	bl	800373c <HAL_TIMEx_MasterConfigSynchronization>
 80006c8:	1e03      	subs	r3, r0, #0
 80006ca:	d001      	beq.n	80006d0 <MX_TIM3_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 80006cc:	f000 f9ac 	bl	8000a28 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006d0:	1d3b      	adds	r3, r7, #4
 80006d2:	2260      	movs	r2, #96	; 0x60
 80006d4:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = 375;
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	2278      	movs	r2, #120	; 0x78
 80006da:	32ff      	adds	r2, #255	; 0xff
 80006dc:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006de:	1d3b      	adds	r3, r7, #4
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006e4:	1d3b      	adds	r3, r7, #4
 80006e6:	2200      	movs	r2, #0
 80006e8:	611a      	str	r2, [r3, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 80006ea:	1d39      	adds	r1, r7, #4
 80006ec:	4b17      	ldr	r3, [pc, #92]	; (800074c <MX_TIM3_Init+0xf8>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	0018      	movs	r0, r3
 80006f2:	f002 fb75 	bl	8002de0 <HAL_TIM_PWM_ConfigChannel>
 80006f6:	1e03      	subs	r3, r0, #0
 80006f8:	d001      	beq.n	80006fe <MX_TIM3_Init+0xaa>
			!= HAL_OK) {
		Error_Handler();
 80006fa:	f000 f995 	bl	8000a28 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 80006fe:	1d39      	adds	r1, r7, #4
 8000700:	4b12      	ldr	r3, [pc, #72]	; (800074c <MX_TIM3_Init+0xf8>)
 8000702:	2204      	movs	r2, #4
 8000704:	0018      	movs	r0, r3
 8000706:	f002 fb6b 	bl	8002de0 <HAL_TIM_PWM_ConfigChannel>
 800070a:	1e03      	subs	r3, r0, #0
 800070c:	d001      	beq.n	8000712 <MX_TIM3_Init+0xbe>
			!= HAL_OK) {
		Error_Handler();
 800070e:	f000 f98b 	bl	8000a28 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3)
 8000712:	1d39      	adds	r1, r7, #4
 8000714:	4b0d      	ldr	r3, [pc, #52]	; (800074c <MX_TIM3_Init+0xf8>)
 8000716:	2208      	movs	r2, #8
 8000718:	0018      	movs	r0, r3
 800071a:	f002 fb61 	bl	8002de0 <HAL_TIM_PWM_ConfigChannel>
 800071e:	1e03      	subs	r3, r0, #0
 8000720:	d001      	beq.n	8000726 <MX_TIM3_Init+0xd2>
			!= HAL_OK) {
		Error_Handler();
 8000722:	f000 f981 	bl	8000a28 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4)
 8000726:	1d39      	adds	r1, r7, #4
 8000728:	4b08      	ldr	r3, [pc, #32]	; (800074c <MX_TIM3_Init+0xf8>)
 800072a:	220c      	movs	r2, #12
 800072c:	0018      	movs	r0, r3
 800072e:	f002 fb57 	bl	8002de0 <HAL_TIM_PWM_ConfigChannel>
 8000732:	1e03      	subs	r3, r0, #0
 8000734:	d001      	beq.n	800073a <MX_TIM3_Init+0xe6>
			!= HAL_OK) {
		Error_Handler();
 8000736:	f000 f977 	bl	8000a28 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 800073a:	4b04      	ldr	r3, [pc, #16]	; (800074c <MX_TIM3_Init+0xf8>)
 800073c:	0018      	movs	r0, r3
 800073e:	f000 fa5f 	bl	8000c00 <HAL_TIM_MspPostInit>

}
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	46bd      	mov	sp, r7
 8000746:	b00a      	add	sp, #40	; 0x28
 8000748:	bd80      	pop	{r7, pc}
 800074a:	46c0      	nop			; (mov r8, r8)
 800074c:	20000148 	.word	0x20000148
 8000750:	40000400 	.word	0x40000400

08000754 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000754:	b590      	push	{r4, r7, lr}
 8000756:	b089      	sub	sp, #36	; 0x24
 8000758:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800075a:	240c      	movs	r4, #12
 800075c:	193b      	adds	r3, r7, r4
 800075e:	0018      	movs	r0, r3
 8000760:	2314      	movs	r3, #20
 8000762:	001a      	movs	r2, r3
 8000764:	2100      	movs	r1, #0
 8000766:	f003 f89f 	bl	80038a8 <memset>
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800076a:	4b1c      	ldr	r3, [pc, #112]	; (80007dc <MX_GPIO_Init+0x88>)
 800076c:	695a      	ldr	r2, [r3, #20]
 800076e:	4b1b      	ldr	r3, [pc, #108]	; (80007dc <MX_GPIO_Init+0x88>)
 8000770:	2180      	movs	r1, #128	; 0x80
 8000772:	0289      	lsls	r1, r1, #10
 8000774:	430a      	orrs	r2, r1
 8000776:	615a      	str	r2, [r3, #20]
 8000778:	4b18      	ldr	r3, [pc, #96]	; (80007dc <MX_GPIO_Init+0x88>)
 800077a:	695a      	ldr	r2, [r3, #20]
 800077c:	2380      	movs	r3, #128	; 0x80
 800077e:	029b      	lsls	r3, r3, #10
 8000780:	4013      	ands	r3, r2
 8000782:	60bb      	str	r3, [r7, #8]
 8000784:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000786:	4b15      	ldr	r3, [pc, #84]	; (80007dc <MX_GPIO_Init+0x88>)
 8000788:	695a      	ldr	r2, [r3, #20]
 800078a:	4b14      	ldr	r3, [pc, #80]	; (80007dc <MX_GPIO_Init+0x88>)
 800078c:	2180      	movs	r1, #128	; 0x80
 800078e:	02c9      	lsls	r1, r1, #11
 8000790:	430a      	orrs	r2, r1
 8000792:	615a      	str	r2, [r3, #20]
 8000794:	4b11      	ldr	r3, [pc, #68]	; (80007dc <MX_GPIO_Init+0x88>)
 8000796:	695a      	ldr	r2, [r3, #20]
 8000798:	2380      	movs	r3, #128	; 0x80
 800079a:	02db      	lsls	r3, r3, #11
 800079c:	4013      	ands	r3, r2
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80007a2:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <MX_GPIO_Init+0x8c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	2140      	movs	r1, #64	; 0x40
 80007a8:	0018      	movs	r0, r3
 80007aa:	f000 ff7f 	bl	80016ac <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PB6 */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 80007ae:	0021      	movs	r1, r4
 80007b0:	187b      	adds	r3, r7, r1
 80007b2:	2240      	movs	r2, #64	; 0x40
 80007b4:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b6:	187b      	adds	r3, r7, r1
 80007b8:	2201      	movs	r2, #1
 80007ba:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	187b      	adds	r3, r7, r1
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c2:	187b      	adds	r3, r7, r1
 80007c4:	2200      	movs	r2, #0
 80007c6:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c8:	187b      	adds	r3, r7, r1
 80007ca:	4a05      	ldr	r2, [pc, #20]	; (80007e0 <MX_GPIO_Init+0x8c>)
 80007cc:	0019      	movs	r1, r3
 80007ce:	0010      	movs	r0, r2
 80007d0:	f000 fe04 	bl	80013dc <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80007d4:	46c0      	nop			; (mov r8, r8)
 80007d6:	46bd      	mov	sp, r7
 80007d8:	b009      	add	sp, #36	; 0x24
 80007da:	bd90      	pop	{r4, r7, pc}
 80007dc:	40021000 	.word	0x40021000
 80007e0:	48000400 	.word	0x48000400

080007e4 <EnablePWMOutput>:

/* USER CODE BEGIN 4 */

void EnablePWMOutput(TIM_HandleTypeDef *_htim) {
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
	//  Set HAL Timer Channel Status
	HAL_TIM_PWM_Start(_htim, TIM_CHANNEL_1);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	2100      	movs	r1, #0
 80007f0:	0018      	movs	r0, r3
 80007f2:	f002 fa49 	bl	8002c88 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(_htim, TIM_CHANNEL_2);
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	2104      	movs	r1, #4
 80007fa:	0018      	movs	r0, r3
 80007fc:	f002 fa44 	bl	8002c88 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(_htim, TIM_CHANNEL_3);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	2108      	movs	r1, #8
 8000804:	0018      	movs	r0, r3
 8000806:	f002 fa3f 	bl	8002c88 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(_htim, TIM_CHANNEL_4);
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	210c      	movs	r1, #12
 800080e:	0018      	movs	r0, r3
 8000810:	f002 fa3a 	bl	8002c88 <HAL_TIM_PWM_Start>
}
 8000814:	46c0      	nop			; (mov r8, r8)
 8000816:	46bd      	mov	sp, r7
 8000818:	b002      	add	sp, #8
 800081a:	bd80      	pop	{r7, pc}

0800081c <CRC_compare>:
	uint16_t message_id;
	uint16_t crc;
} __attribute__((packed));

/* CRC INIT */
uint8_t CRC_compare(struct tctp_message received_msg) {
 800081c:	b590      	push	{r4, r7, lr}
 800081e:	b095      	sub	sp, #84	; 0x54
 8000820:	af00      	add	r7, sp, #0
 8000822:	003c      	movs	r4, r7
 8000824:	6020      	str	r0, [r4, #0]
 8000826:	6061      	str	r1, [r4, #4]
 8000828:	60a2      	str	r2, [r4, #8]
 800082a:	60e3      	str	r3, [r4, #12]
	uint16_t received_crc = received_msg.crc;
 800082c:	234a      	movs	r3, #74	; 0x4a
 800082e:	18fa      	adds	r2, r7, r3
 8000830:	003b      	movs	r3, r7
 8000832:	7ad9      	ldrb	r1, [r3, #11]
 8000834:	7b1b      	ldrb	r3, [r3, #12]
 8000836:	021b      	lsls	r3, r3, #8
 8000838:	430b      	orrs	r3, r1
 800083a:	8013      	strh	r3, [r2, #0]
	uint32_t SPI_RX_Buffer_32[SPI_BUFFER_SIZE];
	for (int i = 0; i < SPI_BUFFER_SIZE; i++) {
 800083c:	2300      	movs	r3, #0
 800083e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000840:	e00c      	b.n	800085c <CRC_compare+0x40>
		SPI_RX_Buffer_32[i] = (uint32_t) SPI_RX_Buffer[i];
 8000842:	4a14      	ldr	r2, [pc, #80]	; (8000894 <CRC_compare+0x78>)
 8000844:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000846:	18d3      	adds	r3, r2, r3
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	0019      	movs	r1, r3
 800084c:	2310      	movs	r3, #16
 800084e:	18fb      	adds	r3, r7, r3
 8000850:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000852:	0092      	lsls	r2, r2, #2
 8000854:	50d1      	str	r1, [r2, r3]
	for (int i = 0; i < SPI_BUFFER_SIZE; i++) {
 8000856:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000858:	3301      	adds	r3, #1
 800085a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800085c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800085e:	2b0c      	cmp	r3, #12
 8000860:	ddef      	ble.n	8000842 <CRC_compare+0x26>
	}

	uint32_t calculated_crc = HAL_CRC_Calculate(&hcrc, SPI_RX_Buffer_32, 11);
 8000862:	2310      	movs	r3, #16
 8000864:	18f9      	adds	r1, r7, r3
 8000866:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <CRC_compare+0x7c>)
 8000868:	220b      	movs	r2, #11
 800086a:	0018      	movs	r0, r3
 800086c:	f000 fc59 	bl	8001122 <HAL_CRC_Calculate>
 8000870:	0003      	movs	r3, r0
 8000872:	647b      	str	r3, [r7, #68]	; 0x44
	calculated_crc = (uint16_t) calculated_crc;
 8000874:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000876:	b29b      	uxth	r3, r3
 8000878:	647b      	str	r3, [r7, #68]	; 0x44

	return received_crc == calculated_crc;
 800087a:	234a      	movs	r3, #74	; 0x4a
 800087c:	18fb      	adds	r3, r7, r3
 800087e:	881b      	ldrh	r3, [r3, #0]
 8000880:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000882:	1ad3      	subs	r3, r2, r3
 8000884:	425a      	negs	r2, r3
 8000886:	4153      	adcs	r3, r2
 8000888:	b2db      	uxtb	r3, r3
}
 800088a:	0018      	movs	r0, r3
 800088c:	46bd      	mov	sp, r7
 800088e:	b015      	add	sp, #84	; 0x54
 8000890:	bd90      	pop	{r4, r7, pc}
 8000892:	46c0      	nop			; (mov r8, r8)
 8000894:	20000000 	.word	0x20000000
 8000898:	20000038 	.word	0x20000038

0800089c <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 800089c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800089e:	b089      	sub	sp, #36	; 0x24
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80008a4:	4b5a      	ldr	r3, [pc, #360]	; (8000a10 <HAL_SPI_TxRxCpltCallback+0x174>)
 80008a6:	2201      	movs	r2, #1
 80008a8:	2140      	movs	r1, #64	; 0x40
 80008aa:	0018      	movs	r0, r3
 80008ac:	f000 fefe 	bl	80016ac <HAL_GPIO_WritePin>

	struct tctp_message *received_msg = (struct tctp_message*) SPI_RX_Buffer;
 80008b0:	4b58      	ldr	r3, [pc, #352]	; (8000a14 <HAL_SPI_TxRxCpltCallback+0x178>)
 80008b2:	61bb      	str	r3, [r7, #24]
	uint8_t message_correct = CRC_compare(*received_msg);
 80008b4:	2317      	movs	r3, #23
 80008b6:	18fc      	adds	r4, r7, r3
 80008b8:	69bb      	ldr	r3, [r7, #24]
 80008ba:	781a      	ldrb	r2, [r3, #0]
 80008bc:	7859      	ldrb	r1, [r3, #1]
 80008be:	0209      	lsls	r1, r1, #8
 80008c0:	430a      	orrs	r2, r1
 80008c2:	7899      	ldrb	r1, [r3, #2]
 80008c4:	0409      	lsls	r1, r1, #16
 80008c6:	430a      	orrs	r2, r1
 80008c8:	78d9      	ldrb	r1, [r3, #3]
 80008ca:	0609      	lsls	r1, r1, #24
 80008cc:	430a      	orrs	r2, r1
 80008ce:	0010      	movs	r0, r2
 80008d0:	791a      	ldrb	r2, [r3, #4]
 80008d2:	7959      	ldrb	r1, [r3, #5]
 80008d4:	0209      	lsls	r1, r1, #8
 80008d6:	430a      	orrs	r2, r1
 80008d8:	7999      	ldrb	r1, [r3, #6]
 80008da:	0409      	lsls	r1, r1, #16
 80008dc:	430a      	orrs	r2, r1
 80008de:	79d9      	ldrb	r1, [r3, #7]
 80008e0:	0609      	lsls	r1, r1, #24
 80008e2:	430a      	orrs	r2, r1
 80008e4:	0016      	movs	r6, r2
 80008e6:	7a1a      	ldrb	r2, [r3, #8]
 80008e8:	7a59      	ldrb	r1, [r3, #9]
 80008ea:	0209      	lsls	r1, r1, #8
 80008ec:	430a      	orrs	r2, r1
 80008ee:	7a99      	ldrb	r1, [r3, #10]
 80008f0:	0409      	lsls	r1, r1, #16
 80008f2:	430a      	orrs	r2, r1
 80008f4:	7ad9      	ldrb	r1, [r3, #11]
 80008f6:	0609      	lsls	r1, r1, #24
 80008f8:	430a      	orrs	r2, r1
 80008fa:	0015      	movs	r5, r2
 80008fc:	7b1a      	ldrb	r2, [r3, #12]
 80008fe:	2300      	movs	r3, #0
 8000900:	21ff      	movs	r1, #255	; 0xff
 8000902:	400a      	ands	r2, r1
 8000904:	21ff      	movs	r1, #255	; 0xff
 8000906:	438b      	bics	r3, r1
 8000908:	4313      	orrs	r3, r2
 800090a:	0031      	movs	r1, r6
 800090c:	002a      	movs	r2, r5
 800090e:	f7ff ff85 	bl	800081c <CRC_compare>
 8000912:	0003      	movs	r3, r0
 8000914:	7023      	strb	r3, [r4, #0]

	if (message_correct) {
 8000916:	2317      	movs	r3, #23
 8000918:	18fb      	adds	r3, r7, r3
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d003      	beq.n	8000928 <HAL_SPI_TxRxCpltCallback+0x8c>
		SPI_TX_Buffer[0] = ACK;
 8000920:	4b3d      	ldr	r3, [pc, #244]	; (8000a18 <HAL_SPI_TxRxCpltCallback+0x17c>)
 8000922:	2200      	movs	r2, #0
 8000924:	701a      	strb	r2, [r3, #0]
 8000926:	e002      	b.n	800092e <HAL_SPI_TxRxCpltCallback+0x92>
	} else {
		SPI_TX_Buffer[0] = NACK;
 8000928:	4b3b      	ldr	r3, [pc, #236]	; (8000a18 <HAL_SPI_TxRxCpltCallback+0x17c>)
 800092a:	2201      	movs	r2, #1
 800092c:	701a      	strb	r2, [r3, #0]
	}
	SPI_TX_Buffer[1] = SPI_RX_Buffer[1];
 800092e:	4b39      	ldr	r3, [pc, #228]	; (8000a14 <HAL_SPI_TxRxCpltCallback+0x178>)
 8000930:	785a      	ldrb	r2, [r3, #1]
 8000932:	4b39      	ldr	r3, [pc, #228]	; (8000a18 <HAL_SPI_TxRxCpltCallback+0x17c>)
 8000934:	705a      	strb	r2, [r3, #1]
	SPI_TX_Buffer[2] = SPI_RX_Buffer[2];
 8000936:	4b37      	ldr	r3, [pc, #220]	; (8000a14 <HAL_SPI_TxRxCpltCallback+0x178>)
 8000938:	789a      	ldrb	r2, [r3, #2]
 800093a:	4b37      	ldr	r3, [pc, #220]	; (8000a18 <HAL_SPI_TxRxCpltCallback+0x17c>)
 800093c:	709a      	strb	r2, [r3, #2]
	SPI_TX_Buffer[3] = SPI_RX_Buffer[11];
 800093e:	4b35      	ldr	r3, [pc, #212]	; (8000a14 <HAL_SPI_TxRxCpltCallback+0x178>)
 8000940:	7ada      	ldrb	r2, [r3, #11]
 8000942:	4b35      	ldr	r3, [pc, #212]	; (8000a18 <HAL_SPI_TxRxCpltCallback+0x17c>)
 8000944:	70da      	strb	r2, [r3, #3]
	SPI_TX_Buffer[4] = SPI_RX_Buffer[12];
 8000946:	4b33      	ldr	r3, [pc, #204]	; (8000a14 <HAL_SPI_TxRxCpltCallback+0x178>)
 8000948:	7b1a      	ldrb	r2, [r3, #12]
 800094a:	4b33      	ldr	r3, [pc, #204]	; (8000a18 <HAL_SPI_TxRxCpltCallback+0x17c>)
 800094c:	711a      	strb	r2, [r3, #4]

	for (int i = 5; i < 13; i++) {
 800094e:	2305      	movs	r3, #5
 8000950:	61fb      	str	r3, [r7, #28]
 8000952:	e007      	b.n	8000964 <HAL_SPI_TxRxCpltCallback+0xc8>
		SPI_TX_Buffer[i] = 0;
 8000954:	4a30      	ldr	r2, [pc, #192]	; (8000a18 <HAL_SPI_TxRxCpltCallback+0x17c>)
 8000956:	69fb      	ldr	r3, [r7, #28]
 8000958:	18d3      	adds	r3, r2, r3
 800095a:	2200      	movs	r2, #0
 800095c:	701a      	strb	r2, [r3, #0]
	for (int i = 5; i < 13; i++) {
 800095e:	69fb      	ldr	r3, [r7, #28]
 8000960:	3301      	adds	r3, #1
 8000962:	61fb      	str	r3, [r7, #28]
 8000964:	69fb      	ldr	r3, [r7, #28]
 8000966:	2b0c      	cmp	r3, #12
 8000968:	ddf4      	ble.n	8000954 <HAL_SPI_TxRxCpltCallback+0xb8>
	}

	HAL_SPI_TransmitReceive_IT(&hspi1, SPI_TX_Buffer, SPI_RX_Buffer, SPI_BUFFER_SIZE);
 800096a:	4a2a      	ldr	r2, [pc, #168]	; (8000a14 <HAL_SPI_TxRxCpltCallback+0x178>)
 800096c:	492a      	ldr	r1, [pc, #168]	; (8000a18 <HAL_SPI_TxRxCpltCallback+0x17c>)
 800096e:	482b      	ldr	r0, [pc, #172]	; (8000a1c <HAL_SPI_TxRxCpltCallback+0x180>)
 8000970:	230d      	movs	r3, #13
 8000972:	f001 fc43 	bl	80021fc <HAL_SPI_TransmitReceive_IT>
	uint8_t received_payload[NUM_THRUSTERS];
	memcpy(received_payload, received_msg->data.full_thrust_values,	NUM_THRUSTERS);
 8000976:	69bb      	ldr	r3, [r7, #24]
 8000978:	3303      	adds	r3, #3
 800097a:	240c      	movs	r4, #12
 800097c:	193a      	adds	r2, r7, r4
 800097e:	0010      	movs	r0, r2
 8000980:	0019      	movs	r1, r3
 8000982:	2308      	movs	r3, #8
 8000984:	001a      	movs	r2, r3
 8000986:	f002 ffbb 	bl	8003900 <memcpy>

	/* Send data to PWMs */
	if (message_correct) {
 800098a:	2317      	movs	r3, #23
 800098c:	18fb      	adds	r3, r7, r3
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d038      	beq.n	8000a06 <HAL_SPI_TxRxCpltCallback+0x16a>
//		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
		htim1.Instance->CCR1 = (uint32_t) received_payload[0] + 250;
 8000994:	0021      	movs	r1, r4
 8000996:	187b      	adds	r3, r7, r1
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	001a      	movs	r2, r3
 800099c:	4b20      	ldr	r3, [pc, #128]	; (8000a20 <HAL_SPI_TxRxCpltCallback+0x184>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	32fa      	adds	r2, #250	; 0xfa
 80009a2:	635a      	str	r2, [r3, #52]	; 0x34
		htim1.Instance->CCR2 = (uint32_t) received_payload[1] + 250;
 80009a4:	187b      	adds	r3, r7, r1
 80009a6:	785b      	ldrb	r3, [r3, #1]
 80009a8:	001a      	movs	r2, r3
 80009aa:	4b1d      	ldr	r3, [pc, #116]	; (8000a20 <HAL_SPI_TxRxCpltCallback+0x184>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	32fa      	adds	r2, #250	; 0xfa
 80009b0:	639a      	str	r2, [r3, #56]	; 0x38
		htim1.Instance->CCR3 = (uint32_t) received_payload[2] + 250;
 80009b2:	187b      	adds	r3, r7, r1
 80009b4:	789b      	ldrb	r3, [r3, #2]
 80009b6:	001a      	movs	r2, r3
 80009b8:	4b19      	ldr	r3, [pc, #100]	; (8000a20 <HAL_SPI_TxRxCpltCallback+0x184>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	32fa      	adds	r2, #250	; 0xfa
 80009be:	63da      	str	r2, [r3, #60]	; 0x3c
		htim1.Instance->CCR4 = (uint32_t) received_payload[3] + 250;
 80009c0:	187b      	adds	r3, r7, r1
 80009c2:	78db      	ldrb	r3, [r3, #3]
 80009c4:	001a      	movs	r2, r3
 80009c6:	4b16      	ldr	r3, [pc, #88]	; (8000a20 <HAL_SPI_TxRxCpltCallback+0x184>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	32fa      	adds	r2, #250	; 0xfa
 80009cc:	641a      	str	r2, [r3, #64]	; 0x40

		htim2.Instance->CCR1 = (uint32_t) received_payload[4] + 250;
 80009ce:	187b      	adds	r3, r7, r1
 80009d0:	791b      	ldrb	r3, [r3, #4]
 80009d2:	001a      	movs	r2, r3
 80009d4:	4b13      	ldr	r3, [pc, #76]	; (8000a24 <HAL_SPI_TxRxCpltCallback+0x188>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	32fa      	adds	r2, #250	; 0xfa
 80009da:	635a      	str	r2, [r3, #52]	; 0x34
		htim2.Instance->CCR2 = (uint32_t) received_payload[5] + 250;
 80009dc:	187b      	adds	r3, r7, r1
 80009de:	795b      	ldrb	r3, [r3, #5]
 80009e0:	001a      	movs	r2, r3
 80009e2:	4b10      	ldr	r3, [pc, #64]	; (8000a24 <HAL_SPI_TxRxCpltCallback+0x188>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	32fa      	adds	r2, #250	; 0xfa
 80009e8:	639a      	str	r2, [r3, #56]	; 0x38
		htim2.Instance->CCR3 = (uint32_t) received_payload[6] + 250;
 80009ea:	187b      	adds	r3, r7, r1
 80009ec:	799b      	ldrb	r3, [r3, #6]
 80009ee:	001a      	movs	r2, r3
 80009f0:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <HAL_SPI_TxRxCpltCallback+0x188>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	32fa      	adds	r2, #250	; 0xfa
 80009f6:	63da      	str	r2, [r3, #60]	; 0x3c
		htim2.Instance->CCR4 = (uint32_t) received_payload[7] + 250;
 80009f8:	187b      	adds	r3, r7, r1
 80009fa:	79db      	ldrb	r3, [r3, #7]
 80009fc:	001a      	movs	r2, r3
 80009fe:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <HAL_SPI_TxRxCpltCallback+0x188>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	32fa      	adds	r2, #250	; 0xfa
 8000a04:	641a      	str	r2, [r3, #64]	; 0x40
	} else {
		//NVIC_SystemReset();
	}
}
 8000a06:	46c0      	nop			; (mov r8, r8)
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	b009      	add	sp, #36	; 0x24
 8000a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a0e:	46c0      	nop			; (mov r8, r8)
 8000a10:	48000400 	.word	0x48000400
 8000a14:	20000000 	.word	0x20000000
 8000a18:	20000190 	.word	0x20000190
 8000a1c:	20000054 	.word	0x20000054
 8000a20:	200000b8 	.word	0x200000b8
 8000a24:	20000100 	.word	0x20000100

08000a28 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000a2c:	46c0      	nop			; (mov r8, r8)
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
	...

08000a34 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a3a:	4b0f      	ldr	r3, [pc, #60]	; (8000a78 <HAL_MspInit+0x44>)
 8000a3c:	699a      	ldr	r2, [r3, #24]
 8000a3e:	4b0e      	ldr	r3, [pc, #56]	; (8000a78 <HAL_MspInit+0x44>)
 8000a40:	2101      	movs	r1, #1
 8000a42:	430a      	orrs	r2, r1
 8000a44:	619a      	str	r2, [r3, #24]
 8000a46:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <HAL_MspInit+0x44>)
 8000a48:	699b      	ldr	r3, [r3, #24]
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a52:	4b09      	ldr	r3, [pc, #36]	; (8000a78 <HAL_MspInit+0x44>)
 8000a54:	69da      	ldr	r2, [r3, #28]
 8000a56:	4b08      	ldr	r3, [pc, #32]	; (8000a78 <HAL_MspInit+0x44>)
 8000a58:	2180      	movs	r1, #128	; 0x80
 8000a5a:	0549      	lsls	r1, r1, #21
 8000a5c:	430a      	orrs	r2, r1
 8000a5e:	61da      	str	r2, [r3, #28]
 8000a60:	4b05      	ldr	r3, [pc, #20]	; (8000a78 <HAL_MspInit+0x44>)
 8000a62:	69da      	ldr	r2, [r3, #28]
 8000a64:	2380      	movs	r3, #128	; 0x80
 8000a66:	055b      	lsls	r3, r3, #21
 8000a68:	4013      	ands	r3, r2
 8000a6a:	603b      	str	r3, [r7, #0]
 8000a6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a6e:	46c0      	nop			; (mov r8, r8)
 8000a70:	46bd      	mov	sp, r7
 8000a72:	b002      	add	sp, #8
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	46c0      	nop			; (mov r8, r8)
 8000a78:	40021000 	.word	0x40021000

08000a7c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a09      	ldr	r2, [pc, #36]	; (8000ab0 <HAL_CRC_MspInit+0x34>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d10b      	bne.n	8000aa6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000a8e:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <HAL_CRC_MspInit+0x38>)
 8000a90:	695a      	ldr	r2, [r3, #20]
 8000a92:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <HAL_CRC_MspInit+0x38>)
 8000a94:	2140      	movs	r1, #64	; 0x40
 8000a96:	430a      	orrs	r2, r1
 8000a98:	615a      	str	r2, [r3, #20]
 8000a9a:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <HAL_CRC_MspInit+0x38>)
 8000a9c:	695b      	ldr	r3, [r3, #20]
 8000a9e:	2240      	movs	r2, #64	; 0x40
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000aa6:	46c0      	nop			; (mov r8, r8)
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	b004      	add	sp, #16
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	46c0      	nop			; (mov r8, r8)
 8000ab0:	40023000 	.word	0x40023000
 8000ab4:	40021000 	.word	0x40021000

08000ab8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ab8:	b590      	push	{r4, r7, lr}
 8000aba:	b08b      	sub	sp, #44	; 0x2c
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac0:	2414      	movs	r4, #20
 8000ac2:	193b      	adds	r3, r7, r4
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	2314      	movs	r3, #20
 8000ac8:	001a      	movs	r2, r3
 8000aca:	2100      	movs	r1, #0
 8000acc:	f002 feec 	bl	80038a8 <memset>
  if(hspi->Instance==SPI1)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a20      	ldr	r2, [pc, #128]	; (8000b58 <HAL_SPI_MspInit+0xa0>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d13a      	bne.n	8000b50 <HAL_SPI_MspInit+0x98>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ada:	4b20      	ldr	r3, [pc, #128]	; (8000b5c <HAL_SPI_MspInit+0xa4>)
 8000adc:	699a      	ldr	r2, [r3, #24]
 8000ade:	4b1f      	ldr	r3, [pc, #124]	; (8000b5c <HAL_SPI_MspInit+0xa4>)
 8000ae0:	2180      	movs	r1, #128	; 0x80
 8000ae2:	0149      	lsls	r1, r1, #5
 8000ae4:	430a      	orrs	r2, r1
 8000ae6:	619a      	str	r2, [r3, #24]
 8000ae8:	4b1c      	ldr	r3, [pc, #112]	; (8000b5c <HAL_SPI_MspInit+0xa4>)
 8000aea:	699a      	ldr	r2, [r3, #24]
 8000aec:	2380      	movs	r3, #128	; 0x80
 8000aee:	015b      	lsls	r3, r3, #5
 8000af0:	4013      	ands	r3, r2
 8000af2:	613b      	str	r3, [r7, #16]
 8000af4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af6:	4b19      	ldr	r3, [pc, #100]	; (8000b5c <HAL_SPI_MspInit+0xa4>)
 8000af8:	695a      	ldr	r2, [r3, #20]
 8000afa:	4b18      	ldr	r3, [pc, #96]	; (8000b5c <HAL_SPI_MspInit+0xa4>)
 8000afc:	2180      	movs	r1, #128	; 0x80
 8000afe:	0289      	lsls	r1, r1, #10
 8000b00:	430a      	orrs	r2, r1
 8000b02:	615a      	str	r2, [r3, #20]
 8000b04:	4b15      	ldr	r3, [pc, #84]	; (8000b5c <HAL_SPI_MspInit+0xa4>)
 8000b06:	695a      	ldr	r2, [r3, #20]
 8000b08:	2380      	movs	r3, #128	; 0x80
 8000b0a:	029b      	lsls	r3, r3, #10
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000b12:	0021      	movs	r1, r4
 8000b14:	187b      	adds	r3, r7, r1
 8000b16:	22f0      	movs	r2, #240	; 0xf0
 8000b18:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1a:	187b      	adds	r3, r7, r1
 8000b1c:	2202      	movs	r2, #2
 8000b1e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	187b      	adds	r3, r7, r1
 8000b22:	2200      	movs	r2, #0
 8000b24:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b26:	187b      	adds	r3, r7, r1
 8000b28:	2203      	movs	r2, #3
 8000b2a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000b2c:	187b      	adds	r3, r7, r1
 8000b2e:	2200      	movs	r2, #0
 8000b30:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b32:	187a      	adds	r2, r7, r1
 8000b34:	2390      	movs	r3, #144	; 0x90
 8000b36:	05db      	lsls	r3, r3, #23
 8000b38:	0011      	movs	r1, r2
 8000b3a:	0018      	movs	r0, r3
 8000b3c:	f000 fc4e 	bl	80013dc <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000b40:	2200      	movs	r2, #0
 8000b42:	2100      	movs	r1, #0
 8000b44:	2019      	movs	r0, #25
 8000b46:	f000 fa73 	bl	8001030 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000b4a:	2019      	movs	r0, #25
 8000b4c:	f000 fa85 	bl	800105a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b50:	46c0      	nop			; (mov r8, r8)
 8000b52:	46bd      	mov	sp, r7
 8000b54:	b00b      	add	sp, #44	; 0x2c
 8000b56:	bd90      	pop	{r4, r7, pc}
 8000b58:	40013000 	.word	0x40013000
 8000b5c:	40021000 	.word	0x40021000

08000b60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a0a      	ldr	r2, [pc, #40]	; (8000b98 <HAL_TIM_Base_MspInit+0x38>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d10d      	bne.n	8000b8e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b72:	4b0a      	ldr	r3, [pc, #40]	; (8000b9c <HAL_TIM_Base_MspInit+0x3c>)
 8000b74:	699a      	ldr	r2, [r3, #24]
 8000b76:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <HAL_TIM_Base_MspInit+0x3c>)
 8000b78:	2180      	movs	r1, #128	; 0x80
 8000b7a:	0109      	lsls	r1, r1, #4
 8000b7c:	430a      	orrs	r2, r1
 8000b7e:	619a      	str	r2, [r3, #24]
 8000b80:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <HAL_TIM_Base_MspInit+0x3c>)
 8000b82:	699a      	ldr	r2, [r3, #24]
 8000b84:	2380      	movs	r3, #128	; 0x80
 8000b86:	011b      	lsls	r3, r3, #4
 8000b88:	4013      	ands	r3, r2
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000b8e:	46c0      	nop			; (mov r8, r8)
 8000b90:	46bd      	mov	sp, r7
 8000b92:	b004      	add	sp, #16
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	46c0      	nop			; (mov r8, r8)
 8000b98:	40012c00 	.word	0x40012c00
 8000b9c:	40021000 	.word	0x40021000

08000ba0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	2380      	movs	r3, #128	; 0x80
 8000bae:	05db      	lsls	r3, r3, #23
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	d10c      	bne.n	8000bce <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bb4:	4b10      	ldr	r3, [pc, #64]	; (8000bf8 <HAL_TIM_PWM_MspInit+0x58>)
 8000bb6:	69da      	ldr	r2, [r3, #28]
 8000bb8:	4b0f      	ldr	r3, [pc, #60]	; (8000bf8 <HAL_TIM_PWM_MspInit+0x58>)
 8000bba:	2101      	movs	r1, #1
 8000bbc:	430a      	orrs	r2, r1
 8000bbe:	61da      	str	r2, [r3, #28]
 8000bc0:	4b0d      	ldr	r3, [pc, #52]	; (8000bf8 <HAL_TIM_PWM_MspInit+0x58>)
 8000bc2:	69db      	ldr	r3, [r3, #28]
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	60fb      	str	r3, [r7, #12]
 8000bca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000bcc:	e010      	b.n	8000bf0 <HAL_TIM_PWM_MspInit+0x50>
  else if(htim_pwm->Instance==TIM3)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4a0a      	ldr	r2, [pc, #40]	; (8000bfc <HAL_TIM_PWM_MspInit+0x5c>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d10b      	bne.n	8000bf0 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000bd8:	4b07      	ldr	r3, [pc, #28]	; (8000bf8 <HAL_TIM_PWM_MspInit+0x58>)
 8000bda:	69da      	ldr	r2, [r3, #28]
 8000bdc:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <HAL_TIM_PWM_MspInit+0x58>)
 8000bde:	2102      	movs	r1, #2
 8000be0:	430a      	orrs	r2, r1
 8000be2:	61da      	str	r2, [r3, #28]
 8000be4:	4b04      	ldr	r3, [pc, #16]	; (8000bf8 <HAL_TIM_PWM_MspInit+0x58>)
 8000be6:	69db      	ldr	r3, [r3, #28]
 8000be8:	2202      	movs	r2, #2
 8000bea:	4013      	ands	r3, r2
 8000bec:	60bb      	str	r3, [r7, #8]
 8000bee:	68bb      	ldr	r3, [r7, #8]
}
 8000bf0:	46c0      	nop			; (mov r8, r8)
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	b004      	add	sp, #16
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	40021000 	.word	0x40021000
 8000bfc:	40000400 	.word	0x40000400

08000c00 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c00:	b590      	push	{r4, r7, lr}
 8000c02:	b08b      	sub	sp, #44	; 0x2c
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c08:	2414      	movs	r4, #20
 8000c0a:	193b      	adds	r3, r7, r4
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	2314      	movs	r3, #20
 8000c10:	001a      	movs	r2, r3
 8000c12:	2100      	movs	r1, #0
 8000c14:	f002 fe48 	bl	80038a8 <memset>
  if(htim->Instance==TIM1)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a41      	ldr	r2, [pc, #260]	; (8000d24 <HAL_TIM_MspPostInit+0x124>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d126      	bne.n	8000c70 <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c22:	4b41      	ldr	r3, [pc, #260]	; (8000d28 <HAL_TIM_MspPostInit+0x128>)
 8000c24:	695a      	ldr	r2, [r3, #20]
 8000c26:	4b40      	ldr	r3, [pc, #256]	; (8000d28 <HAL_TIM_MspPostInit+0x128>)
 8000c28:	2180      	movs	r1, #128	; 0x80
 8000c2a:	0289      	lsls	r1, r1, #10
 8000c2c:	430a      	orrs	r2, r1
 8000c2e:	615a      	str	r2, [r3, #20]
 8000c30:	4b3d      	ldr	r3, [pc, #244]	; (8000d28 <HAL_TIM_MspPostInit+0x128>)
 8000c32:	695a      	ldr	r2, [r3, #20]
 8000c34:	2380      	movs	r3, #128	; 0x80
 8000c36:	029b      	lsls	r3, r3, #10
 8000c38:	4013      	ands	r3, r2
 8000c3a:	613b      	str	r3, [r7, #16]
 8000c3c:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000c3e:	193b      	adds	r3, r7, r4
 8000c40:	22f0      	movs	r2, #240	; 0xf0
 8000c42:	0112      	lsls	r2, r2, #4
 8000c44:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c46:	0021      	movs	r1, r4
 8000c48:	187b      	adds	r3, r7, r1
 8000c4a:	2202      	movs	r2, #2
 8000c4c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	187b      	adds	r3, r7, r1
 8000c50:	2200      	movs	r2, #0
 8000c52:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c54:	187b      	adds	r3, r7, r1
 8000c56:	2200      	movs	r2, #0
 8000c58:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000c5a:	187b      	adds	r3, r7, r1
 8000c5c:	2202      	movs	r2, #2
 8000c5e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c60:	187a      	adds	r2, r7, r1
 8000c62:	2390      	movs	r3, #144	; 0x90
 8000c64:	05db      	lsls	r3, r3, #23
 8000c66:	0011      	movs	r1, r2
 8000c68:	0018      	movs	r0, r3
 8000c6a:	f000 fbb7 	bl	80013dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000c6e:	e054      	b.n	8000d1a <HAL_TIM_MspPostInit+0x11a>
  else if(htim->Instance==TIM2)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	2380      	movs	r3, #128	; 0x80
 8000c76:	05db      	lsls	r3, r3, #23
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d125      	bne.n	8000cc8 <HAL_TIM_MspPostInit+0xc8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7c:	4b2a      	ldr	r3, [pc, #168]	; (8000d28 <HAL_TIM_MspPostInit+0x128>)
 8000c7e:	695a      	ldr	r2, [r3, #20]
 8000c80:	4b29      	ldr	r3, [pc, #164]	; (8000d28 <HAL_TIM_MspPostInit+0x128>)
 8000c82:	2180      	movs	r1, #128	; 0x80
 8000c84:	0289      	lsls	r1, r1, #10
 8000c86:	430a      	orrs	r2, r1
 8000c88:	615a      	str	r2, [r3, #20]
 8000c8a:	4b27      	ldr	r3, [pc, #156]	; (8000d28 <HAL_TIM_MspPostInit+0x128>)
 8000c8c:	695a      	ldr	r2, [r3, #20]
 8000c8e:	2380      	movs	r3, #128	; 0x80
 8000c90:	029b      	lsls	r3, r3, #10
 8000c92:	4013      	ands	r3, r2
 8000c94:	60fb      	str	r3, [r7, #12]
 8000c96:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000c98:	2114      	movs	r1, #20
 8000c9a:	187b      	adds	r3, r7, r1
 8000c9c:	220f      	movs	r2, #15
 8000c9e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca0:	187b      	adds	r3, r7, r1
 8000ca2:	2202      	movs	r2, #2
 8000ca4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	187b      	adds	r3, r7, r1
 8000ca8:	2200      	movs	r2, #0
 8000caa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cac:	187b      	adds	r3, r7, r1
 8000cae:	2200      	movs	r2, #0
 8000cb0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000cb2:	187b      	adds	r3, r7, r1
 8000cb4:	2202      	movs	r2, #2
 8000cb6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb8:	187a      	adds	r2, r7, r1
 8000cba:	2390      	movs	r3, #144	; 0x90
 8000cbc:	05db      	lsls	r3, r3, #23
 8000cbe:	0011      	movs	r1, r2
 8000cc0:	0018      	movs	r0, r3
 8000cc2:	f000 fb8b 	bl	80013dc <HAL_GPIO_Init>
}
 8000cc6:	e028      	b.n	8000d1a <HAL_TIM_MspPostInit+0x11a>
  else if(htim->Instance==TIM3)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a17      	ldr	r2, [pc, #92]	; (8000d2c <HAL_TIM_MspPostInit+0x12c>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d123      	bne.n	8000d1a <HAL_TIM_MspPostInit+0x11a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd2:	4b15      	ldr	r3, [pc, #84]	; (8000d28 <HAL_TIM_MspPostInit+0x128>)
 8000cd4:	695a      	ldr	r2, [r3, #20]
 8000cd6:	4b14      	ldr	r3, [pc, #80]	; (8000d28 <HAL_TIM_MspPostInit+0x128>)
 8000cd8:	2180      	movs	r1, #128	; 0x80
 8000cda:	02c9      	lsls	r1, r1, #11
 8000cdc:	430a      	orrs	r2, r1
 8000cde:	615a      	str	r2, [r3, #20]
 8000ce0:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <HAL_TIM_MspPostInit+0x128>)
 8000ce2:	695a      	ldr	r2, [r3, #20]
 8000ce4:	2380      	movs	r3, #128	; 0x80
 8000ce6:	02db      	lsls	r3, r3, #11
 8000ce8:	4013      	ands	r3, r2
 8000cea:	60bb      	str	r3, [r7, #8]
 8000cec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000cee:	2114      	movs	r1, #20
 8000cf0:	187b      	adds	r3, r7, r1
 8000cf2:	2233      	movs	r2, #51	; 0x33
 8000cf4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf6:	187b      	adds	r3, r7, r1
 8000cf8:	2202      	movs	r2, #2
 8000cfa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	187b      	adds	r3, r7, r1
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d02:	187b      	adds	r3, r7, r1
 8000d04:	2200      	movs	r2, #0
 8000d06:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000d08:	187b      	adds	r3, r7, r1
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d0e:	187b      	adds	r3, r7, r1
 8000d10:	4a07      	ldr	r2, [pc, #28]	; (8000d30 <HAL_TIM_MspPostInit+0x130>)
 8000d12:	0019      	movs	r1, r3
 8000d14:	0010      	movs	r0, r2
 8000d16:	f000 fb61 	bl	80013dc <HAL_GPIO_Init>
}
 8000d1a:	46c0      	nop			; (mov r8, r8)
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	b00b      	add	sp, #44	; 0x2c
 8000d20:	bd90      	pop	{r4, r7, pc}
 8000d22:	46c0      	nop			; (mov r8, r8)
 8000d24:	40012c00 	.word	0x40012c00
 8000d28:	40021000 	.word	0x40021000
 8000d2c:	40000400 	.word	0x40000400
 8000d30:	48000400 	.word	0x48000400

08000d34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d38:	46c0      	nop			; (mov r8, r8)
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d42:	e7fe      	b.n	8000d42 <HardFault_Handler+0x4>

08000d44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d48:	46c0      	nop			; (mov r8, r8)
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d52:	46c0      	nop			; (mov r8, r8)
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d5c:	f000 f8a0 	bl	8000ea0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d60:	46c0      	nop			; (mov r8, r8)
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
	...

08000d68 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000d6c:	4b03      	ldr	r3, [pc, #12]	; (8000d7c <SPI1_IRQHandler+0x14>)
 8000d6e:	0018      	movs	r0, r3
 8000d70:	f001 fb0e 	bl	8002390 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000d74:	46c0      	nop			; (mov r8, r8)
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	46c0      	nop			; (mov r8, r8)
 8000d7c:	20000054 	.word	0x20000054

08000d80 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000d84:	46c0      	nop			; (mov r8, r8)
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
	...

08000d8c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d8c:	4813      	ldr	r0, [pc, #76]	; (8000ddc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d8e:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8000d90:	4813      	ldr	r0, [pc, #76]	; (8000de0 <LoopForever+0x6>)
    LDR R1, [R0]
 8000d92:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000d94:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000d96:	4a13      	ldr	r2, [pc, #76]	; (8000de4 <LoopForever+0xa>)
    CMP R1, R2
 8000d98:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000d9a:	d105      	bne.n	8000da8 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000d9c:	4812      	ldr	r0, [pc, #72]	; (8000de8 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000d9e:	4913      	ldr	r1, [pc, #76]	; (8000dec <LoopForever+0x12>)
    STR R1, [R0]
 8000da0:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000da2:	4813      	ldr	r0, [pc, #76]	; (8000df0 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000da4:	4913      	ldr	r1, [pc, #76]	; (8000df4 <LoopForever+0x1a>)
    STR R1, [R0]
 8000da6:	6001      	str	r1, [r0, #0]

08000da8 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000da8:	4813      	ldr	r0, [pc, #76]	; (8000df8 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000daa:	4914      	ldr	r1, [pc, #80]	; (8000dfc <LoopForever+0x22>)
  ldr r2, =_sidata
 8000dac:	4a14      	ldr	r2, [pc, #80]	; (8000e00 <LoopForever+0x26>)
  movs r3, #0
 8000dae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000db0:	e002      	b.n	8000db8 <LoopCopyDataInit>

08000db2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000db2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000db4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000db6:	3304      	adds	r3, #4

08000db8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000db8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dbc:	d3f9      	bcc.n	8000db2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dbe:	4a11      	ldr	r2, [pc, #68]	; (8000e04 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000dc0:	4c11      	ldr	r4, [pc, #68]	; (8000e08 <LoopForever+0x2e>)
  movs r3, #0
 8000dc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dc4:	e001      	b.n	8000dca <LoopFillZerobss>

08000dc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dc8:	3204      	adds	r2, #4

08000dca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dcc:	d3fb      	bcc.n	8000dc6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000dce:	f7ff ffd7 	bl	8000d80 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000dd2:	f002 fd71 	bl	80038b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dd6:	f7ff fa23 	bl	8000220 <main>

08000dda <LoopForever>:

LoopForever:
    b LoopForever
 8000dda:	e7fe      	b.n	8000dda <LoopForever>
  ldr   r0, =_estack
 8000ddc:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000de0:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000de4:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000de8:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000dec:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000df0:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000df4:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000df8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dfc:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000e00:	08003964 	.word	0x08003964
  ldr r2, =_sbss
 8000e04:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000e08:	200001a4 	.word	0x200001a4

08000e0c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e0c:	e7fe      	b.n	8000e0c <ADC1_IRQHandler>
	...

08000e10 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e14:	4b07      	ldr	r3, [pc, #28]	; (8000e34 <HAL_Init+0x24>)
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <HAL_Init+0x24>)
 8000e1a:	2110      	movs	r1, #16
 8000e1c:	430a      	orrs	r2, r1
 8000e1e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000e20:	2003      	movs	r0, #3
 8000e22:	f000 f809 	bl	8000e38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e26:	f7ff fe05 	bl	8000a34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e2a:	2300      	movs	r3, #0
}
 8000e2c:	0018      	movs	r0, r3
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	46c0      	nop			; (mov r8, r8)
 8000e34:	40022000 	.word	0x40022000

08000e38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e38:	b590      	push	{r4, r7, lr}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e40:	4b14      	ldr	r3, [pc, #80]	; (8000e94 <HAL_InitTick+0x5c>)
 8000e42:	681c      	ldr	r4, [r3, #0]
 8000e44:	4b14      	ldr	r3, [pc, #80]	; (8000e98 <HAL_InitTick+0x60>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	0019      	movs	r1, r3
 8000e4a:	23fa      	movs	r3, #250	; 0xfa
 8000e4c:	0098      	lsls	r0, r3, #2
 8000e4e:	f7ff f95b 	bl	8000108 <__udivsi3>
 8000e52:	0003      	movs	r3, r0
 8000e54:	0019      	movs	r1, r3
 8000e56:	0020      	movs	r0, r4
 8000e58:	f7ff f956 	bl	8000108 <__udivsi3>
 8000e5c:	0003      	movs	r3, r0
 8000e5e:	0018      	movs	r0, r3
 8000e60:	f000 f90b 	bl	800107a <HAL_SYSTICK_Config>
 8000e64:	1e03      	subs	r3, r0, #0
 8000e66:	d001      	beq.n	8000e6c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	e00f      	b.n	8000e8c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2b03      	cmp	r3, #3
 8000e70:	d80b      	bhi.n	8000e8a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e72:	6879      	ldr	r1, [r7, #4]
 8000e74:	2301      	movs	r3, #1
 8000e76:	425b      	negs	r3, r3
 8000e78:	2200      	movs	r2, #0
 8000e7a:	0018      	movs	r0, r3
 8000e7c:	f000 f8d8 	bl	8001030 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e80:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <HAL_InitTick+0x64>)
 8000e82:	687a      	ldr	r2, [r7, #4]
 8000e84:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000e86:	2300      	movs	r3, #0
 8000e88:	e000      	b.n	8000e8c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
}
 8000e8c:	0018      	movs	r0, r3
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	b003      	add	sp, #12
 8000e92:	bd90      	pop	{r4, r7, pc}
 8000e94:	20000010 	.word	0x20000010
 8000e98:	20000018 	.word	0x20000018
 8000e9c:	20000014 	.word	0x20000014

08000ea0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ea4:	4b05      	ldr	r3, [pc, #20]	; (8000ebc <HAL_IncTick+0x1c>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	001a      	movs	r2, r3
 8000eaa:	4b05      	ldr	r3, [pc, #20]	; (8000ec0 <HAL_IncTick+0x20>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	18d2      	adds	r2, r2, r3
 8000eb0:	4b03      	ldr	r3, [pc, #12]	; (8000ec0 <HAL_IncTick+0x20>)
 8000eb2:	601a      	str	r2, [r3, #0]
}
 8000eb4:	46c0      	nop			; (mov r8, r8)
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	46c0      	nop			; (mov r8, r8)
 8000ebc:	20000018 	.word	0x20000018
 8000ec0:	200001a0 	.word	0x200001a0

08000ec4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec8:	4b02      	ldr	r3, [pc, #8]	; (8000ed4 <HAL_GetTick+0x10>)
 8000eca:	681b      	ldr	r3, [r3, #0]
}
 8000ecc:	0018      	movs	r0, r3
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	46c0      	nop			; (mov r8, r8)
 8000ed4:	200001a0 	.word	0x200001a0

08000ed8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	0002      	movs	r2, r0
 8000ee0:	1dfb      	adds	r3, r7, #7
 8000ee2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ee4:	1dfb      	adds	r3, r7, #7
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	2b7f      	cmp	r3, #127	; 0x7f
 8000eea:	d809      	bhi.n	8000f00 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eec:	1dfb      	adds	r3, r7, #7
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	001a      	movs	r2, r3
 8000ef2:	231f      	movs	r3, #31
 8000ef4:	401a      	ands	r2, r3
 8000ef6:	4b04      	ldr	r3, [pc, #16]	; (8000f08 <__NVIC_EnableIRQ+0x30>)
 8000ef8:	2101      	movs	r1, #1
 8000efa:	4091      	lsls	r1, r2
 8000efc:	000a      	movs	r2, r1
 8000efe:	601a      	str	r2, [r3, #0]
  }
}
 8000f00:	46c0      	nop			; (mov r8, r8)
 8000f02:	46bd      	mov	sp, r7
 8000f04:	b002      	add	sp, #8
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	e000e100 	.word	0xe000e100

08000f0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f0c:	b590      	push	{r4, r7, lr}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	0002      	movs	r2, r0
 8000f14:	6039      	str	r1, [r7, #0]
 8000f16:	1dfb      	adds	r3, r7, #7
 8000f18:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f1a:	1dfb      	adds	r3, r7, #7
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	2b7f      	cmp	r3, #127	; 0x7f
 8000f20:	d828      	bhi.n	8000f74 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f22:	4a2f      	ldr	r2, [pc, #188]	; (8000fe0 <__NVIC_SetPriority+0xd4>)
 8000f24:	1dfb      	adds	r3, r7, #7
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	b25b      	sxtb	r3, r3
 8000f2a:	089b      	lsrs	r3, r3, #2
 8000f2c:	33c0      	adds	r3, #192	; 0xc0
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	589b      	ldr	r3, [r3, r2]
 8000f32:	1dfa      	adds	r2, r7, #7
 8000f34:	7812      	ldrb	r2, [r2, #0]
 8000f36:	0011      	movs	r1, r2
 8000f38:	2203      	movs	r2, #3
 8000f3a:	400a      	ands	r2, r1
 8000f3c:	00d2      	lsls	r2, r2, #3
 8000f3e:	21ff      	movs	r1, #255	; 0xff
 8000f40:	4091      	lsls	r1, r2
 8000f42:	000a      	movs	r2, r1
 8000f44:	43d2      	mvns	r2, r2
 8000f46:	401a      	ands	r2, r3
 8000f48:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	019b      	lsls	r3, r3, #6
 8000f4e:	22ff      	movs	r2, #255	; 0xff
 8000f50:	401a      	ands	r2, r3
 8000f52:	1dfb      	adds	r3, r7, #7
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	0018      	movs	r0, r3
 8000f58:	2303      	movs	r3, #3
 8000f5a:	4003      	ands	r3, r0
 8000f5c:	00db      	lsls	r3, r3, #3
 8000f5e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f60:	481f      	ldr	r0, [pc, #124]	; (8000fe0 <__NVIC_SetPriority+0xd4>)
 8000f62:	1dfb      	adds	r3, r7, #7
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	b25b      	sxtb	r3, r3
 8000f68:	089b      	lsrs	r3, r3, #2
 8000f6a:	430a      	orrs	r2, r1
 8000f6c:	33c0      	adds	r3, #192	; 0xc0
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f72:	e031      	b.n	8000fd8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f74:	4a1b      	ldr	r2, [pc, #108]	; (8000fe4 <__NVIC_SetPriority+0xd8>)
 8000f76:	1dfb      	adds	r3, r7, #7
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	0019      	movs	r1, r3
 8000f7c:	230f      	movs	r3, #15
 8000f7e:	400b      	ands	r3, r1
 8000f80:	3b08      	subs	r3, #8
 8000f82:	089b      	lsrs	r3, r3, #2
 8000f84:	3306      	adds	r3, #6
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	18d3      	adds	r3, r2, r3
 8000f8a:	3304      	adds	r3, #4
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	1dfa      	adds	r2, r7, #7
 8000f90:	7812      	ldrb	r2, [r2, #0]
 8000f92:	0011      	movs	r1, r2
 8000f94:	2203      	movs	r2, #3
 8000f96:	400a      	ands	r2, r1
 8000f98:	00d2      	lsls	r2, r2, #3
 8000f9a:	21ff      	movs	r1, #255	; 0xff
 8000f9c:	4091      	lsls	r1, r2
 8000f9e:	000a      	movs	r2, r1
 8000fa0:	43d2      	mvns	r2, r2
 8000fa2:	401a      	ands	r2, r3
 8000fa4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	019b      	lsls	r3, r3, #6
 8000faa:	22ff      	movs	r2, #255	; 0xff
 8000fac:	401a      	ands	r2, r3
 8000fae:	1dfb      	adds	r3, r7, #7
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	0018      	movs	r0, r3
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	4003      	ands	r3, r0
 8000fb8:	00db      	lsls	r3, r3, #3
 8000fba:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fbc:	4809      	ldr	r0, [pc, #36]	; (8000fe4 <__NVIC_SetPriority+0xd8>)
 8000fbe:	1dfb      	adds	r3, r7, #7
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	001c      	movs	r4, r3
 8000fc4:	230f      	movs	r3, #15
 8000fc6:	4023      	ands	r3, r4
 8000fc8:	3b08      	subs	r3, #8
 8000fca:	089b      	lsrs	r3, r3, #2
 8000fcc:	430a      	orrs	r2, r1
 8000fce:	3306      	adds	r3, #6
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	18c3      	adds	r3, r0, r3
 8000fd4:	3304      	adds	r3, #4
 8000fd6:	601a      	str	r2, [r3, #0]
}
 8000fd8:	46c0      	nop			; (mov r8, r8)
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	b003      	add	sp, #12
 8000fde:	bd90      	pop	{r4, r7, pc}
 8000fe0:	e000e100 	.word	0xe000e100
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	1e5a      	subs	r2, r3, #1
 8000ff4:	2380      	movs	r3, #128	; 0x80
 8000ff6:	045b      	lsls	r3, r3, #17
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d301      	bcc.n	8001000 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	e010      	b.n	8001022 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001000:	4b0a      	ldr	r3, [pc, #40]	; (800102c <SysTick_Config+0x44>)
 8001002:	687a      	ldr	r2, [r7, #4]
 8001004:	3a01      	subs	r2, #1
 8001006:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001008:	2301      	movs	r3, #1
 800100a:	425b      	negs	r3, r3
 800100c:	2103      	movs	r1, #3
 800100e:	0018      	movs	r0, r3
 8001010:	f7ff ff7c 	bl	8000f0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001014:	4b05      	ldr	r3, [pc, #20]	; (800102c <SysTick_Config+0x44>)
 8001016:	2200      	movs	r2, #0
 8001018:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800101a:	4b04      	ldr	r3, [pc, #16]	; (800102c <SysTick_Config+0x44>)
 800101c:	2207      	movs	r2, #7
 800101e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001020:	2300      	movs	r3, #0
}
 8001022:	0018      	movs	r0, r3
 8001024:	46bd      	mov	sp, r7
 8001026:	b002      	add	sp, #8
 8001028:	bd80      	pop	{r7, pc}
 800102a:	46c0      	nop			; (mov r8, r8)
 800102c:	e000e010 	.word	0xe000e010

08001030 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	60b9      	str	r1, [r7, #8]
 8001038:	607a      	str	r2, [r7, #4]
 800103a:	210f      	movs	r1, #15
 800103c:	187b      	adds	r3, r7, r1
 800103e:	1c02      	adds	r2, r0, #0
 8001040:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001042:	68ba      	ldr	r2, [r7, #8]
 8001044:	187b      	adds	r3, r7, r1
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	b25b      	sxtb	r3, r3
 800104a:	0011      	movs	r1, r2
 800104c:	0018      	movs	r0, r3
 800104e:	f7ff ff5d 	bl	8000f0c <__NVIC_SetPriority>
}
 8001052:	46c0      	nop			; (mov r8, r8)
 8001054:	46bd      	mov	sp, r7
 8001056:	b004      	add	sp, #16
 8001058:	bd80      	pop	{r7, pc}

0800105a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
 8001060:	0002      	movs	r2, r0
 8001062:	1dfb      	adds	r3, r7, #7
 8001064:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001066:	1dfb      	adds	r3, r7, #7
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	b25b      	sxtb	r3, r3
 800106c:	0018      	movs	r0, r3
 800106e:	f7ff ff33 	bl	8000ed8 <__NVIC_EnableIRQ>
}
 8001072:	46c0      	nop			; (mov r8, r8)
 8001074:	46bd      	mov	sp, r7
 8001076:	b002      	add	sp, #8
 8001078:	bd80      	pop	{r7, pc}

0800107a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	b082      	sub	sp, #8
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	0018      	movs	r0, r3
 8001086:	f7ff ffaf 	bl	8000fe8 <SysTick_Config>
 800108a:	0003      	movs	r3, r0
}
 800108c:	0018      	movs	r0, r3
 800108e:	46bd      	mov	sp, r7
 8001090:	b002      	add	sp, #8
 8001092:	bd80      	pop	{r7, pc}

08001094 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d101      	bne.n	80010a6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e039      	b.n	800111a <HAL_CRC_Init+0x86>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	7d5b      	ldrb	r3, [r3, #21]
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d106      	bne.n	80010be <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2200      	movs	r2, #0
 80010b4:	751a      	strb	r2, [r3, #20]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	0018      	movs	r0, r3
 80010ba:	f7ff fcdf 	bl	8000a7c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2202      	movs	r2, #2
 80010c2:	755a      	strb	r2, [r3, #21]
#endif /* CRC_POL_POL */

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	791b      	ldrb	r3, [r3, #4]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d105      	bne.n	80010d8 <HAL_CRC_Init+0x44>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2201      	movs	r2, #1
 80010d2:	4252      	negs	r2, r2
 80010d4:	611a      	str	r2, [r3, #16]
 80010d6:	e004      	b.n	80010e2 <HAL_CRC_Init+0x4e>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	6892      	ldr	r2, [r2, #8]
 80010e0:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	2260      	movs	r2, #96	; 0x60
 80010ea:	4393      	bics	r3, r2
 80010ec:	0019      	movs	r1, r3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	68da      	ldr	r2, [r3, #12]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	430a      	orrs	r2, r1
 80010f8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	2280      	movs	r2, #128	; 0x80
 8001102:	4393      	bics	r3, r2
 8001104:	0019      	movs	r1, r3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	691a      	ldr	r2, [r3, #16]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	430a      	orrs	r2, r1
 8001110:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2201      	movs	r2, #1
 8001116:	755a      	strb	r2, [r3, #21]

  /* Return function status */
  return HAL_OK;
 8001118:	2300      	movs	r3, #0
}
 800111a:	0018      	movs	r0, r3
 800111c:	46bd      	mov	sp, r7
 800111e:	b002      	add	sp, #8
 8001120:	bd80      	pop	{r7, pc}

08001122 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	b086      	sub	sp, #24
 8001126:	af00      	add	r7, sp, #0
 8001128:	60f8      	str	r0, [r7, #12]
 800112a:	60b9      	str	r1, [r7, #8]
 800112c:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800112e:	2300      	movs	r3, #0
 8001130:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	2202      	movs	r2, #2
 8001136:	755a      	strb	r2, [r3, #21]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	689a      	ldr	r2, [r3, #8]
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	2101      	movs	r1, #1
 8001144:	430a      	orrs	r2, r1
 8001146:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	2b03      	cmp	r3, #3
 800114e:	d005      	beq.n	800115c <HAL_CRC_Calculate+0x3a>
 8001150:	d82d      	bhi.n	80011ae <HAL_CRC_Calculate+0x8c>
 8001152:	2b01      	cmp	r3, #1
 8001154:	d019      	beq.n	800118a <HAL_CRC_Calculate+0x68>
 8001156:	2b02      	cmp	r3, #2
 8001158:	d020      	beq.n	800119c <HAL_CRC_Calculate+0x7a>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 800115a:	e028      	b.n	80011ae <HAL_CRC_Calculate+0x8c>
      for (index = 0U; index < BufferLength; index++)
 800115c:	2300      	movs	r3, #0
 800115e:	617b      	str	r3, [r7, #20]
 8001160:	e00a      	b.n	8001178 <HAL_CRC_Calculate+0x56>
        hcrc->Instance->DR = pBuffer[index];
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	68ba      	ldr	r2, [r7, #8]
 8001168:	18d2      	adds	r2, r2, r3
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	6812      	ldr	r2, [r2, #0]
 8001170:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	3301      	adds	r3, #1
 8001176:	617b      	str	r3, [r7, #20]
 8001178:	697a      	ldr	r2, [r7, #20]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	429a      	cmp	r2, r3
 800117e:	d3f0      	bcc.n	8001162 <HAL_CRC_Calculate+0x40>
      temp = hcrc->Instance->DR;
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	613b      	str	r3, [r7, #16]
      break;
 8001188:	e012      	b.n	80011b0 <HAL_CRC_Calculate+0x8e>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 800118a:	687a      	ldr	r2, [r7, #4]
 800118c:	68b9      	ldr	r1, [r7, #8]
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	0018      	movs	r0, r3
 8001192:	f000 f815 	bl	80011c0 <CRC_Handle_8>
 8001196:	0003      	movs	r3, r0
 8001198:	613b      	str	r3, [r7, #16]
      break;
 800119a:	e009      	b.n	80011b0 <HAL_CRC_Calculate+0x8e>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 800119c:	687a      	ldr	r2, [r7, #4]
 800119e:	68b9      	ldr	r1, [r7, #8]
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	0018      	movs	r0, r3
 80011a4:	f000 f89d 	bl	80012e2 <CRC_Handle_16>
 80011a8:	0003      	movs	r3, r0
 80011aa:	613b      	str	r3, [r7, #16]
      break;
 80011ac:	e000      	b.n	80011b0 <HAL_CRC_Calculate+0x8e>
      break;
 80011ae:	46c0      	nop			; (mov r8, r8)
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	2201      	movs	r2, #1
 80011b4:	755a      	strb	r2, [r3, #21]

  /* Return the CRC computed value */
  return temp;
 80011b6:	693b      	ldr	r3, [r7, #16]
}
 80011b8:	0018      	movs	r0, r3
 80011ba:	46bd      	mov	sp, r7
 80011bc:	b006      	add	sp, #24
 80011be:	bd80      	pop	{r7, pc}

080011c0 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b088      	sub	sp, #32
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 80011cc:	2300      	movs	r3, #0
 80011ce:	61fb      	str	r3, [r7, #28]
 80011d0:	e023      	b.n	800121a <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	68ba      	ldr	r2, [r7, #8]
 80011d8:	18d3      	adds	r3, r2, r3
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	3301      	adds	r3, #1
 80011e4:	68b9      	ldr	r1, [r7, #8]
 80011e6:	18cb      	adds	r3, r1, r3
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80011ec:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	3302      	adds	r3, #2
 80011f4:	68b9      	ldr	r1, [r7, #8]
 80011f6:	18cb      	adds	r3, r1, r3
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80011fc:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	3303      	adds	r3, #3
 8001204:	68b9      	ldr	r1, [r7, #8]
 8001206:	18cb      	adds	r3, r1, r3
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	0019      	movs	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8001210:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001212:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	3301      	adds	r3, #1
 8001218:	61fb      	str	r3, [r7, #28]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	089b      	lsrs	r3, r3, #2
 800121e:	69fa      	ldr	r2, [r7, #28]
 8001220:	429a      	cmp	r2, r3
 8001222:	d3d6      	bcc.n	80011d2 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2203      	movs	r2, #3
 8001228:	4013      	ands	r3, r2
 800122a:	d053      	beq.n	80012d4 <CRC_Handle_8+0x114>
  {
    if ((BufferLength % 4U) == 1U)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2203      	movs	r2, #3
 8001230:	4013      	ands	r3, r2
 8001232:	2b01      	cmp	r3, #1
 8001234:	d107      	bne.n	8001246 <CRC_Handle_8+0x86>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	68ba      	ldr	r2, [r7, #8]
 800123c:	18d2      	adds	r2, r2, r3
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	7812      	ldrb	r2, [r2, #0]
 8001244:	701a      	strb	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2203      	movs	r2, #3
 800124a:	4013      	ands	r3, r2
 800124c:	2b02      	cmp	r3, #2
 800124e:	d119      	bne.n	8001284 <CRC_Handle_8+0xc4>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	68ba      	ldr	r2, [r7, #8]
 8001256:	18d3      	adds	r3, r2, r3
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	021b      	lsls	r3, r3, #8
 800125c:	b21a      	sxth	r2, r3
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	3301      	adds	r3, #1
 8001264:	68b9      	ldr	r1, [r7, #8]
 8001266:	18cb      	adds	r3, r1, r3
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	b21b      	sxth	r3, r3
 800126c:	4313      	orrs	r3, r2
 800126e:	b21a      	sxth	r2, r3
 8001270:	211a      	movs	r1, #26
 8001272:	187b      	adds	r3, r7, r1
 8001274:	801a      	strh	r2, [r3, #0]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	187a      	adds	r2, r7, r1
 8001280:	8812      	ldrh	r2, [r2, #0]
 8001282:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2203      	movs	r2, #3
 8001288:	4013      	ands	r3, r2
 800128a:	2b03      	cmp	r3, #3
 800128c:	d122      	bne.n	80012d4 <CRC_Handle_8+0x114>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	68ba      	ldr	r2, [r7, #8]
 8001294:	18d3      	adds	r3, r2, r3
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	021b      	lsls	r3, r3, #8
 800129a:	b21a      	sxth	r2, r3
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	3301      	adds	r3, #1
 80012a2:	68b9      	ldr	r1, [r7, #8]
 80012a4:	18cb      	adds	r3, r1, r3
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	b21b      	sxth	r3, r3
 80012aa:	4313      	orrs	r3, r2
 80012ac:	b21a      	sxth	r2, r3
 80012ae:	211a      	movs	r1, #26
 80012b0:	187b      	adds	r3, r7, r1
 80012b2:	801a      	strh	r2, [r3, #0]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	187a      	adds	r2, r7, r1
 80012be:	8812      	ldrh	r2, [r2, #0]
 80012c0:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	3302      	adds	r3, #2
 80012c8:	68ba      	ldr	r2, [r7, #8]
 80012ca:	18d2      	adds	r2, r2, r3
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	7812      	ldrb	r2, [r2, #0]
 80012d2:	701a      	strb	r2, [r3, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681b      	ldr	r3, [r3, #0]
}
 80012da:	0018      	movs	r0, r3
 80012dc:	46bd      	mov	sp, r7
 80012de:	b008      	add	sp, #32
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b086      	sub	sp, #24
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	60f8      	str	r0, [r7, #12]
 80012ea:	60b9      	str	r1, [r7, #8]
 80012ec:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 80012ee:	2300      	movs	r3, #0
 80012f0:	617b      	str	r3, [r7, #20]
 80012f2:	e013      	b.n	800131c <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	68ba      	ldr	r2, [r7, #8]
 80012fa:	18d3      	adds	r3, r2, r3
 80012fc:	881b      	ldrh	r3, [r3, #0]
 80012fe:	041a      	lsls	r2, r3, #16
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	3302      	adds	r3, #2
 8001306:	68b9      	ldr	r1, [r7, #8]
 8001308:	18cb      	adds	r3, r1, r3
 800130a:	881b      	ldrh	r3, [r3, #0]
 800130c:	0019      	movs	r1, r3
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	430a      	orrs	r2, r1
 8001314:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	3301      	adds	r3, #1
 800131a:	617b      	str	r3, [r7, #20]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	085b      	lsrs	r3, r3, #1
 8001320:	697a      	ldr	r2, [r7, #20]
 8001322:	429a      	cmp	r2, r3
 8001324:	d3e6      	bcc.n	80012f4 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2201      	movs	r2, #1
 800132a:	4013      	ands	r3, r2
 800132c:	d009      	beq.n	8001342 <CRC_Handle_16+0x60>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	68ba      	ldr	r2, [r7, #8]
 800133a:	18d3      	adds	r3, r2, r3
 800133c:	881a      	ldrh	r2, [r3, #0]
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	681b      	ldr	r3, [r3, #0]
}
 8001348:	0018      	movs	r0, r3
 800134a:	46bd      	mov	sp, r7
 800134c:	b006      	add	sp, #24
 800134e:	bd80      	pop	{r7, pc}

08001350 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001358:	210f      	movs	r1, #15
 800135a:	187b      	adds	r3, r7, r1
 800135c:	2200      	movs	r2, #0
 800135e:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2221      	movs	r2, #33	; 0x21
 8001364:	5c9b      	ldrb	r3, [r3, r2]
 8001366:	b2db      	uxtb	r3, r3
 8001368:	2b02      	cmp	r3, #2
 800136a:	d006      	beq.n	800137a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2204      	movs	r2, #4
 8001370:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8001372:	187b      	adds	r3, r7, r1
 8001374:	2201      	movs	r2, #1
 8001376:	701a      	strb	r2, [r3, #0]
 8001378:	e028      	b.n	80013cc <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	210e      	movs	r1, #14
 8001386:	438a      	bics	r2, r1
 8001388:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2101      	movs	r1, #1
 8001396:	438a      	bics	r2, r1
 8001398:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013a2:	2101      	movs	r1, #1
 80013a4:	4091      	lsls	r1, r2
 80013a6:	000a      	movs	r2, r1
 80013a8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2221      	movs	r2, #33	; 0x21
 80013ae:	2101      	movs	r1, #1
 80013b0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2220      	movs	r2, #32
 80013b6:	2100      	movs	r1, #0
 80013b8:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d004      	beq.n	80013cc <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	0010      	movs	r0, r2
 80013ca:	4798      	blx	r3
    }
  }
  return status;
 80013cc:	230f      	movs	r3, #15
 80013ce:	18fb      	adds	r3, r7, r3
 80013d0:	781b      	ldrb	r3, [r3, #0]
}
 80013d2:	0018      	movs	r0, r3
 80013d4:	46bd      	mov	sp, r7
 80013d6:	b004      	add	sp, #16
 80013d8:	bd80      	pop	{r7, pc}
	...

080013dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b086      	sub	sp, #24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013e6:	2300      	movs	r3, #0
 80013e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013ea:	e149      	b.n	8001680 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2101      	movs	r1, #1
 80013f2:	697a      	ldr	r2, [r7, #20]
 80013f4:	4091      	lsls	r1, r2
 80013f6:	000a      	movs	r2, r1
 80013f8:	4013      	ands	r3, r2
 80013fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d100      	bne.n	8001404 <HAL_GPIO_Init+0x28>
 8001402:	e13a      	b.n	800167a <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	2203      	movs	r2, #3
 800140a:	4013      	ands	r3, r2
 800140c:	2b01      	cmp	r3, #1
 800140e:	d005      	beq.n	800141c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	2203      	movs	r2, #3
 8001416:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001418:	2b02      	cmp	r3, #2
 800141a:	d130      	bne.n	800147e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	2203      	movs	r2, #3
 8001428:	409a      	lsls	r2, r3
 800142a:	0013      	movs	r3, r2
 800142c:	43da      	mvns	r2, r3
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	4013      	ands	r3, r2
 8001432:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	68da      	ldr	r2, [r3, #12]
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	409a      	lsls	r2, r3
 800143e:	0013      	movs	r3, r2
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	4313      	orrs	r3, r2
 8001444:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	693a      	ldr	r2, [r7, #16]
 800144a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001452:	2201      	movs	r2, #1
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	409a      	lsls	r2, r3
 8001458:	0013      	movs	r3, r2
 800145a:	43da      	mvns	r2, r3
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	4013      	ands	r3, r2
 8001460:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	091b      	lsrs	r3, r3, #4
 8001468:	2201      	movs	r2, #1
 800146a:	401a      	ands	r2, r3
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	409a      	lsls	r2, r3
 8001470:	0013      	movs	r3, r2
 8001472:	693a      	ldr	r2, [r7, #16]
 8001474:	4313      	orrs	r3, r2
 8001476:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	2203      	movs	r2, #3
 8001484:	4013      	ands	r3, r2
 8001486:	2b03      	cmp	r3, #3
 8001488:	d017      	beq.n	80014ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	68db      	ldr	r3, [r3, #12]
 800148e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	2203      	movs	r2, #3
 8001496:	409a      	lsls	r2, r3
 8001498:	0013      	movs	r3, r2
 800149a:	43da      	mvns	r2, r3
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	4013      	ands	r3, r2
 80014a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	689a      	ldr	r2, [r3, #8]
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	409a      	lsls	r2, r3
 80014ac:	0013      	movs	r3, r2
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	2203      	movs	r2, #3
 80014c0:	4013      	ands	r3, r2
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d123      	bne.n	800150e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	08da      	lsrs	r2, r3, #3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	3208      	adds	r2, #8
 80014ce:	0092      	lsls	r2, r2, #2
 80014d0:	58d3      	ldr	r3, [r2, r3]
 80014d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	2207      	movs	r2, #7
 80014d8:	4013      	ands	r3, r2
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	220f      	movs	r2, #15
 80014de:	409a      	lsls	r2, r3
 80014e0:	0013      	movs	r3, r2
 80014e2:	43da      	mvns	r2, r3
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	4013      	ands	r3, r2
 80014e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	691a      	ldr	r2, [r3, #16]
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	2107      	movs	r1, #7
 80014f2:	400b      	ands	r3, r1
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	409a      	lsls	r2, r3
 80014f8:	0013      	movs	r3, r2
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	08da      	lsrs	r2, r3, #3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	3208      	adds	r2, #8
 8001508:	0092      	lsls	r2, r2, #2
 800150a:	6939      	ldr	r1, [r7, #16]
 800150c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	2203      	movs	r2, #3
 800151a:	409a      	lsls	r2, r3
 800151c:	0013      	movs	r3, r2
 800151e:	43da      	mvns	r2, r3
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	4013      	ands	r3, r2
 8001524:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	2203      	movs	r2, #3
 800152c:	401a      	ands	r2, r3
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	409a      	lsls	r2, r3
 8001534:	0013      	movs	r3, r2
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	4313      	orrs	r3, r2
 800153a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685a      	ldr	r2, [r3, #4]
 8001546:	23c0      	movs	r3, #192	; 0xc0
 8001548:	029b      	lsls	r3, r3, #10
 800154a:	4013      	ands	r3, r2
 800154c:	d100      	bne.n	8001550 <HAL_GPIO_Init+0x174>
 800154e:	e094      	b.n	800167a <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001550:	4b51      	ldr	r3, [pc, #324]	; (8001698 <HAL_GPIO_Init+0x2bc>)
 8001552:	699a      	ldr	r2, [r3, #24]
 8001554:	4b50      	ldr	r3, [pc, #320]	; (8001698 <HAL_GPIO_Init+0x2bc>)
 8001556:	2101      	movs	r1, #1
 8001558:	430a      	orrs	r2, r1
 800155a:	619a      	str	r2, [r3, #24]
 800155c:	4b4e      	ldr	r3, [pc, #312]	; (8001698 <HAL_GPIO_Init+0x2bc>)
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	2201      	movs	r2, #1
 8001562:	4013      	ands	r3, r2
 8001564:	60bb      	str	r3, [r7, #8]
 8001566:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001568:	4a4c      	ldr	r2, [pc, #304]	; (800169c <HAL_GPIO_Init+0x2c0>)
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	089b      	lsrs	r3, r3, #2
 800156e:	3302      	adds	r3, #2
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	589b      	ldr	r3, [r3, r2]
 8001574:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	2203      	movs	r2, #3
 800157a:	4013      	ands	r3, r2
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	220f      	movs	r2, #15
 8001580:	409a      	lsls	r2, r3
 8001582:	0013      	movs	r3, r2
 8001584:	43da      	mvns	r2, r3
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	4013      	ands	r3, r2
 800158a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	2390      	movs	r3, #144	; 0x90
 8001590:	05db      	lsls	r3, r3, #23
 8001592:	429a      	cmp	r2, r3
 8001594:	d00d      	beq.n	80015b2 <HAL_GPIO_Init+0x1d6>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a41      	ldr	r2, [pc, #260]	; (80016a0 <HAL_GPIO_Init+0x2c4>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d007      	beq.n	80015ae <HAL_GPIO_Init+0x1d2>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a40      	ldr	r2, [pc, #256]	; (80016a4 <HAL_GPIO_Init+0x2c8>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d101      	bne.n	80015aa <HAL_GPIO_Init+0x1ce>
 80015a6:	2302      	movs	r3, #2
 80015a8:	e004      	b.n	80015b4 <HAL_GPIO_Init+0x1d8>
 80015aa:	2305      	movs	r3, #5
 80015ac:	e002      	b.n	80015b4 <HAL_GPIO_Init+0x1d8>
 80015ae:	2301      	movs	r3, #1
 80015b0:	e000      	b.n	80015b4 <HAL_GPIO_Init+0x1d8>
 80015b2:	2300      	movs	r3, #0
 80015b4:	697a      	ldr	r2, [r7, #20]
 80015b6:	2103      	movs	r1, #3
 80015b8:	400a      	ands	r2, r1
 80015ba:	0092      	lsls	r2, r2, #2
 80015bc:	4093      	lsls	r3, r2
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80015c4:	4935      	ldr	r1, [pc, #212]	; (800169c <HAL_GPIO_Init+0x2c0>)
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	089b      	lsrs	r3, r3, #2
 80015ca:	3302      	adds	r3, #2
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015d2:	4b35      	ldr	r3, [pc, #212]	; (80016a8 <HAL_GPIO_Init+0x2cc>)
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	43da      	mvns	r2, r3
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	4013      	ands	r3, r2
 80015e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685a      	ldr	r2, [r3, #4]
 80015e6:	2380      	movs	r3, #128	; 0x80
 80015e8:	035b      	lsls	r3, r3, #13
 80015ea:	4013      	ands	r3, r2
 80015ec:	d003      	beq.n	80015f6 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80015f6:	4b2c      	ldr	r3, [pc, #176]	; (80016a8 <HAL_GPIO_Init+0x2cc>)
 80015f8:	693a      	ldr	r2, [r7, #16]
 80015fa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80015fc:	4b2a      	ldr	r3, [pc, #168]	; (80016a8 <HAL_GPIO_Init+0x2cc>)
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	43da      	mvns	r2, r3
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	4013      	ands	r3, r2
 800160a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685a      	ldr	r2, [r3, #4]
 8001610:	2380      	movs	r3, #128	; 0x80
 8001612:	039b      	lsls	r3, r3, #14
 8001614:	4013      	ands	r3, r2
 8001616:	d003      	beq.n	8001620 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001618:	693a      	ldr	r2, [r7, #16]
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	4313      	orrs	r3, r2
 800161e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001620:	4b21      	ldr	r3, [pc, #132]	; (80016a8 <HAL_GPIO_Init+0x2cc>)
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001626:	4b20      	ldr	r3, [pc, #128]	; (80016a8 <HAL_GPIO_Init+0x2cc>)
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	43da      	mvns	r2, r3
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	4013      	ands	r3, r2
 8001634:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685a      	ldr	r2, [r3, #4]
 800163a:	2380      	movs	r3, #128	; 0x80
 800163c:	029b      	lsls	r3, r3, #10
 800163e:	4013      	ands	r3, r2
 8001640:	d003      	beq.n	800164a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	4313      	orrs	r3, r2
 8001648:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800164a:	4b17      	ldr	r3, [pc, #92]	; (80016a8 <HAL_GPIO_Init+0x2cc>)
 800164c:	693a      	ldr	r2, [r7, #16]
 800164e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001650:	4b15      	ldr	r3, [pc, #84]	; (80016a8 <HAL_GPIO_Init+0x2cc>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	43da      	mvns	r2, r3
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	4013      	ands	r3, r2
 800165e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685a      	ldr	r2, [r3, #4]
 8001664:	2380      	movs	r3, #128	; 0x80
 8001666:	025b      	lsls	r3, r3, #9
 8001668:	4013      	ands	r3, r2
 800166a:	d003      	beq.n	8001674 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 800166c:	693a      	ldr	r2, [r7, #16]
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	4313      	orrs	r3, r2
 8001672:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001674:	4b0c      	ldr	r3, [pc, #48]	; (80016a8 <HAL_GPIO_Init+0x2cc>)
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	3301      	adds	r3, #1
 800167e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	40da      	lsrs	r2, r3
 8001688:	1e13      	subs	r3, r2, #0
 800168a:	d000      	beq.n	800168e <HAL_GPIO_Init+0x2b2>
 800168c:	e6ae      	b.n	80013ec <HAL_GPIO_Init+0x10>
  } 
}
 800168e:	46c0      	nop			; (mov r8, r8)
 8001690:	46c0      	nop			; (mov r8, r8)
 8001692:	46bd      	mov	sp, r7
 8001694:	b006      	add	sp, #24
 8001696:	bd80      	pop	{r7, pc}
 8001698:	40021000 	.word	0x40021000
 800169c:	40010000 	.word	0x40010000
 80016a0:	48000400 	.word	0x48000400
 80016a4:	48000800 	.word	0x48000800
 80016a8:	40010400 	.word	0x40010400

080016ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	0008      	movs	r0, r1
 80016b6:	0011      	movs	r1, r2
 80016b8:	1cbb      	adds	r3, r7, #2
 80016ba:	1c02      	adds	r2, r0, #0
 80016bc:	801a      	strh	r2, [r3, #0]
 80016be:	1c7b      	adds	r3, r7, #1
 80016c0:	1c0a      	adds	r2, r1, #0
 80016c2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016c4:	1c7b      	adds	r3, r7, #1
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d004      	beq.n	80016d6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016cc:	1cbb      	adds	r3, r7, #2
 80016ce:	881a      	ldrh	r2, [r3, #0]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016d4:	e003      	b.n	80016de <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016d6:	1cbb      	adds	r3, r7, #2
 80016d8:	881a      	ldrh	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016de:	46c0      	nop			; (mov r8, r8)
 80016e0:	46bd      	mov	sp, r7
 80016e2:	b002      	add	sp, #8
 80016e4:	bd80      	pop	{r7, pc}
	...

080016e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b088      	sub	sp, #32
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d102      	bne.n	80016fc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	f000 fb76 	bl	8001de8 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2201      	movs	r2, #1
 8001702:	4013      	ands	r3, r2
 8001704:	d100      	bne.n	8001708 <HAL_RCC_OscConfig+0x20>
 8001706:	e08e      	b.n	8001826 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001708:	4bc5      	ldr	r3, [pc, #788]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	220c      	movs	r2, #12
 800170e:	4013      	ands	r3, r2
 8001710:	2b04      	cmp	r3, #4
 8001712:	d00e      	beq.n	8001732 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001714:	4bc2      	ldr	r3, [pc, #776]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	220c      	movs	r2, #12
 800171a:	4013      	ands	r3, r2
 800171c:	2b08      	cmp	r3, #8
 800171e:	d117      	bne.n	8001750 <HAL_RCC_OscConfig+0x68>
 8001720:	4bbf      	ldr	r3, [pc, #764]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 8001722:	685a      	ldr	r2, [r3, #4]
 8001724:	23c0      	movs	r3, #192	; 0xc0
 8001726:	025b      	lsls	r3, r3, #9
 8001728:	401a      	ands	r2, r3
 800172a:	2380      	movs	r3, #128	; 0x80
 800172c:	025b      	lsls	r3, r3, #9
 800172e:	429a      	cmp	r2, r3
 8001730:	d10e      	bne.n	8001750 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001732:	4bbb      	ldr	r3, [pc, #748]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	2380      	movs	r3, #128	; 0x80
 8001738:	029b      	lsls	r3, r3, #10
 800173a:	4013      	ands	r3, r2
 800173c:	d100      	bne.n	8001740 <HAL_RCC_OscConfig+0x58>
 800173e:	e071      	b.n	8001824 <HAL_RCC_OscConfig+0x13c>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d000      	beq.n	800174a <HAL_RCC_OscConfig+0x62>
 8001748:	e06c      	b.n	8001824 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	f000 fb4c 	bl	8001de8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d107      	bne.n	8001768 <HAL_RCC_OscConfig+0x80>
 8001758:	4bb1      	ldr	r3, [pc, #708]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	4bb0      	ldr	r3, [pc, #704]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 800175e:	2180      	movs	r1, #128	; 0x80
 8001760:	0249      	lsls	r1, r1, #9
 8001762:	430a      	orrs	r2, r1
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	e02f      	b.n	80017c8 <HAL_RCC_OscConfig+0xe0>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d10c      	bne.n	800178a <HAL_RCC_OscConfig+0xa2>
 8001770:	4bab      	ldr	r3, [pc, #684]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	4baa      	ldr	r3, [pc, #680]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 8001776:	49ab      	ldr	r1, [pc, #684]	; (8001a24 <HAL_RCC_OscConfig+0x33c>)
 8001778:	400a      	ands	r2, r1
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	4ba8      	ldr	r3, [pc, #672]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	4ba7      	ldr	r3, [pc, #668]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 8001782:	49a9      	ldr	r1, [pc, #676]	; (8001a28 <HAL_RCC_OscConfig+0x340>)
 8001784:	400a      	ands	r2, r1
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	e01e      	b.n	80017c8 <HAL_RCC_OscConfig+0xe0>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	2b05      	cmp	r3, #5
 8001790:	d10e      	bne.n	80017b0 <HAL_RCC_OscConfig+0xc8>
 8001792:	4ba3      	ldr	r3, [pc, #652]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	4ba2      	ldr	r3, [pc, #648]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 8001798:	2180      	movs	r1, #128	; 0x80
 800179a:	02c9      	lsls	r1, r1, #11
 800179c:	430a      	orrs	r2, r1
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	4b9f      	ldr	r3, [pc, #636]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	4b9e      	ldr	r3, [pc, #632]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 80017a6:	2180      	movs	r1, #128	; 0x80
 80017a8:	0249      	lsls	r1, r1, #9
 80017aa:	430a      	orrs	r2, r1
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	e00b      	b.n	80017c8 <HAL_RCC_OscConfig+0xe0>
 80017b0:	4b9b      	ldr	r3, [pc, #620]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	4b9a      	ldr	r3, [pc, #616]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 80017b6:	499b      	ldr	r1, [pc, #620]	; (8001a24 <HAL_RCC_OscConfig+0x33c>)
 80017b8:	400a      	ands	r2, r1
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	4b98      	ldr	r3, [pc, #608]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	4b97      	ldr	r3, [pc, #604]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 80017c2:	4999      	ldr	r1, [pc, #612]	; (8001a28 <HAL_RCC_OscConfig+0x340>)
 80017c4:	400a      	ands	r2, r1
 80017c6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d014      	beq.n	80017fa <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d0:	f7ff fb78 	bl	8000ec4 <HAL_GetTick>
 80017d4:	0003      	movs	r3, r0
 80017d6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017d8:	e008      	b.n	80017ec <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017da:	f7ff fb73 	bl	8000ec4 <HAL_GetTick>
 80017de:	0002      	movs	r2, r0
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	2b64      	cmp	r3, #100	; 0x64
 80017e6:	d901      	bls.n	80017ec <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e2fd      	b.n	8001de8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ec:	4b8c      	ldr	r3, [pc, #560]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	2380      	movs	r3, #128	; 0x80
 80017f2:	029b      	lsls	r3, r3, #10
 80017f4:	4013      	ands	r3, r2
 80017f6:	d0f0      	beq.n	80017da <HAL_RCC_OscConfig+0xf2>
 80017f8:	e015      	b.n	8001826 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017fa:	f7ff fb63 	bl	8000ec4 <HAL_GetTick>
 80017fe:	0003      	movs	r3, r0
 8001800:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001802:	e008      	b.n	8001816 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001804:	f7ff fb5e 	bl	8000ec4 <HAL_GetTick>
 8001808:	0002      	movs	r2, r0
 800180a:	69bb      	ldr	r3, [r7, #24]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b64      	cmp	r3, #100	; 0x64
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e2e8      	b.n	8001de8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001816:	4b82      	ldr	r3, [pc, #520]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	2380      	movs	r3, #128	; 0x80
 800181c:	029b      	lsls	r3, r3, #10
 800181e:	4013      	ands	r3, r2
 8001820:	d1f0      	bne.n	8001804 <HAL_RCC_OscConfig+0x11c>
 8001822:	e000      	b.n	8001826 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001824:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	2202      	movs	r2, #2
 800182c:	4013      	ands	r3, r2
 800182e:	d100      	bne.n	8001832 <HAL_RCC_OscConfig+0x14a>
 8001830:	e06c      	b.n	800190c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001832:	4b7b      	ldr	r3, [pc, #492]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	220c      	movs	r2, #12
 8001838:	4013      	ands	r3, r2
 800183a:	d00e      	beq.n	800185a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800183c:	4b78      	ldr	r3, [pc, #480]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	220c      	movs	r2, #12
 8001842:	4013      	ands	r3, r2
 8001844:	2b08      	cmp	r3, #8
 8001846:	d11f      	bne.n	8001888 <HAL_RCC_OscConfig+0x1a0>
 8001848:	4b75      	ldr	r3, [pc, #468]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 800184a:	685a      	ldr	r2, [r3, #4]
 800184c:	23c0      	movs	r3, #192	; 0xc0
 800184e:	025b      	lsls	r3, r3, #9
 8001850:	401a      	ands	r2, r3
 8001852:	2380      	movs	r3, #128	; 0x80
 8001854:	021b      	lsls	r3, r3, #8
 8001856:	429a      	cmp	r2, r3
 8001858:	d116      	bne.n	8001888 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800185a:	4b71      	ldr	r3, [pc, #452]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	2202      	movs	r2, #2
 8001860:	4013      	ands	r3, r2
 8001862:	d005      	beq.n	8001870 <HAL_RCC_OscConfig+0x188>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d001      	beq.n	8001870 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e2bb      	b.n	8001de8 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001870:	4b6b      	ldr	r3, [pc, #428]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	22f8      	movs	r2, #248	; 0xf8
 8001876:	4393      	bics	r3, r2
 8001878:	0019      	movs	r1, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	691b      	ldr	r3, [r3, #16]
 800187e:	00da      	lsls	r2, r3, #3
 8001880:	4b67      	ldr	r3, [pc, #412]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 8001882:	430a      	orrs	r2, r1
 8001884:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001886:	e041      	b.n	800190c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d024      	beq.n	80018da <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001890:	4b63      	ldr	r3, [pc, #396]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	4b62      	ldr	r3, [pc, #392]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 8001896:	2101      	movs	r1, #1
 8001898:	430a      	orrs	r2, r1
 800189a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800189c:	f7ff fb12 	bl	8000ec4 <HAL_GetTick>
 80018a0:	0003      	movs	r3, r0
 80018a2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018a4:	e008      	b.n	80018b8 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018a6:	f7ff fb0d 	bl	8000ec4 <HAL_GetTick>
 80018aa:	0002      	movs	r2, r0
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d901      	bls.n	80018b8 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e297      	b.n	8001de8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018b8:	4b59      	ldr	r3, [pc, #356]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2202      	movs	r2, #2
 80018be:	4013      	ands	r3, r2
 80018c0:	d0f1      	beq.n	80018a6 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018c2:	4b57      	ldr	r3, [pc, #348]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	22f8      	movs	r2, #248	; 0xf8
 80018c8:	4393      	bics	r3, r2
 80018ca:	0019      	movs	r1, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	691b      	ldr	r3, [r3, #16]
 80018d0:	00da      	lsls	r2, r3, #3
 80018d2:	4b53      	ldr	r3, [pc, #332]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 80018d4:	430a      	orrs	r2, r1
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	e018      	b.n	800190c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018da:	4b51      	ldr	r3, [pc, #324]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	4b50      	ldr	r3, [pc, #320]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 80018e0:	2101      	movs	r1, #1
 80018e2:	438a      	bics	r2, r1
 80018e4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e6:	f7ff faed 	bl	8000ec4 <HAL_GetTick>
 80018ea:	0003      	movs	r3, r0
 80018ec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ee:	e008      	b.n	8001902 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018f0:	f7ff fae8 	bl	8000ec4 <HAL_GetTick>
 80018f4:	0002      	movs	r2, r0
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d901      	bls.n	8001902 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e272      	b.n	8001de8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001902:	4b47      	ldr	r3, [pc, #284]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2202      	movs	r2, #2
 8001908:	4013      	ands	r3, r2
 800190a:	d1f1      	bne.n	80018f0 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2208      	movs	r2, #8
 8001912:	4013      	ands	r3, r2
 8001914:	d036      	beq.n	8001984 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	69db      	ldr	r3, [r3, #28]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d019      	beq.n	8001952 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800191e:	4b40      	ldr	r3, [pc, #256]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 8001920:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001922:	4b3f      	ldr	r3, [pc, #252]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 8001924:	2101      	movs	r1, #1
 8001926:	430a      	orrs	r2, r1
 8001928:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800192a:	f7ff facb 	bl	8000ec4 <HAL_GetTick>
 800192e:	0003      	movs	r3, r0
 8001930:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001932:	e008      	b.n	8001946 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001934:	f7ff fac6 	bl	8000ec4 <HAL_GetTick>
 8001938:	0002      	movs	r2, r0
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b02      	cmp	r3, #2
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e250      	b.n	8001de8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001946:	4b36      	ldr	r3, [pc, #216]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 8001948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194a:	2202      	movs	r2, #2
 800194c:	4013      	ands	r3, r2
 800194e:	d0f1      	beq.n	8001934 <HAL_RCC_OscConfig+0x24c>
 8001950:	e018      	b.n	8001984 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001952:	4b33      	ldr	r3, [pc, #204]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 8001954:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001956:	4b32      	ldr	r3, [pc, #200]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 8001958:	2101      	movs	r1, #1
 800195a:	438a      	bics	r2, r1
 800195c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800195e:	f7ff fab1 	bl	8000ec4 <HAL_GetTick>
 8001962:	0003      	movs	r3, r0
 8001964:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001966:	e008      	b.n	800197a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001968:	f7ff faac 	bl	8000ec4 <HAL_GetTick>
 800196c:	0002      	movs	r2, r0
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b02      	cmp	r3, #2
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e236      	b.n	8001de8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800197a:	4b29      	ldr	r3, [pc, #164]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 800197c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197e:	2202      	movs	r2, #2
 8001980:	4013      	ands	r3, r2
 8001982:	d1f1      	bne.n	8001968 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2204      	movs	r2, #4
 800198a:	4013      	ands	r3, r2
 800198c:	d100      	bne.n	8001990 <HAL_RCC_OscConfig+0x2a8>
 800198e:	e0b5      	b.n	8001afc <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001990:	201f      	movs	r0, #31
 8001992:	183b      	adds	r3, r7, r0
 8001994:	2200      	movs	r2, #0
 8001996:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001998:	4b21      	ldr	r3, [pc, #132]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 800199a:	69da      	ldr	r2, [r3, #28]
 800199c:	2380      	movs	r3, #128	; 0x80
 800199e:	055b      	lsls	r3, r3, #21
 80019a0:	4013      	ands	r3, r2
 80019a2:	d110      	bne.n	80019c6 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019a4:	4b1e      	ldr	r3, [pc, #120]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 80019a6:	69da      	ldr	r2, [r3, #28]
 80019a8:	4b1d      	ldr	r3, [pc, #116]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 80019aa:	2180      	movs	r1, #128	; 0x80
 80019ac:	0549      	lsls	r1, r1, #21
 80019ae:	430a      	orrs	r2, r1
 80019b0:	61da      	str	r2, [r3, #28]
 80019b2:	4b1b      	ldr	r3, [pc, #108]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 80019b4:	69da      	ldr	r2, [r3, #28]
 80019b6:	2380      	movs	r3, #128	; 0x80
 80019b8:	055b      	lsls	r3, r3, #21
 80019ba:	4013      	ands	r3, r2
 80019bc:	60fb      	str	r3, [r7, #12]
 80019be:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80019c0:	183b      	adds	r3, r7, r0
 80019c2:	2201      	movs	r2, #1
 80019c4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019c6:	4b19      	ldr	r3, [pc, #100]	; (8001a2c <HAL_RCC_OscConfig+0x344>)
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	2380      	movs	r3, #128	; 0x80
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	4013      	ands	r3, r2
 80019d0:	d11a      	bne.n	8001a08 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019d2:	4b16      	ldr	r3, [pc, #88]	; (8001a2c <HAL_RCC_OscConfig+0x344>)
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	4b15      	ldr	r3, [pc, #84]	; (8001a2c <HAL_RCC_OscConfig+0x344>)
 80019d8:	2180      	movs	r1, #128	; 0x80
 80019da:	0049      	lsls	r1, r1, #1
 80019dc:	430a      	orrs	r2, r1
 80019de:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019e0:	f7ff fa70 	bl	8000ec4 <HAL_GetTick>
 80019e4:	0003      	movs	r3, r0
 80019e6:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019e8:	e008      	b.n	80019fc <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019ea:	f7ff fa6b 	bl	8000ec4 <HAL_GetTick>
 80019ee:	0002      	movs	r2, r0
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	2b64      	cmp	r3, #100	; 0x64
 80019f6:	d901      	bls.n	80019fc <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80019f8:	2303      	movs	r3, #3
 80019fa:	e1f5      	b.n	8001de8 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019fc:	4b0b      	ldr	r3, [pc, #44]	; (8001a2c <HAL_RCC_OscConfig+0x344>)
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	2380      	movs	r3, #128	; 0x80
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	4013      	ands	r3, r2
 8001a06:	d0f0      	beq.n	80019ea <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d10f      	bne.n	8001a30 <HAL_RCC_OscConfig+0x348>
 8001a10:	4b03      	ldr	r3, [pc, #12]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 8001a12:	6a1a      	ldr	r2, [r3, #32]
 8001a14:	4b02      	ldr	r3, [pc, #8]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 8001a16:	2101      	movs	r1, #1
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	621a      	str	r2, [r3, #32]
 8001a1c:	e036      	b.n	8001a8c <HAL_RCC_OscConfig+0x3a4>
 8001a1e:	46c0      	nop			; (mov r8, r8)
 8001a20:	40021000 	.word	0x40021000
 8001a24:	fffeffff 	.word	0xfffeffff
 8001a28:	fffbffff 	.word	0xfffbffff
 8001a2c:	40007000 	.word	0x40007000
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d10c      	bne.n	8001a52 <HAL_RCC_OscConfig+0x36a>
 8001a38:	4bca      	ldr	r3, [pc, #808]	; (8001d64 <HAL_RCC_OscConfig+0x67c>)
 8001a3a:	6a1a      	ldr	r2, [r3, #32]
 8001a3c:	4bc9      	ldr	r3, [pc, #804]	; (8001d64 <HAL_RCC_OscConfig+0x67c>)
 8001a3e:	2101      	movs	r1, #1
 8001a40:	438a      	bics	r2, r1
 8001a42:	621a      	str	r2, [r3, #32]
 8001a44:	4bc7      	ldr	r3, [pc, #796]	; (8001d64 <HAL_RCC_OscConfig+0x67c>)
 8001a46:	6a1a      	ldr	r2, [r3, #32]
 8001a48:	4bc6      	ldr	r3, [pc, #792]	; (8001d64 <HAL_RCC_OscConfig+0x67c>)
 8001a4a:	2104      	movs	r1, #4
 8001a4c:	438a      	bics	r2, r1
 8001a4e:	621a      	str	r2, [r3, #32]
 8001a50:	e01c      	b.n	8001a8c <HAL_RCC_OscConfig+0x3a4>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	2b05      	cmp	r3, #5
 8001a58:	d10c      	bne.n	8001a74 <HAL_RCC_OscConfig+0x38c>
 8001a5a:	4bc2      	ldr	r3, [pc, #776]	; (8001d64 <HAL_RCC_OscConfig+0x67c>)
 8001a5c:	6a1a      	ldr	r2, [r3, #32]
 8001a5e:	4bc1      	ldr	r3, [pc, #772]	; (8001d64 <HAL_RCC_OscConfig+0x67c>)
 8001a60:	2104      	movs	r1, #4
 8001a62:	430a      	orrs	r2, r1
 8001a64:	621a      	str	r2, [r3, #32]
 8001a66:	4bbf      	ldr	r3, [pc, #764]	; (8001d64 <HAL_RCC_OscConfig+0x67c>)
 8001a68:	6a1a      	ldr	r2, [r3, #32]
 8001a6a:	4bbe      	ldr	r3, [pc, #760]	; (8001d64 <HAL_RCC_OscConfig+0x67c>)
 8001a6c:	2101      	movs	r1, #1
 8001a6e:	430a      	orrs	r2, r1
 8001a70:	621a      	str	r2, [r3, #32]
 8001a72:	e00b      	b.n	8001a8c <HAL_RCC_OscConfig+0x3a4>
 8001a74:	4bbb      	ldr	r3, [pc, #748]	; (8001d64 <HAL_RCC_OscConfig+0x67c>)
 8001a76:	6a1a      	ldr	r2, [r3, #32]
 8001a78:	4bba      	ldr	r3, [pc, #744]	; (8001d64 <HAL_RCC_OscConfig+0x67c>)
 8001a7a:	2101      	movs	r1, #1
 8001a7c:	438a      	bics	r2, r1
 8001a7e:	621a      	str	r2, [r3, #32]
 8001a80:	4bb8      	ldr	r3, [pc, #736]	; (8001d64 <HAL_RCC_OscConfig+0x67c>)
 8001a82:	6a1a      	ldr	r2, [r3, #32]
 8001a84:	4bb7      	ldr	r3, [pc, #732]	; (8001d64 <HAL_RCC_OscConfig+0x67c>)
 8001a86:	2104      	movs	r1, #4
 8001a88:	438a      	bics	r2, r1
 8001a8a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d014      	beq.n	8001abe <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a94:	f7ff fa16 	bl	8000ec4 <HAL_GetTick>
 8001a98:	0003      	movs	r3, r0
 8001a9a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a9c:	e009      	b.n	8001ab2 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a9e:	f7ff fa11 	bl	8000ec4 <HAL_GetTick>
 8001aa2:	0002      	movs	r2, r0
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	4aaf      	ldr	r2, [pc, #700]	; (8001d68 <HAL_RCC_OscConfig+0x680>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e19a      	b.n	8001de8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ab2:	4bac      	ldr	r3, [pc, #688]	; (8001d64 <HAL_RCC_OscConfig+0x67c>)
 8001ab4:	6a1b      	ldr	r3, [r3, #32]
 8001ab6:	2202      	movs	r2, #2
 8001ab8:	4013      	ands	r3, r2
 8001aba:	d0f0      	beq.n	8001a9e <HAL_RCC_OscConfig+0x3b6>
 8001abc:	e013      	b.n	8001ae6 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001abe:	f7ff fa01 	bl	8000ec4 <HAL_GetTick>
 8001ac2:	0003      	movs	r3, r0
 8001ac4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ac6:	e009      	b.n	8001adc <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ac8:	f7ff f9fc 	bl	8000ec4 <HAL_GetTick>
 8001acc:	0002      	movs	r2, r0
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	4aa5      	ldr	r2, [pc, #660]	; (8001d68 <HAL_RCC_OscConfig+0x680>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d901      	bls.n	8001adc <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e185      	b.n	8001de8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001adc:	4ba1      	ldr	r3, [pc, #644]	; (8001d64 <HAL_RCC_OscConfig+0x67c>)
 8001ade:	6a1b      	ldr	r3, [r3, #32]
 8001ae0:	2202      	movs	r2, #2
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	d1f0      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ae6:	231f      	movs	r3, #31
 8001ae8:	18fb      	adds	r3, r7, r3
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d105      	bne.n	8001afc <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001af0:	4b9c      	ldr	r3, [pc, #624]	; (8001d64 <HAL_RCC_OscConfig+0x67c>)
 8001af2:	69da      	ldr	r2, [r3, #28]
 8001af4:	4b9b      	ldr	r3, [pc, #620]	; (8001d64 <HAL_RCC_OscConfig+0x67c>)
 8001af6:	499d      	ldr	r1, [pc, #628]	; (8001d6c <HAL_RCC_OscConfig+0x684>)
 8001af8:	400a      	ands	r2, r1
 8001afa:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2210      	movs	r2, #16
 8001b02:	4013      	ands	r3, r2
 8001b04:	d063      	beq.n	8001bce <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	695b      	ldr	r3, [r3, #20]
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d12a      	bne.n	8001b64 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001b0e:	4b95      	ldr	r3, [pc, #596]	; (8001d64 <HAL_RCC_OscConfig+0x67c>)
 8001b10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b12:	4b94      	ldr	r3, [pc, #592]	; (8001d64 <HAL_RCC_OscConfig+0x67c>)
 8001b14:	2104      	movs	r1, #4
 8001b16:	430a      	orrs	r2, r1
 8001b18:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001b1a:	4b92      	ldr	r3, [pc, #584]	; (8001d64 <HAL_RCC_OscConfig+0x67c>)
 8001b1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b1e:	4b91      	ldr	r3, [pc, #580]	; (8001d64 <HAL_RCC_OscConfig+0x67c>)
 8001b20:	2101      	movs	r1, #1
 8001b22:	430a      	orrs	r2, r1
 8001b24:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b26:	f7ff f9cd 	bl	8000ec4 <HAL_GetTick>
 8001b2a:	0003      	movs	r3, r0
 8001b2c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001b2e:	e008      	b.n	8001b42 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001b30:	f7ff f9c8 	bl	8000ec4 <HAL_GetTick>
 8001b34:	0002      	movs	r2, r0
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e152      	b.n	8001de8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001b42:	4b88      	ldr	r3, [pc, #544]	; (8001d64 <HAL_RCC_OscConfig+0x67c>)
 8001b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b46:	2202      	movs	r2, #2
 8001b48:	4013      	ands	r3, r2
 8001b4a:	d0f1      	beq.n	8001b30 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001b4c:	4b85      	ldr	r3, [pc, #532]	; (8001d64 <HAL_RCC_OscConfig+0x67c>)
 8001b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b50:	22f8      	movs	r2, #248	; 0xf8
 8001b52:	4393      	bics	r3, r2
 8001b54:	0019      	movs	r1, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	699b      	ldr	r3, [r3, #24]
 8001b5a:	00da      	lsls	r2, r3, #3
 8001b5c:	4b81      	ldr	r3, [pc, #516]	; (8001d64 <HAL_RCC_OscConfig+0x67c>)
 8001b5e:	430a      	orrs	r2, r1
 8001b60:	635a      	str	r2, [r3, #52]	; 0x34
 8001b62:	e034      	b.n	8001bce <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	695b      	ldr	r3, [r3, #20]
 8001b68:	3305      	adds	r3, #5
 8001b6a:	d111      	bne.n	8001b90 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001b6c:	4b7d      	ldr	r3, [pc, #500]	; (8001d64 <HAL_RCC_OscConfig+0x67c>)
 8001b6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b70:	4b7c      	ldr	r3, [pc, #496]	; (8001d64 <HAL_RCC_OscConfig+0x67c>)
 8001b72:	2104      	movs	r1, #4
 8001b74:	438a      	bics	r2, r1
 8001b76:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001b78:	4b7a      	ldr	r3, [pc, #488]	; (8001d64 <HAL_RCC_OscConfig+0x67c>)
 8001b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b7c:	22f8      	movs	r2, #248	; 0xf8
 8001b7e:	4393      	bics	r3, r2
 8001b80:	0019      	movs	r1, r3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	699b      	ldr	r3, [r3, #24]
 8001b86:	00da      	lsls	r2, r3, #3
 8001b88:	4b76      	ldr	r3, [pc, #472]	; (8001d64 <HAL_RCC_OscConfig+0x67c>)
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	635a      	str	r2, [r3, #52]	; 0x34
 8001b8e:	e01e      	b.n	8001bce <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001b90:	4b74      	ldr	r3, [pc, #464]	; (8001d64 <HAL_RCC_OscConfig+0x67c>)
 8001b92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b94:	4b73      	ldr	r3, [pc, #460]	; (8001d64 <HAL_RCC_OscConfig+0x67c>)
 8001b96:	2104      	movs	r1, #4
 8001b98:	430a      	orrs	r2, r1
 8001b9a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001b9c:	4b71      	ldr	r3, [pc, #452]	; (8001d64 <HAL_RCC_OscConfig+0x67c>)
 8001b9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ba0:	4b70      	ldr	r3, [pc, #448]	; (8001d64 <HAL_RCC_OscConfig+0x67c>)
 8001ba2:	2101      	movs	r1, #1
 8001ba4:	438a      	bics	r2, r1
 8001ba6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ba8:	f7ff f98c 	bl	8000ec4 <HAL_GetTick>
 8001bac:	0003      	movs	r3, r0
 8001bae:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001bb0:	e008      	b.n	8001bc4 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001bb2:	f7ff f987 	bl	8000ec4 <HAL_GetTick>
 8001bb6:	0002      	movs	r2, r0
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d901      	bls.n	8001bc4 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e111      	b.n	8001de8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001bc4:	4b67      	ldr	r3, [pc, #412]	; (8001d64 <HAL_RCC_OscConfig+0x67c>)
 8001bc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bc8:	2202      	movs	r2, #2
 8001bca:	4013      	ands	r3, r2
 8001bcc:	d1f1      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2220      	movs	r2, #32
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	d05c      	beq.n	8001c92 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001bd8:	4b62      	ldr	r3, [pc, #392]	; (8001d64 <HAL_RCC_OscConfig+0x67c>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	220c      	movs	r2, #12
 8001bde:	4013      	ands	r3, r2
 8001be0:	2b0c      	cmp	r3, #12
 8001be2:	d00e      	beq.n	8001c02 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001be4:	4b5f      	ldr	r3, [pc, #380]	; (8001d64 <HAL_RCC_OscConfig+0x67c>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	220c      	movs	r2, #12
 8001bea:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001bec:	2b08      	cmp	r3, #8
 8001bee:	d114      	bne.n	8001c1a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001bf0:	4b5c      	ldr	r3, [pc, #368]	; (8001d64 <HAL_RCC_OscConfig+0x67c>)
 8001bf2:	685a      	ldr	r2, [r3, #4]
 8001bf4:	23c0      	movs	r3, #192	; 0xc0
 8001bf6:	025b      	lsls	r3, r3, #9
 8001bf8:	401a      	ands	r2, r3
 8001bfa:	23c0      	movs	r3, #192	; 0xc0
 8001bfc:	025b      	lsls	r3, r3, #9
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d10b      	bne.n	8001c1a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001c02:	4b58      	ldr	r3, [pc, #352]	; (8001d64 <HAL_RCC_OscConfig+0x67c>)
 8001c04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c06:	2380      	movs	r3, #128	; 0x80
 8001c08:	029b      	lsls	r3, r3, #10
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	d040      	beq.n	8001c90 <HAL_RCC_OscConfig+0x5a8>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a1b      	ldr	r3, [r3, #32]
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d03c      	beq.n	8001c90 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e0e6      	b.n	8001de8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6a1b      	ldr	r3, [r3, #32]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d01b      	beq.n	8001c5a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001c22:	4b50      	ldr	r3, [pc, #320]	; (8001d64 <HAL_RCC_OscConfig+0x67c>)
 8001c24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c26:	4b4f      	ldr	r3, [pc, #316]	; (8001d64 <HAL_RCC_OscConfig+0x67c>)
 8001c28:	2180      	movs	r1, #128	; 0x80
 8001c2a:	0249      	lsls	r1, r1, #9
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c30:	f7ff f948 	bl	8000ec4 <HAL_GetTick>
 8001c34:	0003      	movs	r3, r0
 8001c36:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001c38:	e008      	b.n	8001c4c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c3a:	f7ff f943 	bl	8000ec4 <HAL_GetTick>
 8001c3e:	0002      	movs	r2, r0
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d901      	bls.n	8001c4c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e0cd      	b.n	8001de8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001c4c:	4b45      	ldr	r3, [pc, #276]	; (8001d64 <HAL_RCC_OscConfig+0x67c>)
 8001c4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c50:	2380      	movs	r3, #128	; 0x80
 8001c52:	029b      	lsls	r3, r3, #10
 8001c54:	4013      	ands	r3, r2
 8001c56:	d0f0      	beq.n	8001c3a <HAL_RCC_OscConfig+0x552>
 8001c58:	e01b      	b.n	8001c92 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001c5a:	4b42      	ldr	r3, [pc, #264]	; (8001d64 <HAL_RCC_OscConfig+0x67c>)
 8001c5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c5e:	4b41      	ldr	r3, [pc, #260]	; (8001d64 <HAL_RCC_OscConfig+0x67c>)
 8001c60:	4943      	ldr	r1, [pc, #268]	; (8001d70 <HAL_RCC_OscConfig+0x688>)
 8001c62:	400a      	ands	r2, r1
 8001c64:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c66:	f7ff f92d 	bl	8000ec4 <HAL_GetTick>
 8001c6a:	0003      	movs	r3, r0
 8001c6c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001c6e:	e008      	b.n	8001c82 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c70:	f7ff f928 	bl	8000ec4 <HAL_GetTick>
 8001c74:	0002      	movs	r2, r0
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e0b2      	b.n	8001de8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001c82:	4b38      	ldr	r3, [pc, #224]	; (8001d64 <HAL_RCC_OscConfig+0x67c>)
 8001c84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c86:	2380      	movs	r3, #128	; 0x80
 8001c88:	029b      	lsls	r3, r3, #10
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	d1f0      	bne.n	8001c70 <HAL_RCC_OscConfig+0x588>
 8001c8e:	e000      	b.n	8001c92 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001c90:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d100      	bne.n	8001c9c <HAL_RCC_OscConfig+0x5b4>
 8001c9a:	e0a4      	b.n	8001de6 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c9c:	4b31      	ldr	r3, [pc, #196]	; (8001d64 <HAL_RCC_OscConfig+0x67c>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	220c      	movs	r2, #12
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	2b08      	cmp	r3, #8
 8001ca6:	d100      	bne.n	8001caa <HAL_RCC_OscConfig+0x5c2>
 8001ca8:	e078      	b.n	8001d9c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d14c      	bne.n	8001d4c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cb2:	4b2c      	ldr	r3, [pc, #176]	; (8001d64 <HAL_RCC_OscConfig+0x67c>)
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	4b2b      	ldr	r3, [pc, #172]	; (8001d64 <HAL_RCC_OscConfig+0x67c>)
 8001cb8:	492e      	ldr	r1, [pc, #184]	; (8001d74 <HAL_RCC_OscConfig+0x68c>)
 8001cba:	400a      	ands	r2, r1
 8001cbc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cbe:	f7ff f901 	bl	8000ec4 <HAL_GetTick>
 8001cc2:	0003      	movs	r3, r0
 8001cc4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cc8:	f7ff f8fc 	bl	8000ec4 <HAL_GetTick>
 8001ccc:	0002      	movs	r2, r0
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e086      	b.n	8001de8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cda:	4b22      	ldr	r3, [pc, #136]	; (8001d64 <HAL_RCC_OscConfig+0x67c>)
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	2380      	movs	r3, #128	; 0x80
 8001ce0:	049b      	lsls	r3, r3, #18
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	d1f0      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ce6:	4b1f      	ldr	r3, [pc, #124]	; (8001d64 <HAL_RCC_OscConfig+0x67c>)
 8001ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cea:	220f      	movs	r2, #15
 8001cec:	4393      	bics	r3, r2
 8001cee:	0019      	movs	r1, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cf4:	4b1b      	ldr	r3, [pc, #108]	; (8001d64 <HAL_RCC_OscConfig+0x67c>)
 8001cf6:	430a      	orrs	r2, r1
 8001cf8:	62da      	str	r2, [r3, #44]	; 0x2c
 8001cfa:	4b1a      	ldr	r3, [pc, #104]	; (8001d64 <HAL_RCC_OscConfig+0x67c>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	4a1e      	ldr	r2, [pc, #120]	; (8001d78 <HAL_RCC_OscConfig+0x690>)
 8001d00:	4013      	ands	r3, r2
 8001d02:	0019      	movs	r1, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d0c:	431a      	orrs	r2, r3
 8001d0e:	4b15      	ldr	r3, [pc, #84]	; (8001d64 <HAL_RCC_OscConfig+0x67c>)
 8001d10:	430a      	orrs	r2, r1
 8001d12:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d14:	4b13      	ldr	r3, [pc, #76]	; (8001d64 <HAL_RCC_OscConfig+0x67c>)
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	4b12      	ldr	r3, [pc, #72]	; (8001d64 <HAL_RCC_OscConfig+0x67c>)
 8001d1a:	2180      	movs	r1, #128	; 0x80
 8001d1c:	0449      	lsls	r1, r1, #17
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d22:	f7ff f8cf 	bl	8000ec4 <HAL_GetTick>
 8001d26:	0003      	movs	r3, r0
 8001d28:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d2a:	e008      	b.n	8001d3e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d2c:	f7ff f8ca 	bl	8000ec4 <HAL_GetTick>
 8001d30:	0002      	movs	r2, r0
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e054      	b.n	8001de8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d3e:	4b09      	ldr	r3, [pc, #36]	; (8001d64 <HAL_RCC_OscConfig+0x67c>)
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	2380      	movs	r3, #128	; 0x80
 8001d44:	049b      	lsls	r3, r3, #18
 8001d46:	4013      	ands	r3, r2
 8001d48:	d0f0      	beq.n	8001d2c <HAL_RCC_OscConfig+0x644>
 8001d4a:	e04c      	b.n	8001de6 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d4c:	4b05      	ldr	r3, [pc, #20]	; (8001d64 <HAL_RCC_OscConfig+0x67c>)
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	4b04      	ldr	r3, [pc, #16]	; (8001d64 <HAL_RCC_OscConfig+0x67c>)
 8001d52:	4908      	ldr	r1, [pc, #32]	; (8001d74 <HAL_RCC_OscConfig+0x68c>)
 8001d54:	400a      	ands	r2, r1
 8001d56:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d58:	f7ff f8b4 	bl	8000ec4 <HAL_GetTick>
 8001d5c:	0003      	movs	r3, r0
 8001d5e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d60:	e015      	b.n	8001d8e <HAL_RCC_OscConfig+0x6a6>
 8001d62:	46c0      	nop			; (mov r8, r8)
 8001d64:	40021000 	.word	0x40021000
 8001d68:	00001388 	.word	0x00001388
 8001d6c:	efffffff 	.word	0xefffffff
 8001d70:	fffeffff 	.word	0xfffeffff
 8001d74:	feffffff 	.word	0xfeffffff
 8001d78:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d7c:	f7ff f8a2 	bl	8000ec4 <HAL_GetTick>
 8001d80:	0002      	movs	r2, r0
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d901      	bls.n	8001d8e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e02c      	b.n	8001de8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d8e:	4b18      	ldr	r3, [pc, #96]	; (8001df0 <HAL_RCC_OscConfig+0x708>)
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	2380      	movs	r3, #128	; 0x80
 8001d94:	049b      	lsls	r3, r3, #18
 8001d96:	4013      	ands	r3, r2
 8001d98:	d1f0      	bne.n	8001d7c <HAL_RCC_OscConfig+0x694>
 8001d9a:	e024      	b.n	8001de6 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d101      	bne.n	8001da8 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e01f      	b.n	8001de8 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001da8:	4b11      	ldr	r3, [pc, #68]	; (8001df0 <HAL_RCC_OscConfig+0x708>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001dae:	4b10      	ldr	r3, [pc, #64]	; (8001df0 <HAL_RCC_OscConfig+0x708>)
 8001db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db2:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001db4:	697a      	ldr	r2, [r7, #20]
 8001db6:	23c0      	movs	r3, #192	; 0xc0
 8001db8:	025b      	lsls	r3, r3, #9
 8001dba:	401a      	ands	r2, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d10e      	bne.n	8001de2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	220f      	movs	r2, #15
 8001dc8:	401a      	ands	r2, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d107      	bne.n	8001de2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001dd2:	697a      	ldr	r2, [r7, #20]
 8001dd4:	23f0      	movs	r3, #240	; 0xf0
 8001dd6:	039b      	lsls	r3, r3, #14
 8001dd8:	401a      	ands	r2, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d001      	beq.n	8001de6 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e000      	b.n	8001de8 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001de6:	2300      	movs	r3, #0
}
 8001de8:	0018      	movs	r0, r3
 8001dea:	46bd      	mov	sp, r7
 8001dec:	b008      	add	sp, #32
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	40021000 	.word	0x40021000

08001df4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d101      	bne.n	8001e08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e0bf      	b.n	8001f88 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e08:	4b61      	ldr	r3, [pc, #388]	; (8001f90 <HAL_RCC_ClockConfig+0x19c>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	4013      	ands	r3, r2
 8001e10:	683a      	ldr	r2, [r7, #0]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d911      	bls.n	8001e3a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e16:	4b5e      	ldr	r3, [pc, #376]	; (8001f90 <HAL_RCC_ClockConfig+0x19c>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	4393      	bics	r3, r2
 8001e1e:	0019      	movs	r1, r3
 8001e20:	4b5b      	ldr	r3, [pc, #364]	; (8001f90 <HAL_RCC_ClockConfig+0x19c>)
 8001e22:	683a      	ldr	r2, [r7, #0]
 8001e24:	430a      	orrs	r2, r1
 8001e26:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e28:	4b59      	ldr	r3, [pc, #356]	; (8001f90 <HAL_RCC_ClockConfig+0x19c>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	4013      	ands	r3, r2
 8001e30:	683a      	ldr	r2, [r7, #0]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d001      	beq.n	8001e3a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e0a6      	b.n	8001f88 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2202      	movs	r2, #2
 8001e40:	4013      	ands	r3, r2
 8001e42:	d015      	beq.n	8001e70 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2204      	movs	r2, #4
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	d006      	beq.n	8001e5c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001e4e:	4b51      	ldr	r3, [pc, #324]	; (8001f94 <HAL_RCC_ClockConfig+0x1a0>)
 8001e50:	685a      	ldr	r2, [r3, #4]
 8001e52:	4b50      	ldr	r3, [pc, #320]	; (8001f94 <HAL_RCC_ClockConfig+0x1a0>)
 8001e54:	21e0      	movs	r1, #224	; 0xe0
 8001e56:	00c9      	lsls	r1, r1, #3
 8001e58:	430a      	orrs	r2, r1
 8001e5a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e5c:	4b4d      	ldr	r3, [pc, #308]	; (8001f94 <HAL_RCC_ClockConfig+0x1a0>)
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	22f0      	movs	r2, #240	; 0xf0
 8001e62:	4393      	bics	r3, r2
 8001e64:	0019      	movs	r1, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	689a      	ldr	r2, [r3, #8]
 8001e6a:	4b4a      	ldr	r3, [pc, #296]	; (8001f94 <HAL_RCC_ClockConfig+0x1a0>)
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2201      	movs	r2, #1
 8001e76:	4013      	ands	r3, r2
 8001e78:	d04c      	beq.n	8001f14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d107      	bne.n	8001e92 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e82:	4b44      	ldr	r3, [pc, #272]	; (8001f94 <HAL_RCC_ClockConfig+0x1a0>)
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	2380      	movs	r3, #128	; 0x80
 8001e88:	029b      	lsls	r3, r3, #10
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	d120      	bne.n	8001ed0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e07a      	b.n	8001f88 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d107      	bne.n	8001eaa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e9a:	4b3e      	ldr	r3, [pc, #248]	; (8001f94 <HAL_RCC_ClockConfig+0x1a0>)
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	2380      	movs	r3, #128	; 0x80
 8001ea0:	049b      	lsls	r3, r3, #18
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	d114      	bne.n	8001ed0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e06e      	b.n	8001f88 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	2b03      	cmp	r3, #3
 8001eb0:	d107      	bne.n	8001ec2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001eb2:	4b38      	ldr	r3, [pc, #224]	; (8001f94 <HAL_RCC_ClockConfig+0x1a0>)
 8001eb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001eb6:	2380      	movs	r3, #128	; 0x80
 8001eb8:	029b      	lsls	r3, r3, #10
 8001eba:	4013      	ands	r3, r2
 8001ebc:	d108      	bne.n	8001ed0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e062      	b.n	8001f88 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ec2:	4b34      	ldr	r3, [pc, #208]	; (8001f94 <HAL_RCC_ClockConfig+0x1a0>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2202      	movs	r2, #2
 8001ec8:	4013      	ands	r3, r2
 8001eca:	d101      	bne.n	8001ed0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e05b      	b.n	8001f88 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ed0:	4b30      	ldr	r3, [pc, #192]	; (8001f94 <HAL_RCC_ClockConfig+0x1a0>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	2203      	movs	r2, #3
 8001ed6:	4393      	bics	r3, r2
 8001ed8:	0019      	movs	r1, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685a      	ldr	r2, [r3, #4]
 8001ede:	4b2d      	ldr	r3, [pc, #180]	; (8001f94 <HAL_RCC_ClockConfig+0x1a0>)
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ee4:	f7fe ffee 	bl	8000ec4 <HAL_GetTick>
 8001ee8:	0003      	movs	r3, r0
 8001eea:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eec:	e009      	b.n	8001f02 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eee:	f7fe ffe9 	bl	8000ec4 <HAL_GetTick>
 8001ef2:	0002      	movs	r2, r0
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	4a27      	ldr	r2, [pc, #156]	; (8001f98 <HAL_RCC_ClockConfig+0x1a4>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d901      	bls.n	8001f02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e042      	b.n	8001f88 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f02:	4b24      	ldr	r3, [pc, #144]	; (8001f94 <HAL_RCC_ClockConfig+0x1a0>)
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	220c      	movs	r2, #12
 8001f08:	401a      	ands	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d1ec      	bne.n	8001eee <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f14:	4b1e      	ldr	r3, [pc, #120]	; (8001f90 <HAL_RCC_ClockConfig+0x19c>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	683a      	ldr	r2, [r7, #0]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d211      	bcs.n	8001f46 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f22:	4b1b      	ldr	r3, [pc, #108]	; (8001f90 <HAL_RCC_ClockConfig+0x19c>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2201      	movs	r2, #1
 8001f28:	4393      	bics	r3, r2
 8001f2a:	0019      	movs	r1, r3
 8001f2c:	4b18      	ldr	r3, [pc, #96]	; (8001f90 <HAL_RCC_ClockConfig+0x19c>)
 8001f2e:	683a      	ldr	r2, [r7, #0]
 8001f30:	430a      	orrs	r2, r1
 8001f32:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f34:	4b16      	ldr	r3, [pc, #88]	; (8001f90 <HAL_RCC_ClockConfig+0x19c>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2201      	movs	r2, #1
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	683a      	ldr	r2, [r7, #0]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d001      	beq.n	8001f46 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e020      	b.n	8001f88 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2204      	movs	r2, #4
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	d009      	beq.n	8001f64 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001f50:	4b10      	ldr	r3, [pc, #64]	; (8001f94 <HAL_RCC_ClockConfig+0x1a0>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	4a11      	ldr	r2, [pc, #68]	; (8001f9c <HAL_RCC_ClockConfig+0x1a8>)
 8001f56:	4013      	ands	r3, r2
 8001f58:	0019      	movs	r1, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	68da      	ldr	r2, [r3, #12]
 8001f5e:	4b0d      	ldr	r3, [pc, #52]	; (8001f94 <HAL_RCC_ClockConfig+0x1a0>)
 8001f60:	430a      	orrs	r2, r1
 8001f62:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001f64:	f000 f820 	bl	8001fa8 <HAL_RCC_GetSysClockFreq>
 8001f68:	0001      	movs	r1, r0
 8001f6a:	4b0a      	ldr	r3, [pc, #40]	; (8001f94 <HAL_RCC_ClockConfig+0x1a0>)
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	091b      	lsrs	r3, r3, #4
 8001f70:	220f      	movs	r2, #15
 8001f72:	4013      	ands	r3, r2
 8001f74:	4a0a      	ldr	r2, [pc, #40]	; (8001fa0 <HAL_RCC_ClockConfig+0x1ac>)
 8001f76:	5cd3      	ldrb	r3, [r2, r3]
 8001f78:	000a      	movs	r2, r1
 8001f7a:	40da      	lsrs	r2, r3
 8001f7c:	4b09      	ldr	r3, [pc, #36]	; (8001fa4 <HAL_RCC_ClockConfig+0x1b0>)
 8001f7e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001f80:	2003      	movs	r0, #3
 8001f82:	f7fe ff59 	bl	8000e38 <HAL_InitTick>
  
  return HAL_OK;
 8001f86:	2300      	movs	r3, #0
}
 8001f88:	0018      	movs	r0, r3
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	b004      	add	sp, #16
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	40022000 	.word	0x40022000
 8001f94:	40021000 	.word	0x40021000
 8001f98:	00001388 	.word	0x00001388
 8001f9c:	fffff8ff 	.word	0xfffff8ff
 8001fa0:	0800392c 	.word	0x0800392c
 8001fa4:	20000010 	.word	0x20000010

08001fa8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b086      	sub	sp, #24
 8001fac:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	60fb      	str	r3, [r7, #12]
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	60bb      	str	r3, [r7, #8]
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	617b      	str	r3, [r7, #20]
 8001fba:	2300      	movs	r3, #0
 8001fbc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001fc2:	4b2d      	ldr	r3, [pc, #180]	; (8002078 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	220c      	movs	r2, #12
 8001fcc:	4013      	ands	r3, r2
 8001fce:	2b0c      	cmp	r3, #12
 8001fd0:	d046      	beq.n	8002060 <HAL_RCC_GetSysClockFreq+0xb8>
 8001fd2:	d848      	bhi.n	8002066 <HAL_RCC_GetSysClockFreq+0xbe>
 8001fd4:	2b04      	cmp	r3, #4
 8001fd6:	d002      	beq.n	8001fde <HAL_RCC_GetSysClockFreq+0x36>
 8001fd8:	2b08      	cmp	r3, #8
 8001fda:	d003      	beq.n	8001fe4 <HAL_RCC_GetSysClockFreq+0x3c>
 8001fdc:	e043      	b.n	8002066 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001fde:	4b27      	ldr	r3, [pc, #156]	; (800207c <HAL_RCC_GetSysClockFreq+0xd4>)
 8001fe0:	613b      	str	r3, [r7, #16]
      break;
 8001fe2:	e043      	b.n	800206c <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	0c9b      	lsrs	r3, r3, #18
 8001fe8:	220f      	movs	r2, #15
 8001fea:	4013      	ands	r3, r2
 8001fec:	4a24      	ldr	r2, [pc, #144]	; (8002080 <HAL_RCC_GetSysClockFreq+0xd8>)
 8001fee:	5cd3      	ldrb	r3, [r2, r3]
 8001ff0:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001ff2:	4b21      	ldr	r3, [pc, #132]	; (8002078 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff6:	220f      	movs	r2, #15
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	4a22      	ldr	r2, [pc, #136]	; (8002084 <HAL_RCC_GetSysClockFreq+0xdc>)
 8001ffc:	5cd3      	ldrb	r3, [r2, r3]
 8001ffe:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002000:	68fa      	ldr	r2, [r7, #12]
 8002002:	23c0      	movs	r3, #192	; 0xc0
 8002004:	025b      	lsls	r3, r3, #9
 8002006:	401a      	ands	r2, r3
 8002008:	2380      	movs	r3, #128	; 0x80
 800200a:	025b      	lsls	r3, r3, #9
 800200c:	429a      	cmp	r2, r3
 800200e:	d109      	bne.n	8002024 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002010:	68b9      	ldr	r1, [r7, #8]
 8002012:	481a      	ldr	r0, [pc, #104]	; (800207c <HAL_RCC_GetSysClockFreq+0xd4>)
 8002014:	f7fe f878 	bl	8000108 <__udivsi3>
 8002018:	0003      	movs	r3, r0
 800201a:	001a      	movs	r2, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4353      	muls	r3, r2
 8002020:	617b      	str	r3, [r7, #20]
 8002022:	e01a      	b.n	800205a <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002024:	68fa      	ldr	r2, [r7, #12]
 8002026:	23c0      	movs	r3, #192	; 0xc0
 8002028:	025b      	lsls	r3, r3, #9
 800202a:	401a      	ands	r2, r3
 800202c:	23c0      	movs	r3, #192	; 0xc0
 800202e:	025b      	lsls	r3, r3, #9
 8002030:	429a      	cmp	r2, r3
 8002032:	d109      	bne.n	8002048 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002034:	68b9      	ldr	r1, [r7, #8]
 8002036:	4814      	ldr	r0, [pc, #80]	; (8002088 <HAL_RCC_GetSysClockFreq+0xe0>)
 8002038:	f7fe f866 	bl	8000108 <__udivsi3>
 800203c:	0003      	movs	r3, r0
 800203e:	001a      	movs	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4353      	muls	r3, r2
 8002044:	617b      	str	r3, [r7, #20]
 8002046:	e008      	b.n	800205a <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002048:	68b9      	ldr	r1, [r7, #8]
 800204a:	480c      	ldr	r0, [pc, #48]	; (800207c <HAL_RCC_GetSysClockFreq+0xd4>)
 800204c:	f7fe f85c 	bl	8000108 <__udivsi3>
 8002050:	0003      	movs	r3, r0
 8002052:	001a      	movs	r2, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4353      	muls	r3, r2
 8002058:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	613b      	str	r3, [r7, #16]
      break;
 800205e:	e005      	b.n	800206c <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002060:	4b09      	ldr	r3, [pc, #36]	; (8002088 <HAL_RCC_GetSysClockFreq+0xe0>)
 8002062:	613b      	str	r3, [r7, #16]
      break;
 8002064:	e002      	b.n	800206c <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002066:	4b05      	ldr	r3, [pc, #20]	; (800207c <HAL_RCC_GetSysClockFreq+0xd4>)
 8002068:	613b      	str	r3, [r7, #16]
      break;
 800206a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800206c:	693b      	ldr	r3, [r7, #16]
}
 800206e:	0018      	movs	r0, r3
 8002070:	46bd      	mov	sp, r7
 8002072:	b006      	add	sp, #24
 8002074:	bd80      	pop	{r7, pc}
 8002076:	46c0      	nop			; (mov r8, r8)
 8002078:	40021000 	.word	0x40021000
 800207c:	007a1200 	.word	0x007a1200
 8002080:	0800393c 	.word	0x0800393c
 8002084:	0800394c 	.word	0x0800394c
 8002088:	02dc6c00 	.word	0x02dc6c00

0800208c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d101      	bne.n	800209e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e0a8      	b.n	80021f0 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d109      	bne.n	80020ba <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685a      	ldr	r2, [r3, #4]
 80020aa:	2382      	movs	r3, #130	; 0x82
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d009      	beq.n	80020c6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	61da      	str	r2, [r3, #28]
 80020b8:	e005      	b.n	80020c6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	225d      	movs	r2, #93	; 0x5d
 80020d0:	5c9b      	ldrb	r3, [r3, r2]
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d107      	bne.n	80020e8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	225c      	movs	r2, #92	; 0x5c
 80020dc:	2100      	movs	r1, #0
 80020de:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	0018      	movs	r0, r3
 80020e4:	f7fe fce8 	bl	8000ab8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	225d      	movs	r2, #93	; 0x5d
 80020ec:	2102      	movs	r1, #2
 80020ee:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2140      	movs	r1, #64	; 0x40
 80020fc:	438a      	bics	r2, r1
 80020fe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	68da      	ldr	r2, [r3, #12]
 8002104:	23e0      	movs	r3, #224	; 0xe0
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	429a      	cmp	r2, r3
 800210a:	d902      	bls.n	8002112 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800210c:	2300      	movs	r3, #0
 800210e:	60fb      	str	r3, [r7, #12]
 8002110:	e002      	b.n	8002118 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002112:	2380      	movs	r3, #128	; 0x80
 8002114:	015b      	lsls	r3, r3, #5
 8002116:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	68da      	ldr	r2, [r3, #12]
 800211c:	23f0      	movs	r3, #240	; 0xf0
 800211e:	011b      	lsls	r3, r3, #4
 8002120:	429a      	cmp	r2, r3
 8002122:	d008      	beq.n	8002136 <HAL_SPI_Init+0xaa>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	68da      	ldr	r2, [r3, #12]
 8002128:	23e0      	movs	r3, #224	; 0xe0
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	429a      	cmp	r2, r3
 800212e:	d002      	beq.n	8002136 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685a      	ldr	r2, [r3, #4]
 800213a:	2382      	movs	r3, #130	; 0x82
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	401a      	ands	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6899      	ldr	r1, [r3, #8]
 8002144:	2384      	movs	r3, #132	; 0x84
 8002146:	021b      	lsls	r3, r3, #8
 8002148:	400b      	ands	r3, r1
 800214a:	431a      	orrs	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	691b      	ldr	r3, [r3, #16]
 8002150:	2102      	movs	r1, #2
 8002152:	400b      	ands	r3, r1
 8002154:	431a      	orrs	r2, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	695b      	ldr	r3, [r3, #20]
 800215a:	2101      	movs	r1, #1
 800215c:	400b      	ands	r3, r1
 800215e:	431a      	orrs	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6999      	ldr	r1, [r3, #24]
 8002164:	2380      	movs	r3, #128	; 0x80
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	400b      	ands	r3, r1
 800216a:	431a      	orrs	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	69db      	ldr	r3, [r3, #28]
 8002170:	2138      	movs	r1, #56	; 0x38
 8002172:	400b      	ands	r3, r1
 8002174:	431a      	orrs	r2, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a1b      	ldr	r3, [r3, #32]
 800217a:	2180      	movs	r1, #128	; 0x80
 800217c:	400b      	ands	r3, r1
 800217e:	431a      	orrs	r2, r3
 8002180:	0011      	movs	r1, r2
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002186:	2380      	movs	r3, #128	; 0x80
 8002188:	019b      	lsls	r3, r3, #6
 800218a:	401a      	ands	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	430a      	orrs	r2, r1
 8002192:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	699b      	ldr	r3, [r3, #24]
 8002198:	0c1b      	lsrs	r3, r3, #16
 800219a:	2204      	movs	r2, #4
 800219c:	401a      	ands	r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a2:	2110      	movs	r1, #16
 80021a4:	400b      	ands	r3, r1
 80021a6:	431a      	orrs	r2, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021ac:	2108      	movs	r1, #8
 80021ae:	400b      	ands	r3, r1
 80021b0:	431a      	orrs	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	68d9      	ldr	r1, [r3, #12]
 80021b6:	23f0      	movs	r3, #240	; 0xf0
 80021b8:	011b      	lsls	r3, r3, #4
 80021ba:	400b      	ands	r3, r1
 80021bc:	431a      	orrs	r2, r3
 80021be:	0011      	movs	r1, r2
 80021c0:	68fa      	ldr	r2, [r7, #12]
 80021c2:	2380      	movs	r3, #128	; 0x80
 80021c4:	015b      	lsls	r3, r3, #5
 80021c6:	401a      	ands	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	430a      	orrs	r2, r1
 80021ce:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	69da      	ldr	r2, [r3, #28]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4907      	ldr	r1, [pc, #28]	; (80021f8 <HAL_SPI_Init+0x16c>)
 80021dc:	400a      	ands	r2, r1
 80021de:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	225d      	movs	r2, #93	; 0x5d
 80021ea:	2101      	movs	r1, #1
 80021ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80021ee:	2300      	movs	r3, #0
}
 80021f0:	0018      	movs	r0, r3
 80021f2:	46bd      	mov	sp, r7
 80021f4:	b004      	add	sp, #16
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	fffff7ff 	.word	0xfffff7ff

080021fc <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
 8002208:	001a      	movs	r2, r3
 800220a:	1cbb      	adds	r3, r7, #2
 800220c:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800220e:	2317      	movs	r3, #23
 8002210:	18fb      	adds	r3, r7, r3
 8002212:	2200      	movs	r2, #0
 8002214:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	225c      	movs	r2, #92	; 0x5c
 800221a:	5c9b      	ldrb	r3, [r3, r2]
 800221c:	2b01      	cmp	r3, #1
 800221e:	d101      	bne.n	8002224 <HAL_SPI_TransmitReceive_IT+0x28>
 8002220:	2302      	movs	r3, #2
 8002222:	e0a6      	b.n	8002372 <HAL_SPI_TransmitReceive_IT+0x176>
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	225c      	movs	r2, #92	; 0x5c
 8002228:	2101      	movs	r1, #1
 800222a:	5499      	strb	r1, [r3, r2]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800222c:	2016      	movs	r0, #22
 800222e:	183b      	adds	r3, r7, r0
 8002230:	68fa      	ldr	r2, [r7, #12]
 8002232:	215d      	movs	r1, #93	; 0x5d
 8002234:	5c52      	ldrb	r2, [r2, r1]
 8002236:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800223e:	0001      	movs	r1, r0
 8002240:	187b      	adds	r3, r7, r1
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d011      	beq.n	800226c <HAL_SPI_TransmitReceive_IT+0x70>
 8002248:	693a      	ldr	r2, [r7, #16]
 800224a:	2382      	movs	r3, #130	; 0x82
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	429a      	cmp	r2, r3
 8002250:	d107      	bne.n	8002262 <HAL_SPI_TransmitReceive_IT+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d103      	bne.n	8002262 <HAL_SPI_TransmitReceive_IT+0x66>
 800225a:	187b      	adds	r3, r7, r1
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	2b04      	cmp	r3, #4
 8002260:	d004      	beq.n	800226c <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_BUSY;
 8002262:	2317      	movs	r3, #23
 8002264:	18fb      	adds	r3, r7, r3
 8002266:	2202      	movs	r2, #2
 8002268:	701a      	strb	r2, [r3, #0]
    goto error;
 800226a:	e07b      	b.n	8002364 <HAL_SPI_TransmitReceive_IT+0x168>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d006      	beq.n	8002280 <HAL_SPI_TransmitReceive_IT+0x84>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d003      	beq.n	8002280 <HAL_SPI_TransmitReceive_IT+0x84>
 8002278:	1cbb      	adds	r3, r7, #2
 800227a:	881b      	ldrh	r3, [r3, #0]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d104      	bne.n	800228a <HAL_SPI_TransmitReceive_IT+0x8e>
  {
    errorcode = HAL_ERROR;
 8002280:	2317      	movs	r3, #23
 8002282:	18fb      	adds	r3, r7, r3
 8002284:	2201      	movs	r2, #1
 8002286:	701a      	strb	r2, [r3, #0]
    goto error;
 8002288:	e06c      	b.n	8002364 <HAL_SPI_TransmitReceive_IT+0x168>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	225d      	movs	r2, #93	; 0x5d
 800228e:	5c9b      	ldrb	r3, [r3, r2]
 8002290:	b2db      	uxtb	r3, r3
 8002292:	2b04      	cmp	r3, #4
 8002294:	d003      	beq.n	800229e <HAL_SPI_TransmitReceive_IT+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	225d      	movs	r2, #93	; 0x5d
 800229a:	2105      	movs	r1, #5
 800229c:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2200      	movs	r2, #0
 80022a2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	68ba      	ldr	r2, [r7, #8]
 80022a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	1cba      	adds	r2, r7, #2
 80022ae:	8812      	ldrh	r2, [r2, #0]
 80022b0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	1cba      	adds	r2, r7, #2
 80022b6:	8812      	ldrh	r2, [r2, #0]
 80022b8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	1cba      	adds	r2, r7, #2
 80022c4:	2144      	movs	r1, #68	; 0x44
 80022c6:	8812      	ldrh	r2, [r2, #0]
 80022c8:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	1cba      	adds	r2, r7, #2
 80022ce:	2146      	movs	r1, #70	; 0x46
 80022d0:	8812      	ldrh	r2, [r2, #0]
 80022d2:	525a      	strh	r2, [r3, r1]

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	68da      	ldr	r2, [r3, #12]
 80022d8:	23e0      	movs	r3, #224	; 0xe0
 80022da:	00db      	lsls	r3, r3, #3
 80022dc:	429a      	cmp	r2, r3
 80022de:	d906      	bls.n	80022ee <HAL_SPI_TransmitReceive_IT+0xf2>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	4a26      	ldr	r2, [pc, #152]	; (800237c <HAL_SPI_TransmitReceive_IT+0x180>)
 80022e4:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	4a25      	ldr	r2, [pc, #148]	; (8002380 <HAL_SPI_TransmitReceive_IT+0x184>)
 80022ea:	651a      	str	r2, [r3, #80]	; 0x50
 80022ec:	e005      	b.n	80022fa <HAL_SPI_TransmitReceive_IT+0xfe>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	4a24      	ldr	r2, [pc, #144]	; (8002384 <HAL_SPI_TransmitReceive_IT+0x188>)
 80022f2:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	4a24      	ldr	r2, [pc, #144]	; (8002388 <HAL_SPI_TransmitReceive_IT+0x18c>)
 80022f8:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	68da      	ldr	r2, [r3, #12]
 80022fe:	23e0      	movs	r3, #224	; 0xe0
 8002300:	00db      	lsls	r3, r3, #3
 8002302:	429a      	cmp	r2, r3
 8002304:	d803      	bhi.n	800230e <HAL_SPI_TransmitReceive_IT+0x112>
 8002306:	1cbb      	adds	r3, r7, #2
 8002308:	881b      	ldrh	r3, [r3, #0]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d908      	bls.n	8002320 <HAL_SPI_TransmitReceive_IT+0x124>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	685a      	ldr	r2, [r3, #4]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	491c      	ldr	r1, [pc, #112]	; (800238c <HAL_SPI_TransmitReceive_IT+0x190>)
 800231a:	400a      	ands	r2, r1
 800231c:	605a      	str	r2, [r3, #4]
 800231e:	e008      	b.n	8002332 <HAL_SPI_TransmitReceive_IT+0x136>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	685a      	ldr	r2, [r3, #4]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2180      	movs	r1, #128	; 0x80
 800232c:	0149      	lsls	r1, r1, #5
 800232e:	430a      	orrs	r2, r1
 8002330:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	685a      	ldr	r2, [r3, #4]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	21e0      	movs	r1, #224	; 0xe0
 800233e:	430a      	orrs	r2, r1
 8002340:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2240      	movs	r2, #64	; 0x40
 800234a:	4013      	ands	r3, r2
 800234c:	2b40      	cmp	r3, #64	; 0x40
 800234e:	d008      	beq.n	8002362 <HAL_SPI_TransmitReceive_IT+0x166>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2140      	movs	r1, #64	; 0x40
 800235c:	430a      	orrs	r2, r1
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	e000      	b.n	8002364 <HAL_SPI_TransmitReceive_IT+0x168>
  }

error :
 8002362:	46c0      	nop			; (mov r8, r8)
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	225c      	movs	r2, #92	; 0x5c
 8002368:	2100      	movs	r1, #0
 800236a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800236c:	2317      	movs	r3, #23
 800236e:	18fb      	adds	r3, r7, r3
 8002370:	781b      	ldrb	r3, [r3, #0]
}
 8002372:	0018      	movs	r0, r3
 8002374:	46bd      	mov	sp, r7
 8002376:	b006      	add	sp, #24
 8002378:	bd80      	pop	{r7, pc}
 800237a:	46c0      	nop			; (mov r8, r8)
 800237c:	08002707 	.word	0x08002707
 8002380:	0800276f 	.word	0x0800276f
 8002384:	080025b1 	.word	0x080025b1
 8002388:	08002673 	.word	0x08002673
 800238c:	ffffefff 	.word	0xffffefff

08002390 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b088      	sub	sp, #32
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	2240      	movs	r2, #64	; 0x40
 80023ac:	4013      	ands	r3, r2
 80023ae:	d10d      	bne.n	80023cc <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	2201      	movs	r2, #1
 80023b4:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80023b6:	d009      	beq.n	80023cc <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	2240      	movs	r2, #64	; 0x40
 80023bc:	4013      	ands	r3, r2
 80023be:	d005      	beq.n	80023cc <HAL_SPI_IRQHandler+0x3c>
  {
    hspi->RxISR(hspi);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	0010      	movs	r0, r2
 80023c8:	4798      	blx	r3
    return;
 80023ca:	e0c5      	b.n	8002558 <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	2202      	movs	r2, #2
 80023d0:	4013      	ands	r3, r2
 80023d2:	d009      	beq.n	80023e8 <HAL_SPI_IRQHandler+0x58>
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	2280      	movs	r2, #128	; 0x80
 80023d8:	4013      	ands	r3, r2
 80023da:	d005      	beq.n	80023e8 <HAL_SPI_IRQHandler+0x58>
  {
    hspi->TxISR(hspi);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	0010      	movs	r0, r2
 80023e4:	4798      	blx	r3
    return;
 80023e6:	e0b7      	b.n	8002558 <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	2220      	movs	r2, #32
 80023ec:	4013      	ands	r3, r2
 80023ee:	d109      	bne.n	8002404 <HAL_SPI_IRQHandler+0x74>
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	2240      	movs	r2, #64	; 0x40
 80023f4:	4013      	ands	r3, r2
 80023f6:	d105      	bne.n	8002404 <HAL_SPI_IRQHandler+0x74>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	2380      	movs	r3, #128	; 0x80
 80023fc:	005b      	lsls	r3, r3, #1
 80023fe:	4013      	ands	r3, r2
 8002400:	d100      	bne.n	8002404 <HAL_SPI_IRQHandler+0x74>
 8002402:	e0a9      	b.n	8002558 <HAL_SPI_IRQHandler+0x1c8>
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	2220      	movs	r2, #32
 8002408:	4013      	ands	r3, r2
 800240a:	d100      	bne.n	800240e <HAL_SPI_IRQHandler+0x7e>
 800240c:	e0a4      	b.n	8002558 <HAL_SPI_IRQHandler+0x1c8>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	2240      	movs	r2, #64	; 0x40
 8002412:	4013      	ands	r3, r2
 8002414:	d023      	beq.n	800245e <HAL_SPI_IRQHandler+0xce>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	225d      	movs	r2, #93	; 0x5d
 800241a:	5c9b      	ldrb	r3, [r3, r2]
 800241c:	b2db      	uxtb	r3, r3
 800241e:	2b03      	cmp	r3, #3
 8002420:	d011      	beq.n	8002446 <HAL_SPI_IRQHandler+0xb6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002426:	2204      	movs	r2, #4
 8002428:	431a      	orrs	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800242e:	2300      	movs	r3, #0
 8002430:	617b      	str	r3, [r7, #20]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	617b      	str	r3, [r7, #20]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	617b      	str	r3, [r7, #20]
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	e00b      	b.n	800245e <HAL_SPI_IRQHandler+0xce>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002446:	2300      	movs	r3, #0
 8002448:	613b      	str	r3, [r7, #16]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	613b      	str	r3, [r7, #16]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	613b      	str	r3, [r7, #16]
 800245a:	693b      	ldr	r3, [r7, #16]
        return;
 800245c:	e07c      	b.n	8002558 <HAL_SPI_IRQHandler+0x1c8>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	2220      	movs	r2, #32
 8002462:	4013      	ands	r3, r2
 8002464:	d014      	beq.n	8002490 <HAL_SPI_IRQHandler+0x100>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800246a:	2201      	movs	r2, #1
 800246c:	431a      	orrs	r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002472:	2300      	movs	r3, #0
 8002474:	60fb      	str	r3, [r7, #12]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	60fb      	str	r3, [r7, #12]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2140      	movs	r1, #64	; 0x40
 800248a:	438a      	bics	r2, r1
 800248c:	601a      	str	r2, [r3, #0]
 800248e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	2380      	movs	r3, #128	; 0x80
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	4013      	ands	r3, r2
 8002498:	d00c      	beq.n	80024b4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800249e:	2208      	movs	r2, #8
 80024a0:	431a      	orrs	r2, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80024a6:	2300      	movs	r3, #0
 80024a8:	60bb      	str	r3, [r7, #8]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	60bb      	str	r3, [r7, #8]
 80024b2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d04c      	beq.n	8002556 <HAL_SPI_IRQHandler+0x1c6>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	685a      	ldr	r2, [r3, #4]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	21e0      	movs	r1, #224	; 0xe0
 80024c8:	438a      	bics	r2, r1
 80024ca:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	225d      	movs	r2, #93	; 0x5d
 80024d0:	2101      	movs	r1, #1
 80024d2:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	2202      	movs	r2, #2
 80024d8:	4013      	ands	r3, r2
 80024da:	d103      	bne.n	80024e4 <HAL_SPI_IRQHandler+0x154>
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	2201      	movs	r2, #1
 80024e0:	4013      	ands	r3, r2
 80024e2:	d032      	beq.n	800254a <HAL_SPI_IRQHandler+0x1ba>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	685a      	ldr	r2, [r3, #4]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2103      	movs	r1, #3
 80024f0:	438a      	bics	r2, r1
 80024f2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d010      	beq.n	800251e <HAL_SPI_IRQHandler+0x18e>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002500:	4a17      	ldr	r2, [pc, #92]	; (8002560 <HAL_SPI_IRQHandler+0x1d0>)
 8002502:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002508:	0018      	movs	r0, r3
 800250a:	f7fe ff21 	bl	8001350 <HAL_DMA_Abort_IT>
 800250e:	1e03      	subs	r3, r0, #0
 8002510:	d005      	beq.n	800251e <HAL_SPI_IRQHandler+0x18e>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002516:	2240      	movs	r2, #64	; 0x40
 8002518:	431a      	orrs	r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002522:	2b00      	cmp	r3, #0
 8002524:	d016      	beq.n	8002554 <HAL_SPI_IRQHandler+0x1c4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800252a:	4a0d      	ldr	r2, [pc, #52]	; (8002560 <HAL_SPI_IRQHandler+0x1d0>)
 800252c:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002532:	0018      	movs	r0, r3
 8002534:	f7fe ff0c 	bl	8001350 <HAL_DMA_Abort_IT>
 8002538:	1e03      	subs	r3, r0, #0
 800253a:	d00b      	beq.n	8002554 <HAL_SPI_IRQHandler+0x1c4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002540:	2240      	movs	r2, #64	; 0x40
 8002542:	431a      	orrs	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8002548:	e004      	b.n	8002554 <HAL_SPI_IRQHandler+0x1c4>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	0018      	movs	r0, r3
 800254e:	f000 f811 	bl	8002574 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002552:	e000      	b.n	8002556 <HAL_SPI_IRQHandler+0x1c6>
        if (hspi->hdmatx != NULL)
 8002554:	46c0      	nop			; (mov r8, r8)
    return;
 8002556:	46c0      	nop			; (mov r8, r8)
  }
}
 8002558:	46bd      	mov	sp, r7
 800255a:	b008      	add	sp, #32
 800255c:	bd80      	pop	{r7, pc}
 800255e:	46c0      	nop			; (mov r8, r8)
 8002560:	08002585 	.word	0x08002585

08002564 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800256c:	46c0      	nop			; (mov r8, r8)
 800256e:	46bd      	mov	sp, r7
 8002570:	b002      	add	sp, #8
 8002572:	bd80      	pop	{r7, pc}

08002574 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800257c:	46c0      	nop			; (mov r8, r8)
 800257e:	46bd      	mov	sp, r7
 8002580:	b002      	add	sp, #8
 8002582:	bd80      	pop	{r7, pc}

08002584 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002590:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2246      	movs	r2, #70	; 0x46
 8002596:	2100      	movs	r1, #0
 8002598:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2200      	movs	r2, #0
 800259e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	0018      	movs	r0, r3
 80025a4:	f7ff ffe6 	bl	8002574 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80025a8:	46c0      	nop			; (mov r8, r8)
 80025aa:	46bd      	mov	sp, r7
 80025ac:	b004      	add	sp, #16
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2246      	movs	r2, #70	; 0x46
 80025bc:	5a9b      	ldrh	r3, [r3, r2]
 80025be:	b29b      	uxth	r3, r3
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d924      	bls.n	800260e <SPI_2linesRxISR_8BIT+0x5e>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	68da      	ldr	r2, [r3, #12]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ce:	b292      	uxth	r2, r2
 80025d0:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	1c9a      	adds	r2, r3, #2
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2246      	movs	r2, #70	; 0x46
 80025e0:	5a9b      	ldrh	r3, [r3, r2]
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	3b02      	subs	r3, #2
 80025e6:	b299      	uxth	r1, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2246      	movs	r2, #70	; 0x46
 80025ec:	5299      	strh	r1, [r3, r2]
    if (hspi->RxXferCount == 1U)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2246      	movs	r2, #70	; 0x46
 80025f2:	5a9b      	ldrh	r3, [r3, r2]
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d120      	bne.n	800263c <SPI_2linesRxISR_8BIT+0x8c>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	685a      	ldr	r2, [r3, #4]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2180      	movs	r1, #128	; 0x80
 8002606:	0149      	lsls	r1, r1, #5
 8002608:	430a      	orrs	r2, r1
 800260a:	605a      	str	r2, [r3, #4]
 800260c:	e016      	b.n	800263c <SPI_2linesRxISR_8BIT+0x8c>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	330c      	adds	r3, #12
 8002614:	001a      	movs	r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261a:	7812      	ldrb	r2, [r2, #0]
 800261c:	b2d2      	uxtb	r2, r2
 800261e:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002624:	1c5a      	adds	r2, r3, #1
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2246      	movs	r2, #70	; 0x46
 800262e:	5a9b      	ldrh	r3, [r3, r2]
 8002630:	b29b      	uxth	r3, r3
 8002632:	3b01      	subs	r3, #1
 8002634:	b299      	uxth	r1, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2246      	movs	r2, #70	; 0x46
 800263a:	5299      	strh	r1, [r3, r2]
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2246      	movs	r2, #70	; 0x46
 8002640:	5a9b      	ldrh	r3, [r3, r2]
 8002642:	b29b      	uxth	r3, r3
 8002644:	2b00      	cmp	r3, #0
 8002646:	d110      	bne.n	800266a <SPI_2linesRxISR_8BIT+0xba>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	685a      	ldr	r2, [r3, #4]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2160      	movs	r1, #96	; 0x60
 8002654:	438a      	bics	r2, r1
 8002656:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800265c:	b29b      	uxth	r3, r3
 800265e:	2b00      	cmp	r3, #0
 8002660:	d103      	bne.n	800266a <SPI_2linesRxISR_8BIT+0xba>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	0018      	movs	r0, r3
 8002666:	f000 fa29 	bl	8002abc <SPI_CloseRxTx_ISR>
    }
  }
}
 800266a:	46c0      	nop			; (mov r8, r8)
 800266c:	46bd      	mov	sp, r7
 800266e:	b002      	add	sp, #8
 8002670:	bd80      	pop	{r7, pc}

08002672 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002672:	b580      	push	{r7, lr}
 8002674:	b082      	sub	sp, #8
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800267e:	b29b      	uxth	r3, r3
 8002680:	2b01      	cmp	r3, #1
 8002682:	d912      	bls.n	80026aa <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002688:	881a      	ldrh	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002694:	1c9a      	adds	r2, r3, #2
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800269e:	b29b      	uxth	r3, r3
 80026a0:	3b02      	subs	r3, #2
 80026a2:	b29a      	uxth	r2, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80026a8:	e012      	b.n	80026d0 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	330c      	adds	r3, #12
 80026b4:	7812      	ldrb	r2, [r2, #0]
 80026b6:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026bc:	1c5a      	adds	r2, r3, #1
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	3b01      	subs	r3, #1
 80026ca:	b29a      	uxth	r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d111      	bne.n	80026fe <SPI_2linesTxISR_8BIT+0x8c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	685a      	ldr	r2, [r3, #4]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2180      	movs	r1, #128	; 0x80
 80026e6:	438a      	bics	r2, r1
 80026e8:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2246      	movs	r2, #70	; 0x46
 80026ee:	5a9b      	ldrh	r3, [r3, r2]
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d103      	bne.n	80026fe <SPI_2linesTxISR_8BIT+0x8c>
    {
      SPI_CloseRxTx_ISR(hspi);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	0018      	movs	r0, r3
 80026fa:	f000 f9df 	bl	8002abc <SPI_CloseRxTx_ISR>
    }
  }
}
 80026fe:	46c0      	nop			; (mov r8, r8)
 8002700:	46bd      	mov	sp, r7
 8002702:	b002      	add	sp, #8
 8002704:	bd80      	pop	{r7, pc}

08002706 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b082      	sub	sp, #8
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68da      	ldr	r2, [r3, #12]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002718:	b292      	uxth	r2, r2
 800271a:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002720:	1c9a      	adds	r2, r3, #2
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2246      	movs	r2, #70	; 0x46
 800272a:	5a9b      	ldrh	r3, [r3, r2]
 800272c:	b29b      	uxth	r3, r3
 800272e:	3b01      	subs	r3, #1
 8002730:	b299      	uxth	r1, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2246      	movs	r2, #70	; 0x46
 8002736:	5299      	strh	r1, [r3, r2]

  if (hspi->RxXferCount == 0U)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2246      	movs	r2, #70	; 0x46
 800273c:	5a9b      	ldrh	r3, [r3, r2]
 800273e:	b29b      	uxth	r3, r3
 8002740:	2b00      	cmp	r3, #0
 8002742:	d110      	bne.n	8002766 <SPI_2linesRxISR_16BIT+0x60>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	685a      	ldr	r2, [r3, #4]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2140      	movs	r1, #64	; 0x40
 8002750:	438a      	bics	r2, r1
 8002752:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002758:	b29b      	uxth	r3, r3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d103      	bne.n	8002766 <SPI_2linesRxISR_16BIT+0x60>
    {
      SPI_CloseRxTx_ISR(hspi);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	0018      	movs	r0, r3
 8002762:	f000 f9ab 	bl	8002abc <SPI_CloseRxTx_ISR>
    }
  }
}
 8002766:	46c0      	nop			; (mov r8, r8)
 8002768:	46bd      	mov	sp, r7
 800276a:	b002      	add	sp, #8
 800276c:	bd80      	pop	{r7, pc}

0800276e <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800276e:	b580      	push	{r7, lr}
 8002770:	b082      	sub	sp, #8
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800277a:	881a      	ldrh	r2, [r3, #0]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002786:	1c9a      	adds	r2, r3, #2
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002790:	b29b      	uxth	r3, r3
 8002792:	3b01      	subs	r3, #1
 8002794:	b29a      	uxth	r2, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800279e:	b29b      	uxth	r3, r3
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d111      	bne.n	80027c8 <SPI_2linesTxISR_16BIT+0x5a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	685a      	ldr	r2, [r3, #4]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2180      	movs	r1, #128	; 0x80
 80027b0:	438a      	bics	r2, r1
 80027b2:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2246      	movs	r2, #70	; 0x46
 80027b8:	5a9b      	ldrh	r3, [r3, r2]
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d103      	bne.n	80027c8 <SPI_2linesTxISR_16BIT+0x5a>
    {
      SPI_CloseRxTx_ISR(hspi);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	0018      	movs	r0, r3
 80027c4:	f000 f97a 	bl	8002abc <SPI_CloseRxTx_ISR>
    }
  }
}
 80027c8:	46c0      	nop			; (mov r8, r8)
 80027ca:	46bd      	mov	sp, r7
 80027cc:	b002      	add	sp, #8
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b088      	sub	sp, #32
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	603b      	str	r3, [r7, #0]
 80027dc:	1dfb      	adds	r3, r7, #7
 80027de:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80027e0:	f7fe fb70 	bl	8000ec4 <HAL_GetTick>
 80027e4:	0002      	movs	r2, r0
 80027e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e8:	1a9b      	subs	r3, r3, r2
 80027ea:	683a      	ldr	r2, [r7, #0]
 80027ec:	18d3      	adds	r3, r2, r3
 80027ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80027f0:	f7fe fb68 	bl	8000ec4 <HAL_GetTick>
 80027f4:	0003      	movs	r3, r0
 80027f6:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80027f8:	4b3a      	ldr	r3, [pc, #232]	; (80028e4 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	015b      	lsls	r3, r3, #5
 80027fe:	0d1b      	lsrs	r3, r3, #20
 8002800:	69fa      	ldr	r2, [r7, #28]
 8002802:	4353      	muls	r3, r2
 8002804:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002806:	e058      	b.n	80028ba <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	3301      	adds	r3, #1
 800280c:	d055      	beq.n	80028ba <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800280e:	f7fe fb59 	bl	8000ec4 <HAL_GetTick>
 8002812:	0002      	movs	r2, r0
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	69fa      	ldr	r2, [r7, #28]
 800281a:	429a      	cmp	r2, r3
 800281c:	d902      	bls.n	8002824 <SPI_WaitFlagStateUntilTimeout+0x54>
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d142      	bne.n	80028aa <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	685a      	ldr	r2, [r3, #4]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	21e0      	movs	r1, #224	; 0xe0
 8002830:	438a      	bics	r2, r1
 8002832:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	685a      	ldr	r2, [r3, #4]
 8002838:	2382      	movs	r3, #130	; 0x82
 800283a:	005b      	lsls	r3, r3, #1
 800283c:	429a      	cmp	r2, r3
 800283e:	d113      	bne.n	8002868 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	689a      	ldr	r2, [r3, #8]
 8002844:	2380      	movs	r3, #128	; 0x80
 8002846:	021b      	lsls	r3, r3, #8
 8002848:	429a      	cmp	r2, r3
 800284a:	d005      	beq.n	8002858 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	689a      	ldr	r2, [r3, #8]
 8002850:	2380      	movs	r3, #128	; 0x80
 8002852:	00db      	lsls	r3, r3, #3
 8002854:	429a      	cmp	r2, r3
 8002856:	d107      	bne.n	8002868 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2140      	movs	r1, #64	; 0x40
 8002864:	438a      	bics	r2, r1
 8002866:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800286c:	2380      	movs	r3, #128	; 0x80
 800286e:	019b      	lsls	r3, r3, #6
 8002870:	429a      	cmp	r2, r3
 8002872:	d110      	bne.n	8002896 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	491a      	ldr	r1, [pc, #104]	; (80028e8 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002880:	400a      	ands	r2, r1
 8002882:	601a      	str	r2, [r3, #0]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2180      	movs	r1, #128	; 0x80
 8002890:	0189      	lsls	r1, r1, #6
 8002892:	430a      	orrs	r2, r1
 8002894:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	225d      	movs	r2, #93	; 0x5d
 800289a:	2101      	movs	r1, #1
 800289c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	225c      	movs	r2, #92	; 0x5c
 80028a2:	2100      	movs	r1, #0
 80028a4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e017      	b.n	80028da <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d101      	bne.n	80028b4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80028b0:	2300      	movs	r3, #0
 80028b2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	3b01      	subs	r3, #1
 80028b8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	68ba      	ldr	r2, [r7, #8]
 80028c2:	4013      	ands	r3, r2
 80028c4:	68ba      	ldr	r2, [r7, #8]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	425a      	negs	r2, r3
 80028ca:	4153      	adcs	r3, r2
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	001a      	movs	r2, r3
 80028d0:	1dfb      	adds	r3, r7, #7
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d197      	bne.n	8002808 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	0018      	movs	r0, r3
 80028dc:	46bd      	mov	sp, r7
 80028de:	b008      	add	sp, #32
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	46c0      	nop			; (mov r8, r8)
 80028e4:	20000010 	.word	0x20000010
 80028e8:	ffffdfff 	.word	0xffffdfff

080028ec <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b08a      	sub	sp, #40	; 0x28
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
 80028f8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80028fa:	2317      	movs	r3, #23
 80028fc:	18fb      	adds	r3, r7, r3
 80028fe:	2200      	movs	r2, #0
 8002900:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002902:	f7fe fadf 	bl	8000ec4 <HAL_GetTick>
 8002906:	0002      	movs	r2, r0
 8002908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800290a:	1a9b      	subs	r3, r3, r2
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	18d3      	adds	r3, r2, r3
 8002910:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002912:	f7fe fad7 	bl	8000ec4 <HAL_GetTick>
 8002916:	0003      	movs	r3, r0
 8002918:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	330c      	adds	r3, #12
 8002920:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002922:	4b41      	ldr	r3, [pc, #260]	; (8002a28 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	0013      	movs	r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	189b      	adds	r3, r3, r2
 800292c:	00da      	lsls	r2, r3, #3
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	0d1b      	lsrs	r3, r3, #20
 8002932:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002934:	4353      	muls	r3, r2
 8002936:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002938:	e068      	b.n	8002a0c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800293a:	68ba      	ldr	r2, [r7, #8]
 800293c:	23c0      	movs	r3, #192	; 0xc0
 800293e:	00db      	lsls	r3, r3, #3
 8002940:	429a      	cmp	r2, r3
 8002942:	d10a      	bne.n	800295a <SPI_WaitFifoStateUntilTimeout+0x6e>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d107      	bne.n	800295a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	b2da      	uxtb	r2, r3
 8002950:	2117      	movs	r1, #23
 8002952:	187b      	adds	r3, r7, r1
 8002954:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002956:	187b      	adds	r3, r7, r1
 8002958:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	3301      	adds	r3, #1
 800295e:	d055      	beq.n	8002a0c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002960:	f7fe fab0 	bl	8000ec4 <HAL_GetTick>
 8002964:	0002      	movs	r2, r0
 8002966:	6a3b      	ldr	r3, [r7, #32]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800296c:	429a      	cmp	r2, r3
 800296e:	d902      	bls.n	8002976 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8002970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002972:	2b00      	cmp	r3, #0
 8002974:	d142      	bne.n	80029fc <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	685a      	ldr	r2, [r3, #4]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	21e0      	movs	r1, #224	; 0xe0
 8002982:	438a      	bics	r2, r1
 8002984:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	685a      	ldr	r2, [r3, #4]
 800298a:	2382      	movs	r3, #130	; 0x82
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	429a      	cmp	r2, r3
 8002990:	d113      	bne.n	80029ba <SPI_WaitFifoStateUntilTimeout+0xce>
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	689a      	ldr	r2, [r3, #8]
 8002996:	2380      	movs	r3, #128	; 0x80
 8002998:	021b      	lsls	r3, r3, #8
 800299a:	429a      	cmp	r2, r3
 800299c:	d005      	beq.n	80029aa <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	689a      	ldr	r2, [r3, #8]
 80029a2:	2380      	movs	r3, #128	; 0x80
 80029a4:	00db      	lsls	r3, r3, #3
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d107      	bne.n	80029ba <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2140      	movs	r1, #64	; 0x40
 80029b6:	438a      	bics	r2, r1
 80029b8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029be:	2380      	movs	r3, #128	; 0x80
 80029c0:	019b      	lsls	r3, r3, #6
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d110      	bne.n	80029e8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4916      	ldr	r1, [pc, #88]	; (8002a2c <SPI_WaitFifoStateUntilTimeout+0x140>)
 80029d2:	400a      	ands	r2, r1
 80029d4:	601a      	str	r2, [r3, #0]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2180      	movs	r1, #128	; 0x80
 80029e2:	0189      	lsls	r1, r1, #6
 80029e4:	430a      	orrs	r2, r1
 80029e6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	225d      	movs	r2, #93	; 0x5d
 80029ec:	2101      	movs	r1, #1
 80029ee:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	225c      	movs	r2, #92	; 0x5c
 80029f4:	2100      	movs	r1, #0
 80029f6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e010      	b.n	8002a1e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d101      	bne.n	8002a06 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8002a02:	2300      	movs	r3, #0
 8002a04:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	68ba      	ldr	r2, [r7, #8]
 8002a14:	4013      	ands	r3, r2
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d18e      	bne.n	800293a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	0018      	movs	r0, r3
 8002a20:	46bd      	mov	sp, r7
 8002a22:	b00a      	add	sp, #40	; 0x28
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	46c0      	nop			; (mov r8, r8)
 8002a28:	20000010 	.word	0x20000010
 8002a2c:	ffffdfff 	.word	0xffffdfff

08002a30 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b086      	sub	sp, #24
 8002a34:	af02      	add	r7, sp, #8
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002a3c:	68ba      	ldr	r2, [r7, #8]
 8002a3e:	23c0      	movs	r3, #192	; 0xc0
 8002a40:	0159      	lsls	r1, r3, #5
 8002a42:	68f8      	ldr	r0, [r7, #12]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	9300      	str	r3, [sp, #0]
 8002a48:	0013      	movs	r3, r2
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f7ff ff4e 	bl	80028ec <SPI_WaitFifoStateUntilTimeout>
 8002a50:	1e03      	subs	r3, r0, #0
 8002a52:	d007      	beq.n	8002a64 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a58:	2220      	movs	r2, #32
 8002a5a:	431a      	orrs	r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e027      	b.n	8002ab4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a64:	68ba      	ldr	r2, [r7, #8]
 8002a66:	68f8      	ldr	r0, [r7, #12]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	9300      	str	r3, [sp, #0]
 8002a6c:	0013      	movs	r3, r2
 8002a6e:	2200      	movs	r2, #0
 8002a70:	2180      	movs	r1, #128	; 0x80
 8002a72:	f7ff fead 	bl	80027d0 <SPI_WaitFlagStateUntilTimeout>
 8002a76:	1e03      	subs	r3, r0, #0
 8002a78:	d007      	beq.n	8002a8a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a7e:	2220      	movs	r2, #32
 8002a80:	431a      	orrs	r2, r3
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e014      	b.n	8002ab4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002a8a:	68ba      	ldr	r2, [r7, #8]
 8002a8c:	23c0      	movs	r3, #192	; 0xc0
 8002a8e:	00d9      	lsls	r1, r3, #3
 8002a90:	68f8      	ldr	r0, [r7, #12]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	9300      	str	r3, [sp, #0]
 8002a96:	0013      	movs	r3, r2
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f7ff ff27 	bl	80028ec <SPI_WaitFifoStateUntilTimeout>
 8002a9e:	1e03      	subs	r3, r0, #0
 8002aa0:	d007      	beq.n	8002ab2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aa6:	2220      	movs	r2, #32
 8002aa8:	431a      	orrs	r2, r3
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e000      	b.n	8002ab4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002ab2:	2300      	movs	r3, #0
}
 8002ab4:	0018      	movs	r0, r3
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	b004      	add	sp, #16
 8002aba:	bd80      	pop	{r7, pc}

08002abc <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002ac4:	f7fe f9fe 	bl	8000ec4 <HAL_GetTick>
 8002ac8:	0003      	movs	r3, r0
 8002aca:	60fb      	str	r3, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	685a      	ldr	r2, [r3, #4]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2120      	movs	r1, #32
 8002ad8:	438a      	bics	r2, r1
 8002ada:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002adc:	68fa      	ldr	r2, [r7, #12]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2164      	movs	r1, #100	; 0x64
 8002ae2:	0018      	movs	r0, r3
 8002ae4:	f7ff ffa4 	bl	8002a30 <SPI_EndRxTxTransaction>
 8002ae8:	1e03      	subs	r3, r0, #0
 8002aea:	d005      	beq.n	8002af8 <SPI_CloseRxTx_ISR+0x3c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002af0:	2220      	movs	r2, #32
 8002af2:	431a      	orrs	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d117      	bne.n	8002b30 <SPI_CloseRxTx_ISR+0x74>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	225d      	movs	r2, #93	; 0x5d
 8002b04:	5c9b      	ldrb	r3, [r3, r2]
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	2b04      	cmp	r3, #4
 8002b0a:	d108      	bne.n	8002b1e <SPI_CloseRxTx_ISR+0x62>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	225d      	movs	r2, #93	; 0x5d
 8002b10:	2101      	movs	r1, #1
 8002b12:	5499      	strb	r1, [r3, r2]
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	0018      	movs	r0, r3
 8002b18:	f7ff fd24 	bl	8002564 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8002b1c:	e010      	b.n	8002b40 <SPI_CloseRxTx_ISR+0x84>
        hspi->State = HAL_SPI_STATE_READY;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	225d      	movs	r2, #93	; 0x5d
 8002b22:	2101      	movs	r1, #1
 8002b24:	5499      	strb	r1, [r3, r2]
        HAL_SPI_TxRxCpltCallback(hspi);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	0018      	movs	r0, r3
 8002b2a:	f7fd feb7 	bl	800089c <HAL_SPI_TxRxCpltCallback>
}
 8002b2e:	e007      	b.n	8002b40 <SPI_CloseRxTx_ISR+0x84>
      hspi->State = HAL_SPI_STATE_READY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	225d      	movs	r2, #93	; 0x5d
 8002b34:	2101      	movs	r1, #1
 8002b36:	5499      	strb	r1, [r3, r2]
      HAL_SPI_ErrorCallback(hspi);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	0018      	movs	r0, r3
 8002b3c:	f7ff fd1a 	bl	8002574 <HAL_SPI_ErrorCallback>
}
 8002b40:	46c0      	nop			; (mov r8, r8)
 8002b42:	46bd      	mov	sp, r7
 8002b44:	b004      	add	sp, #16
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d101      	bne.n	8002b5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e042      	b.n	8002be0 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	223d      	movs	r2, #61	; 0x3d
 8002b5e:	5c9b      	ldrb	r3, [r3, r2]
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d107      	bne.n	8002b76 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	223c      	movs	r2, #60	; 0x3c
 8002b6a:	2100      	movs	r1, #0
 8002b6c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	0018      	movs	r0, r3
 8002b72:	f7fd fff5 	bl	8000b60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	223d      	movs	r2, #61	; 0x3d
 8002b7a:	2102      	movs	r1, #2
 8002b7c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	3304      	adds	r3, #4
 8002b86:	0019      	movs	r1, r3
 8002b88:	0010      	movs	r0, r2
 8002b8a:	f000 fac3 	bl	8003114 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2246      	movs	r2, #70	; 0x46
 8002b92:	2101      	movs	r1, #1
 8002b94:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	223e      	movs	r2, #62	; 0x3e
 8002b9a:	2101      	movs	r1, #1
 8002b9c:	5499      	strb	r1, [r3, r2]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	223f      	movs	r2, #63	; 0x3f
 8002ba2:	2101      	movs	r1, #1
 8002ba4:	5499      	strb	r1, [r3, r2]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2240      	movs	r2, #64	; 0x40
 8002baa:	2101      	movs	r1, #1
 8002bac:	5499      	strb	r1, [r3, r2]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2241      	movs	r2, #65	; 0x41
 8002bb2:	2101      	movs	r1, #1
 8002bb4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2242      	movs	r2, #66	; 0x42
 8002bba:	2101      	movs	r1, #1
 8002bbc:	5499      	strb	r1, [r3, r2]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2243      	movs	r2, #67	; 0x43
 8002bc2:	2101      	movs	r1, #1
 8002bc4:	5499      	strb	r1, [r3, r2]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2244      	movs	r2, #68	; 0x44
 8002bca:	2101      	movs	r1, #1
 8002bcc:	5499      	strb	r1, [r3, r2]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2245      	movs	r2, #69	; 0x45
 8002bd2:	2101      	movs	r1, #1
 8002bd4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	223d      	movs	r2, #61	; 0x3d
 8002bda:	2101      	movs	r1, #1
 8002bdc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002bde:	2300      	movs	r3, #0
}
 8002be0:	0018      	movs	r0, r3
 8002be2:	46bd      	mov	sp, r7
 8002be4:	b002      	add	sp, #8
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d101      	bne.n	8002bfa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e042      	b.n	8002c80 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	223d      	movs	r2, #61	; 0x3d
 8002bfe:	5c9b      	ldrb	r3, [r3, r2]
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d107      	bne.n	8002c16 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	223c      	movs	r2, #60	; 0x3c
 8002c0a:	2100      	movs	r1, #0
 8002c0c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	0018      	movs	r0, r3
 8002c12:	f7fd ffc5 	bl	8000ba0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	223d      	movs	r2, #61	; 0x3d
 8002c1a:	2102      	movs	r1, #2
 8002c1c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	3304      	adds	r3, #4
 8002c26:	0019      	movs	r1, r3
 8002c28:	0010      	movs	r0, r2
 8002c2a:	f000 fa73 	bl	8003114 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2246      	movs	r2, #70	; 0x46
 8002c32:	2101      	movs	r1, #1
 8002c34:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	223e      	movs	r2, #62	; 0x3e
 8002c3a:	2101      	movs	r1, #1
 8002c3c:	5499      	strb	r1, [r3, r2]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	223f      	movs	r2, #63	; 0x3f
 8002c42:	2101      	movs	r1, #1
 8002c44:	5499      	strb	r1, [r3, r2]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2240      	movs	r2, #64	; 0x40
 8002c4a:	2101      	movs	r1, #1
 8002c4c:	5499      	strb	r1, [r3, r2]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2241      	movs	r2, #65	; 0x41
 8002c52:	2101      	movs	r1, #1
 8002c54:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2242      	movs	r2, #66	; 0x42
 8002c5a:	2101      	movs	r1, #1
 8002c5c:	5499      	strb	r1, [r3, r2]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2243      	movs	r2, #67	; 0x43
 8002c62:	2101      	movs	r1, #1
 8002c64:	5499      	strb	r1, [r3, r2]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2244      	movs	r2, #68	; 0x44
 8002c6a:	2101      	movs	r1, #1
 8002c6c:	5499      	strb	r1, [r3, r2]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2245      	movs	r2, #69	; 0x45
 8002c72:	2101      	movs	r1, #1
 8002c74:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	223d      	movs	r2, #61	; 0x3d
 8002c7a:	2101      	movs	r1, #1
 8002c7c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c7e:	2300      	movs	r3, #0
}
 8002c80:	0018      	movs	r0, r3
 8002c82:	46bd      	mov	sp, r7
 8002c84:	b002      	add	sp, #8
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d108      	bne.n	8002caa <HAL_TIM_PWM_Start+0x22>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	223e      	movs	r2, #62	; 0x3e
 8002c9c:	5c9b      	ldrb	r3, [r3, r2]
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	1e5a      	subs	r2, r3, #1
 8002ca4:	4193      	sbcs	r3, r2
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	e01f      	b.n	8002cea <HAL_TIM_PWM_Start+0x62>
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	2b04      	cmp	r3, #4
 8002cae:	d108      	bne.n	8002cc2 <HAL_TIM_PWM_Start+0x3a>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	223f      	movs	r2, #63	; 0x3f
 8002cb4:	5c9b      	ldrb	r3, [r3, r2]
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	3b01      	subs	r3, #1
 8002cba:	1e5a      	subs	r2, r3, #1
 8002cbc:	4193      	sbcs	r3, r2
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	e013      	b.n	8002cea <HAL_TIM_PWM_Start+0x62>
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	2b08      	cmp	r3, #8
 8002cc6:	d108      	bne.n	8002cda <HAL_TIM_PWM_Start+0x52>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2240      	movs	r2, #64	; 0x40
 8002ccc:	5c9b      	ldrb	r3, [r3, r2]
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	1e5a      	subs	r2, r3, #1
 8002cd4:	4193      	sbcs	r3, r2
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	e007      	b.n	8002cea <HAL_TIM_PWM_Start+0x62>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2241      	movs	r2, #65	; 0x41
 8002cde:	5c9b      	ldrb	r3, [r3, r2]
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	1e5a      	subs	r2, r3, #1
 8002ce6:	4193      	sbcs	r3, r2
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d001      	beq.n	8002cf2 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e06a      	b.n	8002dc8 <HAL_TIM_PWM_Start+0x140>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d104      	bne.n	8002d02 <HAL_TIM_PWM_Start+0x7a>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	223e      	movs	r2, #62	; 0x3e
 8002cfc:	2102      	movs	r1, #2
 8002cfe:	5499      	strb	r1, [r3, r2]
 8002d00:	e013      	b.n	8002d2a <HAL_TIM_PWM_Start+0xa2>
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	2b04      	cmp	r3, #4
 8002d06:	d104      	bne.n	8002d12 <HAL_TIM_PWM_Start+0x8a>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	223f      	movs	r2, #63	; 0x3f
 8002d0c:	2102      	movs	r1, #2
 8002d0e:	5499      	strb	r1, [r3, r2]
 8002d10:	e00b      	b.n	8002d2a <HAL_TIM_PWM_Start+0xa2>
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	2b08      	cmp	r3, #8
 8002d16:	d104      	bne.n	8002d22 <HAL_TIM_PWM_Start+0x9a>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2240      	movs	r2, #64	; 0x40
 8002d1c:	2102      	movs	r1, #2
 8002d1e:	5499      	strb	r1, [r3, r2]
 8002d20:	e003      	b.n	8002d2a <HAL_TIM_PWM_Start+0xa2>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2241      	movs	r2, #65	; 0x41
 8002d26:	2102      	movs	r1, #2
 8002d28:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	6839      	ldr	r1, [r7, #0]
 8002d30:	2201      	movs	r2, #1
 8002d32:	0018      	movs	r0, r3
 8002d34:	f000 fcde 	bl	80036f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a24      	ldr	r2, [pc, #144]	; (8002dd0 <HAL_TIM_PWM_Start+0x148>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d009      	beq.n	8002d56 <HAL_TIM_PWM_Start+0xce>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a23      	ldr	r2, [pc, #140]	; (8002dd4 <HAL_TIM_PWM_Start+0x14c>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d004      	beq.n	8002d56 <HAL_TIM_PWM_Start+0xce>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a21      	ldr	r2, [pc, #132]	; (8002dd8 <HAL_TIM_PWM_Start+0x150>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d101      	bne.n	8002d5a <HAL_TIM_PWM_Start+0xd2>
 8002d56:	2301      	movs	r3, #1
 8002d58:	e000      	b.n	8002d5c <HAL_TIM_PWM_Start+0xd4>
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d008      	beq.n	8002d72 <HAL_TIM_PWM_Start+0xea>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2180      	movs	r1, #128	; 0x80
 8002d6c:	0209      	lsls	r1, r1, #8
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a16      	ldr	r2, [pc, #88]	; (8002dd0 <HAL_TIM_PWM_Start+0x148>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d00a      	beq.n	8002d92 <HAL_TIM_PWM_Start+0x10a>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	2380      	movs	r3, #128	; 0x80
 8002d82:	05db      	lsls	r3, r3, #23
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d004      	beq.n	8002d92 <HAL_TIM_PWM_Start+0x10a>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a13      	ldr	r2, [pc, #76]	; (8002ddc <HAL_TIM_PWM_Start+0x154>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d111      	bne.n	8002db6 <HAL_TIM_PWM_Start+0x12e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	2207      	movs	r2, #7
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2b06      	cmp	r3, #6
 8002da2:	d010      	beq.n	8002dc6 <HAL_TIM_PWM_Start+0x13e>
    {
      __HAL_TIM_ENABLE(htim);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2101      	movs	r1, #1
 8002db0:	430a      	orrs	r2, r1
 8002db2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002db4:	e007      	b.n	8002dc6 <HAL_TIM_PWM_Start+0x13e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2101      	movs	r1, #1
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	0018      	movs	r0, r3
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	b004      	add	sp, #16
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	40012c00 	.word	0x40012c00
 8002dd4:	40014400 	.word	0x40014400
 8002dd8:	40014800 	.word	0x40014800
 8002ddc:	40000400 	.word	0x40000400

08002de0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b086      	sub	sp, #24
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dec:	2317      	movs	r3, #23
 8002dee:	18fb      	adds	r3, r7, r3
 8002df0:	2200      	movs	r2, #0
 8002df2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	223c      	movs	r2, #60	; 0x3c
 8002df8:	5c9b      	ldrb	r3, [r3, r2]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d101      	bne.n	8002e02 <HAL_TIM_PWM_ConfigChannel+0x22>
 8002dfe:	2302      	movs	r3, #2
 8002e00:	e0ad      	b.n	8002f5e <HAL_TIM_PWM_ConfigChannel+0x17e>
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	223c      	movs	r2, #60	; 0x3c
 8002e06:	2101      	movs	r1, #1
 8002e08:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2b0c      	cmp	r3, #12
 8002e0e:	d100      	bne.n	8002e12 <HAL_TIM_PWM_ConfigChannel+0x32>
 8002e10:	e076      	b.n	8002f00 <HAL_TIM_PWM_ConfigChannel+0x120>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2b0c      	cmp	r3, #12
 8002e16:	d900      	bls.n	8002e1a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002e18:	e095      	b.n	8002f46 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2b08      	cmp	r3, #8
 8002e1e:	d04e      	beq.n	8002ebe <HAL_TIM_PWM_ConfigChannel+0xde>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2b08      	cmp	r3, #8
 8002e24:	d900      	bls.n	8002e28 <HAL_TIM_PWM_ConfigChannel+0x48>
 8002e26:	e08e      	b.n	8002f46 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d003      	beq.n	8002e36 <HAL_TIM_PWM_ConfigChannel+0x56>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2b04      	cmp	r3, #4
 8002e32:	d021      	beq.n	8002e78 <HAL_TIM_PWM_ConfigChannel+0x98>
 8002e34:	e087      	b.n	8002f46 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	68ba      	ldr	r2, [r7, #8]
 8002e3c:	0011      	movs	r1, r2
 8002e3e:	0018      	movs	r0, r3
 8002e40:	f000 f9de 	bl	8003200 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	699a      	ldr	r2, [r3, #24]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2108      	movs	r1, #8
 8002e50:	430a      	orrs	r2, r1
 8002e52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	699a      	ldr	r2, [r3, #24]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2104      	movs	r1, #4
 8002e60:	438a      	bics	r2, r1
 8002e62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	6999      	ldr	r1, [r3, #24]
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	691a      	ldr	r2, [r3, #16]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	430a      	orrs	r2, r1
 8002e74:	619a      	str	r2, [r3, #24]
      break;
 8002e76:	e06b      	b.n	8002f50 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68ba      	ldr	r2, [r7, #8]
 8002e7e:	0011      	movs	r1, r2
 8002e80:	0018      	movs	r0, r3
 8002e82:	f000 fa3b 	bl	80032fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	699a      	ldr	r2, [r3, #24]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2180      	movs	r1, #128	; 0x80
 8002e92:	0109      	lsls	r1, r1, #4
 8002e94:	430a      	orrs	r2, r1
 8002e96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	699a      	ldr	r2, [r3, #24]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4931      	ldr	r1, [pc, #196]	; (8002f68 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002ea4:	400a      	ands	r2, r1
 8002ea6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	6999      	ldr	r1, [r3, #24]
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	021a      	lsls	r2, r3, #8
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	619a      	str	r2, [r3, #24]
      break;
 8002ebc:	e048      	b.n	8002f50 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	68ba      	ldr	r2, [r7, #8]
 8002ec4:	0011      	movs	r1, r2
 8002ec6:	0018      	movs	r0, r3
 8002ec8:	f000 fa96 	bl	80033f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	69da      	ldr	r2, [r3, #28]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2108      	movs	r1, #8
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	69da      	ldr	r2, [r3, #28]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2104      	movs	r1, #4
 8002ee8:	438a      	bics	r2, r1
 8002eea:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	69d9      	ldr	r1, [r3, #28]
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	691a      	ldr	r2, [r3, #16]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	430a      	orrs	r2, r1
 8002efc:	61da      	str	r2, [r3, #28]
      break;
 8002efe:	e027      	b.n	8002f50 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68ba      	ldr	r2, [r7, #8]
 8002f06:	0011      	movs	r1, r2
 8002f08:	0018      	movs	r0, r3
 8002f0a:	f000 faf5 	bl	80034f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	69da      	ldr	r2, [r3, #28]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2180      	movs	r1, #128	; 0x80
 8002f1a:	0109      	lsls	r1, r1, #4
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	69da      	ldr	r2, [r3, #28]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	490f      	ldr	r1, [pc, #60]	; (8002f68 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002f2c:	400a      	ands	r2, r1
 8002f2e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	69d9      	ldr	r1, [r3, #28]
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	021a      	lsls	r2, r3, #8
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	430a      	orrs	r2, r1
 8002f42:	61da      	str	r2, [r3, #28]
      break;
 8002f44:	e004      	b.n	8002f50 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8002f46:	2317      	movs	r3, #23
 8002f48:	18fb      	adds	r3, r7, r3
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	701a      	strb	r2, [r3, #0]
      break;
 8002f4e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	223c      	movs	r2, #60	; 0x3c
 8002f54:	2100      	movs	r1, #0
 8002f56:	5499      	strb	r1, [r3, r2]

  return status;
 8002f58:	2317      	movs	r3, #23
 8002f5a:	18fb      	adds	r3, r7, r3
 8002f5c:	781b      	ldrb	r3, [r3, #0]
}
 8002f5e:	0018      	movs	r0, r3
 8002f60:	46bd      	mov	sp, r7
 8002f62:	b006      	add	sp, #24
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	46c0      	nop			; (mov r8, r8)
 8002f68:	fffffbff 	.word	0xfffffbff

08002f6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f76:	230f      	movs	r3, #15
 8002f78:	18fb      	adds	r3, r7, r3
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	223c      	movs	r2, #60	; 0x3c
 8002f82:	5c9b      	ldrb	r3, [r3, r2]
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d101      	bne.n	8002f8c <HAL_TIM_ConfigClockSource+0x20>
 8002f88:	2302      	movs	r3, #2
 8002f8a:	e0bc      	b.n	8003106 <HAL_TIM_ConfigClockSource+0x19a>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	223c      	movs	r2, #60	; 0x3c
 8002f90:	2101      	movs	r1, #1
 8002f92:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	223d      	movs	r2, #61	; 0x3d
 8002f98:	2102      	movs	r1, #2
 8002f9a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	2277      	movs	r2, #119	; 0x77
 8002fa8:	4393      	bics	r3, r2
 8002faa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	4a58      	ldr	r2, [pc, #352]	; (8003110 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68ba      	ldr	r2, [r7, #8]
 8002fba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2280      	movs	r2, #128	; 0x80
 8002fc2:	0192      	lsls	r2, r2, #6
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d040      	beq.n	800304a <HAL_TIM_ConfigClockSource+0xde>
 8002fc8:	2280      	movs	r2, #128	; 0x80
 8002fca:	0192      	lsls	r2, r2, #6
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d900      	bls.n	8002fd2 <HAL_TIM_ConfigClockSource+0x66>
 8002fd0:	e088      	b.n	80030e4 <HAL_TIM_ConfigClockSource+0x178>
 8002fd2:	2280      	movs	r2, #128	; 0x80
 8002fd4:	0152      	lsls	r2, r2, #5
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d100      	bne.n	8002fdc <HAL_TIM_ConfigClockSource+0x70>
 8002fda:	e088      	b.n	80030ee <HAL_TIM_ConfigClockSource+0x182>
 8002fdc:	2280      	movs	r2, #128	; 0x80
 8002fde:	0152      	lsls	r2, r2, #5
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d900      	bls.n	8002fe6 <HAL_TIM_ConfigClockSource+0x7a>
 8002fe4:	e07e      	b.n	80030e4 <HAL_TIM_ConfigClockSource+0x178>
 8002fe6:	2b70      	cmp	r3, #112	; 0x70
 8002fe8:	d018      	beq.n	800301c <HAL_TIM_ConfigClockSource+0xb0>
 8002fea:	d900      	bls.n	8002fee <HAL_TIM_ConfigClockSource+0x82>
 8002fec:	e07a      	b.n	80030e4 <HAL_TIM_ConfigClockSource+0x178>
 8002fee:	2b60      	cmp	r3, #96	; 0x60
 8002ff0:	d04f      	beq.n	8003092 <HAL_TIM_ConfigClockSource+0x126>
 8002ff2:	d900      	bls.n	8002ff6 <HAL_TIM_ConfigClockSource+0x8a>
 8002ff4:	e076      	b.n	80030e4 <HAL_TIM_ConfigClockSource+0x178>
 8002ff6:	2b50      	cmp	r3, #80	; 0x50
 8002ff8:	d03b      	beq.n	8003072 <HAL_TIM_ConfigClockSource+0x106>
 8002ffa:	d900      	bls.n	8002ffe <HAL_TIM_ConfigClockSource+0x92>
 8002ffc:	e072      	b.n	80030e4 <HAL_TIM_ConfigClockSource+0x178>
 8002ffe:	2b40      	cmp	r3, #64	; 0x40
 8003000:	d057      	beq.n	80030b2 <HAL_TIM_ConfigClockSource+0x146>
 8003002:	d900      	bls.n	8003006 <HAL_TIM_ConfigClockSource+0x9a>
 8003004:	e06e      	b.n	80030e4 <HAL_TIM_ConfigClockSource+0x178>
 8003006:	2b30      	cmp	r3, #48	; 0x30
 8003008:	d063      	beq.n	80030d2 <HAL_TIM_ConfigClockSource+0x166>
 800300a:	d86b      	bhi.n	80030e4 <HAL_TIM_ConfigClockSource+0x178>
 800300c:	2b20      	cmp	r3, #32
 800300e:	d060      	beq.n	80030d2 <HAL_TIM_ConfigClockSource+0x166>
 8003010:	d868      	bhi.n	80030e4 <HAL_TIM_ConfigClockSource+0x178>
 8003012:	2b00      	cmp	r3, #0
 8003014:	d05d      	beq.n	80030d2 <HAL_TIM_ConfigClockSource+0x166>
 8003016:	2b10      	cmp	r3, #16
 8003018:	d05b      	beq.n	80030d2 <HAL_TIM_ConfigClockSource+0x166>
 800301a:	e063      	b.n	80030e4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800302c:	f000 fb42 	bl	80036b4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	2277      	movs	r2, #119	; 0x77
 800303c:	4313      	orrs	r3, r2
 800303e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68ba      	ldr	r2, [r7, #8]
 8003046:	609a      	str	r2, [r3, #8]
      break;
 8003048:	e052      	b.n	80030f0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800305a:	f000 fb2b 	bl	80036b4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	689a      	ldr	r2, [r3, #8]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2180      	movs	r1, #128	; 0x80
 800306a:	01c9      	lsls	r1, r1, #7
 800306c:	430a      	orrs	r2, r1
 800306e:	609a      	str	r2, [r3, #8]
      break;
 8003070:	e03e      	b.n	80030f0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800307e:	001a      	movs	r2, r3
 8003080:	f000 fa9e 	bl	80035c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2150      	movs	r1, #80	; 0x50
 800308a:	0018      	movs	r0, r3
 800308c:	f000 faf8 	bl	8003680 <TIM_ITRx_SetConfig>
      break;
 8003090:	e02e      	b.n	80030f0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800309e:	001a      	movs	r2, r3
 80030a0:	f000 fabc 	bl	800361c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2160      	movs	r1, #96	; 0x60
 80030aa:	0018      	movs	r0, r3
 80030ac:	f000 fae8 	bl	8003680 <TIM_ITRx_SetConfig>
      break;
 80030b0:	e01e      	b.n	80030f0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030be:	001a      	movs	r2, r3
 80030c0:	f000 fa7e 	bl	80035c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2140      	movs	r1, #64	; 0x40
 80030ca:	0018      	movs	r0, r3
 80030cc:	f000 fad8 	bl	8003680 <TIM_ITRx_SetConfig>
      break;
 80030d0:	e00e      	b.n	80030f0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	0019      	movs	r1, r3
 80030dc:	0010      	movs	r0, r2
 80030de:	f000 facf 	bl	8003680 <TIM_ITRx_SetConfig>
      break;
 80030e2:	e005      	b.n	80030f0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80030e4:	230f      	movs	r3, #15
 80030e6:	18fb      	adds	r3, r7, r3
 80030e8:	2201      	movs	r2, #1
 80030ea:	701a      	strb	r2, [r3, #0]
      break;
 80030ec:	e000      	b.n	80030f0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80030ee:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	223d      	movs	r2, #61	; 0x3d
 80030f4:	2101      	movs	r1, #1
 80030f6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	223c      	movs	r2, #60	; 0x3c
 80030fc:	2100      	movs	r1, #0
 80030fe:	5499      	strb	r1, [r3, r2]

  return status;
 8003100:	230f      	movs	r3, #15
 8003102:	18fb      	adds	r3, r7, r3
 8003104:	781b      	ldrb	r3, [r3, #0]
}
 8003106:	0018      	movs	r0, r3
 8003108:	46bd      	mov	sp, r7
 800310a:	b004      	add	sp, #16
 800310c:	bd80      	pop	{r7, pc}
 800310e:	46c0      	nop			; (mov r8, r8)
 8003110:	ffff00ff 	.word	0xffff00ff

08003114 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a30      	ldr	r2, [pc, #192]	; (80031e8 <TIM_Base_SetConfig+0xd4>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d008      	beq.n	800313e <TIM_Base_SetConfig+0x2a>
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	2380      	movs	r3, #128	; 0x80
 8003130:	05db      	lsls	r3, r3, #23
 8003132:	429a      	cmp	r2, r3
 8003134:	d003      	beq.n	800313e <TIM_Base_SetConfig+0x2a>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a2c      	ldr	r2, [pc, #176]	; (80031ec <TIM_Base_SetConfig+0xd8>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d108      	bne.n	8003150 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2270      	movs	r2, #112	; 0x70
 8003142:	4393      	bics	r3, r2
 8003144:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	68fa      	ldr	r2, [r7, #12]
 800314c:	4313      	orrs	r3, r2
 800314e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4a25      	ldr	r2, [pc, #148]	; (80031e8 <TIM_Base_SetConfig+0xd4>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d014      	beq.n	8003182 <TIM_Base_SetConfig+0x6e>
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	2380      	movs	r3, #128	; 0x80
 800315c:	05db      	lsls	r3, r3, #23
 800315e:	429a      	cmp	r2, r3
 8003160:	d00f      	beq.n	8003182 <TIM_Base_SetConfig+0x6e>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a21      	ldr	r2, [pc, #132]	; (80031ec <TIM_Base_SetConfig+0xd8>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d00b      	beq.n	8003182 <TIM_Base_SetConfig+0x6e>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a20      	ldr	r2, [pc, #128]	; (80031f0 <TIM_Base_SetConfig+0xdc>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d007      	beq.n	8003182 <TIM_Base_SetConfig+0x6e>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a1f      	ldr	r2, [pc, #124]	; (80031f4 <TIM_Base_SetConfig+0xe0>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d003      	beq.n	8003182 <TIM_Base_SetConfig+0x6e>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a1e      	ldr	r2, [pc, #120]	; (80031f8 <TIM_Base_SetConfig+0xe4>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d108      	bne.n	8003194 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	4a1d      	ldr	r2, [pc, #116]	; (80031fc <TIM_Base_SetConfig+0xe8>)
 8003186:	4013      	ands	r3, r2
 8003188:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	4313      	orrs	r3, r2
 8003192:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2280      	movs	r2, #128	; 0x80
 8003198:	4393      	bics	r3, r2
 800319a:	001a      	movs	r2, r3
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	695b      	ldr	r3, [r3, #20]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	68fa      	ldr	r2, [r7, #12]
 80031a8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	689a      	ldr	r2, [r3, #8]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a0a      	ldr	r2, [pc, #40]	; (80031e8 <TIM_Base_SetConfig+0xd4>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d007      	beq.n	80031d2 <TIM_Base_SetConfig+0xbe>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a0b      	ldr	r2, [pc, #44]	; (80031f4 <TIM_Base_SetConfig+0xe0>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d003      	beq.n	80031d2 <TIM_Base_SetConfig+0xbe>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a0a      	ldr	r2, [pc, #40]	; (80031f8 <TIM_Base_SetConfig+0xe4>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d103      	bne.n	80031da <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	691a      	ldr	r2, [r3, #16]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2201      	movs	r2, #1
 80031de:	615a      	str	r2, [r3, #20]
}
 80031e0:	46c0      	nop			; (mov r8, r8)
 80031e2:	46bd      	mov	sp, r7
 80031e4:	b004      	add	sp, #16
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	40012c00 	.word	0x40012c00
 80031ec:	40000400 	.word	0x40000400
 80031f0:	40002000 	.word	0x40002000
 80031f4:	40014400 	.word	0x40014400
 80031f8:	40014800 	.word	0x40014800
 80031fc:	fffffcff 	.word	0xfffffcff

08003200 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b086      	sub	sp, #24
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a1b      	ldr	r3, [r3, #32]
 800320e:	2201      	movs	r2, #1
 8003210:	4393      	bics	r3, r2
 8003212:	001a      	movs	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a1b      	ldr	r3, [r3, #32]
 800321c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	699b      	ldr	r3, [r3, #24]
 8003228:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2270      	movs	r2, #112	; 0x70
 800322e:	4393      	bics	r3, r2
 8003230:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2203      	movs	r2, #3
 8003236:	4393      	bics	r3, r2
 8003238:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	4313      	orrs	r3, r2
 8003242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	2202      	movs	r2, #2
 8003248:	4393      	bics	r3, r2
 800324a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	697a      	ldr	r2, [r7, #20]
 8003252:	4313      	orrs	r3, r2
 8003254:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a23      	ldr	r2, [pc, #140]	; (80032e8 <TIM_OC1_SetConfig+0xe8>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d007      	beq.n	800326e <TIM_OC1_SetConfig+0x6e>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a22      	ldr	r2, [pc, #136]	; (80032ec <TIM_OC1_SetConfig+0xec>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d003      	beq.n	800326e <TIM_OC1_SetConfig+0x6e>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a21      	ldr	r2, [pc, #132]	; (80032f0 <TIM_OC1_SetConfig+0xf0>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d10c      	bne.n	8003288 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	2208      	movs	r2, #8
 8003272:	4393      	bics	r3, r2
 8003274:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	697a      	ldr	r2, [r7, #20]
 800327c:	4313      	orrs	r3, r2
 800327e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	2204      	movs	r2, #4
 8003284:	4393      	bics	r3, r2
 8003286:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4a17      	ldr	r2, [pc, #92]	; (80032e8 <TIM_OC1_SetConfig+0xe8>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d007      	beq.n	80032a0 <TIM_OC1_SetConfig+0xa0>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4a16      	ldr	r2, [pc, #88]	; (80032ec <TIM_OC1_SetConfig+0xec>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d003      	beq.n	80032a0 <TIM_OC1_SetConfig+0xa0>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4a15      	ldr	r2, [pc, #84]	; (80032f0 <TIM_OC1_SetConfig+0xf0>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d111      	bne.n	80032c4 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	4a14      	ldr	r2, [pc, #80]	; (80032f4 <TIM_OC1_SetConfig+0xf4>)
 80032a4:	4013      	ands	r3, r2
 80032a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	4a13      	ldr	r2, [pc, #76]	; (80032f8 <TIM_OC1_SetConfig+0xf8>)
 80032ac:	4013      	ands	r3, r2
 80032ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	695b      	ldr	r3, [r3, #20]
 80032b4:	693a      	ldr	r2, [r7, #16]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	699b      	ldr	r3, [r3, #24]
 80032be:	693a      	ldr	r2, [r7, #16]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	693a      	ldr	r2, [r7, #16]
 80032c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	68fa      	ldr	r2, [r7, #12]
 80032ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685a      	ldr	r2, [r3, #4]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	697a      	ldr	r2, [r7, #20]
 80032dc:	621a      	str	r2, [r3, #32]
}
 80032de:	46c0      	nop			; (mov r8, r8)
 80032e0:	46bd      	mov	sp, r7
 80032e2:	b006      	add	sp, #24
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	46c0      	nop			; (mov r8, r8)
 80032e8:	40012c00 	.word	0x40012c00
 80032ec:	40014400 	.word	0x40014400
 80032f0:	40014800 	.word	0x40014800
 80032f4:	fffffeff 	.word	0xfffffeff
 80032f8:	fffffdff 	.word	0xfffffdff

080032fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b086      	sub	sp, #24
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a1b      	ldr	r3, [r3, #32]
 800330a:	2210      	movs	r2, #16
 800330c:	4393      	bics	r3, r2
 800330e:	001a      	movs	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a1b      	ldr	r3, [r3, #32]
 8003318:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	4a2c      	ldr	r2, [pc, #176]	; (80033dc <TIM_OC2_SetConfig+0xe0>)
 800332a:	4013      	ands	r3, r2
 800332c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	4a2b      	ldr	r2, [pc, #172]	; (80033e0 <TIM_OC2_SetConfig+0xe4>)
 8003332:	4013      	ands	r3, r2
 8003334:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	021b      	lsls	r3, r3, #8
 800333c:	68fa      	ldr	r2, [r7, #12]
 800333e:	4313      	orrs	r3, r2
 8003340:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	2220      	movs	r2, #32
 8003346:	4393      	bics	r3, r2
 8003348:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	011b      	lsls	r3, r3, #4
 8003350:	697a      	ldr	r2, [r7, #20]
 8003352:	4313      	orrs	r3, r2
 8003354:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a22      	ldr	r2, [pc, #136]	; (80033e4 <TIM_OC2_SetConfig+0xe8>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d10d      	bne.n	800337a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	2280      	movs	r2, #128	; 0x80
 8003362:	4393      	bics	r3, r2
 8003364:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	011b      	lsls	r3, r3, #4
 800336c:	697a      	ldr	r2, [r7, #20]
 800336e:	4313      	orrs	r3, r2
 8003370:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	2240      	movs	r2, #64	; 0x40
 8003376:	4393      	bics	r3, r2
 8003378:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a19      	ldr	r2, [pc, #100]	; (80033e4 <TIM_OC2_SetConfig+0xe8>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d007      	beq.n	8003392 <TIM_OC2_SetConfig+0x96>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a18      	ldr	r2, [pc, #96]	; (80033e8 <TIM_OC2_SetConfig+0xec>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d003      	beq.n	8003392 <TIM_OC2_SetConfig+0x96>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a17      	ldr	r2, [pc, #92]	; (80033ec <TIM_OC2_SetConfig+0xf0>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d113      	bne.n	80033ba <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	4a16      	ldr	r2, [pc, #88]	; (80033f0 <TIM_OC2_SetConfig+0xf4>)
 8003396:	4013      	ands	r3, r2
 8003398:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	4a15      	ldr	r2, [pc, #84]	; (80033f4 <TIM_OC2_SetConfig+0xf8>)
 800339e:	4013      	ands	r3, r2
 80033a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	695b      	ldr	r3, [r3, #20]
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	693a      	ldr	r2, [r7, #16]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	693a      	ldr	r2, [r7, #16]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	693a      	ldr	r2, [r7, #16]
 80033be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	68fa      	ldr	r2, [r7, #12]
 80033c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	685a      	ldr	r2, [r3, #4]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	697a      	ldr	r2, [r7, #20]
 80033d2:	621a      	str	r2, [r3, #32]
}
 80033d4:	46c0      	nop			; (mov r8, r8)
 80033d6:	46bd      	mov	sp, r7
 80033d8:	b006      	add	sp, #24
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	ffff8fff 	.word	0xffff8fff
 80033e0:	fffffcff 	.word	0xfffffcff
 80033e4:	40012c00 	.word	0x40012c00
 80033e8:	40014400 	.word	0x40014400
 80033ec:	40014800 	.word	0x40014800
 80033f0:	fffffbff 	.word	0xfffffbff
 80033f4:	fffff7ff 	.word	0xfffff7ff

080033f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b086      	sub	sp, #24
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a1b      	ldr	r3, [r3, #32]
 8003406:	4a33      	ldr	r2, [pc, #204]	; (80034d4 <TIM_OC3_SetConfig+0xdc>)
 8003408:	401a      	ands	r2, r3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a1b      	ldr	r3, [r3, #32]
 8003412:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	69db      	ldr	r3, [r3, #28]
 800341e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2270      	movs	r2, #112	; 0x70
 8003424:	4393      	bics	r3, r2
 8003426:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2203      	movs	r2, #3
 800342c:	4393      	bics	r3, r2
 800342e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	68fa      	ldr	r2, [r7, #12]
 8003436:	4313      	orrs	r3, r2
 8003438:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	4a26      	ldr	r2, [pc, #152]	; (80034d8 <TIM_OC3_SetConfig+0xe0>)
 800343e:	4013      	ands	r3, r2
 8003440:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	021b      	lsls	r3, r3, #8
 8003448:	697a      	ldr	r2, [r7, #20]
 800344a:	4313      	orrs	r3, r2
 800344c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a22      	ldr	r2, [pc, #136]	; (80034dc <TIM_OC3_SetConfig+0xe4>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d10d      	bne.n	8003472 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	4a21      	ldr	r2, [pc, #132]	; (80034e0 <TIM_OC3_SetConfig+0xe8>)
 800345a:	4013      	ands	r3, r2
 800345c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	021b      	lsls	r3, r3, #8
 8003464:	697a      	ldr	r2, [r7, #20]
 8003466:	4313      	orrs	r3, r2
 8003468:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	4a1d      	ldr	r2, [pc, #116]	; (80034e4 <TIM_OC3_SetConfig+0xec>)
 800346e:	4013      	ands	r3, r2
 8003470:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a19      	ldr	r2, [pc, #100]	; (80034dc <TIM_OC3_SetConfig+0xe4>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d007      	beq.n	800348a <TIM_OC3_SetConfig+0x92>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a1a      	ldr	r2, [pc, #104]	; (80034e8 <TIM_OC3_SetConfig+0xf0>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d003      	beq.n	800348a <TIM_OC3_SetConfig+0x92>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a19      	ldr	r2, [pc, #100]	; (80034ec <TIM_OC3_SetConfig+0xf4>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d113      	bne.n	80034b2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	4a18      	ldr	r2, [pc, #96]	; (80034f0 <TIM_OC3_SetConfig+0xf8>)
 800348e:	4013      	ands	r3, r2
 8003490:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	4a17      	ldr	r2, [pc, #92]	; (80034f4 <TIM_OC3_SetConfig+0xfc>)
 8003496:	4013      	ands	r3, r2
 8003498:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	695b      	ldr	r3, [r3, #20]
 800349e:	011b      	lsls	r3, r3, #4
 80034a0:	693a      	ldr	r2, [r7, #16]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	699b      	ldr	r3, [r3, #24]
 80034aa:	011b      	lsls	r3, r3, #4
 80034ac:	693a      	ldr	r2, [r7, #16]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	693a      	ldr	r2, [r7, #16]
 80034b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	68fa      	ldr	r2, [r7, #12]
 80034bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	685a      	ldr	r2, [r3, #4]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	697a      	ldr	r2, [r7, #20]
 80034ca:	621a      	str	r2, [r3, #32]
}
 80034cc:	46c0      	nop			; (mov r8, r8)
 80034ce:	46bd      	mov	sp, r7
 80034d0:	b006      	add	sp, #24
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	fffffeff 	.word	0xfffffeff
 80034d8:	fffffdff 	.word	0xfffffdff
 80034dc:	40012c00 	.word	0x40012c00
 80034e0:	fffff7ff 	.word	0xfffff7ff
 80034e4:	fffffbff 	.word	0xfffffbff
 80034e8:	40014400 	.word	0x40014400
 80034ec:	40014800 	.word	0x40014800
 80034f0:	ffffefff 	.word	0xffffefff
 80034f4:	ffffdfff 	.word	0xffffdfff

080034f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b086      	sub	sp, #24
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a1b      	ldr	r3, [r3, #32]
 8003506:	4a26      	ldr	r2, [pc, #152]	; (80035a0 <TIM_OC4_SetConfig+0xa8>)
 8003508:	401a      	ands	r2, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a1b      	ldr	r3, [r3, #32]
 8003512:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	69db      	ldr	r3, [r3, #28]
 800351e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	4a20      	ldr	r2, [pc, #128]	; (80035a4 <TIM_OC4_SetConfig+0xac>)
 8003524:	4013      	ands	r3, r2
 8003526:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	4a1f      	ldr	r2, [pc, #124]	; (80035a8 <TIM_OC4_SetConfig+0xb0>)
 800352c:	4013      	ands	r3, r2
 800352e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	021b      	lsls	r3, r3, #8
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	4313      	orrs	r3, r2
 800353a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	4a1b      	ldr	r2, [pc, #108]	; (80035ac <TIM_OC4_SetConfig+0xb4>)
 8003540:	4013      	ands	r3, r2
 8003542:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	031b      	lsls	r3, r3, #12
 800354a:	693a      	ldr	r2, [r7, #16]
 800354c:	4313      	orrs	r3, r2
 800354e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4a17      	ldr	r2, [pc, #92]	; (80035b0 <TIM_OC4_SetConfig+0xb8>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d007      	beq.n	8003568 <TIM_OC4_SetConfig+0x70>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4a16      	ldr	r2, [pc, #88]	; (80035b4 <TIM_OC4_SetConfig+0xbc>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d003      	beq.n	8003568 <TIM_OC4_SetConfig+0x70>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4a15      	ldr	r2, [pc, #84]	; (80035b8 <TIM_OC4_SetConfig+0xc0>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d109      	bne.n	800357c <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	4a14      	ldr	r2, [pc, #80]	; (80035bc <TIM_OC4_SetConfig+0xc4>)
 800356c:	4013      	ands	r3, r2
 800356e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	695b      	ldr	r3, [r3, #20]
 8003574:	019b      	lsls	r3, r3, #6
 8003576:	697a      	ldr	r2, [r7, #20]
 8003578:	4313      	orrs	r3, r2
 800357a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	697a      	ldr	r2, [r7, #20]
 8003580:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	68fa      	ldr	r2, [r7, #12]
 8003586:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	685a      	ldr	r2, [r3, #4]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	693a      	ldr	r2, [r7, #16]
 8003594:	621a      	str	r2, [r3, #32]
}
 8003596:	46c0      	nop			; (mov r8, r8)
 8003598:	46bd      	mov	sp, r7
 800359a:	b006      	add	sp, #24
 800359c:	bd80      	pop	{r7, pc}
 800359e:	46c0      	nop			; (mov r8, r8)
 80035a0:	ffffefff 	.word	0xffffefff
 80035a4:	ffff8fff 	.word	0xffff8fff
 80035a8:	fffffcff 	.word	0xfffffcff
 80035ac:	ffffdfff 	.word	0xffffdfff
 80035b0:	40012c00 	.word	0x40012c00
 80035b4:	40014400 	.word	0x40014400
 80035b8:	40014800 	.word	0x40014800
 80035bc:	ffffbfff 	.word	0xffffbfff

080035c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b086      	sub	sp, #24
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6a1b      	ldr	r3, [r3, #32]
 80035d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6a1b      	ldr	r3, [r3, #32]
 80035d6:	2201      	movs	r2, #1
 80035d8:	4393      	bics	r3, r2
 80035da:	001a      	movs	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	22f0      	movs	r2, #240	; 0xf0
 80035ea:	4393      	bics	r3, r2
 80035ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	011b      	lsls	r3, r3, #4
 80035f2:	693a      	ldr	r2, [r7, #16]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	220a      	movs	r2, #10
 80035fc:	4393      	bics	r3, r2
 80035fe:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003600:	697a      	ldr	r2, [r7, #20]
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	4313      	orrs	r3, r2
 8003606:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	697a      	ldr	r2, [r7, #20]
 8003612:	621a      	str	r2, [r3, #32]
}
 8003614:	46c0      	nop			; (mov r8, r8)
 8003616:	46bd      	mov	sp, r7
 8003618:	b006      	add	sp, #24
 800361a:	bd80      	pop	{r7, pc}

0800361c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b086      	sub	sp, #24
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6a1b      	ldr	r3, [r3, #32]
 800362c:	2210      	movs	r2, #16
 800362e:	4393      	bics	r3, r2
 8003630:	001a      	movs	r2, r3
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6a1b      	ldr	r3, [r3, #32]
 8003640:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	4a0d      	ldr	r2, [pc, #52]	; (800367c <TIM_TI2_ConfigInputStage+0x60>)
 8003646:	4013      	ands	r3, r2
 8003648:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	031b      	lsls	r3, r3, #12
 800364e:	697a      	ldr	r2, [r7, #20]
 8003650:	4313      	orrs	r3, r2
 8003652:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	22a0      	movs	r2, #160	; 0xa0
 8003658:	4393      	bics	r3, r2
 800365a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	011b      	lsls	r3, r3, #4
 8003660:	693a      	ldr	r2, [r7, #16]
 8003662:	4313      	orrs	r3, r2
 8003664:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	697a      	ldr	r2, [r7, #20]
 800366a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	693a      	ldr	r2, [r7, #16]
 8003670:	621a      	str	r2, [r3, #32]
}
 8003672:	46c0      	nop			; (mov r8, r8)
 8003674:	46bd      	mov	sp, r7
 8003676:	b006      	add	sp, #24
 8003678:	bd80      	pop	{r7, pc}
 800367a:	46c0      	nop			; (mov r8, r8)
 800367c:	ffff0fff 	.word	0xffff0fff

08003680 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2270      	movs	r2, #112	; 0x70
 8003694:	4393      	bics	r3, r2
 8003696:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003698:	683a      	ldr	r2, [r7, #0]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	4313      	orrs	r3, r2
 800369e:	2207      	movs	r2, #7
 80036a0:	4313      	orrs	r3, r2
 80036a2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	609a      	str	r2, [r3, #8]
}
 80036aa:	46c0      	nop			; (mov r8, r8)
 80036ac:	46bd      	mov	sp, r7
 80036ae:	b004      	add	sp, #16
 80036b0:	bd80      	pop	{r7, pc}
	...

080036b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b086      	sub	sp, #24
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	607a      	str	r2, [r7, #4]
 80036c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	4a09      	ldr	r2, [pc, #36]	; (80036f0 <TIM_ETR_SetConfig+0x3c>)
 80036cc:	4013      	ands	r3, r2
 80036ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	021a      	lsls	r2, r3, #8
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	431a      	orrs	r2, r3
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	4313      	orrs	r3, r2
 80036dc:	697a      	ldr	r2, [r7, #20]
 80036de:	4313      	orrs	r3, r2
 80036e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	697a      	ldr	r2, [r7, #20]
 80036e6:	609a      	str	r2, [r3, #8]
}
 80036e8:	46c0      	nop			; (mov r8, r8)
 80036ea:	46bd      	mov	sp, r7
 80036ec:	b006      	add	sp, #24
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	ffff00ff 	.word	0xffff00ff

080036f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b086      	sub	sp, #24
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	60b9      	str	r1, [r7, #8]
 80036fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	221f      	movs	r2, #31
 8003704:	4013      	ands	r3, r2
 8003706:	2201      	movs	r2, #1
 8003708:	409a      	lsls	r2, r3
 800370a:	0013      	movs	r3, r2
 800370c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6a1b      	ldr	r3, [r3, #32]
 8003712:	697a      	ldr	r2, [r7, #20]
 8003714:	43d2      	mvns	r2, r2
 8003716:	401a      	ands	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6a1a      	ldr	r2, [r3, #32]
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	211f      	movs	r1, #31
 8003724:	400b      	ands	r3, r1
 8003726:	6879      	ldr	r1, [r7, #4]
 8003728:	4099      	lsls	r1, r3
 800372a:	000b      	movs	r3, r1
 800372c:	431a      	orrs	r2, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	621a      	str	r2, [r3, #32]
}
 8003732:	46c0      	nop			; (mov r8, r8)
 8003734:	46bd      	mov	sp, r7
 8003736:	b006      	add	sp, #24
 8003738:	bd80      	pop	{r7, pc}
	...

0800373c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	223c      	movs	r2, #60	; 0x3c
 800374a:	5c9b      	ldrb	r3, [r3, r2]
 800374c:	2b01      	cmp	r3, #1
 800374e:	d101      	bne.n	8003754 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003750:	2302      	movs	r3, #2
 8003752:	e042      	b.n	80037da <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	223c      	movs	r2, #60	; 0x3c
 8003758:	2101      	movs	r1, #1
 800375a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	223d      	movs	r2, #61	; 0x3d
 8003760:	2102      	movs	r1, #2
 8003762:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2270      	movs	r2, #112	; 0x70
 8003778:	4393      	bics	r3, r2
 800377a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	68fa      	ldr	r2, [r7, #12]
 8003782:	4313      	orrs	r3, r2
 8003784:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a14      	ldr	r2, [pc, #80]	; (80037e4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d00a      	beq.n	80037ae <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	2380      	movs	r3, #128	; 0x80
 800379e:	05db      	lsls	r3, r3, #23
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d004      	beq.n	80037ae <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a0f      	ldr	r2, [pc, #60]	; (80037e8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d10c      	bne.n	80037c8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	2280      	movs	r2, #128	; 0x80
 80037b2:	4393      	bics	r3, r2
 80037b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	68ba      	ldr	r2, [r7, #8]
 80037bc:	4313      	orrs	r3, r2
 80037be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	68ba      	ldr	r2, [r7, #8]
 80037c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	223d      	movs	r2, #61	; 0x3d
 80037cc:	2101      	movs	r1, #1
 80037ce:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	223c      	movs	r2, #60	; 0x3c
 80037d4:	2100      	movs	r1, #0
 80037d6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	0018      	movs	r0, r3
 80037dc:	46bd      	mov	sp, r7
 80037de:	b004      	add	sp, #16
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	46c0      	nop			; (mov r8, r8)
 80037e4:	40012c00 	.word	0x40012c00
 80037e8:	40000400 	.word	0x40000400

080037ec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80037f6:	2300      	movs	r3, #0
 80037f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	223c      	movs	r2, #60	; 0x3c
 80037fe:	5c9b      	ldrb	r3, [r3, r2]
 8003800:	2b01      	cmp	r3, #1
 8003802:	d101      	bne.n	8003808 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003804:	2302      	movs	r3, #2
 8003806:	e03e      	b.n	8003886 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	223c      	movs	r2, #60	; 0x3c
 800380c:	2101      	movs	r1, #1
 800380e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	22ff      	movs	r2, #255	; 0xff
 8003814:	4393      	bics	r3, r2
 8003816:	001a      	movs	r2, r3
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	4313      	orrs	r3, r2
 800381e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	4a1b      	ldr	r2, [pc, #108]	; (8003890 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8003824:	401a      	ands	r2, r3
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	4313      	orrs	r3, r2
 800382c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	4a18      	ldr	r2, [pc, #96]	; (8003894 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8003832:	401a      	ands	r2, r3
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	4313      	orrs	r3, r2
 800383a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	4a16      	ldr	r2, [pc, #88]	; (8003898 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8003840:	401a      	ands	r2, r3
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4313      	orrs	r3, r2
 8003848:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	4a13      	ldr	r2, [pc, #76]	; (800389c <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 800384e:	401a      	ands	r2, r3
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	691b      	ldr	r3, [r3, #16]
 8003854:	4313      	orrs	r3, r2
 8003856:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	4a11      	ldr	r2, [pc, #68]	; (80038a0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 800385c:	401a      	ands	r2, r3
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	695b      	ldr	r3, [r3, #20]
 8003862:	4313      	orrs	r3, r2
 8003864:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	4a0e      	ldr	r2, [pc, #56]	; (80038a4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 800386a:	401a      	ands	r2, r3
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	69db      	ldr	r3, [r3, #28]
 8003870:	4313      	orrs	r3, r2
 8003872:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68fa      	ldr	r2, [r7, #12]
 800387a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	223c      	movs	r2, #60	; 0x3c
 8003880:	2100      	movs	r1, #0
 8003882:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003884:	2300      	movs	r3, #0
}
 8003886:	0018      	movs	r0, r3
 8003888:	46bd      	mov	sp, r7
 800388a:	b004      	add	sp, #16
 800388c:	bd80      	pop	{r7, pc}
 800388e:	46c0      	nop			; (mov r8, r8)
 8003890:	fffffcff 	.word	0xfffffcff
 8003894:	fffffbff 	.word	0xfffffbff
 8003898:	fffff7ff 	.word	0xfffff7ff
 800389c:	ffffefff 	.word	0xffffefff
 80038a0:	ffffdfff 	.word	0xffffdfff
 80038a4:	ffffbfff 	.word	0xffffbfff

080038a8 <memset>:
 80038a8:	0003      	movs	r3, r0
 80038aa:	1882      	adds	r2, r0, r2
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d100      	bne.n	80038b2 <memset+0xa>
 80038b0:	4770      	bx	lr
 80038b2:	7019      	strb	r1, [r3, #0]
 80038b4:	3301      	adds	r3, #1
 80038b6:	e7f9      	b.n	80038ac <memset+0x4>

080038b8 <__libc_init_array>:
 80038b8:	b570      	push	{r4, r5, r6, lr}
 80038ba:	2600      	movs	r6, #0
 80038bc:	4c0c      	ldr	r4, [pc, #48]	; (80038f0 <__libc_init_array+0x38>)
 80038be:	4d0d      	ldr	r5, [pc, #52]	; (80038f4 <__libc_init_array+0x3c>)
 80038c0:	1b64      	subs	r4, r4, r5
 80038c2:	10a4      	asrs	r4, r4, #2
 80038c4:	42a6      	cmp	r6, r4
 80038c6:	d109      	bne.n	80038dc <__libc_init_array+0x24>
 80038c8:	2600      	movs	r6, #0
 80038ca:	f000 f823 	bl	8003914 <_init>
 80038ce:	4c0a      	ldr	r4, [pc, #40]	; (80038f8 <__libc_init_array+0x40>)
 80038d0:	4d0a      	ldr	r5, [pc, #40]	; (80038fc <__libc_init_array+0x44>)
 80038d2:	1b64      	subs	r4, r4, r5
 80038d4:	10a4      	asrs	r4, r4, #2
 80038d6:	42a6      	cmp	r6, r4
 80038d8:	d105      	bne.n	80038e6 <__libc_init_array+0x2e>
 80038da:	bd70      	pop	{r4, r5, r6, pc}
 80038dc:	00b3      	lsls	r3, r6, #2
 80038de:	58eb      	ldr	r3, [r5, r3]
 80038e0:	4798      	blx	r3
 80038e2:	3601      	adds	r6, #1
 80038e4:	e7ee      	b.n	80038c4 <__libc_init_array+0xc>
 80038e6:	00b3      	lsls	r3, r6, #2
 80038e8:	58eb      	ldr	r3, [r5, r3]
 80038ea:	4798      	blx	r3
 80038ec:	3601      	adds	r6, #1
 80038ee:	e7f2      	b.n	80038d6 <__libc_init_array+0x1e>
 80038f0:	0800395c 	.word	0x0800395c
 80038f4:	0800395c 	.word	0x0800395c
 80038f8:	08003960 	.word	0x08003960
 80038fc:	0800395c 	.word	0x0800395c

08003900 <memcpy>:
 8003900:	2300      	movs	r3, #0
 8003902:	b510      	push	{r4, lr}
 8003904:	429a      	cmp	r2, r3
 8003906:	d100      	bne.n	800390a <memcpy+0xa>
 8003908:	bd10      	pop	{r4, pc}
 800390a:	5ccc      	ldrb	r4, [r1, r3]
 800390c:	54c4      	strb	r4, [r0, r3]
 800390e:	3301      	adds	r3, #1
 8003910:	e7f8      	b.n	8003904 <memcpy+0x4>
	...

08003914 <_init>:
 8003914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003916:	46c0      	nop			; (mov r8, r8)
 8003918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800391a:	bc08      	pop	{r3}
 800391c:	469e      	mov	lr, r3
 800391e:	4770      	bx	lr

08003920 <_fini>:
 8003920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003922:	46c0      	nop			; (mov r8, r8)
 8003924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003926:	bc08      	pop	{r3}
 8003928:	469e      	mov	lr, r3
 800392a:	4770      	bx	lr
