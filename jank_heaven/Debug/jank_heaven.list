
jank_heaven.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031f8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080032b8  080032b8  000132b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032e8  080032e8  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  080032e8  080032e8  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080032e8  080032e8  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032e8  080032e8  000132e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080032ec  080032ec  000132ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  080032f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  2000002c  0800331c  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000160  0800331c  00020160  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a6b3  00000000  00000000  00020097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c82  00000000  00000000  0002a74a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bd0  00000000  00000000  0002c3d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000937  00000000  00000000  0002cfa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017fed  00000000  00000000  0002d8d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000db2e  00000000  00000000  000458c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c026  00000000  00000000  000533f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002aac  00000000  00000000  000df418  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000e1ec4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000002c 	.word	0x2000002c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080032a0 	.word	0x080032a0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000030 	.word	0x20000030
 8000104:	080032a0 	.word	0x080032a0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fdae 	bl	8000d84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f850 	bl	80002cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f9e6 	bl	80005fc <MX_GPIO_Init>
  MX_SPI1_Init();
 8000230:	f000 f8ac 	bl	800038c <MX_SPI1_Init>
  MX_TIM2_Init();
 8000234:	f000 f8e4 	bl	8000400 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000238:	f000 f960 	bl	80004fc <MX_TIM3_Init>
  MX_CRC_Init();
 800023c:	f000 f886 	bl	800034c <MX_CRC_Init>





  EnablePWMOutput(&htim3);
 8000240:	4b1d      	ldr	r3, [pc, #116]	; (80002b8 <main+0x98>)
 8000242:	0018      	movs	r0, r3
 8000244:	f000 fa24 	bl	8000690 <EnablePWMOutput>
  EnablePWMOutput(&htim2);
 8000248:	4b1c      	ldr	r3, [pc, #112]	; (80002bc <main+0x9c>)
 800024a:	0018      	movs	r0, r3
 800024c:	f000 fa20 	bl	8000690 <EnablePWMOutput>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  SPI_RX_Buffer[0] = 2;
 8000250:	4b1b      	ldr	r3, [pc, #108]	; (80002c0 <main+0xa0>)
 8000252:	2202      	movs	r2, #2
 8000254:	701a      	strb	r2, [r3, #0]
  SPI_RX_Buffer[1] = 0;
 8000256:	4b1a      	ldr	r3, [pc, #104]	; (80002c0 <main+0xa0>)
 8000258:	2200      	movs	r2, #0
 800025a:	705a      	strb	r2, [r3, #1]
  SPI_RX_Buffer[2] = 32;
 800025c:	4b18      	ldr	r3, [pc, #96]	; (80002c0 <main+0xa0>)
 800025e:	2220      	movs	r2, #32
 8000260:	709a      	strb	r2, [r3, #2]
  SPI_RX_Buffer[3] = 200;
 8000262:	4b17      	ldr	r3, [pc, #92]	; (80002c0 <main+0xa0>)
 8000264:	22c8      	movs	r2, #200	; 0xc8
 8000266:	70da      	strb	r2, [r3, #3]
  SPI_RX_Buffer[4] = 200;
 8000268:	4b15      	ldr	r3, [pc, #84]	; (80002c0 <main+0xa0>)
 800026a:	22c8      	movs	r2, #200	; 0xc8
 800026c:	711a      	strb	r2, [r3, #4]
  SPI_RX_Buffer[5] = 200;
 800026e:	4b14      	ldr	r3, [pc, #80]	; (80002c0 <main+0xa0>)
 8000270:	22c8      	movs	r2, #200	; 0xc8
 8000272:	715a      	strb	r2, [r3, #5]
  SPI_RX_Buffer[6] = 200;
 8000274:	4b12      	ldr	r3, [pc, #72]	; (80002c0 <main+0xa0>)
 8000276:	22c8      	movs	r2, #200	; 0xc8
 8000278:	719a      	strb	r2, [r3, #6]
  SPI_RX_Buffer[7] = 200;
 800027a:	4b11      	ldr	r3, [pc, #68]	; (80002c0 <main+0xa0>)
 800027c:	22c8      	movs	r2, #200	; 0xc8
 800027e:	71da      	strb	r2, [r3, #7]
  SPI_RX_Buffer[8] = 200;
 8000280:	4b0f      	ldr	r3, [pc, #60]	; (80002c0 <main+0xa0>)
 8000282:	22c8      	movs	r2, #200	; 0xc8
 8000284:	721a      	strb	r2, [r3, #8]
  SPI_RX_Buffer[9] = 200;
 8000286:	4b0e      	ldr	r3, [pc, #56]	; (80002c0 <main+0xa0>)
 8000288:	22c8      	movs	r2, #200	; 0xc8
 800028a:	725a      	strb	r2, [r3, #9]
  SPI_RX_Buffer[10] = 200;
 800028c:	4b0c      	ldr	r3, [pc, #48]	; (80002c0 <main+0xa0>)
 800028e:	22c8      	movs	r2, #200	; 0xc8
 8000290:	729a      	strb	r2, [r3, #10]
  SPI_RX_Buffer[11] = 72;
 8000292:	4b0b      	ldr	r3, [pc, #44]	; (80002c0 <main+0xa0>)
 8000294:	2248      	movs	r2, #72	; 0x48
 8000296:	72da      	strb	r2, [r3, #11]
  SPI_RX_Buffer[12] = 139;
 8000298:	4b09      	ldr	r3, [pc, #36]	; (80002c0 <main+0xa0>)
 800029a:	228b      	movs	r2, #139	; 0x8b
 800029c:	731a      	strb	r2, [r3, #12]
  // weird things happening


  HAL_SPI_TxRxCpltCallback(&hspi1);
 800029e:	4b09      	ldr	r3, [pc, #36]	; (80002c4 <main+0xa4>)
 80002a0:	0018      	movs	r0, r3
 80002a2:	f000 fab7 	bl	8000814 <HAL_SPI_TxRxCpltCallback>

  HAL_SPI_TransmitReceive_IT(&hspi1, SPI_TX_Buffer, SPI_RX_Buffer, SPI_BUFFER_SIZE);
 80002a6:	4a06      	ldr	r2, [pc, #24]	; (80002c0 <main+0xa0>)
 80002a8:	4907      	ldr	r1, [pc, #28]	; (80002c8 <main+0xa8>)
 80002aa:	4806      	ldr	r0, [pc, #24]	; (80002c4 <main+0xa4>)
 80002ac:	230d      	movs	r3, #13
 80002ae:	f001 ff5f 	bl	8002170 <HAL_SPI_TransmitReceive_IT>
  for (;;) {
	  asm("nop");
 80002b2:	46c0      	nop			; (mov r8, r8)
 80002b4:	e7fd      	b.n	80002b2 <main+0x92>
 80002b6:	46c0      	nop			; (mov r8, r8)
 80002b8:	20000110 	.word	0x20000110
 80002bc:	200000c8 	.word	0x200000c8
 80002c0:	20000000 	.word	0x20000000
 80002c4:	20000064 	.word	0x20000064
 80002c8:	20000010 	.word	0x20000010

080002cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002cc:	b590      	push	{r4, r7, lr}
 80002ce:	b093      	sub	sp, #76	; 0x4c
 80002d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002d2:	2414      	movs	r4, #20
 80002d4:	193b      	adds	r3, r7, r4
 80002d6:	0018      	movs	r0, r3
 80002d8:	2334      	movs	r3, #52	; 0x34
 80002da:	001a      	movs	r2, r3
 80002dc:	2100      	movs	r1, #0
 80002de:	f002 ffa9 	bl	8003234 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e2:	1d3b      	adds	r3, r7, #4
 80002e4:	0018      	movs	r0, r3
 80002e6:	2310      	movs	r3, #16
 80002e8:	001a      	movs	r2, r3
 80002ea:	2100      	movs	r1, #0
 80002ec:	f002 ffa2 	bl	8003234 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002f0:	0021      	movs	r1, r4
 80002f2:	187b      	adds	r3, r7, r1
 80002f4:	2202      	movs	r2, #2
 80002f6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002f8:	187b      	adds	r3, r7, r1
 80002fa:	2201      	movs	r2, #1
 80002fc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002fe:	187b      	adds	r3, r7, r1
 8000300:	2210      	movs	r2, #16
 8000302:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000304:	187b      	adds	r3, r7, r1
 8000306:	2200      	movs	r2, #0
 8000308:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800030a:	187b      	adds	r3, r7, r1
 800030c:	0018      	movs	r0, r3
 800030e:	f001 f9a5 	bl	800165c <HAL_RCC_OscConfig>
 8000312:	1e03      	subs	r3, r0, #0
 8000314:	d001      	beq.n	800031a <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8000316:	f000 fb45 	bl	80009a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800031a:	1d3b      	adds	r3, r7, #4
 800031c:	2207      	movs	r2, #7
 800031e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000320:	1d3b      	adds	r3, r7, #4
 8000322:	2200      	movs	r2, #0
 8000324:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000326:	1d3b      	adds	r3, r7, #4
 8000328:	2200      	movs	r2, #0
 800032a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800032c:	1d3b      	adds	r3, r7, #4
 800032e:	2200      	movs	r2, #0
 8000330:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000332:	1d3b      	adds	r3, r7, #4
 8000334:	2100      	movs	r1, #0
 8000336:	0018      	movs	r0, r3
 8000338:	f001 fd16 	bl	8001d68 <HAL_RCC_ClockConfig>
 800033c:	1e03      	subs	r3, r0, #0
 800033e:	d001      	beq.n	8000344 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000340:	f000 fb30 	bl	80009a4 <Error_Handler>
  }
}
 8000344:	46c0      	nop			; (mov r8, r8)
 8000346:	46bd      	mov	sp, r7
 8000348:	b013      	add	sp, #76	; 0x4c
 800034a:	bd90      	pop	{r4, r7, pc}

0800034c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000350:	4b0c      	ldr	r3, [pc, #48]	; (8000384 <MX_CRC_Init+0x38>)
 8000352:	4a0d      	ldr	r2, [pc, #52]	; (8000388 <MX_CRC_Init+0x3c>)
 8000354:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000356:	4b0b      	ldr	r3, [pc, #44]	; (8000384 <MX_CRC_Init+0x38>)
 8000358:	2200      	movs	r2, #0
 800035a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800035c:	4b09      	ldr	r3, [pc, #36]	; (8000384 <MX_CRC_Init+0x38>)
 800035e:	2200      	movs	r2, #0
 8000360:	60da      	str	r2, [r3, #12]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000362:	4b08      	ldr	r3, [pc, #32]	; (8000384 <MX_CRC_Init+0x38>)
 8000364:	2200      	movs	r2, #0
 8000366:	611a      	str	r2, [r3, #16]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 8000368:	4b06      	ldr	r3, [pc, #24]	; (8000384 <MX_CRC_Init+0x38>)
 800036a:	2203      	movs	r2, #3
 800036c:	619a      	str	r2, [r3, #24]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800036e:	4b05      	ldr	r3, [pc, #20]	; (8000384 <MX_CRC_Init+0x38>)
 8000370:	0018      	movs	r0, r3
 8000372:	f000 fe49 	bl	8001008 <HAL_CRC_Init>
 8000376:	1e03      	subs	r3, r0, #0
 8000378:	d001      	beq.n	800037e <MX_CRC_Init+0x32>
  {
    Error_Handler();
 800037a:	f000 fb13 	bl	80009a4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800037e:	46c0      	nop			; (mov r8, r8)
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}
 8000384:	20000048 	.word	0x20000048
 8000388:	40023000 	.word	0x40023000

0800038c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000390:	4b19      	ldr	r3, [pc, #100]	; (80003f8 <MX_SPI1_Init+0x6c>)
 8000392:	4a1a      	ldr	r2, [pc, #104]	; (80003fc <MX_SPI1_Init+0x70>)
 8000394:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000396:	4b18      	ldr	r3, [pc, #96]	; (80003f8 <MX_SPI1_Init+0x6c>)
 8000398:	2200      	movs	r2, #0
 800039a:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800039c:	4b16      	ldr	r3, [pc, #88]	; (80003f8 <MX_SPI1_Init+0x6c>)
 800039e:	2200      	movs	r2, #0
 80003a0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80003a2:	4b15      	ldr	r3, [pc, #84]	; (80003f8 <MX_SPI1_Init+0x6c>)
 80003a4:	22e0      	movs	r2, #224	; 0xe0
 80003a6:	00d2      	lsls	r2, r2, #3
 80003a8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003aa:	4b13      	ldr	r3, [pc, #76]	; (80003f8 <MX_SPI1_Init+0x6c>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003b0:	4b11      	ldr	r3, [pc, #68]	; (80003f8 <MX_SPI1_Init+0x6c>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80003b6:	4b10      	ldr	r3, [pc, #64]	; (80003f8 <MX_SPI1_Init+0x6c>)
 80003b8:	2280      	movs	r2, #128	; 0x80
 80003ba:	0092      	lsls	r2, r2, #2
 80003bc:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003be:	4b0e      	ldr	r3, [pc, #56]	; (80003f8 <MX_SPI1_Init+0x6c>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003c4:	4b0c      	ldr	r3, [pc, #48]	; (80003f8 <MX_SPI1_Init+0x6c>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003ca:	4b0b      	ldr	r3, [pc, #44]	; (80003f8 <MX_SPI1_Init+0x6c>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80003d0:	4b09      	ldr	r3, [pc, #36]	; (80003f8 <MX_SPI1_Init+0x6c>)
 80003d2:	2207      	movs	r2, #7
 80003d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80003d6:	4b08      	ldr	r3, [pc, #32]	; (80003f8 <MX_SPI1_Init+0x6c>)
 80003d8:	2200      	movs	r2, #0
 80003da:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80003dc:	4b06      	ldr	r3, [pc, #24]	; (80003f8 <MX_SPI1_Init+0x6c>)
 80003de:	2200      	movs	r2, #0
 80003e0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003e2:	4b05      	ldr	r3, [pc, #20]	; (80003f8 <MX_SPI1_Init+0x6c>)
 80003e4:	0018      	movs	r0, r3
 80003e6:	f001 fe0b 	bl	8002000 <HAL_SPI_Init>
 80003ea:	1e03      	subs	r3, r0, #0
 80003ec:	d001      	beq.n	80003f2 <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 80003ee:	f000 fad9 	bl	80009a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80003f2:	46c0      	nop			; (mov r8, r8)
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	20000064 	.word	0x20000064
 80003fc:	40013000 	.word	0x40013000

08000400 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b08a      	sub	sp, #40	; 0x28
 8000404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000406:	2320      	movs	r3, #32
 8000408:	18fb      	adds	r3, r7, r3
 800040a:	0018      	movs	r0, r3
 800040c:	2308      	movs	r3, #8
 800040e:	001a      	movs	r2, r3
 8000410:	2100      	movs	r1, #0
 8000412:	f002 ff0f 	bl	8003234 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000416:	1d3b      	adds	r3, r7, #4
 8000418:	0018      	movs	r0, r3
 800041a:	231c      	movs	r3, #28
 800041c:	001a      	movs	r2, r3
 800041e:	2100      	movs	r1, #0
 8000420:	f002 ff08 	bl	8003234 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000424:	4b34      	ldr	r3, [pc, #208]	; (80004f8 <MX_TIM2_Init+0xf8>)
 8000426:	2280      	movs	r2, #128	; 0x80
 8000428:	05d2      	lsls	r2, r2, #23
 800042a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32-1;
 800042c:	4b32      	ldr	r3, [pc, #200]	; (80004f8 <MX_TIM2_Init+0xf8>)
 800042e:	221f      	movs	r2, #31
 8000430:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000432:	4b31      	ldr	r3, [pc, #196]	; (80004f8 <MX_TIM2_Init+0xf8>)
 8000434:	2200      	movs	r2, #0
 8000436:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 500-1;
 8000438:	4b2f      	ldr	r3, [pc, #188]	; (80004f8 <MX_TIM2_Init+0xf8>)
 800043a:	22f4      	movs	r2, #244	; 0xf4
 800043c:	32ff      	adds	r2, #255	; 0xff
 800043e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000440:	4b2d      	ldr	r3, [pc, #180]	; (80004f8 <MX_TIM2_Init+0xf8>)
 8000442:	2200      	movs	r2, #0
 8000444:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000446:	4b2c      	ldr	r3, [pc, #176]	; (80004f8 <MX_TIM2_Init+0xf8>)
 8000448:	2200      	movs	r2, #0
 800044a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800044c:	4b2a      	ldr	r3, [pc, #168]	; (80004f8 <MX_TIM2_Init+0xf8>)
 800044e:	0018      	movs	r0, r3
 8000450:	f002 fb2c 	bl	8002aac <HAL_TIM_PWM_Init>
 8000454:	1e03      	subs	r3, r0, #0
 8000456:	d001      	beq.n	800045c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000458:	f000 faa4 	bl	80009a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800045c:	2120      	movs	r1, #32
 800045e:	187b      	adds	r3, r7, r1
 8000460:	2200      	movs	r2, #0
 8000462:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000464:	187b      	adds	r3, r7, r1
 8000466:	2200      	movs	r2, #0
 8000468:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800046a:	187a      	adds	r2, r7, r1
 800046c:	4b22      	ldr	r3, [pc, #136]	; (80004f8 <MX_TIM2_Init+0xf8>)
 800046e:	0011      	movs	r1, r2
 8000470:	0018      	movs	r0, r3
 8000472:	f002 fe87 	bl	8003184 <HAL_TIMEx_MasterConfigSynchronization>
 8000476:	1e03      	subs	r3, r0, #0
 8000478:	d001      	beq.n	800047e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800047a:	f000 fa93 	bl	80009a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800047e:	1d3b      	adds	r3, r7, #4
 8000480:	2260      	movs	r2, #96	; 0x60
 8000482:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 375;
 8000484:	1d3b      	adds	r3, r7, #4
 8000486:	2278      	movs	r2, #120	; 0x78
 8000488:	32ff      	adds	r2, #255	; 0xff
 800048a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800048c:	1d3b      	adds	r3, r7, #4
 800048e:	2200      	movs	r2, #0
 8000490:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000492:	1d3b      	adds	r3, r7, #4
 8000494:	2200      	movs	r2, #0
 8000496:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000498:	1d39      	adds	r1, r7, #4
 800049a:	4b17      	ldr	r3, [pc, #92]	; (80004f8 <MX_TIM2_Init+0xf8>)
 800049c:	2200      	movs	r2, #0
 800049e:	0018      	movs	r0, r3
 80004a0:	f002 fb54 	bl	8002b4c <HAL_TIM_PWM_ConfigChannel>
 80004a4:	1e03      	subs	r3, r0, #0
 80004a6:	d001      	beq.n	80004ac <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 80004a8:	f000 fa7c 	bl	80009a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80004ac:	1d39      	adds	r1, r7, #4
 80004ae:	4b12      	ldr	r3, [pc, #72]	; (80004f8 <MX_TIM2_Init+0xf8>)
 80004b0:	2204      	movs	r2, #4
 80004b2:	0018      	movs	r0, r3
 80004b4:	f002 fb4a 	bl	8002b4c <HAL_TIM_PWM_ConfigChannel>
 80004b8:	1e03      	subs	r3, r0, #0
 80004ba:	d001      	beq.n	80004c0 <MX_TIM2_Init+0xc0>
  {
    Error_Handler();
 80004bc:	f000 fa72 	bl	80009a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80004c0:	1d39      	adds	r1, r7, #4
 80004c2:	4b0d      	ldr	r3, [pc, #52]	; (80004f8 <MX_TIM2_Init+0xf8>)
 80004c4:	2208      	movs	r2, #8
 80004c6:	0018      	movs	r0, r3
 80004c8:	f002 fb40 	bl	8002b4c <HAL_TIM_PWM_ConfigChannel>
 80004cc:	1e03      	subs	r3, r0, #0
 80004ce:	d001      	beq.n	80004d4 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 80004d0:	f000 fa68 	bl	80009a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80004d4:	1d39      	adds	r1, r7, #4
 80004d6:	4b08      	ldr	r3, [pc, #32]	; (80004f8 <MX_TIM2_Init+0xf8>)
 80004d8:	220c      	movs	r2, #12
 80004da:	0018      	movs	r0, r3
 80004dc:	f002 fb36 	bl	8002b4c <HAL_TIM_PWM_ConfigChannel>
 80004e0:	1e03      	subs	r3, r0, #0
 80004e2:	d001      	beq.n	80004e8 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 80004e4:	f000 fa5e 	bl	80009a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80004e8:	4b03      	ldr	r3, [pc, #12]	; (80004f8 <MX_TIM2_Init+0xf8>)
 80004ea:	0018      	movs	r0, r3
 80004ec:	f000 fb4c 	bl	8000b88 <HAL_TIM_MspPostInit>

}
 80004f0:	46c0      	nop			; (mov r8, r8)
 80004f2:	46bd      	mov	sp, r7
 80004f4:	b00a      	add	sp, #40	; 0x28
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	200000c8 	.word	0x200000c8

080004fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b08a      	sub	sp, #40	; 0x28
 8000500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000502:	2320      	movs	r3, #32
 8000504:	18fb      	adds	r3, r7, r3
 8000506:	0018      	movs	r0, r3
 8000508:	2308      	movs	r3, #8
 800050a:	001a      	movs	r2, r3
 800050c:	2100      	movs	r1, #0
 800050e:	f002 fe91 	bl	8003234 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000512:	1d3b      	adds	r3, r7, #4
 8000514:	0018      	movs	r0, r3
 8000516:	231c      	movs	r3, #28
 8000518:	001a      	movs	r2, r3
 800051a:	2100      	movs	r1, #0
 800051c:	f002 fe8a 	bl	8003234 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000520:	4b34      	ldr	r3, [pc, #208]	; (80005f4 <MX_TIM3_Init+0xf8>)
 8000522:	4a35      	ldr	r2, [pc, #212]	; (80005f8 <MX_TIM3_Init+0xfc>)
 8000524:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32-1;
 8000526:	4b33      	ldr	r3, [pc, #204]	; (80005f4 <MX_TIM3_Init+0xf8>)
 8000528:	221f      	movs	r2, #31
 800052a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800052c:	4b31      	ldr	r3, [pc, #196]	; (80005f4 <MX_TIM3_Init+0xf8>)
 800052e:	2200      	movs	r2, #0
 8000530:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500-1;
 8000532:	4b30      	ldr	r3, [pc, #192]	; (80005f4 <MX_TIM3_Init+0xf8>)
 8000534:	22f4      	movs	r2, #244	; 0xf4
 8000536:	32ff      	adds	r2, #255	; 0xff
 8000538:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800053a:	4b2e      	ldr	r3, [pc, #184]	; (80005f4 <MX_TIM3_Init+0xf8>)
 800053c:	2200      	movs	r2, #0
 800053e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000540:	4b2c      	ldr	r3, [pc, #176]	; (80005f4 <MX_TIM3_Init+0xf8>)
 8000542:	2200      	movs	r2, #0
 8000544:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000546:	4b2b      	ldr	r3, [pc, #172]	; (80005f4 <MX_TIM3_Init+0xf8>)
 8000548:	0018      	movs	r0, r3
 800054a:	f002 faaf 	bl	8002aac <HAL_TIM_PWM_Init>
 800054e:	1e03      	subs	r3, r0, #0
 8000550:	d001      	beq.n	8000556 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000552:	f000 fa27 	bl	80009a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000556:	2120      	movs	r1, #32
 8000558:	187b      	adds	r3, r7, r1
 800055a:	2200      	movs	r2, #0
 800055c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800055e:	187b      	adds	r3, r7, r1
 8000560:	2200      	movs	r2, #0
 8000562:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000564:	187a      	adds	r2, r7, r1
 8000566:	4b23      	ldr	r3, [pc, #140]	; (80005f4 <MX_TIM3_Init+0xf8>)
 8000568:	0011      	movs	r1, r2
 800056a:	0018      	movs	r0, r3
 800056c:	f002 fe0a 	bl	8003184 <HAL_TIMEx_MasterConfigSynchronization>
 8000570:	1e03      	subs	r3, r0, #0
 8000572:	d001      	beq.n	8000578 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000574:	f000 fa16 	bl	80009a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000578:	1d3b      	adds	r3, r7, #4
 800057a:	2260      	movs	r2, #96	; 0x60
 800057c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 375;
 800057e:	1d3b      	adds	r3, r7, #4
 8000580:	2278      	movs	r2, #120	; 0x78
 8000582:	32ff      	adds	r2, #255	; 0xff
 8000584:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000586:	1d3b      	adds	r3, r7, #4
 8000588:	2200      	movs	r2, #0
 800058a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800058c:	1d3b      	adds	r3, r7, #4
 800058e:	2200      	movs	r2, #0
 8000590:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000592:	1d39      	adds	r1, r7, #4
 8000594:	4b17      	ldr	r3, [pc, #92]	; (80005f4 <MX_TIM3_Init+0xf8>)
 8000596:	2200      	movs	r2, #0
 8000598:	0018      	movs	r0, r3
 800059a:	f002 fad7 	bl	8002b4c <HAL_TIM_PWM_ConfigChannel>
 800059e:	1e03      	subs	r3, r0, #0
 80005a0:	d001      	beq.n	80005a6 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 80005a2:	f000 f9ff 	bl	80009a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80005a6:	1d39      	adds	r1, r7, #4
 80005a8:	4b12      	ldr	r3, [pc, #72]	; (80005f4 <MX_TIM3_Init+0xf8>)
 80005aa:	2204      	movs	r2, #4
 80005ac:	0018      	movs	r0, r3
 80005ae:	f002 facd 	bl	8002b4c <HAL_TIM_PWM_ConfigChannel>
 80005b2:	1e03      	subs	r3, r0, #0
 80005b4:	d001      	beq.n	80005ba <MX_TIM3_Init+0xbe>
  {
    Error_Handler();
 80005b6:	f000 f9f5 	bl	80009a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80005ba:	1d39      	adds	r1, r7, #4
 80005bc:	4b0d      	ldr	r3, [pc, #52]	; (80005f4 <MX_TIM3_Init+0xf8>)
 80005be:	2208      	movs	r2, #8
 80005c0:	0018      	movs	r0, r3
 80005c2:	f002 fac3 	bl	8002b4c <HAL_TIM_PWM_ConfigChannel>
 80005c6:	1e03      	subs	r3, r0, #0
 80005c8:	d001      	beq.n	80005ce <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 80005ca:	f000 f9eb 	bl	80009a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80005ce:	1d39      	adds	r1, r7, #4
 80005d0:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <MX_TIM3_Init+0xf8>)
 80005d2:	220c      	movs	r2, #12
 80005d4:	0018      	movs	r0, r3
 80005d6:	f002 fab9 	bl	8002b4c <HAL_TIM_PWM_ConfigChannel>
 80005da:	1e03      	subs	r3, r0, #0
 80005dc:	d001      	beq.n	80005e2 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 80005de:	f000 f9e1 	bl	80009a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80005e2:	4b04      	ldr	r3, [pc, #16]	; (80005f4 <MX_TIM3_Init+0xf8>)
 80005e4:	0018      	movs	r0, r3
 80005e6:	f000 facf 	bl	8000b88 <HAL_TIM_MspPostInit>

}
 80005ea:	46c0      	nop			; (mov r8, r8)
 80005ec:	46bd      	mov	sp, r7
 80005ee:	b00a      	add	sp, #40	; 0x28
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	46c0      	nop			; (mov r8, r8)
 80005f4:	20000110 	.word	0x20000110
 80005f8:	40000400 	.word	0x40000400

080005fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005fc:	b590      	push	{r4, r7, lr}
 80005fe:	b089      	sub	sp, #36	; 0x24
 8000600:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000602:	240c      	movs	r4, #12
 8000604:	193b      	adds	r3, r7, r4
 8000606:	0018      	movs	r0, r3
 8000608:	2314      	movs	r3, #20
 800060a:	001a      	movs	r2, r3
 800060c:	2100      	movs	r1, #0
 800060e:	f002 fe11 	bl	8003234 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000612:	4b1e      	ldr	r3, [pc, #120]	; (800068c <MX_GPIO_Init+0x90>)
 8000614:	695a      	ldr	r2, [r3, #20]
 8000616:	4b1d      	ldr	r3, [pc, #116]	; (800068c <MX_GPIO_Init+0x90>)
 8000618:	2180      	movs	r1, #128	; 0x80
 800061a:	0289      	lsls	r1, r1, #10
 800061c:	430a      	orrs	r2, r1
 800061e:	615a      	str	r2, [r3, #20]
 8000620:	4b1a      	ldr	r3, [pc, #104]	; (800068c <MX_GPIO_Init+0x90>)
 8000622:	695a      	ldr	r2, [r3, #20]
 8000624:	2380      	movs	r3, #128	; 0x80
 8000626:	029b      	lsls	r3, r3, #10
 8000628:	4013      	ands	r3, r2
 800062a:	60bb      	str	r3, [r7, #8]
 800062c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800062e:	4b17      	ldr	r3, [pc, #92]	; (800068c <MX_GPIO_Init+0x90>)
 8000630:	695a      	ldr	r2, [r3, #20]
 8000632:	4b16      	ldr	r3, [pc, #88]	; (800068c <MX_GPIO_Init+0x90>)
 8000634:	2180      	movs	r1, #128	; 0x80
 8000636:	02c9      	lsls	r1, r1, #11
 8000638:	430a      	orrs	r2, r1
 800063a:	615a      	str	r2, [r3, #20]
 800063c:	4b13      	ldr	r3, [pc, #76]	; (800068c <MX_GPIO_Init+0x90>)
 800063e:	695a      	ldr	r2, [r3, #20]
 8000640:	2380      	movs	r3, #128	; 0x80
 8000642:	02db      	lsls	r3, r3, #11
 8000644:	4013      	ands	r3, r2
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800064a:	2380      	movs	r3, #128	; 0x80
 800064c:	0059      	lsls	r1, r3, #1
 800064e:	2390      	movs	r3, #144	; 0x90
 8000650:	05db      	lsls	r3, r3, #23
 8000652:	2200      	movs	r2, #0
 8000654:	0018      	movs	r0, r3
 8000656:	f000 ffe3 	bl	8001620 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800065a:	193b      	adds	r3, r7, r4
 800065c:	2280      	movs	r2, #128	; 0x80
 800065e:	0052      	lsls	r2, r2, #1
 8000660:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000662:	193b      	adds	r3, r7, r4
 8000664:	2201      	movs	r2, #1
 8000666:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000668:	193b      	adds	r3, r7, r4
 800066a:	2200      	movs	r2, #0
 800066c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066e:	193b      	adds	r3, r7, r4
 8000670:	2200      	movs	r2, #0
 8000672:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000674:	193a      	adds	r2, r7, r4
 8000676:	2390      	movs	r3, #144	; 0x90
 8000678:	05db      	lsls	r3, r3, #23
 800067a:	0011      	movs	r1, r2
 800067c:	0018      	movs	r0, r3
 800067e:	f000 fe67 	bl	8001350 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000682:	46c0      	nop			; (mov r8, r8)
 8000684:	46bd      	mov	sp, r7
 8000686:	b009      	add	sp, #36	; 0x24
 8000688:	bd90      	pop	{r4, r7, pc}
 800068a:	46c0      	nop			; (mov r8, r8)
 800068c:	40021000 	.word	0x40021000

08000690 <EnablePWMOutput>:

/* USER CODE BEGIN 4 */

void EnablePWMOutput(TIM_HandleTypeDef *_htim) {
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
	//  Set HAL Timer Channel Status
	TIM_CHANNEL_STATE_SET_ALL(_htim, HAL_TIM_CHANNEL_STATE_BUSY);
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	223e      	movs	r2, #62	; 0x3e
 800069c:	2102      	movs	r1, #2
 800069e:	5499      	strb	r1, [r3, r2]
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	223f      	movs	r2, #63	; 0x3f
 80006a4:	2102      	movs	r1, #2
 80006a6:	5499      	strb	r1, [r3, r2]
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	2240      	movs	r2, #64	; 0x40
 80006ac:	2102      	movs	r1, #2
 80006ae:	5499      	strb	r1, [r3, r2]
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	2241      	movs	r2, #65	; 0x41
 80006b4:	2102      	movs	r1, #2
 80006b6:	5499      	strb	r1, [r3, r2]

	//  Enable outputs for all 4 PWM Channels
	_htim->Instance->CCER |= (TIM_CCER_CC1E | TIM_CCER_CC2E | TIM_CCER_CC3E | TIM_CCER_CC4E);
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	6a1a      	ldr	r2, [r3, #32]
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4907      	ldr	r1, [pc, #28]	; (80006e0 <EnablePWMOutput+0x50>)
 80006c4:	430a      	orrs	r2, r1
 80006c6:	621a      	str	r2, [r3, #32]

	//  Enable Timer Counter
	_htim->Instance->CR1 |= TIM_CR1_CEN;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	681a      	ldr	r2, [r3, #0]
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	2101      	movs	r1, #1
 80006d4:	430a      	orrs	r2, r1
 80006d6:	601a      	str	r2, [r3, #0]
}
 80006d8:	46c0      	nop			; (mov r8, r8)
 80006da:	46bd      	mov	sp, r7
 80006dc:	b002      	add	sp, #8
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	00001111 	.word	0x00001111

080006e4 <CRC_compare>:

// Configure the CRC polynomial (e.g., CRC-CCITT)
// hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;

 uint8_t CRC_compare(struct tctp_message received_msg)
 {
 80006e4:	b590      	push	{r4, r7, lr}
 80006e6:	b095      	sub	sp, #84	; 0x54
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	003c      	movs	r4, r7
 80006ec:	6020      	str	r0, [r4, #0]
 80006ee:	6061      	str	r1, [r4, #4]
 80006f0:	60a2      	str	r2, [r4, #8]
 80006f2:	60e3      	str	r3, [r4, #12]
     //HAL_CRC_Reset(&hcrc);
     /* I think this will calculate the CRC of the message including the CRC in it, needs
      * to just be calculating on everything before the CRC. Does the -2 fix it? */
     //HAL_CRC_Accumulate(&hcrc, (uint32_t*)&received_msg, ((sizeof(received_msg) - 2) / 4));

     uint16_t received_crc = received_msg.crc;
 80006f4:	234a      	movs	r3, #74	; 0x4a
 80006f6:	18fa      	adds	r2, r7, r3
 80006f8:	003b      	movs	r3, r7
 80006fa:	7ad9      	ldrb	r1, [r3, #11]
 80006fc:	7b1b      	ldrb	r3, [r3, #12]
 80006fe:	021b      	lsls	r3, r3, #8
 8000700:	430b      	orrs	r3, r1
 8000702:	8013      	strh	r3, [r2, #0]
     //uint32_t calculated_crc = HAL_CRC_Calculate(&hcrc, (uint32_t*)&received_msg, sizeof(received_msg) - 2);

     uint32_t SPI_RX_Buffer_32[SPI_BUFFER_SIZE];

     int i;
     for (i=0;i<SPI_BUFFER_SIZE;i++) {
 8000704:	2300      	movs	r3, #0
 8000706:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000708:	e00c      	b.n	8000724 <CRC_compare+0x40>
   	  SPI_RX_Buffer_32[i] = (uint32_t) SPI_RX_Buffer[i];
 800070a:	4a14      	ldr	r2, [pc, #80]	; (800075c <CRC_compare+0x78>)
 800070c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800070e:	18d3      	adds	r3, r2, r3
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	0019      	movs	r1, r3
 8000714:	2310      	movs	r3, #16
 8000716:	18fb      	adds	r3, r7, r3
 8000718:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800071a:	0092      	lsls	r2, r2, #2
 800071c:	50d1      	str	r1, [r2, r3]
     for (i=0;i<SPI_BUFFER_SIZE;i++) {
 800071e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000720:	3301      	adds	r3, #1
 8000722:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000724:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000726:	2b0c      	cmp	r3, #12
 8000728:	ddef      	ble.n	800070a <CRC_compare+0x26>
     }

     uint32_t calculated_crc = HAL_CRC_Calculate(&hcrc, SPI_RX_Buffer_32, 11);
 800072a:	2310      	movs	r3, #16
 800072c:	18f9      	adds	r1, r7, r3
 800072e:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <CRC_compare+0x7c>)
 8000730:	220b      	movs	r2, #11
 8000732:	0018      	movs	r0, r3
 8000734:	f000 fcaf 	bl	8001096 <HAL_CRC_Calculate>
 8000738:	0003      	movs	r3, r0
 800073a:	647b      	str	r3, [r7, #68]	; 0x44
     calculated_crc = (uint16_t) calculated_crc;
 800073c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800073e:	b29b      	uxth	r3, r3
 8000740:	647b      	str	r3, [r7, #68]	; 0x44
     //uint32_t NEW_RX_Buffer[3];
     //NEW_RX_Buffer[0] = SPI_RX_Buffer[0] << |;
     //uint32_t calculated_crc = HAL_CRC_Calculate(&hcrc, SPI_RX_Buffer, 11);


     return received_crc == calculated_crc;
 8000742:	234a      	movs	r3, #74	; 0x4a
 8000744:	18fb      	adds	r3, r7, r3
 8000746:	881b      	ldrh	r3, [r3, #0]
 8000748:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800074a:	1ad3      	subs	r3, r2, r3
 800074c:	425a      	negs	r2, r3
 800074e:	4153      	adcs	r3, r2
 8000750:	b2db      	uxtb	r3, r3
 }
 8000752:	0018      	movs	r0, r3
 8000754:	46bd      	mov	sp, r7
 8000756:	b015      	add	sp, #84	; 0x54
 8000758:	bd90      	pop	{r4, r7, pc}
 800075a:	46c0      	nop			; (mov r8, r8)
 800075c:	20000000 	.word	0x20000000
 8000760:	20000048 	.word	0x20000048

08000764 <tctp_handler>:

uint8_t tctp_handler(struct tctp_message received, struct tctp_message_tx* send_me)
{
 8000764:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000766:	b089      	sub	sp, #36	; 0x24
 8000768:	af00      	add	r7, sp, #0
 800076a:	003c      	movs	r4, r7
 800076c:	6020      	str	r0, [r4, #0]
 800076e:	6061      	str	r1, [r4, #4]
 8000770:	60a2      	str	r2, [r4, #8]
 8000772:	60e3      	str	r3, [r4, #12]
    /* Once we recieve this we need to calculate its CRC to determine if it is valid */
    struct tctp_message message = {
 8000774:	2510      	movs	r5, #16
 8000776:	197b      	adds	r3, r7, r5
 8000778:	0018      	movs	r0, r3
 800077a:	230d      	movs	r3, #13
 800077c:	001a      	movs	r2, r3
 800077e:	2100      	movs	r1, #0
 8000780:	f002 fd58 	bl	8003234 <memset>
        .message_id = received.message_id,
 8000784:	003b      	movs	r3, r7
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	021b      	lsls	r3, r3, #8
 800078a:	0c1b      	lsrs	r3, r3, #16
 800078c:	b29a      	uxth	r2, r3
    struct tctp_message message = {
 800078e:	197b      	adds	r3, r7, r5
 8000790:	3301      	adds	r3, #1
 8000792:	21ff      	movs	r1, #255	; 0xff
 8000794:	4011      	ands	r1, r2
 8000796:	000c      	movs	r4, r1
 8000798:	7819      	ldrb	r1, [r3, #0]
 800079a:	2000      	movs	r0, #0
 800079c:	4001      	ands	r1, r0
 800079e:	1c08      	adds	r0, r1, #0
 80007a0:	1c21      	adds	r1, r4, #0
 80007a2:	4301      	orrs	r1, r0
 80007a4:	7019      	strb	r1, [r3, #0]
 80007a6:	0a12      	lsrs	r2, r2, #8
 80007a8:	b290      	uxth	r0, r2
 80007aa:	785a      	ldrb	r2, [r3, #1]
 80007ac:	2100      	movs	r1, #0
 80007ae:	400a      	ands	r2, r1
 80007b0:	1c11      	adds	r1, r2, #0
 80007b2:	1c02      	adds	r2, r0, #0
 80007b4:	430a      	orrs	r2, r1
 80007b6:	705a      	strb	r2, [r3, #1]
//            .padding = 0,
//        },
        .crc = 0, /* Placeholder, we may have hardware calculate this for us */
    };

    uint8_t message_correct = CRC_compare(received);
 80007b8:	261f      	movs	r6, #31
 80007ba:	19bc      	adds	r4, r7, r6
 80007bc:	003b      	movs	r3, r7
 80007be:	6818      	ldr	r0, [r3, #0]
 80007c0:	6859      	ldr	r1, [r3, #4]
 80007c2:	689a      	ldr	r2, [r3, #8]
 80007c4:	68db      	ldr	r3, [r3, #12]
 80007c6:	f7ff ff8d 	bl	80006e4 <CRC_compare>
 80007ca:	0003      	movs	r3, r0
 80007cc:	7023      	strb	r3, [r4, #0]
    // message_correct = (expected_msg_id == received.message_id);

    /* maybe add back error codes to say what is wrong with the message,
     * ex: CRC wrong, unmatching msg ids etc */

    if (message_correct) {
 80007ce:	19bb      	adds	r3, r7, r6
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d003      	beq.n	80007de <tctp_handler+0x7a>
        message.type = ACK;
 80007d6:	197b      	adds	r3, r7, r5
 80007d8:	2200      	movs	r2, #0
 80007da:	701a      	strb	r2, [r3, #0]
 80007dc:	e003      	b.n	80007e6 <tctp_handler+0x82>
    } else {
        message.type = NACK;
 80007de:	2310      	movs	r3, #16
 80007e0:	18fb      	adds	r3, r7, r3
 80007e2:	2201      	movs	r2, #1
 80007e4:	701a      	strb	r2, [r3, #0]
     * because of the transmit rate */

    /* Transmit response */
    //HAL_SPI_Transmit(&hspi1, (uint8_t*)&message, sizeof(message), 100);
    //*send_me = message;
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80007e6:	2380      	movs	r3, #128	; 0x80
 80007e8:	0059      	lsls	r1, r3, #1
 80007ea:	2390      	movs	r3, #144	; 0x90
 80007ec:	05db      	lsls	r3, r3, #23
 80007ee:	2201      	movs	r2, #1
 80007f0:	0018      	movs	r0, r3
 80007f2:	f000 ff15 	bl	8001620 <HAL_GPIO_WritePin>
    expected_msg_id++;
 80007f6:	4b06      	ldr	r3, [pc, #24]	; (8000810 <tctp_handler+0xac>)
 80007f8:	881b      	ldrh	r3, [r3, #0]
 80007fa:	3301      	adds	r3, #1
 80007fc:	b29a      	uxth	r2, r3
 80007fe:	4b04      	ldr	r3, [pc, #16]	; (8000810 <tctp_handler+0xac>)
 8000800:	801a      	strh	r2, [r3, #0]

    return message_correct;
 8000802:	231f      	movs	r3, #31
 8000804:	18fb      	adds	r3, r7, r3
 8000806:	781b      	ldrb	r3, [r3, #0]
}
 8000808:	0018      	movs	r0, r3
 800080a:	46bd      	mov	sp, r7
 800080c:	b009      	add	sp, #36	; 0x24
 800080e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000810:	20000158 	.word	0x20000158

08000814 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef * hspi)
{
 8000814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000816:	b08b      	sub	sp, #44	; 0x2c
 8000818:	af02      	add	r7, sp, #8
 800081a:	6078      	str	r0, [r7, #4]
    struct tctp_message* received_msg = (struct tctp_message*) SPI_RX_Buffer;
 800081c:	4b58      	ldr	r3, [pc, #352]	; (8000980 <HAL_SPI_TxRxCpltCallback+0x16c>)
 800081e:	61bb      	str	r3, [r7, #24]
    struct tctp_message_tx* send_me;
    uint8_t message_correct = tctp_handler(*received_msg, send_me);
 8000820:	2313      	movs	r3, #19
 8000822:	18fc      	adds	r4, r7, r3
 8000824:	69bb      	ldr	r3, [r7, #24]
 8000826:	697a      	ldr	r2, [r7, #20]
 8000828:	9200      	str	r2, [sp, #0]
 800082a:	781a      	ldrb	r2, [r3, #0]
 800082c:	7859      	ldrb	r1, [r3, #1]
 800082e:	0209      	lsls	r1, r1, #8
 8000830:	430a      	orrs	r2, r1
 8000832:	7899      	ldrb	r1, [r3, #2]
 8000834:	0409      	lsls	r1, r1, #16
 8000836:	430a      	orrs	r2, r1
 8000838:	78d9      	ldrb	r1, [r3, #3]
 800083a:	0609      	lsls	r1, r1, #24
 800083c:	430a      	orrs	r2, r1
 800083e:	0010      	movs	r0, r2
 8000840:	791a      	ldrb	r2, [r3, #4]
 8000842:	7959      	ldrb	r1, [r3, #5]
 8000844:	0209      	lsls	r1, r1, #8
 8000846:	430a      	orrs	r2, r1
 8000848:	7999      	ldrb	r1, [r3, #6]
 800084a:	0409      	lsls	r1, r1, #16
 800084c:	430a      	orrs	r2, r1
 800084e:	79d9      	ldrb	r1, [r3, #7]
 8000850:	0609      	lsls	r1, r1, #24
 8000852:	430a      	orrs	r2, r1
 8000854:	0016      	movs	r6, r2
 8000856:	7a1a      	ldrb	r2, [r3, #8]
 8000858:	7a59      	ldrb	r1, [r3, #9]
 800085a:	0209      	lsls	r1, r1, #8
 800085c:	430a      	orrs	r2, r1
 800085e:	7a99      	ldrb	r1, [r3, #10]
 8000860:	0409      	lsls	r1, r1, #16
 8000862:	430a      	orrs	r2, r1
 8000864:	7ad9      	ldrb	r1, [r3, #11]
 8000866:	0609      	lsls	r1, r1, #24
 8000868:	430a      	orrs	r2, r1
 800086a:	0015      	movs	r5, r2
 800086c:	7b1a      	ldrb	r2, [r3, #12]
 800086e:	2300      	movs	r3, #0
 8000870:	21ff      	movs	r1, #255	; 0xff
 8000872:	400a      	ands	r2, r1
 8000874:	21ff      	movs	r1, #255	; 0xff
 8000876:	438b      	bics	r3, r1
 8000878:	4313      	orrs	r3, r2
 800087a:	0031      	movs	r1, r6
 800087c:	002a      	movs	r2, r5
 800087e:	f7ff ff71 	bl	8000764 <tctp_handler>
 8000882:	0003      	movs	r3, r0
 8000884:	7023      	strb	r3, [r4, #0]
//    temp[10] = 0;
//    temp[11] = 0;
//    temp[12] = 0;
    int i;

    if (message_correct) {
 8000886:	2313      	movs	r3, #19
 8000888:	18fb      	adds	r3, r7, r3
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d003      	beq.n	8000898 <HAL_SPI_TxRxCpltCallback+0x84>
    	SPI_TX_Buffer[0] = ACK;
 8000890:	4b3c      	ldr	r3, [pc, #240]	; (8000984 <HAL_SPI_TxRxCpltCallback+0x170>)
 8000892:	2200      	movs	r2, #0
 8000894:	701a      	strb	r2, [r3, #0]
 8000896:	e002      	b.n	800089e <HAL_SPI_TxRxCpltCallback+0x8a>
    }
    else {
    	SPI_TX_Buffer[0] = NACK;
 8000898:	4b3a      	ldr	r3, [pc, #232]	; (8000984 <HAL_SPI_TxRxCpltCallback+0x170>)
 800089a:	2201      	movs	r2, #1
 800089c:	701a      	strb	r2, [r3, #0]
    }
	SPI_TX_Buffer[1] = SPI_RX_Buffer[1];
 800089e:	4b38      	ldr	r3, [pc, #224]	; (8000980 <HAL_SPI_TxRxCpltCallback+0x16c>)
 80008a0:	785a      	ldrb	r2, [r3, #1]
 80008a2:	4b38      	ldr	r3, [pc, #224]	; (8000984 <HAL_SPI_TxRxCpltCallback+0x170>)
 80008a4:	705a      	strb	r2, [r3, #1]
	SPI_TX_Buffer[2] = SPI_RX_Buffer[2];
 80008a6:	4b36      	ldr	r3, [pc, #216]	; (8000980 <HAL_SPI_TxRxCpltCallback+0x16c>)
 80008a8:	789a      	ldrb	r2, [r3, #2]
 80008aa:	4b36      	ldr	r3, [pc, #216]	; (8000984 <HAL_SPI_TxRxCpltCallback+0x170>)
 80008ac:	709a      	strb	r2, [r3, #2]
	SPI_TX_Buffer[3] = SPI_RX_Buffer[11];
 80008ae:	4b34      	ldr	r3, [pc, #208]	; (8000980 <HAL_SPI_TxRxCpltCallback+0x16c>)
 80008b0:	7ada      	ldrb	r2, [r3, #11]
 80008b2:	4b34      	ldr	r3, [pc, #208]	; (8000984 <HAL_SPI_TxRxCpltCallback+0x170>)
 80008b4:	70da      	strb	r2, [r3, #3]
	SPI_TX_Buffer[4] = SPI_RX_Buffer[12];
 80008b6:	4b32      	ldr	r3, [pc, #200]	; (8000980 <HAL_SPI_TxRxCpltCallback+0x16c>)
 80008b8:	7b1a      	ldrb	r2, [r3, #12]
 80008ba:	4b32      	ldr	r3, [pc, #200]	; (8000984 <HAL_SPI_TxRxCpltCallback+0x170>)
 80008bc:	711a      	strb	r2, [r3, #4]

	for (i=5;i<13;i++) {
 80008be:	2305      	movs	r3, #5
 80008c0:	61fb      	str	r3, [r7, #28]
 80008c2:	e007      	b.n	80008d4 <HAL_SPI_TxRxCpltCallback+0xc0>
		SPI_TX_Buffer[i] = 0;
 80008c4:	4a2f      	ldr	r2, [pc, #188]	; (8000984 <HAL_SPI_TxRxCpltCallback+0x170>)
 80008c6:	69fb      	ldr	r3, [r7, #28]
 80008c8:	18d3      	adds	r3, r2, r3
 80008ca:	2200      	movs	r2, #0
 80008cc:	701a      	strb	r2, [r3, #0]
	for (i=5;i<13;i++) {
 80008ce:	69fb      	ldr	r3, [r7, #28]
 80008d0:	3301      	adds	r3, #1
 80008d2:	61fb      	str	r3, [r7, #28]
 80008d4:	69fb      	ldr	r3, [r7, #28]
 80008d6:	2b0c      	cmp	r3, #12
 80008d8:	ddf4      	ble.n	80008c4 <HAL_SPI_TxRxCpltCallback+0xb0>
	SPI_TX_Buffer[11] = 0;
	SPI_TX_Buffer[12] = 0;
	*/


    HAL_SPI_TransmitReceive_IT(&hspi1, SPI_TX_Buffer, SPI_RX_Buffer, SPI_BUFFER_SIZE);
 80008da:	4a29      	ldr	r2, [pc, #164]	; (8000980 <HAL_SPI_TxRxCpltCallback+0x16c>)
 80008dc:	4929      	ldr	r1, [pc, #164]	; (8000984 <HAL_SPI_TxRxCpltCallback+0x170>)
 80008de:	482a      	ldr	r0, [pc, #168]	; (8000988 <HAL_SPI_TxRxCpltCallback+0x174>)
 80008e0:	230d      	movs	r3, #13
 80008e2:	f001 fc45 	bl	8002170 <HAL_SPI_TransmitReceive_IT>
    uint8_t received_payload[NUM_THRUSTERS];
    memcpy(received_payload, received_msg->data.full_thrust_values, NUM_THRUSTERS);
 80008e6:	69bb      	ldr	r3, [r7, #24]
 80008e8:	3303      	adds	r3, #3
 80008ea:	2408      	movs	r4, #8
 80008ec:	193a      	adds	r2, r7, r4
 80008ee:	0010      	movs	r0, r2
 80008f0:	0019      	movs	r1, r3
 80008f2:	2308      	movs	r3, #8
 80008f4:	001a      	movs	r2, r3
 80008f6:	f002 fcc9 	bl	800328c <memcpy>

    /* NOTE: Cannot do a guard clause here because this is an interrupt handler */
    /* Send data to PWMs */
    if (message_correct) {
 80008fa:	2313      	movs	r3, #19
 80008fc:	18fb      	adds	r3, r7, r3
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d038      	beq.n	8000976 <HAL_SPI_TxRxCpltCallback+0x162>
        htim3.Instance->CCR1 = (uint32_t) received_payload[0] + 250;
 8000904:	0021      	movs	r1, r4
 8000906:	187b      	adds	r3, r7, r1
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	001a      	movs	r2, r3
 800090c:	4b1f      	ldr	r3, [pc, #124]	; (800098c <HAL_SPI_TxRxCpltCallback+0x178>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	32fa      	adds	r2, #250	; 0xfa
 8000912:	635a      	str	r2, [r3, #52]	; 0x34
        htim3.Instance->CCR2 = (uint32_t) received_payload[1] + 250;
 8000914:	187b      	adds	r3, r7, r1
 8000916:	785b      	ldrb	r3, [r3, #1]
 8000918:	001a      	movs	r2, r3
 800091a:	4b1c      	ldr	r3, [pc, #112]	; (800098c <HAL_SPI_TxRxCpltCallback+0x178>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	32fa      	adds	r2, #250	; 0xfa
 8000920:	639a      	str	r2, [r3, #56]	; 0x38
        htim3.Instance->CCR3 = (uint32_t) received_payload[2] + 250;
 8000922:	187b      	adds	r3, r7, r1
 8000924:	789b      	ldrb	r3, [r3, #2]
 8000926:	001a      	movs	r2, r3
 8000928:	4b18      	ldr	r3, [pc, #96]	; (800098c <HAL_SPI_TxRxCpltCallback+0x178>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	32fa      	adds	r2, #250	; 0xfa
 800092e:	63da      	str	r2, [r3, #60]	; 0x3c
        htim3.Instance->CCR4 = (uint32_t) received_payload[3] + 250;
 8000930:	187b      	adds	r3, r7, r1
 8000932:	78db      	ldrb	r3, [r3, #3]
 8000934:	001a      	movs	r2, r3
 8000936:	4b15      	ldr	r3, [pc, #84]	; (800098c <HAL_SPI_TxRxCpltCallback+0x178>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	32fa      	adds	r2, #250	; 0xfa
 800093c:	641a      	str	r2, [r3, #64]	; 0x40

        htim2.Instance->CCR1 = (uint32_t) received_payload[4] + 250;
 800093e:	187b      	adds	r3, r7, r1
 8000940:	791b      	ldrb	r3, [r3, #4]
 8000942:	001a      	movs	r2, r3
 8000944:	4b12      	ldr	r3, [pc, #72]	; (8000990 <HAL_SPI_TxRxCpltCallback+0x17c>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	32fa      	adds	r2, #250	; 0xfa
 800094a:	635a      	str	r2, [r3, #52]	; 0x34
        htim2.Instance->CCR2 = (uint32_t) received_payload[5] + 250;
 800094c:	187b      	adds	r3, r7, r1
 800094e:	795b      	ldrb	r3, [r3, #5]
 8000950:	001a      	movs	r2, r3
 8000952:	4b0f      	ldr	r3, [pc, #60]	; (8000990 <HAL_SPI_TxRxCpltCallback+0x17c>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	32fa      	adds	r2, #250	; 0xfa
 8000958:	639a      	str	r2, [r3, #56]	; 0x38
        htim2.Instance->CCR3 = (uint32_t) received_payload[6] + 250;
 800095a:	187b      	adds	r3, r7, r1
 800095c:	799b      	ldrb	r3, [r3, #6]
 800095e:	001a      	movs	r2, r3
 8000960:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <HAL_SPI_TxRxCpltCallback+0x17c>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	32fa      	adds	r2, #250	; 0xfa
 8000966:	63da      	str	r2, [r3, #60]	; 0x3c
        htim2.Instance->CCR4 = (uint32_t) received_payload[7] + 250;
 8000968:	187b      	adds	r3, r7, r1
 800096a:	79db      	ldrb	r3, [r3, #7]
 800096c:	001a      	movs	r2, r3
 800096e:	4b08      	ldr	r3, [pc, #32]	; (8000990 <HAL_SPI_TxRxCpltCallback+0x17c>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	32fa      	adds	r2, #250	; 0xfa
 8000974:	641a      	str	r2, [r3, #64]	; 0x40
	//
	// htim2.Instance->CCR1 = (uint32_t) SPI_RX_Buffer[4] + 250;
	// htim2.Instance->CCR2 = (uint32_t) SPI_RX_Buffer[5] + 250;
	// htim2.Instance->CCR3 = (uint32_t) SPI_RX_Buffer[6] + 250;
	// htim2.Instance->CCR4 = (uint32_t) SPI_RX_Buffer[7] + 250;
}
 8000976:	46c0      	nop			; (mov r8, r8)
 8000978:	46bd      	mov	sp, r7
 800097a:	b009      	add	sp, #36	; 0x24
 800097c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800097e:	46c0      	nop			; (mov r8, r8)
 8000980:	20000000 	.word	0x20000000
 8000984:	20000010 	.word	0x20000010
 8000988:	20000064 	.word	0x20000064
 800098c:	20000110 	.word	0x20000110
 8000990:	200000c8 	.word	0x200000c8

08000994 <HAL_SPI_RxCpltCallback>:


void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef * hspi)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
	//
	// htim2.Instance->CCR1 = (uint32_t) SPI_RX_Buffer[4] + 250;
	// htim2.Instance->CCR2 = (uint32_t) SPI_RX_Buffer[5] + 250;
	// htim2.Instance->CCR3 = (uint32_t) SPI_RX_Buffer[6] + 250;
	// htim2.Instance->CCR4 = (uint32_t) SPI_RX_Buffer[7] + 250;
}
 800099c:	46c0      	nop			; (mov r8, r8)
 800099e:	46bd      	mov	sp, r7
 80009a0:	b002      	add	sp, #8
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80009a8:	46c0      	nop			; (mov r8, r8)
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
	...

080009b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b6:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <HAL_MspInit+0x44>)
 80009b8:	699a      	ldr	r2, [r3, #24]
 80009ba:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <HAL_MspInit+0x44>)
 80009bc:	2101      	movs	r1, #1
 80009be:	430a      	orrs	r2, r1
 80009c0:	619a      	str	r2, [r3, #24]
 80009c2:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <HAL_MspInit+0x44>)
 80009c4:	699b      	ldr	r3, [r3, #24]
 80009c6:	2201      	movs	r2, #1
 80009c8:	4013      	ands	r3, r2
 80009ca:	607b      	str	r3, [r7, #4]
 80009cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ce:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <HAL_MspInit+0x44>)
 80009d0:	69da      	ldr	r2, [r3, #28]
 80009d2:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <HAL_MspInit+0x44>)
 80009d4:	2180      	movs	r1, #128	; 0x80
 80009d6:	0549      	lsls	r1, r1, #21
 80009d8:	430a      	orrs	r2, r1
 80009da:	61da      	str	r2, [r3, #28]
 80009dc:	4b05      	ldr	r3, [pc, #20]	; (80009f4 <HAL_MspInit+0x44>)
 80009de:	69da      	ldr	r2, [r3, #28]
 80009e0:	2380      	movs	r3, #128	; 0x80
 80009e2:	055b      	lsls	r3, r3, #21
 80009e4:	4013      	ands	r3, r2
 80009e6:	603b      	str	r3, [r7, #0]
 80009e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ea:	46c0      	nop			; (mov r8, r8)
 80009ec:	46bd      	mov	sp, r7
 80009ee:	b002      	add	sp, #8
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	46c0      	nop			; (mov r8, r8)
 80009f4:	40021000 	.word	0x40021000

080009f8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a09      	ldr	r2, [pc, #36]	; (8000a2c <HAL_CRC_MspInit+0x34>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d10b      	bne.n	8000a22 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000a0a:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <HAL_CRC_MspInit+0x38>)
 8000a0c:	695a      	ldr	r2, [r3, #20]
 8000a0e:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <HAL_CRC_MspInit+0x38>)
 8000a10:	2140      	movs	r1, #64	; 0x40
 8000a12:	430a      	orrs	r2, r1
 8000a14:	615a      	str	r2, [r3, #20]
 8000a16:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <HAL_CRC_MspInit+0x38>)
 8000a18:	695b      	ldr	r3, [r3, #20]
 8000a1a:	2240      	movs	r2, #64	; 0x40
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000a22:	46c0      	nop			; (mov r8, r8)
 8000a24:	46bd      	mov	sp, r7
 8000a26:	b004      	add	sp, #16
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	46c0      	nop			; (mov r8, r8)
 8000a2c:	40023000 	.word	0x40023000
 8000a30:	40021000 	.word	0x40021000

08000a34 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a34:	b590      	push	{r4, r7, lr}
 8000a36:	b08b      	sub	sp, #44	; 0x2c
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3c:	2414      	movs	r4, #20
 8000a3e:	193b      	adds	r3, r7, r4
 8000a40:	0018      	movs	r0, r3
 8000a42:	2314      	movs	r3, #20
 8000a44:	001a      	movs	r2, r3
 8000a46:	2100      	movs	r1, #0
 8000a48:	f002 fbf4 	bl	8003234 <memset>
  if(hspi->Instance==SPI1)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a32      	ldr	r2, [pc, #200]	; (8000b1c <HAL_SPI_MspInit+0xe8>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d15d      	bne.n	8000b12 <HAL_SPI_MspInit+0xde>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a56:	4b32      	ldr	r3, [pc, #200]	; (8000b20 <HAL_SPI_MspInit+0xec>)
 8000a58:	699a      	ldr	r2, [r3, #24]
 8000a5a:	4b31      	ldr	r3, [pc, #196]	; (8000b20 <HAL_SPI_MspInit+0xec>)
 8000a5c:	2180      	movs	r1, #128	; 0x80
 8000a5e:	0149      	lsls	r1, r1, #5
 8000a60:	430a      	orrs	r2, r1
 8000a62:	619a      	str	r2, [r3, #24]
 8000a64:	4b2e      	ldr	r3, [pc, #184]	; (8000b20 <HAL_SPI_MspInit+0xec>)
 8000a66:	699a      	ldr	r2, [r3, #24]
 8000a68:	2380      	movs	r3, #128	; 0x80
 8000a6a:	015b      	lsls	r3, r3, #5
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	613b      	str	r3, [r7, #16]
 8000a70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a72:	4b2b      	ldr	r3, [pc, #172]	; (8000b20 <HAL_SPI_MspInit+0xec>)
 8000a74:	695a      	ldr	r2, [r3, #20]
 8000a76:	4b2a      	ldr	r3, [pc, #168]	; (8000b20 <HAL_SPI_MspInit+0xec>)
 8000a78:	2180      	movs	r1, #128	; 0x80
 8000a7a:	0289      	lsls	r1, r1, #10
 8000a7c:	430a      	orrs	r2, r1
 8000a7e:	615a      	str	r2, [r3, #20]
 8000a80:	4b27      	ldr	r3, [pc, #156]	; (8000b20 <HAL_SPI_MspInit+0xec>)
 8000a82:	695a      	ldr	r2, [r3, #20]
 8000a84:	2380      	movs	r3, #128	; 0x80
 8000a86:	029b      	lsls	r3, r3, #10
 8000a88:	4013      	ands	r3, r2
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8e:	4b24      	ldr	r3, [pc, #144]	; (8000b20 <HAL_SPI_MspInit+0xec>)
 8000a90:	695a      	ldr	r2, [r3, #20]
 8000a92:	4b23      	ldr	r3, [pc, #140]	; (8000b20 <HAL_SPI_MspInit+0xec>)
 8000a94:	2180      	movs	r1, #128	; 0x80
 8000a96:	02c9      	lsls	r1, r1, #11
 8000a98:	430a      	orrs	r2, r1
 8000a9a:	615a      	str	r2, [r3, #20]
 8000a9c:	4b20      	ldr	r3, [pc, #128]	; (8000b20 <HAL_SPI_MspInit+0xec>)
 8000a9e:	695a      	ldr	r2, [r3, #20]
 8000aa0:	2380      	movs	r3, #128	; 0x80
 8000aa2:	02db      	lsls	r3, r3, #11
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	60bb      	str	r3, [r7, #8]
 8000aa8:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000aaa:	193b      	adds	r3, r7, r4
 8000aac:	22a0      	movs	r2, #160	; 0xa0
 8000aae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab0:	193b      	adds	r3, r7, r4
 8000ab2:	2202      	movs	r2, #2
 8000ab4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	193b      	adds	r3, r7, r4
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000abc:	193b      	adds	r3, r7, r4
 8000abe:	2203      	movs	r2, #3
 8000ac0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000ac2:	193b      	adds	r3, r7, r4
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac8:	193a      	adds	r2, r7, r4
 8000aca:	2390      	movs	r3, #144	; 0x90
 8000acc:	05db      	lsls	r3, r3, #23
 8000ace:	0011      	movs	r1, r2
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	f000 fc3d 	bl	8001350 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ad6:	0021      	movs	r1, r4
 8000ad8:	187b      	adds	r3, r7, r1
 8000ada:	2210      	movs	r2, #16
 8000adc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ade:	187b      	adds	r3, r7, r1
 8000ae0:	2202      	movs	r2, #2
 8000ae2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	187b      	adds	r3, r7, r1
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000aea:	187b      	adds	r3, r7, r1
 8000aec:	2203      	movs	r2, #3
 8000aee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000af0:	187b      	adds	r3, r7, r1
 8000af2:	2200      	movs	r2, #0
 8000af4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af6:	187b      	adds	r3, r7, r1
 8000af8:	4a0a      	ldr	r2, [pc, #40]	; (8000b24 <HAL_SPI_MspInit+0xf0>)
 8000afa:	0019      	movs	r1, r3
 8000afc:	0010      	movs	r0, r2
 8000afe:	f000 fc27 	bl	8001350 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000b02:	2200      	movs	r2, #0
 8000b04:	2100      	movs	r1, #0
 8000b06:	2019      	movs	r0, #25
 8000b08:	f000 fa4c 	bl	8000fa4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000b0c:	2019      	movs	r0, #25
 8000b0e:	f000 fa5e 	bl	8000fce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b12:	46c0      	nop			; (mov r8, r8)
 8000b14:	46bd      	mov	sp, r7
 8000b16:	b00b      	add	sp, #44	; 0x2c
 8000b18:	bd90      	pop	{r4, r7, pc}
 8000b1a:	46c0      	nop			; (mov r8, r8)
 8000b1c:	40013000 	.word	0x40013000
 8000b20:	40021000 	.word	0x40021000
 8000b24:	48000400 	.word	0x48000400

08000b28 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	2380      	movs	r3, #128	; 0x80
 8000b36:	05db      	lsls	r3, r3, #23
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d10c      	bne.n	8000b56 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b3c:	4b10      	ldr	r3, [pc, #64]	; (8000b80 <HAL_TIM_PWM_MspInit+0x58>)
 8000b3e:	69da      	ldr	r2, [r3, #28]
 8000b40:	4b0f      	ldr	r3, [pc, #60]	; (8000b80 <HAL_TIM_PWM_MspInit+0x58>)
 8000b42:	2101      	movs	r1, #1
 8000b44:	430a      	orrs	r2, r1
 8000b46:	61da      	str	r2, [r3, #28]
 8000b48:	4b0d      	ldr	r3, [pc, #52]	; (8000b80 <HAL_TIM_PWM_MspInit+0x58>)
 8000b4a:	69db      	ldr	r3, [r3, #28]
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	4013      	ands	r3, r2
 8000b50:	60fb      	str	r3, [r7, #12]
 8000b52:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000b54:	e010      	b.n	8000b78 <HAL_TIM_PWM_MspInit+0x50>
  else if(htim_pwm->Instance==TIM3)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4a0a      	ldr	r2, [pc, #40]	; (8000b84 <HAL_TIM_PWM_MspInit+0x5c>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d10b      	bne.n	8000b78 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b60:	4b07      	ldr	r3, [pc, #28]	; (8000b80 <HAL_TIM_PWM_MspInit+0x58>)
 8000b62:	69da      	ldr	r2, [r3, #28]
 8000b64:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <HAL_TIM_PWM_MspInit+0x58>)
 8000b66:	2102      	movs	r1, #2
 8000b68:	430a      	orrs	r2, r1
 8000b6a:	61da      	str	r2, [r3, #28]
 8000b6c:	4b04      	ldr	r3, [pc, #16]	; (8000b80 <HAL_TIM_PWM_MspInit+0x58>)
 8000b6e:	69db      	ldr	r3, [r3, #28]
 8000b70:	2202      	movs	r2, #2
 8000b72:	4013      	ands	r3, r2
 8000b74:	60bb      	str	r3, [r7, #8]
 8000b76:	68bb      	ldr	r3, [r7, #8]
}
 8000b78:	46c0      	nop			; (mov r8, r8)
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	b004      	add	sp, #16
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	40021000 	.word	0x40021000
 8000b84:	40000400 	.word	0x40000400

08000b88 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b88:	b590      	push	{r4, r7, lr}
 8000b8a:	b08b      	sub	sp, #44	; 0x2c
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b90:	2414      	movs	r4, #20
 8000b92:	193b      	adds	r3, r7, r4
 8000b94:	0018      	movs	r0, r3
 8000b96:	2314      	movs	r3, #20
 8000b98:	001a      	movs	r2, r3
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	f002 fb4a 	bl	8003234 <memset>
  if(htim->Instance==TIM2)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	2380      	movs	r3, #128	; 0x80
 8000ba6:	05db      	lsls	r3, r3, #23
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	d125      	bne.n	8000bf8 <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bac:	4b3b      	ldr	r3, [pc, #236]	; (8000c9c <HAL_TIM_MspPostInit+0x114>)
 8000bae:	695a      	ldr	r2, [r3, #20]
 8000bb0:	4b3a      	ldr	r3, [pc, #232]	; (8000c9c <HAL_TIM_MspPostInit+0x114>)
 8000bb2:	2180      	movs	r1, #128	; 0x80
 8000bb4:	0289      	lsls	r1, r1, #10
 8000bb6:	430a      	orrs	r2, r1
 8000bb8:	615a      	str	r2, [r3, #20]
 8000bba:	4b38      	ldr	r3, [pc, #224]	; (8000c9c <HAL_TIM_MspPostInit+0x114>)
 8000bbc:	695a      	ldr	r2, [r3, #20]
 8000bbe:	2380      	movs	r3, #128	; 0x80
 8000bc0:	029b      	lsls	r3, r3, #10
 8000bc2:	4013      	ands	r3, r2
 8000bc4:	613b      	str	r3, [r7, #16]
 8000bc6:	693b      	ldr	r3, [r7, #16]
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000bc8:	0021      	movs	r1, r4
 8000bca:	187b      	adds	r3, r7, r1
 8000bcc:	220f      	movs	r2, #15
 8000bce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd0:	187b      	adds	r3, r7, r1
 8000bd2:	2202      	movs	r2, #2
 8000bd4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	187b      	adds	r3, r7, r1
 8000bd8:	2200      	movs	r2, #0
 8000bda:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bdc:	187b      	adds	r3, r7, r1
 8000bde:	2200      	movs	r2, #0
 8000be0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000be2:	187b      	adds	r3, r7, r1
 8000be4:	2202      	movs	r2, #2
 8000be6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be8:	187a      	adds	r2, r7, r1
 8000bea:	2390      	movs	r3, #144	; 0x90
 8000bec:	05db      	lsls	r3, r3, #23
 8000bee:	0011      	movs	r1, r2
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	f000 fbad 	bl	8001350 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000bf6:	e04d      	b.n	8000c94 <HAL_TIM_MspPostInit+0x10c>
  else if(htim->Instance==TIM3)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a28      	ldr	r2, [pc, #160]	; (8000ca0 <HAL_TIM_MspPostInit+0x118>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d148      	bne.n	8000c94 <HAL_TIM_MspPostInit+0x10c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c02:	4b26      	ldr	r3, [pc, #152]	; (8000c9c <HAL_TIM_MspPostInit+0x114>)
 8000c04:	695a      	ldr	r2, [r3, #20]
 8000c06:	4b25      	ldr	r3, [pc, #148]	; (8000c9c <HAL_TIM_MspPostInit+0x114>)
 8000c08:	2180      	movs	r1, #128	; 0x80
 8000c0a:	0289      	lsls	r1, r1, #10
 8000c0c:	430a      	orrs	r2, r1
 8000c0e:	615a      	str	r2, [r3, #20]
 8000c10:	4b22      	ldr	r3, [pc, #136]	; (8000c9c <HAL_TIM_MspPostInit+0x114>)
 8000c12:	695a      	ldr	r2, [r3, #20]
 8000c14:	2380      	movs	r3, #128	; 0x80
 8000c16:	029b      	lsls	r3, r3, #10
 8000c18:	4013      	ands	r3, r2
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c1e:	4b1f      	ldr	r3, [pc, #124]	; (8000c9c <HAL_TIM_MspPostInit+0x114>)
 8000c20:	695a      	ldr	r2, [r3, #20]
 8000c22:	4b1e      	ldr	r3, [pc, #120]	; (8000c9c <HAL_TIM_MspPostInit+0x114>)
 8000c24:	2180      	movs	r1, #128	; 0x80
 8000c26:	02c9      	lsls	r1, r1, #11
 8000c28:	430a      	orrs	r2, r1
 8000c2a:	615a      	str	r2, [r3, #20]
 8000c2c:	4b1b      	ldr	r3, [pc, #108]	; (8000c9c <HAL_TIM_MspPostInit+0x114>)
 8000c2e:	695a      	ldr	r2, [r3, #20]
 8000c30:	2380      	movs	r3, #128	; 0x80
 8000c32:	02db      	lsls	r3, r3, #11
 8000c34:	4013      	ands	r3, r2
 8000c36:	60bb      	str	r3, [r7, #8]
 8000c38:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c3a:	2414      	movs	r4, #20
 8000c3c:	193b      	adds	r3, r7, r4
 8000c3e:	2240      	movs	r2, #64	; 0x40
 8000c40:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c42:	193b      	adds	r3, r7, r4
 8000c44:	2202      	movs	r2, #2
 8000c46:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	193b      	adds	r3, r7, r4
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4e:	193b      	adds	r3, r7, r4
 8000c50:	2200      	movs	r2, #0
 8000c52:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000c54:	193b      	adds	r3, r7, r4
 8000c56:	2201      	movs	r2, #1
 8000c58:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5a:	193a      	adds	r2, r7, r4
 8000c5c:	2390      	movs	r3, #144	; 0x90
 8000c5e:	05db      	lsls	r3, r3, #23
 8000c60:	0011      	movs	r1, r2
 8000c62:	0018      	movs	r0, r3
 8000c64:	f000 fb74 	bl	8001350 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5;
 8000c68:	0021      	movs	r1, r4
 8000c6a:	187b      	adds	r3, r7, r1
 8000c6c:	2223      	movs	r2, #35	; 0x23
 8000c6e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c70:	187b      	adds	r3, r7, r1
 8000c72:	2202      	movs	r2, #2
 8000c74:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	187b      	adds	r3, r7, r1
 8000c78:	2200      	movs	r2, #0
 8000c7a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7c:	187b      	adds	r3, r7, r1
 8000c7e:	2200      	movs	r2, #0
 8000c80:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000c82:	187b      	adds	r3, r7, r1
 8000c84:	2201      	movs	r2, #1
 8000c86:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c88:	187b      	adds	r3, r7, r1
 8000c8a:	4a06      	ldr	r2, [pc, #24]	; (8000ca4 <HAL_TIM_MspPostInit+0x11c>)
 8000c8c:	0019      	movs	r1, r3
 8000c8e:	0010      	movs	r0, r2
 8000c90:	f000 fb5e 	bl	8001350 <HAL_GPIO_Init>
}
 8000c94:	46c0      	nop			; (mov r8, r8)
 8000c96:	46bd      	mov	sp, r7
 8000c98:	b00b      	add	sp, #44	; 0x2c
 8000c9a:	bd90      	pop	{r4, r7, pc}
 8000c9c:	40021000 	.word	0x40021000
 8000ca0:	40000400 	.word	0x40000400
 8000ca4:	48000400 	.word	0x48000400

08000ca8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000cac:	46c0      	nop			; (mov r8, r8)
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cb6:	e7fe      	b.n	8000cb6 <HardFault_Handler+0x4>

08000cb8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000cbc:	46c0      	nop			; (mov r8, r8)
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cc6:	46c0      	nop			; (mov r8, r8)
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd0:	f000 f8a0 	bl	8000e14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cd4:	46c0      	nop			; (mov r8, r8)
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
	...

08000cdc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000ce0:	4b03      	ldr	r3, [pc, #12]	; (8000cf0 <SPI1_IRQHandler+0x14>)
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	f001 fb0e 	bl	8002304 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000ce8:	46c0      	nop			; (mov r8, r8)
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	46c0      	nop			; (mov r8, r8)
 8000cf0:	20000064 	.word	0x20000064

08000cf4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000cf8:	46c0      	nop			; (mov r8, r8)
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
	...

08000d00 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d00:	4813      	ldr	r0, [pc, #76]	; (8000d50 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d02:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8000d04:	4813      	ldr	r0, [pc, #76]	; (8000d54 <LoopForever+0x6>)
    LDR R1, [R0]
 8000d06:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000d08:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000d0a:	4a13      	ldr	r2, [pc, #76]	; (8000d58 <LoopForever+0xa>)
    CMP R1, R2
 8000d0c:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000d0e:	d105      	bne.n	8000d1c <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000d10:	4812      	ldr	r0, [pc, #72]	; (8000d5c <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000d12:	4913      	ldr	r1, [pc, #76]	; (8000d60 <LoopForever+0x12>)
    STR R1, [R0]
 8000d14:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000d16:	4813      	ldr	r0, [pc, #76]	; (8000d64 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000d18:	4913      	ldr	r1, [pc, #76]	; (8000d68 <LoopForever+0x1a>)
    STR R1, [R0]
 8000d1a:	6001      	str	r1, [r0, #0]

08000d1c <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d1c:	4813      	ldr	r0, [pc, #76]	; (8000d6c <LoopForever+0x1e>)
  ldr r1, =_edata
 8000d1e:	4914      	ldr	r1, [pc, #80]	; (8000d70 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000d20:	4a14      	ldr	r2, [pc, #80]	; (8000d74 <LoopForever+0x26>)
  movs r3, #0
 8000d22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d24:	e002      	b.n	8000d2c <LoopCopyDataInit>

08000d26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d2a:	3304      	adds	r3, #4

08000d2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d30:	d3f9      	bcc.n	8000d26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d32:	4a11      	ldr	r2, [pc, #68]	; (8000d78 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000d34:	4c11      	ldr	r4, [pc, #68]	; (8000d7c <LoopForever+0x2e>)
  movs r3, #0
 8000d36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d38:	e001      	b.n	8000d3e <LoopFillZerobss>

08000d3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d3c:	3204      	adds	r2, #4

08000d3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d40:	d3fb      	bcc.n	8000d3a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000d42:	f7ff ffd7 	bl	8000cf4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000d46:	f002 fa7d 	bl	8003244 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d4a:	f7ff fa69 	bl	8000220 <main>

08000d4e <LoopForever>:

LoopForever:
    b LoopForever
 8000d4e:	e7fe      	b.n	8000d4e <LoopForever>
  ldr   r0, =_estack
 8000d50:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000d54:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000d58:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000d5c:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000d60:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000d64:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000d68:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000d6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d70:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8000d74:	080032f0 	.word	0x080032f0
  ldr r2, =_sbss
 8000d78:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8000d7c:	20000160 	.word	0x20000160

08000d80 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d80:	e7fe      	b.n	8000d80 <ADC1_IRQHandler>
	...

08000d84 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d88:	4b07      	ldr	r3, [pc, #28]	; (8000da8 <HAL_Init+0x24>)
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <HAL_Init+0x24>)
 8000d8e:	2110      	movs	r1, #16
 8000d90:	430a      	orrs	r2, r1
 8000d92:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000d94:	2003      	movs	r0, #3
 8000d96:	f000 f809 	bl	8000dac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d9a:	f7ff fe09 	bl	80009b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d9e:	2300      	movs	r3, #0
}
 8000da0:	0018      	movs	r0, r3
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	46c0      	nop			; (mov r8, r8)
 8000da8:	40022000 	.word	0x40022000

08000dac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dac:	b590      	push	{r4, r7, lr}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000db4:	4b14      	ldr	r3, [pc, #80]	; (8000e08 <HAL_InitTick+0x5c>)
 8000db6:	681c      	ldr	r4, [r3, #0]
 8000db8:	4b14      	ldr	r3, [pc, #80]	; (8000e0c <HAL_InitTick+0x60>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	0019      	movs	r1, r3
 8000dbe:	23fa      	movs	r3, #250	; 0xfa
 8000dc0:	0098      	lsls	r0, r3, #2
 8000dc2:	f7ff f9a1 	bl	8000108 <__udivsi3>
 8000dc6:	0003      	movs	r3, r0
 8000dc8:	0019      	movs	r1, r3
 8000dca:	0020      	movs	r0, r4
 8000dcc:	f7ff f99c 	bl	8000108 <__udivsi3>
 8000dd0:	0003      	movs	r3, r0
 8000dd2:	0018      	movs	r0, r3
 8000dd4:	f000 f90b 	bl	8000fee <HAL_SYSTICK_Config>
 8000dd8:	1e03      	subs	r3, r0, #0
 8000dda:	d001      	beq.n	8000de0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	e00f      	b.n	8000e00 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2b03      	cmp	r3, #3
 8000de4:	d80b      	bhi.n	8000dfe <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000de6:	6879      	ldr	r1, [r7, #4]
 8000de8:	2301      	movs	r3, #1
 8000dea:	425b      	negs	r3, r3
 8000dec:	2200      	movs	r2, #0
 8000dee:	0018      	movs	r0, r3
 8000df0:	f000 f8d8 	bl	8000fa4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000df4:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <HAL_InitTick+0x64>)
 8000df6:	687a      	ldr	r2, [r7, #4]
 8000df8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	e000      	b.n	8000e00 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
}
 8000e00:	0018      	movs	r0, r3
 8000e02:	46bd      	mov	sp, r7
 8000e04:	b003      	add	sp, #12
 8000e06:	bd90      	pop	{r4, r7, pc}
 8000e08:	20000020 	.word	0x20000020
 8000e0c:	20000028 	.word	0x20000028
 8000e10:	20000024 	.word	0x20000024

08000e14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e18:	4b05      	ldr	r3, [pc, #20]	; (8000e30 <HAL_IncTick+0x1c>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	001a      	movs	r2, r3
 8000e1e:	4b05      	ldr	r3, [pc, #20]	; (8000e34 <HAL_IncTick+0x20>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	18d2      	adds	r2, r2, r3
 8000e24:	4b03      	ldr	r3, [pc, #12]	; (8000e34 <HAL_IncTick+0x20>)
 8000e26:	601a      	str	r2, [r3, #0]
}
 8000e28:	46c0      	nop			; (mov r8, r8)
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	46c0      	nop			; (mov r8, r8)
 8000e30:	20000028 	.word	0x20000028
 8000e34:	2000015c 	.word	0x2000015c

08000e38 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e3c:	4b02      	ldr	r3, [pc, #8]	; (8000e48 <HAL_GetTick+0x10>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
}
 8000e40:	0018      	movs	r0, r3
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	46c0      	nop			; (mov r8, r8)
 8000e48:	2000015c 	.word	0x2000015c

08000e4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	0002      	movs	r2, r0
 8000e54:	1dfb      	adds	r3, r7, #7
 8000e56:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e58:	1dfb      	adds	r3, r7, #7
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	2b7f      	cmp	r3, #127	; 0x7f
 8000e5e:	d809      	bhi.n	8000e74 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e60:	1dfb      	adds	r3, r7, #7
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	001a      	movs	r2, r3
 8000e66:	231f      	movs	r3, #31
 8000e68:	401a      	ands	r2, r3
 8000e6a:	4b04      	ldr	r3, [pc, #16]	; (8000e7c <__NVIC_EnableIRQ+0x30>)
 8000e6c:	2101      	movs	r1, #1
 8000e6e:	4091      	lsls	r1, r2
 8000e70:	000a      	movs	r2, r1
 8000e72:	601a      	str	r2, [r3, #0]
  }
}
 8000e74:	46c0      	nop			; (mov r8, r8)
 8000e76:	46bd      	mov	sp, r7
 8000e78:	b002      	add	sp, #8
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	e000e100 	.word	0xe000e100

08000e80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e80:	b590      	push	{r4, r7, lr}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	0002      	movs	r2, r0
 8000e88:	6039      	str	r1, [r7, #0]
 8000e8a:	1dfb      	adds	r3, r7, #7
 8000e8c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e8e:	1dfb      	adds	r3, r7, #7
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	2b7f      	cmp	r3, #127	; 0x7f
 8000e94:	d828      	bhi.n	8000ee8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e96:	4a2f      	ldr	r2, [pc, #188]	; (8000f54 <__NVIC_SetPriority+0xd4>)
 8000e98:	1dfb      	adds	r3, r7, #7
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	b25b      	sxtb	r3, r3
 8000e9e:	089b      	lsrs	r3, r3, #2
 8000ea0:	33c0      	adds	r3, #192	; 0xc0
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	589b      	ldr	r3, [r3, r2]
 8000ea6:	1dfa      	adds	r2, r7, #7
 8000ea8:	7812      	ldrb	r2, [r2, #0]
 8000eaa:	0011      	movs	r1, r2
 8000eac:	2203      	movs	r2, #3
 8000eae:	400a      	ands	r2, r1
 8000eb0:	00d2      	lsls	r2, r2, #3
 8000eb2:	21ff      	movs	r1, #255	; 0xff
 8000eb4:	4091      	lsls	r1, r2
 8000eb6:	000a      	movs	r2, r1
 8000eb8:	43d2      	mvns	r2, r2
 8000eba:	401a      	ands	r2, r3
 8000ebc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	019b      	lsls	r3, r3, #6
 8000ec2:	22ff      	movs	r2, #255	; 0xff
 8000ec4:	401a      	ands	r2, r3
 8000ec6:	1dfb      	adds	r3, r7, #7
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	0018      	movs	r0, r3
 8000ecc:	2303      	movs	r3, #3
 8000ece:	4003      	ands	r3, r0
 8000ed0:	00db      	lsls	r3, r3, #3
 8000ed2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ed4:	481f      	ldr	r0, [pc, #124]	; (8000f54 <__NVIC_SetPriority+0xd4>)
 8000ed6:	1dfb      	adds	r3, r7, #7
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	b25b      	sxtb	r3, r3
 8000edc:	089b      	lsrs	r3, r3, #2
 8000ede:	430a      	orrs	r2, r1
 8000ee0:	33c0      	adds	r3, #192	; 0xc0
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000ee6:	e031      	b.n	8000f4c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ee8:	4a1b      	ldr	r2, [pc, #108]	; (8000f58 <__NVIC_SetPriority+0xd8>)
 8000eea:	1dfb      	adds	r3, r7, #7
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	0019      	movs	r1, r3
 8000ef0:	230f      	movs	r3, #15
 8000ef2:	400b      	ands	r3, r1
 8000ef4:	3b08      	subs	r3, #8
 8000ef6:	089b      	lsrs	r3, r3, #2
 8000ef8:	3306      	adds	r3, #6
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	18d3      	adds	r3, r2, r3
 8000efe:	3304      	adds	r3, #4
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	1dfa      	adds	r2, r7, #7
 8000f04:	7812      	ldrb	r2, [r2, #0]
 8000f06:	0011      	movs	r1, r2
 8000f08:	2203      	movs	r2, #3
 8000f0a:	400a      	ands	r2, r1
 8000f0c:	00d2      	lsls	r2, r2, #3
 8000f0e:	21ff      	movs	r1, #255	; 0xff
 8000f10:	4091      	lsls	r1, r2
 8000f12:	000a      	movs	r2, r1
 8000f14:	43d2      	mvns	r2, r2
 8000f16:	401a      	ands	r2, r3
 8000f18:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	019b      	lsls	r3, r3, #6
 8000f1e:	22ff      	movs	r2, #255	; 0xff
 8000f20:	401a      	ands	r2, r3
 8000f22:	1dfb      	adds	r3, r7, #7
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	0018      	movs	r0, r3
 8000f28:	2303      	movs	r3, #3
 8000f2a:	4003      	ands	r3, r0
 8000f2c:	00db      	lsls	r3, r3, #3
 8000f2e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f30:	4809      	ldr	r0, [pc, #36]	; (8000f58 <__NVIC_SetPriority+0xd8>)
 8000f32:	1dfb      	adds	r3, r7, #7
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	001c      	movs	r4, r3
 8000f38:	230f      	movs	r3, #15
 8000f3a:	4023      	ands	r3, r4
 8000f3c:	3b08      	subs	r3, #8
 8000f3e:	089b      	lsrs	r3, r3, #2
 8000f40:	430a      	orrs	r2, r1
 8000f42:	3306      	adds	r3, #6
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	18c3      	adds	r3, r0, r3
 8000f48:	3304      	adds	r3, #4
 8000f4a:	601a      	str	r2, [r3, #0]
}
 8000f4c:	46c0      	nop			; (mov r8, r8)
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	b003      	add	sp, #12
 8000f52:	bd90      	pop	{r4, r7, pc}
 8000f54:	e000e100 	.word	0xe000e100
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	1e5a      	subs	r2, r3, #1
 8000f68:	2380      	movs	r3, #128	; 0x80
 8000f6a:	045b      	lsls	r3, r3, #17
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d301      	bcc.n	8000f74 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f70:	2301      	movs	r3, #1
 8000f72:	e010      	b.n	8000f96 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f74:	4b0a      	ldr	r3, [pc, #40]	; (8000fa0 <SysTick_Config+0x44>)
 8000f76:	687a      	ldr	r2, [r7, #4]
 8000f78:	3a01      	subs	r2, #1
 8000f7a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	425b      	negs	r3, r3
 8000f80:	2103      	movs	r1, #3
 8000f82:	0018      	movs	r0, r3
 8000f84:	f7ff ff7c 	bl	8000e80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f88:	4b05      	ldr	r3, [pc, #20]	; (8000fa0 <SysTick_Config+0x44>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f8e:	4b04      	ldr	r3, [pc, #16]	; (8000fa0 <SysTick_Config+0x44>)
 8000f90:	2207      	movs	r2, #7
 8000f92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f94:	2300      	movs	r3, #0
}
 8000f96:	0018      	movs	r0, r3
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	b002      	add	sp, #8
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	46c0      	nop			; (mov r8, r8)
 8000fa0:	e000e010 	.word	0xe000e010

08000fa4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60b9      	str	r1, [r7, #8]
 8000fac:	607a      	str	r2, [r7, #4]
 8000fae:	210f      	movs	r1, #15
 8000fb0:	187b      	adds	r3, r7, r1
 8000fb2:	1c02      	adds	r2, r0, #0
 8000fb4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000fb6:	68ba      	ldr	r2, [r7, #8]
 8000fb8:	187b      	adds	r3, r7, r1
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	b25b      	sxtb	r3, r3
 8000fbe:	0011      	movs	r1, r2
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	f7ff ff5d 	bl	8000e80 <__NVIC_SetPriority>
}
 8000fc6:	46c0      	nop			; (mov r8, r8)
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	b004      	add	sp, #16
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b082      	sub	sp, #8
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	0002      	movs	r2, r0
 8000fd6:	1dfb      	adds	r3, r7, #7
 8000fd8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fda:	1dfb      	adds	r3, r7, #7
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	b25b      	sxtb	r3, r3
 8000fe0:	0018      	movs	r0, r3
 8000fe2:	f7ff ff33 	bl	8000e4c <__NVIC_EnableIRQ>
}
 8000fe6:	46c0      	nop			; (mov r8, r8)
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	b002      	add	sp, #8
 8000fec:	bd80      	pop	{r7, pc}

08000fee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b082      	sub	sp, #8
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	0018      	movs	r0, r3
 8000ffa:	f7ff ffaf 	bl	8000f5c <SysTick_Config>
 8000ffe:	0003      	movs	r3, r0
}
 8001000:	0018      	movs	r0, r3
 8001002:	46bd      	mov	sp, r7
 8001004:	b002      	add	sp, #8
 8001006:	bd80      	pop	{r7, pc}

08001008 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d101      	bne.n	800101a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	e039      	b.n	800108e <HAL_CRC_Init+0x86>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	7d5b      	ldrb	r3, [r3, #21]
 800101e:	b2db      	uxtb	r3, r3
 8001020:	2b00      	cmp	r3, #0
 8001022:	d106      	bne.n	8001032 <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2200      	movs	r2, #0
 8001028:	751a      	strb	r2, [r3, #20]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	0018      	movs	r0, r3
 800102e:	f7ff fce3 	bl	80009f8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2202      	movs	r2, #2
 8001036:	755a      	strb	r2, [r3, #21]
#endif /* CRC_POL_POL */

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	791b      	ldrb	r3, [r3, #4]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d105      	bne.n	800104c <HAL_CRC_Init+0x44>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2201      	movs	r2, #1
 8001046:	4252      	negs	r2, r2
 8001048:	611a      	str	r2, [r3, #16]
 800104a:	e004      	b.n	8001056 <HAL_CRC_Init+0x4e>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	687a      	ldr	r2, [r7, #4]
 8001052:	6892      	ldr	r2, [r2, #8]
 8001054:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	2260      	movs	r2, #96	; 0x60
 800105e:	4393      	bics	r3, r2
 8001060:	0019      	movs	r1, r3
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	68da      	ldr	r2, [r3, #12]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	430a      	orrs	r2, r1
 800106c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	2280      	movs	r2, #128	; 0x80
 8001076:	4393      	bics	r3, r2
 8001078:	0019      	movs	r1, r3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	691a      	ldr	r2, [r3, #16]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	430a      	orrs	r2, r1
 8001084:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2201      	movs	r2, #1
 800108a:	755a      	strb	r2, [r3, #21]

  /* Return function status */
  return HAL_OK;
 800108c:	2300      	movs	r3, #0
}
 800108e:	0018      	movs	r0, r3
 8001090:	46bd      	mov	sp, r7
 8001092:	b002      	add	sp, #8
 8001094:	bd80      	pop	{r7, pc}

08001096 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	b086      	sub	sp, #24
 800109a:	af00      	add	r7, sp, #0
 800109c:	60f8      	str	r0, [r7, #12]
 800109e:	60b9      	str	r1, [r7, #8]
 80010a0:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80010a2:	2300      	movs	r3, #0
 80010a4:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	2202      	movs	r2, #2
 80010aa:	755a      	strb	r2, [r3, #21]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	689a      	ldr	r2, [r3, #8]
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	2101      	movs	r1, #1
 80010b8:	430a      	orrs	r2, r1
 80010ba:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	2b03      	cmp	r3, #3
 80010c2:	d005      	beq.n	80010d0 <HAL_CRC_Calculate+0x3a>
 80010c4:	d82d      	bhi.n	8001122 <HAL_CRC_Calculate+0x8c>
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d019      	beq.n	80010fe <HAL_CRC_Calculate+0x68>
 80010ca:	2b02      	cmp	r3, #2
 80010cc:	d020      	beq.n	8001110 <HAL_CRC_Calculate+0x7a>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 80010ce:	e028      	b.n	8001122 <HAL_CRC_Calculate+0x8c>
      for (index = 0U; index < BufferLength; index++)
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]
 80010d4:	e00a      	b.n	80010ec <HAL_CRC_Calculate+0x56>
        hcrc->Instance->DR = pBuffer[index];
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	68ba      	ldr	r2, [r7, #8]
 80010dc:	18d2      	adds	r2, r2, r3
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	6812      	ldr	r2, [r2, #0]
 80010e4:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	3301      	adds	r3, #1
 80010ea:	617b      	str	r3, [r7, #20]
 80010ec:	697a      	ldr	r2, [r7, #20]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d3f0      	bcc.n	80010d6 <HAL_CRC_Calculate+0x40>
      temp = hcrc->Instance->DR;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	613b      	str	r3, [r7, #16]
      break;
 80010fc:	e012      	b.n	8001124 <HAL_CRC_Calculate+0x8e>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	68b9      	ldr	r1, [r7, #8]
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	0018      	movs	r0, r3
 8001106:	f000 f815 	bl	8001134 <CRC_Handle_8>
 800110a:	0003      	movs	r3, r0
 800110c:	613b      	str	r3, [r7, #16]
      break;
 800110e:	e009      	b.n	8001124 <HAL_CRC_Calculate+0x8e>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8001110:	687a      	ldr	r2, [r7, #4]
 8001112:	68b9      	ldr	r1, [r7, #8]
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	0018      	movs	r0, r3
 8001118:	f000 f89d 	bl	8001256 <CRC_Handle_16>
 800111c:	0003      	movs	r3, r0
 800111e:	613b      	str	r3, [r7, #16]
      break;
 8001120:	e000      	b.n	8001124 <HAL_CRC_Calculate+0x8e>
      break;
 8001122:	46c0      	nop			; (mov r8, r8)
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	2201      	movs	r2, #1
 8001128:	755a      	strb	r2, [r3, #21]

  /* Return the CRC computed value */
  return temp;
 800112a:	693b      	ldr	r3, [r7, #16]
}
 800112c:	0018      	movs	r0, r3
 800112e:	46bd      	mov	sp, r7
 8001130:	b006      	add	sp, #24
 8001132:	bd80      	pop	{r7, pc}

08001134 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b088      	sub	sp, #32
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8001140:	2300      	movs	r3, #0
 8001142:	61fb      	str	r3, [r7, #28]
 8001144:	e023      	b.n	800118e <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	68ba      	ldr	r2, [r7, #8]
 800114c:	18d3      	adds	r3, r2, r3
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	3301      	adds	r3, #1
 8001158:	68b9      	ldr	r1, [r7, #8]
 800115a:	18cb      	adds	r3, r1, r3
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001160:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	3302      	adds	r3, #2
 8001168:	68b9      	ldr	r1, [r7, #8]
 800116a:	18cb      	adds	r3, r1, r3
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8001170:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	3303      	adds	r3, #3
 8001178:	68b9      	ldr	r1, [r7, #8]
 800117a:	18cb      	adds	r3, r1, r3
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	0019      	movs	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8001184:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001186:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	3301      	adds	r3, #1
 800118c:	61fb      	str	r3, [r7, #28]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	089b      	lsrs	r3, r3, #2
 8001192:	69fa      	ldr	r2, [r7, #28]
 8001194:	429a      	cmp	r2, r3
 8001196:	d3d6      	bcc.n	8001146 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2203      	movs	r2, #3
 800119c:	4013      	ands	r3, r2
 800119e:	d053      	beq.n	8001248 <CRC_Handle_8+0x114>
  {
    if ((BufferLength % 4U) == 1U)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2203      	movs	r2, #3
 80011a4:	4013      	ands	r3, r2
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d107      	bne.n	80011ba <CRC_Handle_8+0x86>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	68ba      	ldr	r2, [r7, #8]
 80011b0:	18d2      	adds	r2, r2, r3
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	7812      	ldrb	r2, [r2, #0]
 80011b8:	701a      	strb	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 2U)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2203      	movs	r2, #3
 80011be:	4013      	ands	r3, r2
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	d119      	bne.n	80011f8 <CRC_Handle_8+0xc4>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	68ba      	ldr	r2, [r7, #8]
 80011ca:	18d3      	adds	r3, r2, r3
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	021b      	lsls	r3, r3, #8
 80011d0:	b21a      	sxth	r2, r3
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	3301      	adds	r3, #1
 80011d8:	68b9      	ldr	r1, [r7, #8]
 80011da:	18cb      	adds	r3, r1, r3
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	b21b      	sxth	r3, r3
 80011e0:	4313      	orrs	r3, r2
 80011e2:	b21a      	sxth	r2, r3
 80011e4:	211a      	movs	r1, #26
 80011e6:	187b      	adds	r3, r7, r1
 80011e8:	801a      	strh	r2, [r3, #0]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	187a      	adds	r2, r7, r1
 80011f4:	8812      	ldrh	r2, [r2, #0]
 80011f6:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2203      	movs	r2, #3
 80011fc:	4013      	ands	r3, r2
 80011fe:	2b03      	cmp	r3, #3
 8001200:	d122      	bne.n	8001248 <CRC_Handle_8+0x114>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	68ba      	ldr	r2, [r7, #8]
 8001208:	18d3      	adds	r3, r2, r3
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	021b      	lsls	r3, r3, #8
 800120e:	b21a      	sxth	r2, r3
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	3301      	adds	r3, #1
 8001216:	68b9      	ldr	r1, [r7, #8]
 8001218:	18cb      	adds	r3, r1, r3
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	b21b      	sxth	r3, r3
 800121e:	4313      	orrs	r3, r2
 8001220:	b21a      	sxth	r2, r3
 8001222:	211a      	movs	r1, #26
 8001224:	187b      	adds	r3, r7, r1
 8001226:	801a      	strh	r2, [r3, #0]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	187a      	adds	r2, r7, r1
 8001232:	8812      	ldrh	r2, [r2, #0]
 8001234:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	3302      	adds	r3, #2
 800123c:	68ba      	ldr	r2, [r7, #8]
 800123e:	18d2      	adds	r2, r2, r3
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	7812      	ldrb	r2, [r2, #0]
 8001246:	701a      	strb	r2, [r3, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	681b      	ldr	r3, [r3, #0]
}
 800124e:	0018      	movs	r0, r3
 8001250:	46bd      	mov	sp, r7
 8001252:	b008      	add	sp, #32
 8001254:	bd80      	pop	{r7, pc}

08001256 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b086      	sub	sp, #24
 800125a:	af00      	add	r7, sp, #0
 800125c:	60f8      	str	r0, [r7, #12]
 800125e:	60b9      	str	r1, [r7, #8]
 8001260:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8001262:	2300      	movs	r3, #0
 8001264:	617b      	str	r3, [r7, #20]
 8001266:	e013      	b.n	8001290 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	68ba      	ldr	r2, [r7, #8]
 800126e:	18d3      	adds	r3, r2, r3
 8001270:	881b      	ldrh	r3, [r3, #0]
 8001272:	041a      	lsls	r2, r3, #16
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	3302      	adds	r3, #2
 800127a:	68b9      	ldr	r1, [r7, #8]
 800127c:	18cb      	adds	r3, r1, r3
 800127e:	881b      	ldrh	r3, [r3, #0]
 8001280:	0019      	movs	r1, r3
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	430a      	orrs	r2, r1
 8001288:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	3301      	adds	r3, #1
 800128e:	617b      	str	r3, [r7, #20]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	085b      	lsrs	r3, r3, #1
 8001294:	697a      	ldr	r2, [r7, #20]
 8001296:	429a      	cmp	r2, r3
 8001298:	d3e6      	bcc.n	8001268 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2201      	movs	r2, #1
 800129e:	4013      	ands	r3, r2
 80012a0:	d009      	beq.n	80012b6 <CRC_Handle_16+0x60>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	68ba      	ldr	r2, [r7, #8]
 80012ae:	18d3      	adds	r3, r2, r3
 80012b0:	881a      	ldrh	r2, [r3, #0]
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	681b      	ldr	r3, [r3, #0]
}
 80012bc:	0018      	movs	r0, r3
 80012be:	46bd      	mov	sp, r7
 80012c0:	b006      	add	sp, #24
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012cc:	210f      	movs	r1, #15
 80012ce:	187b      	adds	r3, r7, r1
 80012d0:	2200      	movs	r2, #0
 80012d2:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2221      	movs	r2, #33	; 0x21
 80012d8:	5c9b      	ldrb	r3, [r3, r2]
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d006      	beq.n	80012ee <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2204      	movs	r2, #4
 80012e4:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 80012e6:	187b      	adds	r3, r7, r1
 80012e8:	2201      	movs	r2, #1
 80012ea:	701a      	strb	r2, [r3, #0]
 80012ec:	e028      	b.n	8001340 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	210e      	movs	r1, #14
 80012fa:	438a      	bics	r2, r1
 80012fc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2101      	movs	r1, #1
 800130a:	438a      	bics	r2, r1
 800130c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001316:	2101      	movs	r1, #1
 8001318:	4091      	lsls	r1, r2
 800131a:	000a      	movs	r2, r1
 800131c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2221      	movs	r2, #33	; 0x21
 8001322:	2101      	movs	r1, #1
 8001324:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2220      	movs	r2, #32
 800132a:	2100      	movs	r1, #0
 800132c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001332:	2b00      	cmp	r3, #0
 8001334:	d004      	beq.n	8001340 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	0010      	movs	r0, r2
 800133e:	4798      	blx	r3
    }
  }
  return status;
 8001340:	230f      	movs	r3, #15
 8001342:	18fb      	adds	r3, r7, r3
 8001344:	781b      	ldrb	r3, [r3, #0]
}
 8001346:	0018      	movs	r0, r3
 8001348:	46bd      	mov	sp, r7
 800134a:	b004      	add	sp, #16
 800134c:	bd80      	pop	{r7, pc}
	...

08001350 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b086      	sub	sp, #24
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800135a:	2300      	movs	r3, #0
 800135c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800135e:	e149      	b.n	80015f4 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2101      	movs	r1, #1
 8001366:	697a      	ldr	r2, [r7, #20]
 8001368:	4091      	lsls	r1, r2
 800136a:	000a      	movs	r2, r1
 800136c:	4013      	ands	r3, r2
 800136e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d100      	bne.n	8001378 <HAL_GPIO_Init+0x28>
 8001376:	e13a      	b.n	80015ee <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	2203      	movs	r2, #3
 800137e:	4013      	ands	r3, r2
 8001380:	2b01      	cmp	r3, #1
 8001382:	d005      	beq.n	8001390 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	2203      	movs	r2, #3
 800138a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800138c:	2b02      	cmp	r3, #2
 800138e:	d130      	bne.n	80013f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	2203      	movs	r2, #3
 800139c:	409a      	lsls	r2, r3
 800139e:	0013      	movs	r3, r2
 80013a0:	43da      	mvns	r2, r3
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	4013      	ands	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	68da      	ldr	r2, [r3, #12]
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	409a      	lsls	r2, r3
 80013b2:	0013      	movs	r3, r2
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	693a      	ldr	r2, [r7, #16]
 80013be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013c6:	2201      	movs	r2, #1
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	409a      	lsls	r2, r3
 80013cc:	0013      	movs	r3, r2
 80013ce:	43da      	mvns	r2, r3
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	4013      	ands	r3, r2
 80013d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	091b      	lsrs	r3, r3, #4
 80013dc:	2201      	movs	r2, #1
 80013de:	401a      	ands	r2, r3
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	409a      	lsls	r2, r3
 80013e4:	0013      	movs	r3, r2
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	2203      	movs	r2, #3
 80013f8:	4013      	ands	r3, r2
 80013fa:	2b03      	cmp	r3, #3
 80013fc:	d017      	beq.n	800142e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	68db      	ldr	r3, [r3, #12]
 8001402:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	2203      	movs	r2, #3
 800140a:	409a      	lsls	r2, r3
 800140c:	0013      	movs	r3, r2
 800140e:	43da      	mvns	r2, r3
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	4013      	ands	r3, r2
 8001414:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	689a      	ldr	r2, [r3, #8]
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	409a      	lsls	r2, r3
 8001420:	0013      	movs	r3, r2
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	4313      	orrs	r3, r2
 8001426:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	2203      	movs	r2, #3
 8001434:	4013      	ands	r3, r2
 8001436:	2b02      	cmp	r3, #2
 8001438:	d123      	bne.n	8001482 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	08da      	lsrs	r2, r3, #3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	3208      	adds	r2, #8
 8001442:	0092      	lsls	r2, r2, #2
 8001444:	58d3      	ldr	r3, [r2, r3]
 8001446:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	2207      	movs	r2, #7
 800144c:	4013      	ands	r3, r2
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	220f      	movs	r2, #15
 8001452:	409a      	lsls	r2, r3
 8001454:	0013      	movs	r3, r2
 8001456:	43da      	mvns	r2, r3
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	4013      	ands	r3, r2
 800145c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	691a      	ldr	r2, [r3, #16]
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	2107      	movs	r1, #7
 8001466:	400b      	ands	r3, r1
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	409a      	lsls	r2, r3
 800146c:	0013      	movs	r3, r2
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	4313      	orrs	r3, r2
 8001472:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	08da      	lsrs	r2, r3, #3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	3208      	adds	r2, #8
 800147c:	0092      	lsls	r2, r2, #2
 800147e:	6939      	ldr	r1, [r7, #16]
 8001480:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	2203      	movs	r2, #3
 800148e:	409a      	lsls	r2, r3
 8001490:	0013      	movs	r3, r2
 8001492:	43da      	mvns	r2, r3
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	4013      	ands	r3, r2
 8001498:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	2203      	movs	r2, #3
 80014a0:	401a      	ands	r2, r3
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	409a      	lsls	r2, r3
 80014a8:	0013      	movs	r3, r2
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685a      	ldr	r2, [r3, #4]
 80014ba:	23c0      	movs	r3, #192	; 0xc0
 80014bc:	029b      	lsls	r3, r3, #10
 80014be:	4013      	ands	r3, r2
 80014c0:	d100      	bne.n	80014c4 <HAL_GPIO_Init+0x174>
 80014c2:	e094      	b.n	80015ee <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014c4:	4b51      	ldr	r3, [pc, #324]	; (800160c <HAL_GPIO_Init+0x2bc>)
 80014c6:	699a      	ldr	r2, [r3, #24]
 80014c8:	4b50      	ldr	r3, [pc, #320]	; (800160c <HAL_GPIO_Init+0x2bc>)
 80014ca:	2101      	movs	r1, #1
 80014cc:	430a      	orrs	r2, r1
 80014ce:	619a      	str	r2, [r3, #24]
 80014d0:	4b4e      	ldr	r3, [pc, #312]	; (800160c <HAL_GPIO_Init+0x2bc>)
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	2201      	movs	r2, #1
 80014d6:	4013      	ands	r3, r2
 80014d8:	60bb      	str	r3, [r7, #8]
 80014da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014dc:	4a4c      	ldr	r2, [pc, #304]	; (8001610 <HAL_GPIO_Init+0x2c0>)
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	089b      	lsrs	r3, r3, #2
 80014e2:	3302      	adds	r3, #2
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	589b      	ldr	r3, [r3, r2]
 80014e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	2203      	movs	r2, #3
 80014ee:	4013      	ands	r3, r2
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	220f      	movs	r2, #15
 80014f4:	409a      	lsls	r2, r3
 80014f6:	0013      	movs	r3, r2
 80014f8:	43da      	mvns	r2, r3
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	4013      	ands	r3, r2
 80014fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	2390      	movs	r3, #144	; 0x90
 8001504:	05db      	lsls	r3, r3, #23
 8001506:	429a      	cmp	r2, r3
 8001508:	d00d      	beq.n	8001526 <HAL_GPIO_Init+0x1d6>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a41      	ldr	r2, [pc, #260]	; (8001614 <HAL_GPIO_Init+0x2c4>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d007      	beq.n	8001522 <HAL_GPIO_Init+0x1d2>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a40      	ldr	r2, [pc, #256]	; (8001618 <HAL_GPIO_Init+0x2c8>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d101      	bne.n	800151e <HAL_GPIO_Init+0x1ce>
 800151a:	2302      	movs	r3, #2
 800151c:	e004      	b.n	8001528 <HAL_GPIO_Init+0x1d8>
 800151e:	2305      	movs	r3, #5
 8001520:	e002      	b.n	8001528 <HAL_GPIO_Init+0x1d8>
 8001522:	2301      	movs	r3, #1
 8001524:	e000      	b.n	8001528 <HAL_GPIO_Init+0x1d8>
 8001526:	2300      	movs	r3, #0
 8001528:	697a      	ldr	r2, [r7, #20]
 800152a:	2103      	movs	r1, #3
 800152c:	400a      	ands	r2, r1
 800152e:	0092      	lsls	r2, r2, #2
 8001530:	4093      	lsls	r3, r2
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	4313      	orrs	r3, r2
 8001536:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001538:	4935      	ldr	r1, [pc, #212]	; (8001610 <HAL_GPIO_Init+0x2c0>)
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	089b      	lsrs	r3, r3, #2
 800153e:	3302      	adds	r3, #2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001546:	4b35      	ldr	r3, [pc, #212]	; (800161c <HAL_GPIO_Init+0x2cc>)
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	43da      	mvns	r2, r3
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	4013      	ands	r3, r2
 8001554:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685a      	ldr	r2, [r3, #4]
 800155a:	2380      	movs	r3, #128	; 0x80
 800155c:	035b      	lsls	r3, r3, #13
 800155e:	4013      	ands	r3, r2
 8001560:	d003      	beq.n	800156a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001562:	693a      	ldr	r2, [r7, #16]
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	4313      	orrs	r3, r2
 8001568:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800156a:	4b2c      	ldr	r3, [pc, #176]	; (800161c <HAL_GPIO_Init+0x2cc>)
 800156c:	693a      	ldr	r2, [r7, #16]
 800156e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001570:	4b2a      	ldr	r3, [pc, #168]	; (800161c <HAL_GPIO_Init+0x2cc>)
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	43da      	mvns	r2, r3
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	4013      	ands	r3, r2
 800157e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685a      	ldr	r2, [r3, #4]
 8001584:	2380      	movs	r3, #128	; 0x80
 8001586:	039b      	lsls	r3, r3, #14
 8001588:	4013      	ands	r3, r2
 800158a:	d003      	beq.n	8001594 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 800158c:	693a      	ldr	r2, [r7, #16]
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	4313      	orrs	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001594:	4b21      	ldr	r3, [pc, #132]	; (800161c <HAL_GPIO_Init+0x2cc>)
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800159a:	4b20      	ldr	r3, [pc, #128]	; (800161c <HAL_GPIO_Init+0x2cc>)
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	43da      	mvns	r2, r3
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	4013      	ands	r3, r2
 80015a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685a      	ldr	r2, [r3, #4]
 80015ae:	2380      	movs	r3, #128	; 0x80
 80015b0:	029b      	lsls	r3, r3, #10
 80015b2:	4013      	ands	r3, r2
 80015b4:	d003      	beq.n	80015be <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80015be:	4b17      	ldr	r3, [pc, #92]	; (800161c <HAL_GPIO_Init+0x2cc>)
 80015c0:	693a      	ldr	r2, [r7, #16]
 80015c2:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80015c4:	4b15      	ldr	r3, [pc, #84]	; (800161c <HAL_GPIO_Init+0x2cc>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	43da      	mvns	r2, r3
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	4013      	ands	r3, r2
 80015d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685a      	ldr	r2, [r3, #4]
 80015d8:	2380      	movs	r3, #128	; 0x80
 80015da:	025b      	lsls	r3, r3, #9
 80015dc:	4013      	ands	r3, r2
 80015de:	d003      	beq.n	80015e8 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 80015e0:	693a      	ldr	r2, [r7, #16]
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80015e8:	4b0c      	ldr	r3, [pc, #48]	; (800161c <HAL_GPIO_Init+0x2cc>)
 80015ea:	693a      	ldr	r2, [r7, #16]
 80015ec:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	3301      	adds	r3, #1
 80015f2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	40da      	lsrs	r2, r3
 80015fc:	1e13      	subs	r3, r2, #0
 80015fe:	d000      	beq.n	8001602 <HAL_GPIO_Init+0x2b2>
 8001600:	e6ae      	b.n	8001360 <HAL_GPIO_Init+0x10>
  } 
}
 8001602:	46c0      	nop			; (mov r8, r8)
 8001604:	46c0      	nop			; (mov r8, r8)
 8001606:	46bd      	mov	sp, r7
 8001608:	b006      	add	sp, #24
 800160a:	bd80      	pop	{r7, pc}
 800160c:	40021000 	.word	0x40021000
 8001610:	40010000 	.word	0x40010000
 8001614:	48000400 	.word	0x48000400
 8001618:	48000800 	.word	0x48000800
 800161c:	40010400 	.word	0x40010400

08001620 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	0008      	movs	r0, r1
 800162a:	0011      	movs	r1, r2
 800162c:	1cbb      	adds	r3, r7, #2
 800162e:	1c02      	adds	r2, r0, #0
 8001630:	801a      	strh	r2, [r3, #0]
 8001632:	1c7b      	adds	r3, r7, #1
 8001634:	1c0a      	adds	r2, r1, #0
 8001636:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001638:	1c7b      	adds	r3, r7, #1
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d004      	beq.n	800164a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001640:	1cbb      	adds	r3, r7, #2
 8001642:	881a      	ldrh	r2, [r3, #0]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001648:	e003      	b.n	8001652 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800164a:	1cbb      	adds	r3, r7, #2
 800164c:	881a      	ldrh	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001652:	46c0      	nop			; (mov r8, r8)
 8001654:	46bd      	mov	sp, r7
 8001656:	b002      	add	sp, #8
 8001658:	bd80      	pop	{r7, pc}
	...

0800165c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b088      	sub	sp, #32
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d102      	bne.n	8001670 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	f000 fb76 	bl	8001d5c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2201      	movs	r2, #1
 8001676:	4013      	ands	r3, r2
 8001678:	d100      	bne.n	800167c <HAL_RCC_OscConfig+0x20>
 800167a:	e08e      	b.n	800179a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800167c:	4bc5      	ldr	r3, [pc, #788]	; (8001994 <HAL_RCC_OscConfig+0x338>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	220c      	movs	r2, #12
 8001682:	4013      	ands	r3, r2
 8001684:	2b04      	cmp	r3, #4
 8001686:	d00e      	beq.n	80016a6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001688:	4bc2      	ldr	r3, [pc, #776]	; (8001994 <HAL_RCC_OscConfig+0x338>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	220c      	movs	r2, #12
 800168e:	4013      	ands	r3, r2
 8001690:	2b08      	cmp	r3, #8
 8001692:	d117      	bne.n	80016c4 <HAL_RCC_OscConfig+0x68>
 8001694:	4bbf      	ldr	r3, [pc, #764]	; (8001994 <HAL_RCC_OscConfig+0x338>)
 8001696:	685a      	ldr	r2, [r3, #4]
 8001698:	23c0      	movs	r3, #192	; 0xc0
 800169a:	025b      	lsls	r3, r3, #9
 800169c:	401a      	ands	r2, r3
 800169e:	2380      	movs	r3, #128	; 0x80
 80016a0:	025b      	lsls	r3, r3, #9
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d10e      	bne.n	80016c4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016a6:	4bbb      	ldr	r3, [pc, #748]	; (8001994 <HAL_RCC_OscConfig+0x338>)
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	2380      	movs	r3, #128	; 0x80
 80016ac:	029b      	lsls	r3, r3, #10
 80016ae:	4013      	ands	r3, r2
 80016b0:	d100      	bne.n	80016b4 <HAL_RCC_OscConfig+0x58>
 80016b2:	e071      	b.n	8001798 <HAL_RCC_OscConfig+0x13c>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d000      	beq.n	80016be <HAL_RCC_OscConfig+0x62>
 80016bc:	e06c      	b.n	8001798 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	f000 fb4c 	bl	8001d5c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d107      	bne.n	80016dc <HAL_RCC_OscConfig+0x80>
 80016cc:	4bb1      	ldr	r3, [pc, #708]	; (8001994 <HAL_RCC_OscConfig+0x338>)
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	4bb0      	ldr	r3, [pc, #704]	; (8001994 <HAL_RCC_OscConfig+0x338>)
 80016d2:	2180      	movs	r1, #128	; 0x80
 80016d4:	0249      	lsls	r1, r1, #9
 80016d6:	430a      	orrs	r2, r1
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	e02f      	b.n	800173c <HAL_RCC_OscConfig+0xe0>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d10c      	bne.n	80016fe <HAL_RCC_OscConfig+0xa2>
 80016e4:	4bab      	ldr	r3, [pc, #684]	; (8001994 <HAL_RCC_OscConfig+0x338>)
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	4baa      	ldr	r3, [pc, #680]	; (8001994 <HAL_RCC_OscConfig+0x338>)
 80016ea:	49ab      	ldr	r1, [pc, #684]	; (8001998 <HAL_RCC_OscConfig+0x33c>)
 80016ec:	400a      	ands	r2, r1
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	4ba8      	ldr	r3, [pc, #672]	; (8001994 <HAL_RCC_OscConfig+0x338>)
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	4ba7      	ldr	r3, [pc, #668]	; (8001994 <HAL_RCC_OscConfig+0x338>)
 80016f6:	49a9      	ldr	r1, [pc, #676]	; (800199c <HAL_RCC_OscConfig+0x340>)
 80016f8:	400a      	ands	r2, r1
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	e01e      	b.n	800173c <HAL_RCC_OscConfig+0xe0>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	2b05      	cmp	r3, #5
 8001704:	d10e      	bne.n	8001724 <HAL_RCC_OscConfig+0xc8>
 8001706:	4ba3      	ldr	r3, [pc, #652]	; (8001994 <HAL_RCC_OscConfig+0x338>)
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	4ba2      	ldr	r3, [pc, #648]	; (8001994 <HAL_RCC_OscConfig+0x338>)
 800170c:	2180      	movs	r1, #128	; 0x80
 800170e:	02c9      	lsls	r1, r1, #11
 8001710:	430a      	orrs	r2, r1
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	4b9f      	ldr	r3, [pc, #636]	; (8001994 <HAL_RCC_OscConfig+0x338>)
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	4b9e      	ldr	r3, [pc, #632]	; (8001994 <HAL_RCC_OscConfig+0x338>)
 800171a:	2180      	movs	r1, #128	; 0x80
 800171c:	0249      	lsls	r1, r1, #9
 800171e:	430a      	orrs	r2, r1
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	e00b      	b.n	800173c <HAL_RCC_OscConfig+0xe0>
 8001724:	4b9b      	ldr	r3, [pc, #620]	; (8001994 <HAL_RCC_OscConfig+0x338>)
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	4b9a      	ldr	r3, [pc, #616]	; (8001994 <HAL_RCC_OscConfig+0x338>)
 800172a:	499b      	ldr	r1, [pc, #620]	; (8001998 <HAL_RCC_OscConfig+0x33c>)
 800172c:	400a      	ands	r2, r1
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	4b98      	ldr	r3, [pc, #608]	; (8001994 <HAL_RCC_OscConfig+0x338>)
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	4b97      	ldr	r3, [pc, #604]	; (8001994 <HAL_RCC_OscConfig+0x338>)
 8001736:	4999      	ldr	r1, [pc, #612]	; (800199c <HAL_RCC_OscConfig+0x340>)
 8001738:	400a      	ands	r2, r1
 800173a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d014      	beq.n	800176e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001744:	f7ff fb78 	bl	8000e38 <HAL_GetTick>
 8001748:	0003      	movs	r3, r0
 800174a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800174c:	e008      	b.n	8001760 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800174e:	f7ff fb73 	bl	8000e38 <HAL_GetTick>
 8001752:	0002      	movs	r2, r0
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	2b64      	cmp	r3, #100	; 0x64
 800175a:	d901      	bls.n	8001760 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e2fd      	b.n	8001d5c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001760:	4b8c      	ldr	r3, [pc, #560]	; (8001994 <HAL_RCC_OscConfig+0x338>)
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	2380      	movs	r3, #128	; 0x80
 8001766:	029b      	lsls	r3, r3, #10
 8001768:	4013      	ands	r3, r2
 800176a:	d0f0      	beq.n	800174e <HAL_RCC_OscConfig+0xf2>
 800176c:	e015      	b.n	800179a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800176e:	f7ff fb63 	bl	8000e38 <HAL_GetTick>
 8001772:	0003      	movs	r3, r0
 8001774:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001776:	e008      	b.n	800178a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001778:	f7ff fb5e 	bl	8000e38 <HAL_GetTick>
 800177c:	0002      	movs	r2, r0
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b64      	cmp	r3, #100	; 0x64
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e2e8      	b.n	8001d5c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800178a:	4b82      	ldr	r3, [pc, #520]	; (8001994 <HAL_RCC_OscConfig+0x338>)
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	2380      	movs	r3, #128	; 0x80
 8001790:	029b      	lsls	r3, r3, #10
 8001792:	4013      	ands	r3, r2
 8001794:	d1f0      	bne.n	8001778 <HAL_RCC_OscConfig+0x11c>
 8001796:	e000      	b.n	800179a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001798:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2202      	movs	r2, #2
 80017a0:	4013      	ands	r3, r2
 80017a2:	d100      	bne.n	80017a6 <HAL_RCC_OscConfig+0x14a>
 80017a4:	e06c      	b.n	8001880 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80017a6:	4b7b      	ldr	r3, [pc, #492]	; (8001994 <HAL_RCC_OscConfig+0x338>)
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	220c      	movs	r2, #12
 80017ac:	4013      	ands	r3, r2
 80017ae:	d00e      	beq.n	80017ce <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80017b0:	4b78      	ldr	r3, [pc, #480]	; (8001994 <HAL_RCC_OscConfig+0x338>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	220c      	movs	r2, #12
 80017b6:	4013      	ands	r3, r2
 80017b8:	2b08      	cmp	r3, #8
 80017ba:	d11f      	bne.n	80017fc <HAL_RCC_OscConfig+0x1a0>
 80017bc:	4b75      	ldr	r3, [pc, #468]	; (8001994 <HAL_RCC_OscConfig+0x338>)
 80017be:	685a      	ldr	r2, [r3, #4]
 80017c0:	23c0      	movs	r3, #192	; 0xc0
 80017c2:	025b      	lsls	r3, r3, #9
 80017c4:	401a      	ands	r2, r3
 80017c6:	2380      	movs	r3, #128	; 0x80
 80017c8:	021b      	lsls	r3, r3, #8
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d116      	bne.n	80017fc <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ce:	4b71      	ldr	r3, [pc, #452]	; (8001994 <HAL_RCC_OscConfig+0x338>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2202      	movs	r2, #2
 80017d4:	4013      	ands	r3, r2
 80017d6:	d005      	beq.n	80017e4 <HAL_RCC_OscConfig+0x188>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d001      	beq.n	80017e4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e2bb      	b.n	8001d5c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017e4:	4b6b      	ldr	r3, [pc, #428]	; (8001994 <HAL_RCC_OscConfig+0x338>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	22f8      	movs	r2, #248	; 0xf8
 80017ea:	4393      	bics	r3, r2
 80017ec:	0019      	movs	r1, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	691b      	ldr	r3, [r3, #16]
 80017f2:	00da      	lsls	r2, r3, #3
 80017f4:	4b67      	ldr	r3, [pc, #412]	; (8001994 <HAL_RCC_OscConfig+0x338>)
 80017f6:	430a      	orrs	r2, r1
 80017f8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017fa:	e041      	b.n	8001880 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d024      	beq.n	800184e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001804:	4b63      	ldr	r3, [pc, #396]	; (8001994 <HAL_RCC_OscConfig+0x338>)
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	4b62      	ldr	r3, [pc, #392]	; (8001994 <HAL_RCC_OscConfig+0x338>)
 800180a:	2101      	movs	r1, #1
 800180c:	430a      	orrs	r2, r1
 800180e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001810:	f7ff fb12 	bl	8000e38 <HAL_GetTick>
 8001814:	0003      	movs	r3, r0
 8001816:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001818:	e008      	b.n	800182c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800181a:	f7ff fb0d 	bl	8000e38 <HAL_GetTick>
 800181e:	0002      	movs	r2, r0
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	2b02      	cmp	r3, #2
 8001826:	d901      	bls.n	800182c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001828:	2303      	movs	r3, #3
 800182a:	e297      	b.n	8001d5c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800182c:	4b59      	ldr	r3, [pc, #356]	; (8001994 <HAL_RCC_OscConfig+0x338>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2202      	movs	r2, #2
 8001832:	4013      	ands	r3, r2
 8001834:	d0f1      	beq.n	800181a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001836:	4b57      	ldr	r3, [pc, #348]	; (8001994 <HAL_RCC_OscConfig+0x338>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	22f8      	movs	r2, #248	; 0xf8
 800183c:	4393      	bics	r3, r2
 800183e:	0019      	movs	r1, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	691b      	ldr	r3, [r3, #16]
 8001844:	00da      	lsls	r2, r3, #3
 8001846:	4b53      	ldr	r3, [pc, #332]	; (8001994 <HAL_RCC_OscConfig+0x338>)
 8001848:	430a      	orrs	r2, r1
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	e018      	b.n	8001880 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800184e:	4b51      	ldr	r3, [pc, #324]	; (8001994 <HAL_RCC_OscConfig+0x338>)
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	4b50      	ldr	r3, [pc, #320]	; (8001994 <HAL_RCC_OscConfig+0x338>)
 8001854:	2101      	movs	r1, #1
 8001856:	438a      	bics	r2, r1
 8001858:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800185a:	f7ff faed 	bl	8000e38 <HAL_GetTick>
 800185e:	0003      	movs	r3, r0
 8001860:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001862:	e008      	b.n	8001876 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001864:	f7ff fae8 	bl	8000e38 <HAL_GetTick>
 8001868:	0002      	movs	r2, r0
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e272      	b.n	8001d5c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001876:	4b47      	ldr	r3, [pc, #284]	; (8001994 <HAL_RCC_OscConfig+0x338>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2202      	movs	r2, #2
 800187c:	4013      	ands	r3, r2
 800187e:	d1f1      	bne.n	8001864 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2208      	movs	r2, #8
 8001886:	4013      	ands	r3, r2
 8001888:	d036      	beq.n	80018f8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	69db      	ldr	r3, [r3, #28]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d019      	beq.n	80018c6 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001892:	4b40      	ldr	r3, [pc, #256]	; (8001994 <HAL_RCC_OscConfig+0x338>)
 8001894:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001896:	4b3f      	ldr	r3, [pc, #252]	; (8001994 <HAL_RCC_OscConfig+0x338>)
 8001898:	2101      	movs	r1, #1
 800189a:	430a      	orrs	r2, r1
 800189c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800189e:	f7ff facb 	bl	8000e38 <HAL_GetTick>
 80018a2:	0003      	movs	r3, r0
 80018a4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018a6:	e008      	b.n	80018ba <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018a8:	f7ff fac6 	bl	8000e38 <HAL_GetTick>
 80018ac:	0002      	movs	r2, r0
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e250      	b.n	8001d5c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ba:	4b36      	ldr	r3, [pc, #216]	; (8001994 <HAL_RCC_OscConfig+0x338>)
 80018bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018be:	2202      	movs	r2, #2
 80018c0:	4013      	ands	r3, r2
 80018c2:	d0f1      	beq.n	80018a8 <HAL_RCC_OscConfig+0x24c>
 80018c4:	e018      	b.n	80018f8 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018c6:	4b33      	ldr	r3, [pc, #204]	; (8001994 <HAL_RCC_OscConfig+0x338>)
 80018c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018ca:	4b32      	ldr	r3, [pc, #200]	; (8001994 <HAL_RCC_OscConfig+0x338>)
 80018cc:	2101      	movs	r1, #1
 80018ce:	438a      	bics	r2, r1
 80018d0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018d2:	f7ff fab1 	bl	8000e38 <HAL_GetTick>
 80018d6:	0003      	movs	r3, r0
 80018d8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018da:	e008      	b.n	80018ee <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018dc:	f7ff faac 	bl	8000e38 <HAL_GetTick>
 80018e0:	0002      	movs	r2, r0
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e236      	b.n	8001d5c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018ee:	4b29      	ldr	r3, [pc, #164]	; (8001994 <HAL_RCC_OscConfig+0x338>)
 80018f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f2:	2202      	movs	r2, #2
 80018f4:	4013      	ands	r3, r2
 80018f6:	d1f1      	bne.n	80018dc <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2204      	movs	r2, #4
 80018fe:	4013      	ands	r3, r2
 8001900:	d100      	bne.n	8001904 <HAL_RCC_OscConfig+0x2a8>
 8001902:	e0b5      	b.n	8001a70 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001904:	201f      	movs	r0, #31
 8001906:	183b      	adds	r3, r7, r0
 8001908:	2200      	movs	r2, #0
 800190a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800190c:	4b21      	ldr	r3, [pc, #132]	; (8001994 <HAL_RCC_OscConfig+0x338>)
 800190e:	69da      	ldr	r2, [r3, #28]
 8001910:	2380      	movs	r3, #128	; 0x80
 8001912:	055b      	lsls	r3, r3, #21
 8001914:	4013      	ands	r3, r2
 8001916:	d110      	bne.n	800193a <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001918:	4b1e      	ldr	r3, [pc, #120]	; (8001994 <HAL_RCC_OscConfig+0x338>)
 800191a:	69da      	ldr	r2, [r3, #28]
 800191c:	4b1d      	ldr	r3, [pc, #116]	; (8001994 <HAL_RCC_OscConfig+0x338>)
 800191e:	2180      	movs	r1, #128	; 0x80
 8001920:	0549      	lsls	r1, r1, #21
 8001922:	430a      	orrs	r2, r1
 8001924:	61da      	str	r2, [r3, #28]
 8001926:	4b1b      	ldr	r3, [pc, #108]	; (8001994 <HAL_RCC_OscConfig+0x338>)
 8001928:	69da      	ldr	r2, [r3, #28]
 800192a:	2380      	movs	r3, #128	; 0x80
 800192c:	055b      	lsls	r3, r3, #21
 800192e:	4013      	ands	r3, r2
 8001930:	60fb      	str	r3, [r7, #12]
 8001932:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001934:	183b      	adds	r3, r7, r0
 8001936:	2201      	movs	r2, #1
 8001938:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800193a:	4b19      	ldr	r3, [pc, #100]	; (80019a0 <HAL_RCC_OscConfig+0x344>)
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	2380      	movs	r3, #128	; 0x80
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	4013      	ands	r3, r2
 8001944:	d11a      	bne.n	800197c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001946:	4b16      	ldr	r3, [pc, #88]	; (80019a0 <HAL_RCC_OscConfig+0x344>)
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	4b15      	ldr	r3, [pc, #84]	; (80019a0 <HAL_RCC_OscConfig+0x344>)
 800194c:	2180      	movs	r1, #128	; 0x80
 800194e:	0049      	lsls	r1, r1, #1
 8001950:	430a      	orrs	r2, r1
 8001952:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001954:	f7ff fa70 	bl	8000e38 <HAL_GetTick>
 8001958:	0003      	movs	r3, r0
 800195a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800195c:	e008      	b.n	8001970 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800195e:	f7ff fa6b 	bl	8000e38 <HAL_GetTick>
 8001962:	0002      	movs	r2, r0
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	2b64      	cmp	r3, #100	; 0x64
 800196a:	d901      	bls.n	8001970 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e1f5      	b.n	8001d5c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001970:	4b0b      	ldr	r3, [pc, #44]	; (80019a0 <HAL_RCC_OscConfig+0x344>)
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	2380      	movs	r3, #128	; 0x80
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	4013      	ands	r3, r2
 800197a:	d0f0      	beq.n	800195e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d10f      	bne.n	80019a4 <HAL_RCC_OscConfig+0x348>
 8001984:	4b03      	ldr	r3, [pc, #12]	; (8001994 <HAL_RCC_OscConfig+0x338>)
 8001986:	6a1a      	ldr	r2, [r3, #32]
 8001988:	4b02      	ldr	r3, [pc, #8]	; (8001994 <HAL_RCC_OscConfig+0x338>)
 800198a:	2101      	movs	r1, #1
 800198c:	430a      	orrs	r2, r1
 800198e:	621a      	str	r2, [r3, #32]
 8001990:	e036      	b.n	8001a00 <HAL_RCC_OscConfig+0x3a4>
 8001992:	46c0      	nop			; (mov r8, r8)
 8001994:	40021000 	.word	0x40021000
 8001998:	fffeffff 	.word	0xfffeffff
 800199c:	fffbffff 	.word	0xfffbffff
 80019a0:	40007000 	.word	0x40007000
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d10c      	bne.n	80019c6 <HAL_RCC_OscConfig+0x36a>
 80019ac:	4bca      	ldr	r3, [pc, #808]	; (8001cd8 <HAL_RCC_OscConfig+0x67c>)
 80019ae:	6a1a      	ldr	r2, [r3, #32]
 80019b0:	4bc9      	ldr	r3, [pc, #804]	; (8001cd8 <HAL_RCC_OscConfig+0x67c>)
 80019b2:	2101      	movs	r1, #1
 80019b4:	438a      	bics	r2, r1
 80019b6:	621a      	str	r2, [r3, #32]
 80019b8:	4bc7      	ldr	r3, [pc, #796]	; (8001cd8 <HAL_RCC_OscConfig+0x67c>)
 80019ba:	6a1a      	ldr	r2, [r3, #32]
 80019bc:	4bc6      	ldr	r3, [pc, #792]	; (8001cd8 <HAL_RCC_OscConfig+0x67c>)
 80019be:	2104      	movs	r1, #4
 80019c0:	438a      	bics	r2, r1
 80019c2:	621a      	str	r2, [r3, #32]
 80019c4:	e01c      	b.n	8001a00 <HAL_RCC_OscConfig+0x3a4>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	2b05      	cmp	r3, #5
 80019cc:	d10c      	bne.n	80019e8 <HAL_RCC_OscConfig+0x38c>
 80019ce:	4bc2      	ldr	r3, [pc, #776]	; (8001cd8 <HAL_RCC_OscConfig+0x67c>)
 80019d0:	6a1a      	ldr	r2, [r3, #32]
 80019d2:	4bc1      	ldr	r3, [pc, #772]	; (8001cd8 <HAL_RCC_OscConfig+0x67c>)
 80019d4:	2104      	movs	r1, #4
 80019d6:	430a      	orrs	r2, r1
 80019d8:	621a      	str	r2, [r3, #32]
 80019da:	4bbf      	ldr	r3, [pc, #764]	; (8001cd8 <HAL_RCC_OscConfig+0x67c>)
 80019dc:	6a1a      	ldr	r2, [r3, #32]
 80019de:	4bbe      	ldr	r3, [pc, #760]	; (8001cd8 <HAL_RCC_OscConfig+0x67c>)
 80019e0:	2101      	movs	r1, #1
 80019e2:	430a      	orrs	r2, r1
 80019e4:	621a      	str	r2, [r3, #32]
 80019e6:	e00b      	b.n	8001a00 <HAL_RCC_OscConfig+0x3a4>
 80019e8:	4bbb      	ldr	r3, [pc, #748]	; (8001cd8 <HAL_RCC_OscConfig+0x67c>)
 80019ea:	6a1a      	ldr	r2, [r3, #32]
 80019ec:	4bba      	ldr	r3, [pc, #744]	; (8001cd8 <HAL_RCC_OscConfig+0x67c>)
 80019ee:	2101      	movs	r1, #1
 80019f0:	438a      	bics	r2, r1
 80019f2:	621a      	str	r2, [r3, #32]
 80019f4:	4bb8      	ldr	r3, [pc, #736]	; (8001cd8 <HAL_RCC_OscConfig+0x67c>)
 80019f6:	6a1a      	ldr	r2, [r3, #32]
 80019f8:	4bb7      	ldr	r3, [pc, #732]	; (8001cd8 <HAL_RCC_OscConfig+0x67c>)
 80019fa:	2104      	movs	r1, #4
 80019fc:	438a      	bics	r2, r1
 80019fe:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d014      	beq.n	8001a32 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a08:	f7ff fa16 	bl	8000e38 <HAL_GetTick>
 8001a0c:	0003      	movs	r3, r0
 8001a0e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a10:	e009      	b.n	8001a26 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a12:	f7ff fa11 	bl	8000e38 <HAL_GetTick>
 8001a16:	0002      	movs	r2, r0
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	4aaf      	ldr	r2, [pc, #700]	; (8001cdc <HAL_RCC_OscConfig+0x680>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e19a      	b.n	8001d5c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a26:	4bac      	ldr	r3, [pc, #688]	; (8001cd8 <HAL_RCC_OscConfig+0x67c>)
 8001a28:	6a1b      	ldr	r3, [r3, #32]
 8001a2a:	2202      	movs	r2, #2
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	d0f0      	beq.n	8001a12 <HAL_RCC_OscConfig+0x3b6>
 8001a30:	e013      	b.n	8001a5a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a32:	f7ff fa01 	bl	8000e38 <HAL_GetTick>
 8001a36:	0003      	movs	r3, r0
 8001a38:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a3a:	e009      	b.n	8001a50 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a3c:	f7ff f9fc 	bl	8000e38 <HAL_GetTick>
 8001a40:	0002      	movs	r2, r0
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	4aa5      	ldr	r2, [pc, #660]	; (8001cdc <HAL_RCC_OscConfig+0x680>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d901      	bls.n	8001a50 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e185      	b.n	8001d5c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a50:	4ba1      	ldr	r3, [pc, #644]	; (8001cd8 <HAL_RCC_OscConfig+0x67c>)
 8001a52:	6a1b      	ldr	r3, [r3, #32]
 8001a54:	2202      	movs	r2, #2
 8001a56:	4013      	ands	r3, r2
 8001a58:	d1f0      	bne.n	8001a3c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a5a:	231f      	movs	r3, #31
 8001a5c:	18fb      	adds	r3, r7, r3
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d105      	bne.n	8001a70 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a64:	4b9c      	ldr	r3, [pc, #624]	; (8001cd8 <HAL_RCC_OscConfig+0x67c>)
 8001a66:	69da      	ldr	r2, [r3, #28]
 8001a68:	4b9b      	ldr	r3, [pc, #620]	; (8001cd8 <HAL_RCC_OscConfig+0x67c>)
 8001a6a:	499d      	ldr	r1, [pc, #628]	; (8001ce0 <HAL_RCC_OscConfig+0x684>)
 8001a6c:	400a      	ands	r2, r1
 8001a6e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2210      	movs	r2, #16
 8001a76:	4013      	ands	r3, r2
 8001a78:	d063      	beq.n	8001b42 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	695b      	ldr	r3, [r3, #20]
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d12a      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001a82:	4b95      	ldr	r3, [pc, #596]	; (8001cd8 <HAL_RCC_OscConfig+0x67c>)
 8001a84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a86:	4b94      	ldr	r3, [pc, #592]	; (8001cd8 <HAL_RCC_OscConfig+0x67c>)
 8001a88:	2104      	movs	r1, #4
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001a8e:	4b92      	ldr	r3, [pc, #584]	; (8001cd8 <HAL_RCC_OscConfig+0x67c>)
 8001a90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a92:	4b91      	ldr	r3, [pc, #580]	; (8001cd8 <HAL_RCC_OscConfig+0x67c>)
 8001a94:	2101      	movs	r1, #1
 8001a96:	430a      	orrs	r2, r1
 8001a98:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a9a:	f7ff f9cd 	bl	8000e38 <HAL_GetTick>
 8001a9e:	0003      	movs	r3, r0
 8001aa0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001aa2:	e008      	b.n	8001ab6 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001aa4:	f7ff f9c8 	bl	8000e38 <HAL_GetTick>
 8001aa8:	0002      	movs	r2, r0
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e152      	b.n	8001d5c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001ab6:	4b88      	ldr	r3, [pc, #544]	; (8001cd8 <HAL_RCC_OscConfig+0x67c>)
 8001ab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aba:	2202      	movs	r2, #2
 8001abc:	4013      	ands	r3, r2
 8001abe:	d0f1      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001ac0:	4b85      	ldr	r3, [pc, #532]	; (8001cd8 <HAL_RCC_OscConfig+0x67c>)
 8001ac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ac4:	22f8      	movs	r2, #248	; 0xf8
 8001ac6:	4393      	bics	r3, r2
 8001ac8:	0019      	movs	r1, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	699b      	ldr	r3, [r3, #24]
 8001ace:	00da      	lsls	r2, r3, #3
 8001ad0:	4b81      	ldr	r3, [pc, #516]	; (8001cd8 <HAL_RCC_OscConfig+0x67c>)
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	635a      	str	r2, [r3, #52]	; 0x34
 8001ad6:	e034      	b.n	8001b42 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	695b      	ldr	r3, [r3, #20]
 8001adc:	3305      	adds	r3, #5
 8001ade:	d111      	bne.n	8001b04 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001ae0:	4b7d      	ldr	r3, [pc, #500]	; (8001cd8 <HAL_RCC_OscConfig+0x67c>)
 8001ae2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ae4:	4b7c      	ldr	r3, [pc, #496]	; (8001cd8 <HAL_RCC_OscConfig+0x67c>)
 8001ae6:	2104      	movs	r1, #4
 8001ae8:	438a      	bics	r2, r1
 8001aea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001aec:	4b7a      	ldr	r3, [pc, #488]	; (8001cd8 <HAL_RCC_OscConfig+0x67c>)
 8001aee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001af0:	22f8      	movs	r2, #248	; 0xf8
 8001af2:	4393      	bics	r3, r2
 8001af4:	0019      	movs	r1, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	00da      	lsls	r2, r3, #3
 8001afc:	4b76      	ldr	r3, [pc, #472]	; (8001cd8 <HAL_RCC_OscConfig+0x67c>)
 8001afe:	430a      	orrs	r2, r1
 8001b00:	635a      	str	r2, [r3, #52]	; 0x34
 8001b02:	e01e      	b.n	8001b42 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001b04:	4b74      	ldr	r3, [pc, #464]	; (8001cd8 <HAL_RCC_OscConfig+0x67c>)
 8001b06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b08:	4b73      	ldr	r3, [pc, #460]	; (8001cd8 <HAL_RCC_OscConfig+0x67c>)
 8001b0a:	2104      	movs	r1, #4
 8001b0c:	430a      	orrs	r2, r1
 8001b0e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001b10:	4b71      	ldr	r3, [pc, #452]	; (8001cd8 <HAL_RCC_OscConfig+0x67c>)
 8001b12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b14:	4b70      	ldr	r3, [pc, #448]	; (8001cd8 <HAL_RCC_OscConfig+0x67c>)
 8001b16:	2101      	movs	r1, #1
 8001b18:	438a      	bics	r2, r1
 8001b1a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b1c:	f7ff f98c 	bl	8000e38 <HAL_GetTick>
 8001b20:	0003      	movs	r3, r0
 8001b22:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001b24:	e008      	b.n	8001b38 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001b26:	f7ff f987 	bl	8000e38 <HAL_GetTick>
 8001b2a:	0002      	movs	r2, r0
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d901      	bls.n	8001b38 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e111      	b.n	8001d5c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001b38:	4b67      	ldr	r3, [pc, #412]	; (8001cd8 <HAL_RCC_OscConfig+0x67c>)
 8001b3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b3c:	2202      	movs	r2, #2
 8001b3e:	4013      	ands	r3, r2
 8001b40:	d1f1      	bne.n	8001b26 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2220      	movs	r2, #32
 8001b48:	4013      	ands	r3, r2
 8001b4a:	d05c      	beq.n	8001c06 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001b4c:	4b62      	ldr	r3, [pc, #392]	; (8001cd8 <HAL_RCC_OscConfig+0x67c>)
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	220c      	movs	r2, #12
 8001b52:	4013      	ands	r3, r2
 8001b54:	2b0c      	cmp	r3, #12
 8001b56:	d00e      	beq.n	8001b76 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001b58:	4b5f      	ldr	r3, [pc, #380]	; (8001cd8 <HAL_RCC_OscConfig+0x67c>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	220c      	movs	r2, #12
 8001b5e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001b60:	2b08      	cmp	r3, #8
 8001b62:	d114      	bne.n	8001b8e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001b64:	4b5c      	ldr	r3, [pc, #368]	; (8001cd8 <HAL_RCC_OscConfig+0x67c>)
 8001b66:	685a      	ldr	r2, [r3, #4]
 8001b68:	23c0      	movs	r3, #192	; 0xc0
 8001b6a:	025b      	lsls	r3, r3, #9
 8001b6c:	401a      	ands	r2, r3
 8001b6e:	23c0      	movs	r3, #192	; 0xc0
 8001b70:	025b      	lsls	r3, r3, #9
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d10b      	bne.n	8001b8e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001b76:	4b58      	ldr	r3, [pc, #352]	; (8001cd8 <HAL_RCC_OscConfig+0x67c>)
 8001b78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b7a:	2380      	movs	r3, #128	; 0x80
 8001b7c:	029b      	lsls	r3, r3, #10
 8001b7e:	4013      	ands	r3, r2
 8001b80:	d040      	beq.n	8001c04 <HAL_RCC_OscConfig+0x5a8>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6a1b      	ldr	r3, [r3, #32]
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d03c      	beq.n	8001c04 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e0e6      	b.n	8001d5c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6a1b      	ldr	r3, [r3, #32]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d01b      	beq.n	8001bce <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001b96:	4b50      	ldr	r3, [pc, #320]	; (8001cd8 <HAL_RCC_OscConfig+0x67c>)
 8001b98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b9a:	4b4f      	ldr	r3, [pc, #316]	; (8001cd8 <HAL_RCC_OscConfig+0x67c>)
 8001b9c:	2180      	movs	r1, #128	; 0x80
 8001b9e:	0249      	lsls	r1, r1, #9
 8001ba0:	430a      	orrs	r2, r1
 8001ba2:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba4:	f7ff f948 	bl	8000e38 <HAL_GetTick>
 8001ba8:	0003      	movs	r3, r0
 8001baa:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001bac:	e008      	b.n	8001bc0 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bae:	f7ff f943 	bl	8000e38 <HAL_GetTick>
 8001bb2:	0002      	movs	r2, r0
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d901      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e0cd      	b.n	8001d5c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001bc0:	4b45      	ldr	r3, [pc, #276]	; (8001cd8 <HAL_RCC_OscConfig+0x67c>)
 8001bc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bc4:	2380      	movs	r3, #128	; 0x80
 8001bc6:	029b      	lsls	r3, r3, #10
 8001bc8:	4013      	ands	r3, r2
 8001bca:	d0f0      	beq.n	8001bae <HAL_RCC_OscConfig+0x552>
 8001bcc:	e01b      	b.n	8001c06 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001bce:	4b42      	ldr	r3, [pc, #264]	; (8001cd8 <HAL_RCC_OscConfig+0x67c>)
 8001bd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bd2:	4b41      	ldr	r3, [pc, #260]	; (8001cd8 <HAL_RCC_OscConfig+0x67c>)
 8001bd4:	4943      	ldr	r1, [pc, #268]	; (8001ce4 <HAL_RCC_OscConfig+0x688>)
 8001bd6:	400a      	ands	r2, r1
 8001bd8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bda:	f7ff f92d 	bl	8000e38 <HAL_GetTick>
 8001bde:	0003      	movs	r3, r0
 8001be0:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001be2:	e008      	b.n	8001bf6 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001be4:	f7ff f928 	bl	8000e38 <HAL_GetTick>
 8001be8:	0002      	movs	r2, r0
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e0b2      	b.n	8001d5c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001bf6:	4b38      	ldr	r3, [pc, #224]	; (8001cd8 <HAL_RCC_OscConfig+0x67c>)
 8001bf8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bfa:	2380      	movs	r3, #128	; 0x80
 8001bfc:	029b      	lsls	r3, r3, #10
 8001bfe:	4013      	ands	r3, r2
 8001c00:	d1f0      	bne.n	8001be4 <HAL_RCC_OscConfig+0x588>
 8001c02:	e000      	b.n	8001c06 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001c04:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d100      	bne.n	8001c10 <HAL_RCC_OscConfig+0x5b4>
 8001c0e:	e0a4      	b.n	8001d5a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c10:	4b31      	ldr	r3, [pc, #196]	; (8001cd8 <HAL_RCC_OscConfig+0x67c>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	220c      	movs	r2, #12
 8001c16:	4013      	ands	r3, r2
 8001c18:	2b08      	cmp	r3, #8
 8001c1a:	d100      	bne.n	8001c1e <HAL_RCC_OscConfig+0x5c2>
 8001c1c:	e078      	b.n	8001d10 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d14c      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c26:	4b2c      	ldr	r3, [pc, #176]	; (8001cd8 <HAL_RCC_OscConfig+0x67c>)
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	4b2b      	ldr	r3, [pc, #172]	; (8001cd8 <HAL_RCC_OscConfig+0x67c>)
 8001c2c:	492e      	ldr	r1, [pc, #184]	; (8001ce8 <HAL_RCC_OscConfig+0x68c>)
 8001c2e:	400a      	ands	r2, r1
 8001c30:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c32:	f7ff f901 	bl	8000e38 <HAL_GetTick>
 8001c36:	0003      	movs	r3, r0
 8001c38:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c3c:	f7ff f8fc 	bl	8000e38 <HAL_GetTick>
 8001c40:	0002      	movs	r2, r0
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e086      	b.n	8001d5c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c4e:	4b22      	ldr	r3, [pc, #136]	; (8001cd8 <HAL_RCC_OscConfig+0x67c>)
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	2380      	movs	r3, #128	; 0x80
 8001c54:	049b      	lsls	r3, r3, #18
 8001c56:	4013      	ands	r3, r2
 8001c58:	d1f0      	bne.n	8001c3c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c5a:	4b1f      	ldr	r3, [pc, #124]	; (8001cd8 <HAL_RCC_OscConfig+0x67c>)
 8001c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c5e:	220f      	movs	r2, #15
 8001c60:	4393      	bics	r3, r2
 8001c62:	0019      	movs	r1, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c68:	4b1b      	ldr	r3, [pc, #108]	; (8001cd8 <HAL_RCC_OscConfig+0x67c>)
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c6e:	4b1a      	ldr	r3, [pc, #104]	; (8001cd8 <HAL_RCC_OscConfig+0x67c>)
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	4a1e      	ldr	r2, [pc, #120]	; (8001cec <HAL_RCC_OscConfig+0x690>)
 8001c74:	4013      	ands	r3, r2
 8001c76:	0019      	movs	r1, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c80:	431a      	orrs	r2, r3
 8001c82:	4b15      	ldr	r3, [pc, #84]	; (8001cd8 <HAL_RCC_OscConfig+0x67c>)
 8001c84:	430a      	orrs	r2, r1
 8001c86:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c88:	4b13      	ldr	r3, [pc, #76]	; (8001cd8 <HAL_RCC_OscConfig+0x67c>)
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	4b12      	ldr	r3, [pc, #72]	; (8001cd8 <HAL_RCC_OscConfig+0x67c>)
 8001c8e:	2180      	movs	r1, #128	; 0x80
 8001c90:	0449      	lsls	r1, r1, #17
 8001c92:	430a      	orrs	r2, r1
 8001c94:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c96:	f7ff f8cf 	bl	8000e38 <HAL_GetTick>
 8001c9a:	0003      	movs	r3, r0
 8001c9c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ca0:	f7ff f8ca 	bl	8000e38 <HAL_GetTick>
 8001ca4:	0002      	movs	r2, r0
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e054      	b.n	8001d5c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cb2:	4b09      	ldr	r3, [pc, #36]	; (8001cd8 <HAL_RCC_OscConfig+0x67c>)
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	2380      	movs	r3, #128	; 0x80
 8001cb8:	049b      	lsls	r3, r3, #18
 8001cba:	4013      	ands	r3, r2
 8001cbc:	d0f0      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x644>
 8001cbe:	e04c      	b.n	8001d5a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cc0:	4b05      	ldr	r3, [pc, #20]	; (8001cd8 <HAL_RCC_OscConfig+0x67c>)
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	4b04      	ldr	r3, [pc, #16]	; (8001cd8 <HAL_RCC_OscConfig+0x67c>)
 8001cc6:	4908      	ldr	r1, [pc, #32]	; (8001ce8 <HAL_RCC_OscConfig+0x68c>)
 8001cc8:	400a      	ands	r2, r1
 8001cca:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ccc:	f7ff f8b4 	bl	8000e38 <HAL_GetTick>
 8001cd0:	0003      	movs	r3, r0
 8001cd2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cd4:	e015      	b.n	8001d02 <HAL_RCC_OscConfig+0x6a6>
 8001cd6:	46c0      	nop			; (mov r8, r8)
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	00001388 	.word	0x00001388
 8001ce0:	efffffff 	.word	0xefffffff
 8001ce4:	fffeffff 	.word	0xfffeffff
 8001ce8:	feffffff 	.word	0xfeffffff
 8001cec:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cf0:	f7ff f8a2 	bl	8000e38 <HAL_GetTick>
 8001cf4:	0002      	movs	r2, r0
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e02c      	b.n	8001d5c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d02:	4b18      	ldr	r3, [pc, #96]	; (8001d64 <HAL_RCC_OscConfig+0x708>)
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	2380      	movs	r3, #128	; 0x80
 8001d08:	049b      	lsls	r3, r3, #18
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	d1f0      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x694>
 8001d0e:	e024      	b.n	8001d5a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d101      	bne.n	8001d1c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e01f      	b.n	8001d5c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001d1c:	4b11      	ldr	r3, [pc, #68]	; (8001d64 <HAL_RCC_OscConfig+0x708>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001d22:	4b10      	ldr	r3, [pc, #64]	; (8001d64 <HAL_RCC_OscConfig+0x708>)
 8001d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d26:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d28:	697a      	ldr	r2, [r7, #20]
 8001d2a:	23c0      	movs	r3, #192	; 0xc0
 8001d2c:	025b      	lsls	r3, r3, #9
 8001d2e:	401a      	ands	r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d10e      	bne.n	8001d56 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	220f      	movs	r2, #15
 8001d3c:	401a      	ands	r2, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d107      	bne.n	8001d56 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001d46:	697a      	ldr	r2, [r7, #20]
 8001d48:	23f0      	movs	r3, #240	; 0xf0
 8001d4a:	039b      	lsls	r3, r3, #14
 8001d4c:	401a      	ands	r2, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d001      	beq.n	8001d5a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e000      	b.n	8001d5c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	0018      	movs	r0, r3
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	b008      	add	sp, #32
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	40021000 	.word	0x40021000

08001d68 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d101      	bne.n	8001d7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e0bf      	b.n	8001efc <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d7c:	4b61      	ldr	r3, [pc, #388]	; (8001f04 <HAL_RCC_ClockConfig+0x19c>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2201      	movs	r2, #1
 8001d82:	4013      	ands	r3, r2
 8001d84:	683a      	ldr	r2, [r7, #0]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d911      	bls.n	8001dae <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d8a:	4b5e      	ldr	r3, [pc, #376]	; (8001f04 <HAL_RCC_ClockConfig+0x19c>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	4393      	bics	r3, r2
 8001d92:	0019      	movs	r1, r3
 8001d94:	4b5b      	ldr	r3, [pc, #364]	; (8001f04 <HAL_RCC_ClockConfig+0x19c>)
 8001d96:	683a      	ldr	r2, [r7, #0]
 8001d98:	430a      	orrs	r2, r1
 8001d9a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d9c:	4b59      	ldr	r3, [pc, #356]	; (8001f04 <HAL_RCC_ClockConfig+0x19c>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2201      	movs	r2, #1
 8001da2:	4013      	ands	r3, r2
 8001da4:	683a      	ldr	r2, [r7, #0]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d001      	beq.n	8001dae <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e0a6      	b.n	8001efc <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2202      	movs	r2, #2
 8001db4:	4013      	ands	r3, r2
 8001db6:	d015      	beq.n	8001de4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2204      	movs	r2, #4
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	d006      	beq.n	8001dd0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001dc2:	4b51      	ldr	r3, [pc, #324]	; (8001f08 <HAL_RCC_ClockConfig+0x1a0>)
 8001dc4:	685a      	ldr	r2, [r3, #4]
 8001dc6:	4b50      	ldr	r3, [pc, #320]	; (8001f08 <HAL_RCC_ClockConfig+0x1a0>)
 8001dc8:	21e0      	movs	r1, #224	; 0xe0
 8001dca:	00c9      	lsls	r1, r1, #3
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dd0:	4b4d      	ldr	r3, [pc, #308]	; (8001f08 <HAL_RCC_ClockConfig+0x1a0>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	22f0      	movs	r2, #240	; 0xf0
 8001dd6:	4393      	bics	r3, r2
 8001dd8:	0019      	movs	r1, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	689a      	ldr	r2, [r3, #8]
 8001dde:	4b4a      	ldr	r3, [pc, #296]	; (8001f08 <HAL_RCC_ClockConfig+0x1a0>)
 8001de0:	430a      	orrs	r2, r1
 8001de2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2201      	movs	r2, #1
 8001dea:	4013      	ands	r3, r2
 8001dec:	d04c      	beq.n	8001e88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d107      	bne.n	8001e06 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001df6:	4b44      	ldr	r3, [pc, #272]	; (8001f08 <HAL_RCC_ClockConfig+0x1a0>)
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	2380      	movs	r3, #128	; 0x80
 8001dfc:	029b      	lsls	r3, r3, #10
 8001dfe:	4013      	ands	r3, r2
 8001e00:	d120      	bne.n	8001e44 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e07a      	b.n	8001efc <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d107      	bne.n	8001e1e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e0e:	4b3e      	ldr	r3, [pc, #248]	; (8001f08 <HAL_RCC_ClockConfig+0x1a0>)
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	2380      	movs	r3, #128	; 0x80
 8001e14:	049b      	lsls	r3, r3, #18
 8001e16:	4013      	ands	r3, r2
 8001e18:	d114      	bne.n	8001e44 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e06e      	b.n	8001efc <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	2b03      	cmp	r3, #3
 8001e24:	d107      	bne.n	8001e36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001e26:	4b38      	ldr	r3, [pc, #224]	; (8001f08 <HAL_RCC_ClockConfig+0x1a0>)
 8001e28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e2a:	2380      	movs	r3, #128	; 0x80
 8001e2c:	029b      	lsls	r3, r3, #10
 8001e2e:	4013      	ands	r3, r2
 8001e30:	d108      	bne.n	8001e44 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e062      	b.n	8001efc <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e36:	4b34      	ldr	r3, [pc, #208]	; (8001f08 <HAL_RCC_ClockConfig+0x1a0>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2202      	movs	r2, #2
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	d101      	bne.n	8001e44 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e05b      	b.n	8001efc <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e44:	4b30      	ldr	r3, [pc, #192]	; (8001f08 <HAL_RCC_ClockConfig+0x1a0>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	2203      	movs	r2, #3
 8001e4a:	4393      	bics	r3, r2
 8001e4c:	0019      	movs	r1, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685a      	ldr	r2, [r3, #4]
 8001e52:	4b2d      	ldr	r3, [pc, #180]	; (8001f08 <HAL_RCC_ClockConfig+0x1a0>)
 8001e54:	430a      	orrs	r2, r1
 8001e56:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e58:	f7fe ffee 	bl	8000e38 <HAL_GetTick>
 8001e5c:	0003      	movs	r3, r0
 8001e5e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e60:	e009      	b.n	8001e76 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e62:	f7fe ffe9 	bl	8000e38 <HAL_GetTick>
 8001e66:	0002      	movs	r2, r0
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	4a27      	ldr	r2, [pc, #156]	; (8001f0c <HAL_RCC_ClockConfig+0x1a4>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e042      	b.n	8001efc <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e76:	4b24      	ldr	r3, [pc, #144]	; (8001f08 <HAL_RCC_ClockConfig+0x1a0>)
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	220c      	movs	r2, #12
 8001e7c:	401a      	ands	r2, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d1ec      	bne.n	8001e62 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e88:	4b1e      	ldr	r3, [pc, #120]	; (8001f04 <HAL_RCC_ClockConfig+0x19c>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	4013      	ands	r3, r2
 8001e90:	683a      	ldr	r2, [r7, #0]
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d211      	bcs.n	8001eba <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e96:	4b1b      	ldr	r3, [pc, #108]	; (8001f04 <HAL_RCC_ClockConfig+0x19c>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	4393      	bics	r3, r2
 8001e9e:	0019      	movs	r1, r3
 8001ea0:	4b18      	ldr	r3, [pc, #96]	; (8001f04 <HAL_RCC_ClockConfig+0x19c>)
 8001ea2:	683a      	ldr	r2, [r7, #0]
 8001ea4:	430a      	orrs	r2, r1
 8001ea6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ea8:	4b16      	ldr	r3, [pc, #88]	; (8001f04 <HAL_RCC_ClockConfig+0x19c>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2201      	movs	r2, #1
 8001eae:	4013      	ands	r3, r2
 8001eb0:	683a      	ldr	r2, [r7, #0]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d001      	beq.n	8001eba <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e020      	b.n	8001efc <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2204      	movs	r2, #4
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	d009      	beq.n	8001ed8 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001ec4:	4b10      	ldr	r3, [pc, #64]	; (8001f08 <HAL_RCC_ClockConfig+0x1a0>)
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	4a11      	ldr	r2, [pc, #68]	; (8001f10 <HAL_RCC_ClockConfig+0x1a8>)
 8001eca:	4013      	ands	r3, r2
 8001ecc:	0019      	movs	r1, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	68da      	ldr	r2, [r3, #12]
 8001ed2:	4b0d      	ldr	r3, [pc, #52]	; (8001f08 <HAL_RCC_ClockConfig+0x1a0>)
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001ed8:	f000 f820 	bl	8001f1c <HAL_RCC_GetSysClockFreq>
 8001edc:	0001      	movs	r1, r0
 8001ede:	4b0a      	ldr	r3, [pc, #40]	; (8001f08 <HAL_RCC_ClockConfig+0x1a0>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	091b      	lsrs	r3, r3, #4
 8001ee4:	220f      	movs	r2, #15
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	4a0a      	ldr	r2, [pc, #40]	; (8001f14 <HAL_RCC_ClockConfig+0x1ac>)
 8001eea:	5cd3      	ldrb	r3, [r2, r3]
 8001eec:	000a      	movs	r2, r1
 8001eee:	40da      	lsrs	r2, r3
 8001ef0:	4b09      	ldr	r3, [pc, #36]	; (8001f18 <HAL_RCC_ClockConfig+0x1b0>)
 8001ef2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001ef4:	2003      	movs	r0, #3
 8001ef6:	f7fe ff59 	bl	8000dac <HAL_InitTick>
  
  return HAL_OK;
 8001efa:	2300      	movs	r3, #0
}
 8001efc:	0018      	movs	r0, r3
 8001efe:	46bd      	mov	sp, r7
 8001f00:	b004      	add	sp, #16
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40022000 	.word	0x40022000
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	00001388 	.word	0x00001388
 8001f10:	fffff8ff 	.word	0xfffff8ff
 8001f14:	080032b8 	.word	0x080032b8
 8001f18:	20000020 	.word	0x20000020

08001f1c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f22:	2300      	movs	r3, #0
 8001f24:	60fb      	str	r3, [r7, #12]
 8001f26:	2300      	movs	r3, #0
 8001f28:	60bb      	str	r3, [r7, #8]
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	617b      	str	r3, [r7, #20]
 8001f2e:	2300      	movs	r3, #0
 8001f30:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f32:	2300      	movs	r3, #0
 8001f34:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001f36:	4b2d      	ldr	r3, [pc, #180]	; (8001fec <HAL_RCC_GetSysClockFreq+0xd0>)
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	220c      	movs	r2, #12
 8001f40:	4013      	ands	r3, r2
 8001f42:	2b0c      	cmp	r3, #12
 8001f44:	d046      	beq.n	8001fd4 <HAL_RCC_GetSysClockFreq+0xb8>
 8001f46:	d848      	bhi.n	8001fda <HAL_RCC_GetSysClockFreq+0xbe>
 8001f48:	2b04      	cmp	r3, #4
 8001f4a:	d002      	beq.n	8001f52 <HAL_RCC_GetSysClockFreq+0x36>
 8001f4c:	2b08      	cmp	r3, #8
 8001f4e:	d003      	beq.n	8001f58 <HAL_RCC_GetSysClockFreq+0x3c>
 8001f50:	e043      	b.n	8001fda <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f52:	4b27      	ldr	r3, [pc, #156]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001f54:	613b      	str	r3, [r7, #16]
      break;
 8001f56:	e043      	b.n	8001fe0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	0c9b      	lsrs	r3, r3, #18
 8001f5c:	220f      	movs	r2, #15
 8001f5e:	4013      	ands	r3, r2
 8001f60:	4a24      	ldr	r2, [pc, #144]	; (8001ff4 <HAL_RCC_GetSysClockFreq+0xd8>)
 8001f62:	5cd3      	ldrb	r3, [r2, r3]
 8001f64:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001f66:	4b21      	ldr	r3, [pc, #132]	; (8001fec <HAL_RCC_GetSysClockFreq+0xd0>)
 8001f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f6a:	220f      	movs	r2, #15
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	4a22      	ldr	r2, [pc, #136]	; (8001ff8 <HAL_RCC_GetSysClockFreq+0xdc>)
 8001f70:	5cd3      	ldrb	r3, [r2, r3]
 8001f72:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001f74:	68fa      	ldr	r2, [r7, #12]
 8001f76:	23c0      	movs	r3, #192	; 0xc0
 8001f78:	025b      	lsls	r3, r3, #9
 8001f7a:	401a      	ands	r2, r3
 8001f7c:	2380      	movs	r3, #128	; 0x80
 8001f7e:	025b      	lsls	r3, r3, #9
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d109      	bne.n	8001f98 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f84:	68b9      	ldr	r1, [r7, #8]
 8001f86:	481a      	ldr	r0, [pc, #104]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001f88:	f7fe f8be 	bl	8000108 <__udivsi3>
 8001f8c:	0003      	movs	r3, r0
 8001f8e:	001a      	movs	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4353      	muls	r3, r2
 8001f94:	617b      	str	r3, [r7, #20]
 8001f96:	e01a      	b.n	8001fce <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001f98:	68fa      	ldr	r2, [r7, #12]
 8001f9a:	23c0      	movs	r3, #192	; 0xc0
 8001f9c:	025b      	lsls	r3, r3, #9
 8001f9e:	401a      	ands	r2, r3
 8001fa0:	23c0      	movs	r3, #192	; 0xc0
 8001fa2:	025b      	lsls	r3, r3, #9
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d109      	bne.n	8001fbc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001fa8:	68b9      	ldr	r1, [r7, #8]
 8001faa:	4814      	ldr	r0, [pc, #80]	; (8001ffc <HAL_RCC_GetSysClockFreq+0xe0>)
 8001fac:	f7fe f8ac 	bl	8000108 <__udivsi3>
 8001fb0:	0003      	movs	r3, r0
 8001fb2:	001a      	movs	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4353      	muls	r3, r2
 8001fb8:	617b      	str	r3, [r7, #20]
 8001fba:	e008      	b.n	8001fce <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001fbc:	68b9      	ldr	r1, [r7, #8]
 8001fbe:	480c      	ldr	r0, [pc, #48]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001fc0:	f7fe f8a2 	bl	8000108 <__udivsi3>
 8001fc4:	0003      	movs	r3, r0
 8001fc6:	001a      	movs	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4353      	muls	r3, r2
 8001fcc:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	613b      	str	r3, [r7, #16]
      break;
 8001fd2:	e005      	b.n	8001fe0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001fd4:	4b09      	ldr	r3, [pc, #36]	; (8001ffc <HAL_RCC_GetSysClockFreq+0xe0>)
 8001fd6:	613b      	str	r3, [r7, #16]
      break;
 8001fd8:	e002      	b.n	8001fe0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fda:	4b05      	ldr	r3, [pc, #20]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001fdc:	613b      	str	r3, [r7, #16]
      break;
 8001fde:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001fe0:	693b      	ldr	r3, [r7, #16]
}
 8001fe2:	0018      	movs	r0, r3
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	b006      	add	sp, #24
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	46c0      	nop			; (mov r8, r8)
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	007a1200 	.word	0x007a1200
 8001ff4:	080032c8 	.word	0x080032c8
 8001ff8:	080032d8 	.word	0x080032d8
 8001ffc:	02dc6c00 	.word	0x02dc6c00

08002000 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d101      	bne.n	8002012 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e0a8      	b.n	8002164 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002016:	2b00      	cmp	r3, #0
 8002018:	d109      	bne.n	800202e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685a      	ldr	r2, [r3, #4]
 800201e:	2382      	movs	r3, #130	; 0x82
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	429a      	cmp	r2, r3
 8002024:	d009      	beq.n	800203a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	61da      	str	r2, [r3, #28]
 800202c:	e005      	b.n	800203a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	225d      	movs	r2, #93	; 0x5d
 8002044:	5c9b      	ldrb	r3, [r3, r2]
 8002046:	b2db      	uxtb	r3, r3
 8002048:	2b00      	cmp	r3, #0
 800204a:	d107      	bne.n	800205c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	225c      	movs	r2, #92	; 0x5c
 8002050:	2100      	movs	r1, #0
 8002052:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	0018      	movs	r0, r3
 8002058:	f7fe fcec 	bl	8000a34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	225d      	movs	r2, #93	; 0x5d
 8002060:	2102      	movs	r1, #2
 8002062:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2140      	movs	r1, #64	; 0x40
 8002070:	438a      	bics	r2, r1
 8002072:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	68da      	ldr	r2, [r3, #12]
 8002078:	23e0      	movs	r3, #224	; 0xe0
 800207a:	00db      	lsls	r3, r3, #3
 800207c:	429a      	cmp	r2, r3
 800207e:	d902      	bls.n	8002086 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002080:	2300      	movs	r3, #0
 8002082:	60fb      	str	r3, [r7, #12]
 8002084:	e002      	b.n	800208c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002086:	2380      	movs	r3, #128	; 0x80
 8002088:	015b      	lsls	r3, r3, #5
 800208a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	68da      	ldr	r2, [r3, #12]
 8002090:	23f0      	movs	r3, #240	; 0xf0
 8002092:	011b      	lsls	r3, r3, #4
 8002094:	429a      	cmp	r2, r3
 8002096:	d008      	beq.n	80020aa <HAL_SPI_Init+0xaa>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	68da      	ldr	r2, [r3, #12]
 800209c:	23e0      	movs	r3, #224	; 0xe0
 800209e:	00db      	lsls	r3, r3, #3
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d002      	beq.n	80020aa <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685a      	ldr	r2, [r3, #4]
 80020ae:	2382      	movs	r3, #130	; 0x82
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	401a      	ands	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6899      	ldr	r1, [r3, #8]
 80020b8:	2384      	movs	r3, #132	; 0x84
 80020ba:	021b      	lsls	r3, r3, #8
 80020bc:	400b      	ands	r3, r1
 80020be:	431a      	orrs	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	2102      	movs	r1, #2
 80020c6:	400b      	ands	r3, r1
 80020c8:	431a      	orrs	r2, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	695b      	ldr	r3, [r3, #20]
 80020ce:	2101      	movs	r1, #1
 80020d0:	400b      	ands	r3, r1
 80020d2:	431a      	orrs	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6999      	ldr	r1, [r3, #24]
 80020d8:	2380      	movs	r3, #128	; 0x80
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	400b      	ands	r3, r1
 80020de:	431a      	orrs	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	69db      	ldr	r3, [r3, #28]
 80020e4:	2138      	movs	r1, #56	; 0x38
 80020e6:	400b      	ands	r3, r1
 80020e8:	431a      	orrs	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a1b      	ldr	r3, [r3, #32]
 80020ee:	2180      	movs	r1, #128	; 0x80
 80020f0:	400b      	ands	r3, r1
 80020f2:	431a      	orrs	r2, r3
 80020f4:	0011      	movs	r1, r2
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020fa:	2380      	movs	r3, #128	; 0x80
 80020fc:	019b      	lsls	r3, r3, #6
 80020fe:	401a      	ands	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	430a      	orrs	r2, r1
 8002106:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	699b      	ldr	r3, [r3, #24]
 800210c:	0c1b      	lsrs	r3, r3, #16
 800210e:	2204      	movs	r2, #4
 8002110:	401a      	ands	r2, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002116:	2110      	movs	r1, #16
 8002118:	400b      	ands	r3, r1
 800211a:	431a      	orrs	r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002120:	2108      	movs	r1, #8
 8002122:	400b      	ands	r3, r1
 8002124:	431a      	orrs	r2, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	68d9      	ldr	r1, [r3, #12]
 800212a:	23f0      	movs	r3, #240	; 0xf0
 800212c:	011b      	lsls	r3, r3, #4
 800212e:	400b      	ands	r3, r1
 8002130:	431a      	orrs	r2, r3
 8002132:	0011      	movs	r1, r2
 8002134:	68fa      	ldr	r2, [r7, #12]
 8002136:	2380      	movs	r3, #128	; 0x80
 8002138:	015b      	lsls	r3, r3, #5
 800213a:	401a      	ands	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	430a      	orrs	r2, r1
 8002142:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	69da      	ldr	r2, [r3, #28]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4907      	ldr	r1, [pc, #28]	; (800216c <HAL_SPI_Init+0x16c>)
 8002150:	400a      	ands	r2, r1
 8002152:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	225d      	movs	r2, #93	; 0x5d
 800215e:	2101      	movs	r1, #1
 8002160:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002162:	2300      	movs	r3, #0
}
 8002164:	0018      	movs	r0, r3
 8002166:	46bd      	mov	sp, r7
 8002168:	b004      	add	sp, #16
 800216a:	bd80      	pop	{r7, pc}
 800216c:	fffff7ff 	.word	0xfffff7ff

08002170 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b086      	sub	sp, #24
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]
 800217c:	001a      	movs	r2, r3
 800217e:	1cbb      	adds	r3, r7, #2
 8002180:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002182:	2317      	movs	r3, #23
 8002184:	18fb      	adds	r3, r7, r3
 8002186:	2200      	movs	r2, #0
 8002188:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	225c      	movs	r2, #92	; 0x5c
 800218e:	5c9b      	ldrb	r3, [r3, r2]
 8002190:	2b01      	cmp	r3, #1
 8002192:	d101      	bne.n	8002198 <HAL_SPI_TransmitReceive_IT+0x28>
 8002194:	2302      	movs	r3, #2
 8002196:	e0a6      	b.n	80022e6 <HAL_SPI_TransmitReceive_IT+0x176>
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	225c      	movs	r2, #92	; 0x5c
 800219c:	2101      	movs	r1, #1
 800219e:	5499      	strb	r1, [r3, r2]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80021a0:	2016      	movs	r0, #22
 80021a2:	183b      	adds	r3, r7, r0
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	215d      	movs	r1, #93	; 0x5d
 80021a8:	5c52      	ldrb	r2, [r2, r1]
 80021aa:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80021b2:	0001      	movs	r1, r0
 80021b4:	187b      	adds	r3, r7, r1
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d011      	beq.n	80021e0 <HAL_SPI_TransmitReceive_IT+0x70>
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	2382      	movs	r3, #130	; 0x82
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d107      	bne.n	80021d6 <HAL_SPI_TransmitReceive_IT+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d103      	bne.n	80021d6 <HAL_SPI_TransmitReceive_IT+0x66>
 80021ce:	187b      	adds	r3, r7, r1
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	2b04      	cmp	r3, #4
 80021d4:	d004      	beq.n	80021e0 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_BUSY;
 80021d6:	2317      	movs	r3, #23
 80021d8:	18fb      	adds	r3, r7, r3
 80021da:	2202      	movs	r2, #2
 80021dc:	701a      	strb	r2, [r3, #0]
    goto error;
 80021de:	e07b      	b.n	80022d8 <HAL_SPI_TransmitReceive_IT+0x168>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d006      	beq.n	80021f4 <HAL_SPI_TransmitReceive_IT+0x84>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d003      	beq.n	80021f4 <HAL_SPI_TransmitReceive_IT+0x84>
 80021ec:	1cbb      	adds	r3, r7, #2
 80021ee:	881b      	ldrh	r3, [r3, #0]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d104      	bne.n	80021fe <HAL_SPI_TransmitReceive_IT+0x8e>
  {
    errorcode = HAL_ERROR;
 80021f4:	2317      	movs	r3, #23
 80021f6:	18fb      	adds	r3, r7, r3
 80021f8:	2201      	movs	r2, #1
 80021fa:	701a      	strb	r2, [r3, #0]
    goto error;
 80021fc:	e06c      	b.n	80022d8 <HAL_SPI_TransmitReceive_IT+0x168>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	225d      	movs	r2, #93	; 0x5d
 8002202:	5c9b      	ldrb	r3, [r3, r2]
 8002204:	b2db      	uxtb	r3, r3
 8002206:	2b04      	cmp	r3, #4
 8002208:	d003      	beq.n	8002212 <HAL_SPI_TransmitReceive_IT+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	225d      	movs	r2, #93	; 0x5d
 800220e:	2105      	movs	r1, #5
 8002210:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2200      	movs	r2, #0
 8002216:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	68ba      	ldr	r2, [r7, #8]
 800221c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	1cba      	adds	r2, r7, #2
 8002222:	8812      	ldrh	r2, [r2, #0]
 8002224:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	1cba      	adds	r2, r7, #2
 800222a:	8812      	ldrh	r2, [r2, #0]
 800222c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	1cba      	adds	r2, r7, #2
 8002238:	2144      	movs	r1, #68	; 0x44
 800223a:	8812      	ldrh	r2, [r2, #0]
 800223c:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	1cba      	adds	r2, r7, #2
 8002242:	2146      	movs	r1, #70	; 0x46
 8002244:	8812      	ldrh	r2, [r2, #0]
 8002246:	525a      	strh	r2, [r3, r1]

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	68da      	ldr	r2, [r3, #12]
 800224c:	23e0      	movs	r3, #224	; 0xe0
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	429a      	cmp	r2, r3
 8002252:	d906      	bls.n	8002262 <HAL_SPI_TransmitReceive_IT+0xf2>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	4a26      	ldr	r2, [pc, #152]	; (80022f0 <HAL_SPI_TransmitReceive_IT+0x180>)
 8002258:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	4a25      	ldr	r2, [pc, #148]	; (80022f4 <HAL_SPI_TransmitReceive_IT+0x184>)
 800225e:	651a      	str	r2, [r3, #80]	; 0x50
 8002260:	e005      	b.n	800226e <HAL_SPI_TransmitReceive_IT+0xfe>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	4a24      	ldr	r2, [pc, #144]	; (80022f8 <HAL_SPI_TransmitReceive_IT+0x188>)
 8002266:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	4a24      	ldr	r2, [pc, #144]	; (80022fc <HAL_SPI_TransmitReceive_IT+0x18c>)
 800226c:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	68da      	ldr	r2, [r3, #12]
 8002272:	23e0      	movs	r3, #224	; 0xe0
 8002274:	00db      	lsls	r3, r3, #3
 8002276:	429a      	cmp	r2, r3
 8002278:	d803      	bhi.n	8002282 <HAL_SPI_TransmitReceive_IT+0x112>
 800227a:	1cbb      	adds	r3, r7, #2
 800227c:	881b      	ldrh	r3, [r3, #0]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d908      	bls.n	8002294 <HAL_SPI_TransmitReceive_IT+0x124>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	685a      	ldr	r2, [r3, #4]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	491c      	ldr	r1, [pc, #112]	; (8002300 <HAL_SPI_TransmitReceive_IT+0x190>)
 800228e:	400a      	ands	r2, r1
 8002290:	605a      	str	r2, [r3, #4]
 8002292:	e008      	b.n	80022a6 <HAL_SPI_TransmitReceive_IT+0x136>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	685a      	ldr	r2, [r3, #4]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2180      	movs	r1, #128	; 0x80
 80022a0:	0149      	lsls	r1, r1, #5
 80022a2:	430a      	orrs	r2, r1
 80022a4:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	685a      	ldr	r2, [r3, #4]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	21e0      	movs	r1, #224	; 0xe0
 80022b2:	430a      	orrs	r2, r1
 80022b4:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2240      	movs	r2, #64	; 0x40
 80022be:	4013      	ands	r3, r2
 80022c0:	2b40      	cmp	r3, #64	; 0x40
 80022c2:	d008      	beq.n	80022d6 <HAL_SPI_TransmitReceive_IT+0x166>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2140      	movs	r1, #64	; 0x40
 80022d0:	430a      	orrs	r2, r1
 80022d2:	601a      	str	r2, [r3, #0]
 80022d4:	e000      	b.n	80022d8 <HAL_SPI_TransmitReceive_IT+0x168>
  }

error :
 80022d6:	46c0      	nop			; (mov r8, r8)
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	225c      	movs	r2, #92	; 0x5c
 80022dc:	2100      	movs	r1, #0
 80022de:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80022e0:	2317      	movs	r3, #23
 80022e2:	18fb      	adds	r3, r7, r3
 80022e4:	781b      	ldrb	r3, [r3, #0]
}
 80022e6:	0018      	movs	r0, r3
 80022e8:	46bd      	mov	sp, r7
 80022ea:	b006      	add	sp, #24
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	46c0      	nop			; (mov r8, r8)
 80022f0:	0800266b 	.word	0x0800266b
 80022f4:	080026d3 	.word	0x080026d3
 80022f8:	08002515 	.word	0x08002515
 80022fc:	080025d7 	.word	0x080025d7
 8002300:	ffffefff 	.word	0xffffefff

08002304 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b088      	sub	sp, #32
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	2240      	movs	r2, #64	; 0x40
 8002320:	4013      	ands	r3, r2
 8002322:	d10d      	bne.n	8002340 <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	2201      	movs	r2, #1
 8002328:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800232a:	d009      	beq.n	8002340 <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	2240      	movs	r2, #64	; 0x40
 8002330:	4013      	ands	r3, r2
 8002332:	d005      	beq.n	8002340 <HAL_SPI_IRQHandler+0x3c>
  {
    hspi->RxISR(hspi);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	0010      	movs	r0, r2
 800233c:	4798      	blx	r3
    return;
 800233e:	e0c5      	b.n	80024cc <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	2202      	movs	r2, #2
 8002344:	4013      	ands	r3, r2
 8002346:	d009      	beq.n	800235c <HAL_SPI_IRQHandler+0x58>
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	2280      	movs	r2, #128	; 0x80
 800234c:	4013      	ands	r3, r2
 800234e:	d005      	beq.n	800235c <HAL_SPI_IRQHandler+0x58>
  {
    hspi->TxISR(hspi);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	0010      	movs	r0, r2
 8002358:	4798      	blx	r3
    return;
 800235a:	e0b7      	b.n	80024cc <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	2220      	movs	r2, #32
 8002360:	4013      	ands	r3, r2
 8002362:	d109      	bne.n	8002378 <HAL_SPI_IRQHandler+0x74>
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	2240      	movs	r2, #64	; 0x40
 8002368:	4013      	ands	r3, r2
 800236a:	d105      	bne.n	8002378 <HAL_SPI_IRQHandler+0x74>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	2380      	movs	r3, #128	; 0x80
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	4013      	ands	r3, r2
 8002374:	d100      	bne.n	8002378 <HAL_SPI_IRQHandler+0x74>
 8002376:	e0a9      	b.n	80024cc <HAL_SPI_IRQHandler+0x1c8>
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	2220      	movs	r2, #32
 800237c:	4013      	ands	r3, r2
 800237e:	d100      	bne.n	8002382 <HAL_SPI_IRQHandler+0x7e>
 8002380:	e0a4      	b.n	80024cc <HAL_SPI_IRQHandler+0x1c8>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	2240      	movs	r2, #64	; 0x40
 8002386:	4013      	ands	r3, r2
 8002388:	d023      	beq.n	80023d2 <HAL_SPI_IRQHandler+0xce>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	225d      	movs	r2, #93	; 0x5d
 800238e:	5c9b      	ldrb	r3, [r3, r2]
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b03      	cmp	r3, #3
 8002394:	d011      	beq.n	80023ba <HAL_SPI_IRQHandler+0xb6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800239a:	2204      	movs	r2, #4
 800239c:	431a      	orrs	r2, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80023a2:	2300      	movs	r3, #0
 80023a4:	617b      	str	r3, [r7, #20]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	617b      	str	r3, [r7, #20]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	617b      	str	r3, [r7, #20]
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	e00b      	b.n	80023d2 <HAL_SPI_IRQHandler+0xce>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80023ba:	2300      	movs	r3, #0
 80023bc:	613b      	str	r3, [r7, #16]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	613b      	str	r3, [r7, #16]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	613b      	str	r3, [r7, #16]
 80023ce:	693b      	ldr	r3, [r7, #16]
        return;
 80023d0:	e07c      	b.n	80024cc <HAL_SPI_IRQHandler+0x1c8>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	2220      	movs	r2, #32
 80023d6:	4013      	ands	r3, r2
 80023d8:	d014      	beq.n	8002404 <HAL_SPI_IRQHandler+0x100>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023de:	2201      	movs	r2, #1
 80023e0:	431a      	orrs	r2, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80023e6:	2300      	movs	r3, #0
 80023e8:	60fb      	str	r3, [r7, #12]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	60fb      	str	r3, [r7, #12]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2140      	movs	r1, #64	; 0x40
 80023fe:	438a      	bics	r2, r1
 8002400:	601a      	str	r2, [r3, #0]
 8002402:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	2380      	movs	r3, #128	; 0x80
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	4013      	ands	r3, r2
 800240c:	d00c      	beq.n	8002428 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002412:	2208      	movs	r2, #8
 8002414:	431a      	orrs	r2, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800241a:	2300      	movs	r3, #0
 800241c:	60bb      	str	r3, [r7, #8]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	60bb      	str	r3, [r7, #8]
 8002426:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800242c:	2b00      	cmp	r3, #0
 800242e:	d04c      	beq.n	80024ca <HAL_SPI_IRQHandler+0x1c6>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	685a      	ldr	r2, [r3, #4]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	21e0      	movs	r1, #224	; 0xe0
 800243c:	438a      	bics	r2, r1
 800243e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	225d      	movs	r2, #93	; 0x5d
 8002444:	2101      	movs	r1, #1
 8002446:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	2202      	movs	r2, #2
 800244c:	4013      	ands	r3, r2
 800244e:	d103      	bne.n	8002458 <HAL_SPI_IRQHandler+0x154>
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	2201      	movs	r2, #1
 8002454:	4013      	ands	r3, r2
 8002456:	d032      	beq.n	80024be <HAL_SPI_IRQHandler+0x1ba>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	685a      	ldr	r2, [r3, #4]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2103      	movs	r1, #3
 8002464:	438a      	bics	r2, r1
 8002466:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800246c:	2b00      	cmp	r3, #0
 800246e:	d010      	beq.n	8002492 <HAL_SPI_IRQHandler+0x18e>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002474:	4a17      	ldr	r2, [pc, #92]	; (80024d4 <HAL_SPI_IRQHandler+0x1d0>)
 8002476:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800247c:	0018      	movs	r0, r3
 800247e:	f7fe ff21 	bl	80012c4 <HAL_DMA_Abort_IT>
 8002482:	1e03      	subs	r3, r0, #0
 8002484:	d005      	beq.n	8002492 <HAL_SPI_IRQHandler+0x18e>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800248a:	2240      	movs	r2, #64	; 0x40
 800248c:	431a      	orrs	r2, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002496:	2b00      	cmp	r3, #0
 8002498:	d016      	beq.n	80024c8 <HAL_SPI_IRQHandler+0x1c4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800249e:	4a0d      	ldr	r2, [pc, #52]	; (80024d4 <HAL_SPI_IRQHandler+0x1d0>)
 80024a0:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a6:	0018      	movs	r0, r3
 80024a8:	f7fe ff0c 	bl	80012c4 <HAL_DMA_Abort_IT>
 80024ac:	1e03      	subs	r3, r0, #0
 80024ae:	d00b      	beq.n	80024c8 <HAL_SPI_IRQHandler+0x1c4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024b4:	2240      	movs	r2, #64	; 0x40
 80024b6:	431a      	orrs	r2, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80024bc:	e004      	b.n	80024c8 <HAL_SPI_IRQHandler+0x1c4>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	0018      	movs	r0, r3
 80024c2:	f000 f809 	bl	80024d8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80024c6:	e000      	b.n	80024ca <HAL_SPI_IRQHandler+0x1c6>
        if (hspi->hdmatx != NULL)
 80024c8:	46c0      	nop			; (mov r8, r8)
    return;
 80024ca:	46c0      	nop			; (mov r8, r8)
  }
}
 80024cc:	46bd      	mov	sp, r7
 80024ce:	b008      	add	sp, #32
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	46c0      	nop			; (mov r8, r8)
 80024d4:	080024e9 	.word	0x080024e9

080024d8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80024e0:	46c0      	nop			; (mov r8, r8)
 80024e2:	46bd      	mov	sp, r7
 80024e4:	b002      	add	sp, #8
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2246      	movs	r2, #70	; 0x46
 80024fa:	2100      	movs	r1, #0
 80024fc:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2200      	movs	r2, #0
 8002502:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	0018      	movs	r0, r3
 8002508:	f7ff ffe6 	bl	80024d8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800250c:	46c0      	nop			; (mov r8, r8)
 800250e:	46bd      	mov	sp, r7
 8002510:	b004      	add	sp, #16
 8002512:	bd80      	pop	{r7, pc}

08002514 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2246      	movs	r2, #70	; 0x46
 8002520:	5a9b      	ldrh	r3, [r3, r2]
 8002522:	b29b      	uxth	r3, r3
 8002524:	2b01      	cmp	r3, #1
 8002526:	d924      	bls.n	8002572 <SPI_2linesRxISR_8BIT+0x5e>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	68da      	ldr	r2, [r3, #12]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002532:	b292      	uxth	r2, r2
 8002534:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253a:	1c9a      	adds	r2, r3, #2
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2246      	movs	r2, #70	; 0x46
 8002544:	5a9b      	ldrh	r3, [r3, r2]
 8002546:	b29b      	uxth	r3, r3
 8002548:	3b02      	subs	r3, #2
 800254a:	b299      	uxth	r1, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2246      	movs	r2, #70	; 0x46
 8002550:	5299      	strh	r1, [r3, r2]
    if (hspi->RxXferCount == 1U)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2246      	movs	r2, #70	; 0x46
 8002556:	5a9b      	ldrh	r3, [r3, r2]
 8002558:	b29b      	uxth	r3, r3
 800255a:	2b01      	cmp	r3, #1
 800255c:	d120      	bne.n	80025a0 <SPI_2linesRxISR_8BIT+0x8c>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	685a      	ldr	r2, [r3, #4]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2180      	movs	r1, #128	; 0x80
 800256a:	0149      	lsls	r1, r1, #5
 800256c:	430a      	orrs	r2, r1
 800256e:	605a      	str	r2, [r3, #4]
 8002570:	e016      	b.n	80025a0 <SPI_2linesRxISR_8BIT+0x8c>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	330c      	adds	r3, #12
 8002578:	001a      	movs	r2, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257e:	7812      	ldrb	r2, [r2, #0]
 8002580:	b2d2      	uxtb	r2, r2
 8002582:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002588:	1c5a      	adds	r2, r3, #1
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2246      	movs	r2, #70	; 0x46
 8002592:	5a9b      	ldrh	r3, [r3, r2]
 8002594:	b29b      	uxth	r3, r3
 8002596:	3b01      	subs	r3, #1
 8002598:	b299      	uxth	r1, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2246      	movs	r2, #70	; 0x46
 800259e:	5299      	strh	r1, [r3, r2]
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2246      	movs	r2, #70	; 0x46
 80025a4:	5a9b      	ldrh	r3, [r3, r2]
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d110      	bne.n	80025ce <SPI_2linesRxISR_8BIT+0xba>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	685a      	ldr	r2, [r3, #4]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2160      	movs	r1, #96	; 0x60
 80025b8:	438a      	bics	r2, r1
 80025ba:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d103      	bne.n	80025ce <SPI_2linesRxISR_8BIT+0xba>
    {
      SPI_CloseRxTx_ISR(hspi);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	0018      	movs	r0, r3
 80025ca:	f000 fa29 	bl	8002a20 <SPI_CloseRxTx_ISR>
    }
  }
}
 80025ce:	46c0      	nop			; (mov r8, r8)
 80025d0:	46bd      	mov	sp, r7
 80025d2:	b002      	add	sp, #8
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b082      	sub	sp, #8
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d912      	bls.n	800260e <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ec:	881a      	ldrh	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025f8:	1c9a      	adds	r2, r3, #2
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002602:	b29b      	uxth	r3, r3
 8002604:	3b02      	subs	r3, #2
 8002606:	b29a      	uxth	r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800260c:	e012      	b.n	8002634 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	330c      	adds	r3, #12
 8002618:	7812      	ldrb	r2, [r2, #0]
 800261a:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002620:	1c5a      	adds	r2, r3, #1
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800262a:	b29b      	uxth	r3, r3
 800262c:	3b01      	subs	r3, #1
 800262e:	b29a      	uxth	r2, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002638:	b29b      	uxth	r3, r3
 800263a:	2b00      	cmp	r3, #0
 800263c:	d111      	bne.n	8002662 <SPI_2linesTxISR_8BIT+0x8c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	685a      	ldr	r2, [r3, #4]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2180      	movs	r1, #128	; 0x80
 800264a:	438a      	bics	r2, r1
 800264c:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2246      	movs	r2, #70	; 0x46
 8002652:	5a9b      	ldrh	r3, [r3, r2]
 8002654:	b29b      	uxth	r3, r3
 8002656:	2b00      	cmp	r3, #0
 8002658:	d103      	bne.n	8002662 <SPI_2linesTxISR_8BIT+0x8c>
    {
      SPI_CloseRxTx_ISR(hspi);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	0018      	movs	r0, r3
 800265e:	f000 f9df 	bl	8002a20 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002662:	46c0      	nop			; (mov r8, r8)
 8002664:	46bd      	mov	sp, r7
 8002666:	b002      	add	sp, #8
 8002668:	bd80      	pop	{r7, pc}

0800266a <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800266a:	b580      	push	{r7, lr}
 800266c:	b082      	sub	sp, #8
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68da      	ldr	r2, [r3, #12]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267c:	b292      	uxth	r2, r2
 800267e:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002684:	1c9a      	adds	r2, r3, #2
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2246      	movs	r2, #70	; 0x46
 800268e:	5a9b      	ldrh	r3, [r3, r2]
 8002690:	b29b      	uxth	r3, r3
 8002692:	3b01      	subs	r3, #1
 8002694:	b299      	uxth	r1, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2246      	movs	r2, #70	; 0x46
 800269a:	5299      	strh	r1, [r3, r2]

  if (hspi->RxXferCount == 0U)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2246      	movs	r2, #70	; 0x46
 80026a0:	5a9b      	ldrh	r3, [r3, r2]
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d110      	bne.n	80026ca <SPI_2linesRxISR_16BIT+0x60>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	685a      	ldr	r2, [r3, #4]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2140      	movs	r1, #64	; 0x40
 80026b4:	438a      	bics	r2, r1
 80026b6:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026bc:	b29b      	uxth	r3, r3
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d103      	bne.n	80026ca <SPI_2linesRxISR_16BIT+0x60>
    {
      SPI_CloseRxTx_ISR(hspi);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	0018      	movs	r0, r3
 80026c6:	f000 f9ab 	bl	8002a20 <SPI_CloseRxTx_ISR>
    }
  }
}
 80026ca:	46c0      	nop			; (mov r8, r8)
 80026cc:	46bd      	mov	sp, r7
 80026ce:	b002      	add	sp, #8
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80026d2:	b580      	push	{r7, lr}
 80026d4:	b082      	sub	sp, #8
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026de:	881a      	ldrh	r2, [r3, #0]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ea:	1c9a      	adds	r2, r3, #2
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	3b01      	subs	r3, #1
 80026f8:	b29a      	uxth	r2, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002702:	b29b      	uxth	r3, r3
 8002704:	2b00      	cmp	r3, #0
 8002706:	d111      	bne.n	800272c <SPI_2linesTxISR_16BIT+0x5a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	685a      	ldr	r2, [r3, #4]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2180      	movs	r1, #128	; 0x80
 8002714:	438a      	bics	r2, r1
 8002716:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2246      	movs	r2, #70	; 0x46
 800271c:	5a9b      	ldrh	r3, [r3, r2]
 800271e:	b29b      	uxth	r3, r3
 8002720:	2b00      	cmp	r3, #0
 8002722:	d103      	bne.n	800272c <SPI_2linesTxISR_16BIT+0x5a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	0018      	movs	r0, r3
 8002728:	f000 f97a 	bl	8002a20 <SPI_CloseRxTx_ISR>
    }
  }
}
 800272c:	46c0      	nop			; (mov r8, r8)
 800272e:	46bd      	mov	sp, r7
 8002730:	b002      	add	sp, #8
 8002732:	bd80      	pop	{r7, pc}

08002734 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b088      	sub	sp, #32
 8002738:	af00      	add	r7, sp, #0
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	603b      	str	r3, [r7, #0]
 8002740:	1dfb      	adds	r3, r7, #7
 8002742:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002744:	f7fe fb78 	bl	8000e38 <HAL_GetTick>
 8002748:	0002      	movs	r2, r0
 800274a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800274c:	1a9b      	subs	r3, r3, r2
 800274e:	683a      	ldr	r2, [r7, #0]
 8002750:	18d3      	adds	r3, r2, r3
 8002752:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002754:	f7fe fb70 	bl	8000e38 <HAL_GetTick>
 8002758:	0003      	movs	r3, r0
 800275a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800275c:	4b3a      	ldr	r3, [pc, #232]	; (8002848 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	015b      	lsls	r3, r3, #5
 8002762:	0d1b      	lsrs	r3, r3, #20
 8002764:	69fa      	ldr	r2, [r7, #28]
 8002766:	4353      	muls	r3, r2
 8002768:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800276a:	e058      	b.n	800281e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	3301      	adds	r3, #1
 8002770:	d055      	beq.n	800281e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002772:	f7fe fb61 	bl	8000e38 <HAL_GetTick>
 8002776:	0002      	movs	r2, r0
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	69fa      	ldr	r2, [r7, #28]
 800277e:	429a      	cmp	r2, r3
 8002780:	d902      	bls.n	8002788 <SPI_WaitFlagStateUntilTimeout+0x54>
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d142      	bne.n	800280e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	685a      	ldr	r2, [r3, #4]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	21e0      	movs	r1, #224	; 0xe0
 8002794:	438a      	bics	r2, r1
 8002796:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	685a      	ldr	r2, [r3, #4]
 800279c:	2382      	movs	r3, #130	; 0x82
 800279e:	005b      	lsls	r3, r3, #1
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d113      	bne.n	80027cc <SPI_WaitFlagStateUntilTimeout+0x98>
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	689a      	ldr	r2, [r3, #8]
 80027a8:	2380      	movs	r3, #128	; 0x80
 80027aa:	021b      	lsls	r3, r3, #8
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d005      	beq.n	80027bc <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	689a      	ldr	r2, [r3, #8]
 80027b4:	2380      	movs	r3, #128	; 0x80
 80027b6:	00db      	lsls	r3, r3, #3
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d107      	bne.n	80027cc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	2140      	movs	r1, #64	; 0x40
 80027c8:	438a      	bics	r2, r1
 80027ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027d0:	2380      	movs	r3, #128	; 0x80
 80027d2:	019b      	lsls	r3, r3, #6
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d110      	bne.n	80027fa <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	491a      	ldr	r1, [pc, #104]	; (800284c <SPI_WaitFlagStateUntilTimeout+0x118>)
 80027e4:	400a      	ands	r2, r1
 80027e6:	601a      	str	r2, [r3, #0]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2180      	movs	r1, #128	; 0x80
 80027f4:	0189      	lsls	r1, r1, #6
 80027f6:	430a      	orrs	r2, r1
 80027f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	225d      	movs	r2, #93	; 0x5d
 80027fe:	2101      	movs	r1, #1
 8002800:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	225c      	movs	r2, #92	; 0x5c
 8002806:	2100      	movs	r1, #0
 8002808:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e017      	b.n	800283e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d101      	bne.n	8002818 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002814:	2300      	movs	r3, #0
 8002816:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	3b01      	subs	r3, #1
 800281c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	68ba      	ldr	r2, [r7, #8]
 8002826:	4013      	ands	r3, r2
 8002828:	68ba      	ldr	r2, [r7, #8]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	425a      	negs	r2, r3
 800282e:	4153      	adcs	r3, r2
 8002830:	b2db      	uxtb	r3, r3
 8002832:	001a      	movs	r2, r3
 8002834:	1dfb      	adds	r3, r7, #7
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	429a      	cmp	r2, r3
 800283a:	d197      	bne.n	800276c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	0018      	movs	r0, r3
 8002840:	46bd      	mov	sp, r7
 8002842:	b008      	add	sp, #32
 8002844:	bd80      	pop	{r7, pc}
 8002846:	46c0      	nop			; (mov r8, r8)
 8002848:	20000020 	.word	0x20000020
 800284c:	ffffdfff 	.word	0xffffdfff

08002850 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b08a      	sub	sp, #40	; 0x28
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	607a      	str	r2, [r7, #4]
 800285c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800285e:	2317      	movs	r3, #23
 8002860:	18fb      	adds	r3, r7, r3
 8002862:	2200      	movs	r2, #0
 8002864:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002866:	f7fe fae7 	bl	8000e38 <HAL_GetTick>
 800286a:	0002      	movs	r2, r0
 800286c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800286e:	1a9b      	subs	r3, r3, r2
 8002870:	683a      	ldr	r2, [r7, #0]
 8002872:	18d3      	adds	r3, r2, r3
 8002874:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002876:	f7fe fadf 	bl	8000e38 <HAL_GetTick>
 800287a:	0003      	movs	r3, r0
 800287c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	330c      	adds	r3, #12
 8002884:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002886:	4b41      	ldr	r3, [pc, #260]	; (800298c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	0013      	movs	r3, r2
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	189b      	adds	r3, r3, r2
 8002890:	00da      	lsls	r2, r3, #3
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	0d1b      	lsrs	r3, r3, #20
 8002896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002898:	4353      	muls	r3, r2
 800289a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800289c:	e068      	b.n	8002970 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800289e:	68ba      	ldr	r2, [r7, #8]
 80028a0:	23c0      	movs	r3, #192	; 0xc0
 80028a2:	00db      	lsls	r3, r3, #3
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d10a      	bne.n	80028be <SPI_WaitFifoStateUntilTimeout+0x6e>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d107      	bne.n	80028be <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	b2da      	uxtb	r2, r3
 80028b4:	2117      	movs	r1, #23
 80028b6:	187b      	adds	r3, r7, r1
 80028b8:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80028ba:	187b      	adds	r3, r7, r1
 80028bc:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	3301      	adds	r3, #1
 80028c2:	d055      	beq.n	8002970 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80028c4:	f7fe fab8 	bl	8000e38 <HAL_GetTick>
 80028c8:	0002      	movs	r2, r0
 80028ca:	6a3b      	ldr	r3, [r7, #32]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d902      	bls.n	80028da <SPI_WaitFifoStateUntilTimeout+0x8a>
 80028d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d142      	bne.n	8002960 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	685a      	ldr	r2, [r3, #4]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	21e0      	movs	r1, #224	; 0xe0
 80028e6:	438a      	bics	r2, r1
 80028e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	685a      	ldr	r2, [r3, #4]
 80028ee:	2382      	movs	r3, #130	; 0x82
 80028f0:	005b      	lsls	r3, r3, #1
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d113      	bne.n	800291e <SPI_WaitFifoStateUntilTimeout+0xce>
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	689a      	ldr	r2, [r3, #8]
 80028fa:	2380      	movs	r3, #128	; 0x80
 80028fc:	021b      	lsls	r3, r3, #8
 80028fe:	429a      	cmp	r2, r3
 8002900:	d005      	beq.n	800290e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	689a      	ldr	r2, [r3, #8]
 8002906:	2380      	movs	r3, #128	; 0x80
 8002908:	00db      	lsls	r3, r3, #3
 800290a:	429a      	cmp	r2, r3
 800290c:	d107      	bne.n	800291e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2140      	movs	r1, #64	; 0x40
 800291a:	438a      	bics	r2, r1
 800291c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002922:	2380      	movs	r3, #128	; 0x80
 8002924:	019b      	lsls	r3, r3, #6
 8002926:	429a      	cmp	r2, r3
 8002928:	d110      	bne.n	800294c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4916      	ldr	r1, [pc, #88]	; (8002990 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8002936:	400a      	ands	r2, r1
 8002938:	601a      	str	r2, [r3, #0]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2180      	movs	r1, #128	; 0x80
 8002946:	0189      	lsls	r1, r1, #6
 8002948:	430a      	orrs	r2, r1
 800294a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	225d      	movs	r2, #93	; 0x5d
 8002950:	2101      	movs	r1, #1
 8002952:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	225c      	movs	r2, #92	; 0x5c
 8002958:	2100      	movs	r1, #0
 800295a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e010      	b.n	8002982 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8002966:	2300      	movs	r3, #0
 8002968:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	3b01      	subs	r3, #1
 800296e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	68ba      	ldr	r2, [r7, #8]
 8002978:	4013      	ands	r3, r2
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	429a      	cmp	r2, r3
 800297e:	d18e      	bne.n	800289e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8002980:	2300      	movs	r3, #0
}
 8002982:	0018      	movs	r0, r3
 8002984:	46bd      	mov	sp, r7
 8002986:	b00a      	add	sp, #40	; 0x28
 8002988:	bd80      	pop	{r7, pc}
 800298a:	46c0      	nop			; (mov r8, r8)
 800298c:	20000020 	.word	0x20000020
 8002990:	ffffdfff 	.word	0xffffdfff

08002994 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b086      	sub	sp, #24
 8002998:	af02      	add	r7, sp, #8
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80029a0:	68ba      	ldr	r2, [r7, #8]
 80029a2:	23c0      	movs	r3, #192	; 0xc0
 80029a4:	0159      	lsls	r1, r3, #5
 80029a6:	68f8      	ldr	r0, [r7, #12]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	9300      	str	r3, [sp, #0]
 80029ac:	0013      	movs	r3, r2
 80029ae:	2200      	movs	r2, #0
 80029b0:	f7ff ff4e 	bl	8002850 <SPI_WaitFifoStateUntilTimeout>
 80029b4:	1e03      	subs	r3, r0, #0
 80029b6:	d007      	beq.n	80029c8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029bc:	2220      	movs	r2, #32
 80029be:	431a      	orrs	r2, r3
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	e027      	b.n	8002a18 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80029c8:	68ba      	ldr	r2, [r7, #8]
 80029ca:	68f8      	ldr	r0, [r7, #12]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	9300      	str	r3, [sp, #0]
 80029d0:	0013      	movs	r3, r2
 80029d2:	2200      	movs	r2, #0
 80029d4:	2180      	movs	r1, #128	; 0x80
 80029d6:	f7ff fead 	bl	8002734 <SPI_WaitFlagStateUntilTimeout>
 80029da:	1e03      	subs	r3, r0, #0
 80029dc:	d007      	beq.n	80029ee <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029e2:	2220      	movs	r2, #32
 80029e4:	431a      	orrs	r2, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e014      	b.n	8002a18 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80029ee:	68ba      	ldr	r2, [r7, #8]
 80029f0:	23c0      	movs	r3, #192	; 0xc0
 80029f2:	00d9      	lsls	r1, r3, #3
 80029f4:	68f8      	ldr	r0, [r7, #12]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	9300      	str	r3, [sp, #0]
 80029fa:	0013      	movs	r3, r2
 80029fc:	2200      	movs	r2, #0
 80029fe:	f7ff ff27 	bl	8002850 <SPI_WaitFifoStateUntilTimeout>
 8002a02:	1e03      	subs	r3, r0, #0
 8002a04:	d007      	beq.n	8002a16 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a0a:	2220      	movs	r2, #32
 8002a0c:	431a      	orrs	r2, r3
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e000      	b.n	8002a18 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002a16:	2300      	movs	r3, #0
}
 8002a18:	0018      	movs	r0, r3
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	b004      	add	sp, #16
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002a28:	f7fe fa06 	bl	8000e38 <HAL_GetTick>
 8002a2c:	0003      	movs	r3, r0
 8002a2e:	60fb      	str	r3, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	685a      	ldr	r2, [r3, #4]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2120      	movs	r1, #32
 8002a3c:	438a      	bics	r2, r1
 8002a3e:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002a40:	68fa      	ldr	r2, [r7, #12]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2164      	movs	r1, #100	; 0x64
 8002a46:	0018      	movs	r0, r3
 8002a48:	f7ff ffa4 	bl	8002994 <SPI_EndRxTxTransaction>
 8002a4c:	1e03      	subs	r3, r0, #0
 8002a4e:	d005      	beq.n	8002a5c <SPI_CloseRxTx_ISR+0x3c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a54:	2220      	movs	r2, #32
 8002a56:	431a      	orrs	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d117      	bne.n	8002a94 <SPI_CloseRxTx_ISR+0x74>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	225d      	movs	r2, #93	; 0x5d
 8002a68:	5c9b      	ldrb	r3, [r3, r2]
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	2b04      	cmp	r3, #4
 8002a6e:	d108      	bne.n	8002a82 <SPI_CloseRxTx_ISR+0x62>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	225d      	movs	r2, #93	; 0x5d
 8002a74:	2101      	movs	r1, #1
 8002a76:	5499      	strb	r1, [r3, r2]
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	0018      	movs	r0, r3
 8002a7c:	f7fd ff8a 	bl	8000994 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8002a80:	e010      	b.n	8002aa4 <SPI_CloseRxTx_ISR+0x84>
        hspi->State = HAL_SPI_STATE_READY;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	225d      	movs	r2, #93	; 0x5d
 8002a86:	2101      	movs	r1, #1
 8002a88:	5499      	strb	r1, [r3, r2]
        HAL_SPI_TxRxCpltCallback(hspi);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	0018      	movs	r0, r3
 8002a8e:	f7fd fec1 	bl	8000814 <HAL_SPI_TxRxCpltCallback>
}
 8002a92:	e007      	b.n	8002aa4 <SPI_CloseRxTx_ISR+0x84>
      hspi->State = HAL_SPI_STATE_READY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	225d      	movs	r2, #93	; 0x5d
 8002a98:	2101      	movs	r1, #1
 8002a9a:	5499      	strb	r1, [r3, r2]
      HAL_SPI_ErrorCallback(hspi);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	0018      	movs	r0, r3
 8002aa0:	f7ff fd1a 	bl	80024d8 <HAL_SPI_ErrorCallback>
}
 8002aa4:	46c0      	nop			; (mov r8, r8)
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	b004      	add	sp, #16
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d101      	bne.n	8002abe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e042      	b.n	8002b44 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	223d      	movs	r2, #61	; 0x3d
 8002ac2:	5c9b      	ldrb	r3, [r3, r2]
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d107      	bne.n	8002ada <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	223c      	movs	r2, #60	; 0x3c
 8002ace:	2100      	movs	r1, #0
 8002ad0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	0018      	movs	r0, r3
 8002ad6:	f7fe f827 	bl	8000b28 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	223d      	movs	r2, #61	; 0x3d
 8002ade:	2102      	movs	r1, #2
 8002ae0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	3304      	adds	r3, #4
 8002aea:	0019      	movs	r1, r3
 8002aec:	0010      	movs	r0, r2
 8002aee:	f000 f8f3 	bl	8002cd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2246      	movs	r2, #70	; 0x46
 8002af6:	2101      	movs	r1, #1
 8002af8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	223e      	movs	r2, #62	; 0x3e
 8002afe:	2101      	movs	r1, #1
 8002b00:	5499      	strb	r1, [r3, r2]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	223f      	movs	r2, #63	; 0x3f
 8002b06:	2101      	movs	r1, #1
 8002b08:	5499      	strb	r1, [r3, r2]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2240      	movs	r2, #64	; 0x40
 8002b0e:	2101      	movs	r1, #1
 8002b10:	5499      	strb	r1, [r3, r2]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2241      	movs	r2, #65	; 0x41
 8002b16:	2101      	movs	r1, #1
 8002b18:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2242      	movs	r2, #66	; 0x42
 8002b1e:	2101      	movs	r1, #1
 8002b20:	5499      	strb	r1, [r3, r2]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2243      	movs	r2, #67	; 0x43
 8002b26:	2101      	movs	r1, #1
 8002b28:	5499      	strb	r1, [r3, r2]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2244      	movs	r2, #68	; 0x44
 8002b2e:	2101      	movs	r1, #1
 8002b30:	5499      	strb	r1, [r3, r2]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2245      	movs	r2, #69	; 0x45
 8002b36:	2101      	movs	r1, #1
 8002b38:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	223d      	movs	r2, #61	; 0x3d
 8002b3e:	2101      	movs	r1, #1
 8002b40:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	0018      	movs	r0, r3
 8002b46:	46bd      	mov	sp, r7
 8002b48:	b002      	add	sp, #8
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b086      	sub	sp, #24
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b58:	2317      	movs	r3, #23
 8002b5a:	18fb      	adds	r3, r7, r3
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	223c      	movs	r2, #60	; 0x3c
 8002b64:	5c9b      	ldrb	r3, [r3, r2]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d101      	bne.n	8002b6e <HAL_TIM_PWM_ConfigChannel+0x22>
 8002b6a:	2302      	movs	r3, #2
 8002b6c:	e0ad      	b.n	8002cca <HAL_TIM_PWM_ConfigChannel+0x17e>
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	223c      	movs	r2, #60	; 0x3c
 8002b72:	2101      	movs	r1, #1
 8002b74:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2b0c      	cmp	r3, #12
 8002b7a:	d100      	bne.n	8002b7e <HAL_TIM_PWM_ConfigChannel+0x32>
 8002b7c:	e076      	b.n	8002c6c <HAL_TIM_PWM_ConfigChannel+0x120>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2b0c      	cmp	r3, #12
 8002b82:	d900      	bls.n	8002b86 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002b84:	e095      	b.n	8002cb2 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2b08      	cmp	r3, #8
 8002b8a:	d04e      	beq.n	8002c2a <HAL_TIM_PWM_ConfigChannel+0xde>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2b08      	cmp	r3, #8
 8002b90:	d900      	bls.n	8002b94 <HAL_TIM_PWM_ConfigChannel+0x48>
 8002b92:	e08e      	b.n	8002cb2 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d003      	beq.n	8002ba2 <HAL_TIM_PWM_ConfigChannel+0x56>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2b04      	cmp	r3, #4
 8002b9e:	d021      	beq.n	8002be4 <HAL_TIM_PWM_ConfigChannel+0x98>
 8002ba0:	e087      	b.n	8002cb2 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	68ba      	ldr	r2, [r7, #8]
 8002ba8:	0011      	movs	r1, r2
 8002baa:	0018      	movs	r0, r3
 8002bac:	f000 f90a 	bl	8002dc4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	699a      	ldr	r2, [r3, #24]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2108      	movs	r1, #8
 8002bbc:	430a      	orrs	r2, r1
 8002bbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	699a      	ldr	r2, [r3, #24]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2104      	movs	r1, #4
 8002bcc:	438a      	bics	r2, r1
 8002bce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6999      	ldr	r1, [r3, #24]
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	691a      	ldr	r2, [r3, #16]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	430a      	orrs	r2, r1
 8002be0:	619a      	str	r2, [r3, #24]
      break;
 8002be2:	e06b      	b.n	8002cbc <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	68ba      	ldr	r2, [r7, #8]
 8002bea:	0011      	movs	r1, r2
 8002bec:	0018      	movs	r0, r3
 8002bee:	f000 f967 	bl	8002ec0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	699a      	ldr	r2, [r3, #24]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2180      	movs	r1, #128	; 0x80
 8002bfe:	0109      	lsls	r1, r1, #4
 8002c00:	430a      	orrs	r2, r1
 8002c02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	699a      	ldr	r2, [r3, #24]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4931      	ldr	r1, [pc, #196]	; (8002cd4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002c10:	400a      	ands	r2, r1
 8002c12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	6999      	ldr	r1, [r3, #24]
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	021a      	lsls	r2, r3, #8
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	430a      	orrs	r2, r1
 8002c26:	619a      	str	r2, [r3, #24]
      break;
 8002c28:	e048      	b.n	8002cbc <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68ba      	ldr	r2, [r7, #8]
 8002c30:	0011      	movs	r1, r2
 8002c32:	0018      	movs	r0, r3
 8002c34:	f000 f9c2 	bl	8002fbc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	69da      	ldr	r2, [r3, #28]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2108      	movs	r1, #8
 8002c44:	430a      	orrs	r2, r1
 8002c46:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	69da      	ldr	r2, [r3, #28]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2104      	movs	r1, #4
 8002c54:	438a      	bics	r2, r1
 8002c56:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	69d9      	ldr	r1, [r3, #28]
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	691a      	ldr	r2, [r3, #16]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	430a      	orrs	r2, r1
 8002c68:	61da      	str	r2, [r3, #28]
      break;
 8002c6a:	e027      	b.n	8002cbc <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	68ba      	ldr	r2, [r7, #8]
 8002c72:	0011      	movs	r1, r2
 8002c74:	0018      	movs	r0, r3
 8002c76:	f000 fa21 	bl	80030bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	69da      	ldr	r2, [r3, #28]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2180      	movs	r1, #128	; 0x80
 8002c86:	0109      	lsls	r1, r1, #4
 8002c88:	430a      	orrs	r2, r1
 8002c8a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	69da      	ldr	r2, [r3, #28]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	490f      	ldr	r1, [pc, #60]	; (8002cd4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002c98:	400a      	ands	r2, r1
 8002c9a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	69d9      	ldr	r1, [r3, #28]
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	021a      	lsls	r2, r3, #8
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	430a      	orrs	r2, r1
 8002cae:	61da      	str	r2, [r3, #28]
      break;
 8002cb0:	e004      	b.n	8002cbc <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8002cb2:	2317      	movs	r3, #23
 8002cb4:	18fb      	adds	r3, r7, r3
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	701a      	strb	r2, [r3, #0]
      break;
 8002cba:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	223c      	movs	r2, #60	; 0x3c
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	5499      	strb	r1, [r3, r2]

  return status;
 8002cc4:	2317      	movs	r3, #23
 8002cc6:	18fb      	adds	r3, r7, r3
 8002cc8:	781b      	ldrb	r3, [r3, #0]
}
 8002cca:	0018      	movs	r0, r3
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	b006      	add	sp, #24
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	46c0      	nop			; (mov r8, r8)
 8002cd4:	fffffbff 	.word	0xfffffbff

08002cd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4a30      	ldr	r2, [pc, #192]	; (8002dac <TIM_Base_SetConfig+0xd4>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d008      	beq.n	8002d02 <TIM_Base_SetConfig+0x2a>
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	2380      	movs	r3, #128	; 0x80
 8002cf4:	05db      	lsls	r3, r3, #23
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d003      	beq.n	8002d02 <TIM_Base_SetConfig+0x2a>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a2c      	ldr	r2, [pc, #176]	; (8002db0 <TIM_Base_SetConfig+0xd8>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d108      	bne.n	8002d14 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2270      	movs	r2, #112	; 0x70
 8002d06:	4393      	bics	r3, r2
 8002d08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	68fa      	ldr	r2, [r7, #12]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4a25      	ldr	r2, [pc, #148]	; (8002dac <TIM_Base_SetConfig+0xd4>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d014      	beq.n	8002d46 <TIM_Base_SetConfig+0x6e>
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	2380      	movs	r3, #128	; 0x80
 8002d20:	05db      	lsls	r3, r3, #23
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d00f      	beq.n	8002d46 <TIM_Base_SetConfig+0x6e>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a21      	ldr	r2, [pc, #132]	; (8002db0 <TIM_Base_SetConfig+0xd8>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d00b      	beq.n	8002d46 <TIM_Base_SetConfig+0x6e>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a20      	ldr	r2, [pc, #128]	; (8002db4 <TIM_Base_SetConfig+0xdc>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d007      	beq.n	8002d46 <TIM_Base_SetConfig+0x6e>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a1f      	ldr	r2, [pc, #124]	; (8002db8 <TIM_Base_SetConfig+0xe0>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d003      	beq.n	8002d46 <TIM_Base_SetConfig+0x6e>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a1e      	ldr	r2, [pc, #120]	; (8002dbc <TIM_Base_SetConfig+0xe4>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d108      	bne.n	8002d58 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	4a1d      	ldr	r2, [pc, #116]	; (8002dc0 <TIM_Base_SetConfig+0xe8>)
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	68fa      	ldr	r2, [r7, #12]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2280      	movs	r2, #128	; 0x80
 8002d5c:	4393      	bics	r3, r2
 8002d5e:	001a      	movs	r2, r3
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	695b      	ldr	r3, [r3, #20]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	68fa      	ldr	r2, [r7, #12]
 8002d6c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	689a      	ldr	r2, [r3, #8]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a0a      	ldr	r2, [pc, #40]	; (8002dac <TIM_Base_SetConfig+0xd4>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d007      	beq.n	8002d96 <TIM_Base_SetConfig+0xbe>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a0b      	ldr	r2, [pc, #44]	; (8002db8 <TIM_Base_SetConfig+0xe0>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d003      	beq.n	8002d96 <TIM_Base_SetConfig+0xbe>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a0a      	ldr	r2, [pc, #40]	; (8002dbc <TIM_Base_SetConfig+0xe4>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d103      	bne.n	8002d9e <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	691a      	ldr	r2, [r3, #16]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2201      	movs	r2, #1
 8002da2:	615a      	str	r2, [r3, #20]
}
 8002da4:	46c0      	nop			; (mov r8, r8)
 8002da6:	46bd      	mov	sp, r7
 8002da8:	b004      	add	sp, #16
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	40012c00 	.word	0x40012c00
 8002db0:	40000400 	.word	0x40000400
 8002db4:	40002000 	.word	0x40002000
 8002db8:	40014400 	.word	0x40014400
 8002dbc:	40014800 	.word	0x40014800
 8002dc0:	fffffcff 	.word	0xfffffcff

08002dc4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b086      	sub	sp, #24
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a1b      	ldr	r3, [r3, #32]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	4393      	bics	r3, r2
 8002dd6:	001a      	movs	r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a1b      	ldr	r3, [r3, #32]
 8002de0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2270      	movs	r2, #112	; 0x70
 8002df2:	4393      	bics	r3, r2
 8002df4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2203      	movs	r2, #3
 8002dfa:	4393      	bics	r3, r2
 8002dfc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	68fa      	ldr	r2, [r7, #12]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	2202      	movs	r2, #2
 8002e0c:	4393      	bics	r3, r2
 8002e0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	697a      	ldr	r2, [r7, #20]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a23      	ldr	r2, [pc, #140]	; (8002eac <TIM_OC1_SetConfig+0xe8>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d007      	beq.n	8002e32 <TIM_OC1_SetConfig+0x6e>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a22      	ldr	r2, [pc, #136]	; (8002eb0 <TIM_OC1_SetConfig+0xec>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d003      	beq.n	8002e32 <TIM_OC1_SetConfig+0x6e>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a21      	ldr	r2, [pc, #132]	; (8002eb4 <TIM_OC1_SetConfig+0xf0>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d10c      	bne.n	8002e4c <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	2208      	movs	r2, #8
 8002e36:	4393      	bics	r3, r2
 8002e38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	697a      	ldr	r2, [r7, #20]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	2204      	movs	r2, #4
 8002e48:	4393      	bics	r3, r2
 8002e4a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4a17      	ldr	r2, [pc, #92]	; (8002eac <TIM_OC1_SetConfig+0xe8>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d007      	beq.n	8002e64 <TIM_OC1_SetConfig+0xa0>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a16      	ldr	r2, [pc, #88]	; (8002eb0 <TIM_OC1_SetConfig+0xec>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d003      	beq.n	8002e64 <TIM_OC1_SetConfig+0xa0>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	4a15      	ldr	r2, [pc, #84]	; (8002eb4 <TIM_OC1_SetConfig+0xf0>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d111      	bne.n	8002e88 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	4a14      	ldr	r2, [pc, #80]	; (8002eb8 <TIM_OC1_SetConfig+0xf4>)
 8002e68:	4013      	ands	r3, r2
 8002e6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	4a13      	ldr	r2, [pc, #76]	; (8002ebc <TIM_OC1_SetConfig+0xf8>)
 8002e70:	4013      	ands	r3, r2
 8002e72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	695b      	ldr	r3, [r3, #20]
 8002e78:	693a      	ldr	r2, [r7, #16]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	693a      	ldr	r2, [r7, #16]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	693a      	ldr	r2, [r7, #16]
 8002e8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	68fa      	ldr	r2, [r7, #12]
 8002e92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685a      	ldr	r2, [r3, #4]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	697a      	ldr	r2, [r7, #20]
 8002ea0:	621a      	str	r2, [r3, #32]
}
 8002ea2:	46c0      	nop			; (mov r8, r8)
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	b006      	add	sp, #24
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	46c0      	nop			; (mov r8, r8)
 8002eac:	40012c00 	.word	0x40012c00
 8002eb0:	40014400 	.word	0x40014400
 8002eb4:	40014800 	.word	0x40014800
 8002eb8:	fffffeff 	.word	0xfffffeff
 8002ebc:	fffffdff 	.word	0xfffffdff

08002ec0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a1b      	ldr	r3, [r3, #32]
 8002ece:	2210      	movs	r2, #16
 8002ed0:	4393      	bics	r3, r2
 8002ed2:	001a      	movs	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a1b      	ldr	r3, [r3, #32]
 8002edc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	4a2c      	ldr	r2, [pc, #176]	; (8002fa0 <TIM_OC2_SetConfig+0xe0>)
 8002eee:	4013      	ands	r3, r2
 8002ef0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	4a2b      	ldr	r2, [pc, #172]	; (8002fa4 <TIM_OC2_SetConfig+0xe4>)
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	021b      	lsls	r3, r3, #8
 8002f00:	68fa      	ldr	r2, [r7, #12]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	2220      	movs	r2, #32
 8002f0a:	4393      	bics	r3, r2
 8002f0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	011b      	lsls	r3, r3, #4
 8002f14:	697a      	ldr	r2, [r7, #20]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a22      	ldr	r2, [pc, #136]	; (8002fa8 <TIM_OC2_SetConfig+0xe8>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d10d      	bne.n	8002f3e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	2280      	movs	r2, #128	; 0x80
 8002f26:	4393      	bics	r3, r2
 8002f28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	011b      	lsls	r3, r3, #4
 8002f30:	697a      	ldr	r2, [r7, #20]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	2240      	movs	r2, #64	; 0x40
 8002f3a:	4393      	bics	r3, r2
 8002f3c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a19      	ldr	r2, [pc, #100]	; (8002fa8 <TIM_OC2_SetConfig+0xe8>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d007      	beq.n	8002f56 <TIM_OC2_SetConfig+0x96>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a18      	ldr	r2, [pc, #96]	; (8002fac <TIM_OC2_SetConfig+0xec>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d003      	beq.n	8002f56 <TIM_OC2_SetConfig+0x96>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a17      	ldr	r2, [pc, #92]	; (8002fb0 <TIM_OC2_SetConfig+0xf0>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d113      	bne.n	8002f7e <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	4a16      	ldr	r2, [pc, #88]	; (8002fb4 <TIM_OC2_SetConfig+0xf4>)
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	4a15      	ldr	r2, [pc, #84]	; (8002fb8 <TIM_OC2_SetConfig+0xf8>)
 8002f62:	4013      	ands	r3, r2
 8002f64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	695b      	ldr	r3, [r3, #20]
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	693a      	ldr	r2, [r7, #16]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	693a      	ldr	r2, [r7, #16]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	693a      	ldr	r2, [r7, #16]
 8002f82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	68fa      	ldr	r2, [r7, #12]
 8002f88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	685a      	ldr	r2, [r3, #4]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	697a      	ldr	r2, [r7, #20]
 8002f96:	621a      	str	r2, [r3, #32]
}
 8002f98:	46c0      	nop			; (mov r8, r8)
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	b006      	add	sp, #24
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	ffff8fff 	.word	0xffff8fff
 8002fa4:	fffffcff 	.word	0xfffffcff
 8002fa8:	40012c00 	.word	0x40012c00
 8002fac:	40014400 	.word	0x40014400
 8002fb0:	40014800 	.word	0x40014800
 8002fb4:	fffffbff 	.word	0xfffffbff
 8002fb8:	fffff7ff 	.word	0xfffff7ff

08002fbc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b086      	sub	sp, #24
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a1b      	ldr	r3, [r3, #32]
 8002fca:	4a33      	ldr	r2, [pc, #204]	; (8003098 <TIM_OC3_SetConfig+0xdc>)
 8002fcc:	401a      	ands	r2, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a1b      	ldr	r3, [r3, #32]
 8002fd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	69db      	ldr	r3, [r3, #28]
 8002fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2270      	movs	r2, #112	; 0x70
 8002fe8:	4393      	bics	r3, r2
 8002fea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2203      	movs	r2, #3
 8002ff0:	4393      	bics	r3, r2
 8002ff2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	68fa      	ldr	r2, [r7, #12]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	4a26      	ldr	r2, [pc, #152]	; (800309c <TIM_OC3_SetConfig+0xe0>)
 8003002:	4013      	ands	r3, r2
 8003004:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	021b      	lsls	r3, r3, #8
 800300c:	697a      	ldr	r2, [r7, #20]
 800300e:	4313      	orrs	r3, r2
 8003010:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a22      	ldr	r2, [pc, #136]	; (80030a0 <TIM_OC3_SetConfig+0xe4>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d10d      	bne.n	8003036 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	4a21      	ldr	r2, [pc, #132]	; (80030a4 <TIM_OC3_SetConfig+0xe8>)
 800301e:	4013      	ands	r3, r2
 8003020:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	021b      	lsls	r3, r3, #8
 8003028:	697a      	ldr	r2, [r7, #20]
 800302a:	4313      	orrs	r3, r2
 800302c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	4a1d      	ldr	r2, [pc, #116]	; (80030a8 <TIM_OC3_SetConfig+0xec>)
 8003032:	4013      	ands	r3, r2
 8003034:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a19      	ldr	r2, [pc, #100]	; (80030a0 <TIM_OC3_SetConfig+0xe4>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d007      	beq.n	800304e <TIM_OC3_SetConfig+0x92>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a1a      	ldr	r2, [pc, #104]	; (80030ac <TIM_OC3_SetConfig+0xf0>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d003      	beq.n	800304e <TIM_OC3_SetConfig+0x92>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a19      	ldr	r2, [pc, #100]	; (80030b0 <TIM_OC3_SetConfig+0xf4>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d113      	bne.n	8003076 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	4a18      	ldr	r2, [pc, #96]	; (80030b4 <TIM_OC3_SetConfig+0xf8>)
 8003052:	4013      	ands	r3, r2
 8003054:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	4a17      	ldr	r2, [pc, #92]	; (80030b8 <TIM_OC3_SetConfig+0xfc>)
 800305a:	4013      	ands	r3, r2
 800305c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	695b      	ldr	r3, [r3, #20]
 8003062:	011b      	lsls	r3, r3, #4
 8003064:	693a      	ldr	r2, [r7, #16]
 8003066:	4313      	orrs	r3, r2
 8003068:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	011b      	lsls	r3, r3, #4
 8003070:	693a      	ldr	r2, [r7, #16]
 8003072:	4313      	orrs	r3, r2
 8003074:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	693a      	ldr	r2, [r7, #16]
 800307a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	68fa      	ldr	r2, [r7, #12]
 8003080:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	685a      	ldr	r2, [r3, #4]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	697a      	ldr	r2, [r7, #20]
 800308e:	621a      	str	r2, [r3, #32]
}
 8003090:	46c0      	nop			; (mov r8, r8)
 8003092:	46bd      	mov	sp, r7
 8003094:	b006      	add	sp, #24
 8003096:	bd80      	pop	{r7, pc}
 8003098:	fffffeff 	.word	0xfffffeff
 800309c:	fffffdff 	.word	0xfffffdff
 80030a0:	40012c00 	.word	0x40012c00
 80030a4:	fffff7ff 	.word	0xfffff7ff
 80030a8:	fffffbff 	.word	0xfffffbff
 80030ac:	40014400 	.word	0x40014400
 80030b0:	40014800 	.word	0x40014800
 80030b4:	ffffefff 	.word	0xffffefff
 80030b8:	ffffdfff 	.word	0xffffdfff

080030bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b086      	sub	sp, #24
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a1b      	ldr	r3, [r3, #32]
 80030ca:	4a26      	ldr	r2, [pc, #152]	; (8003164 <TIM_OC4_SetConfig+0xa8>)
 80030cc:	401a      	ands	r2, r3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a1b      	ldr	r3, [r3, #32]
 80030d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	69db      	ldr	r3, [r3, #28]
 80030e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	4a20      	ldr	r2, [pc, #128]	; (8003168 <TIM_OC4_SetConfig+0xac>)
 80030e8:	4013      	ands	r3, r2
 80030ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	4a1f      	ldr	r2, [pc, #124]	; (800316c <TIM_OC4_SetConfig+0xb0>)
 80030f0:	4013      	ands	r3, r2
 80030f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	021b      	lsls	r3, r3, #8
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	4a1b      	ldr	r2, [pc, #108]	; (8003170 <TIM_OC4_SetConfig+0xb4>)
 8003104:	4013      	ands	r3, r2
 8003106:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	031b      	lsls	r3, r3, #12
 800310e:	693a      	ldr	r2, [r7, #16]
 8003110:	4313      	orrs	r3, r2
 8003112:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4a17      	ldr	r2, [pc, #92]	; (8003174 <TIM_OC4_SetConfig+0xb8>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d007      	beq.n	800312c <TIM_OC4_SetConfig+0x70>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	4a16      	ldr	r2, [pc, #88]	; (8003178 <TIM_OC4_SetConfig+0xbc>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d003      	beq.n	800312c <TIM_OC4_SetConfig+0x70>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a15      	ldr	r2, [pc, #84]	; (800317c <TIM_OC4_SetConfig+0xc0>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d109      	bne.n	8003140 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	4a14      	ldr	r2, [pc, #80]	; (8003180 <TIM_OC4_SetConfig+0xc4>)
 8003130:	4013      	ands	r3, r2
 8003132:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	695b      	ldr	r3, [r3, #20]
 8003138:	019b      	lsls	r3, r3, #6
 800313a:	697a      	ldr	r2, [r7, #20]
 800313c:	4313      	orrs	r3, r2
 800313e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	697a      	ldr	r2, [r7, #20]
 8003144:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	68fa      	ldr	r2, [r7, #12]
 800314a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685a      	ldr	r2, [r3, #4]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	693a      	ldr	r2, [r7, #16]
 8003158:	621a      	str	r2, [r3, #32]
}
 800315a:	46c0      	nop			; (mov r8, r8)
 800315c:	46bd      	mov	sp, r7
 800315e:	b006      	add	sp, #24
 8003160:	bd80      	pop	{r7, pc}
 8003162:	46c0      	nop			; (mov r8, r8)
 8003164:	ffffefff 	.word	0xffffefff
 8003168:	ffff8fff 	.word	0xffff8fff
 800316c:	fffffcff 	.word	0xfffffcff
 8003170:	ffffdfff 	.word	0xffffdfff
 8003174:	40012c00 	.word	0x40012c00
 8003178:	40014400 	.word	0x40014400
 800317c:	40014800 	.word	0x40014800
 8003180:	ffffbfff 	.word	0xffffbfff

08003184 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	223c      	movs	r2, #60	; 0x3c
 8003192:	5c9b      	ldrb	r3, [r3, r2]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d101      	bne.n	800319c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003198:	2302      	movs	r3, #2
 800319a:	e042      	b.n	8003222 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	223c      	movs	r2, #60	; 0x3c
 80031a0:	2101      	movs	r1, #1
 80031a2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	223d      	movs	r2, #61	; 0x3d
 80031a8:	2102      	movs	r1, #2
 80031aa:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2270      	movs	r2, #112	; 0x70
 80031c0:	4393      	bics	r3, r2
 80031c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68fa      	ldr	r2, [r7, #12]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a14      	ldr	r2, [pc, #80]	; (800322c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d00a      	beq.n	80031f6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	2380      	movs	r3, #128	; 0x80
 80031e6:	05db      	lsls	r3, r3, #23
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d004      	beq.n	80031f6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a0f      	ldr	r2, [pc, #60]	; (8003230 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d10c      	bne.n	8003210 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	2280      	movs	r2, #128	; 0x80
 80031fa:	4393      	bics	r3, r2
 80031fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	68ba      	ldr	r2, [r7, #8]
 8003204:	4313      	orrs	r3, r2
 8003206:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68ba      	ldr	r2, [r7, #8]
 800320e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	223d      	movs	r2, #61	; 0x3d
 8003214:	2101      	movs	r1, #1
 8003216:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	223c      	movs	r2, #60	; 0x3c
 800321c:	2100      	movs	r1, #0
 800321e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	0018      	movs	r0, r3
 8003224:	46bd      	mov	sp, r7
 8003226:	b004      	add	sp, #16
 8003228:	bd80      	pop	{r7, pc}
 800322a:	46c0      	nop			; (mov r8, r8)
 800322c:	40012c00 	.word	0x40012c00
 8003230:	40000400 	.word	0x40000400

08003234 <memset>:
 8003234:	0003      	movs	r3, r0
 8003236:	1882      	adds	r2, r0, r2
 8003238:	4293      	cmp	r3, r2
 800323a:	d100      	bne.n	800323e <memset+0xa>
 800323c:	4770      	bx	lr
 800323e:	7019      	strb	r1, [r3, #0]
 8003240:	3301      	adds	r3, #1
 8003242:	e7f9      	b.n	8003238 <memset+0x4>

08003244 <__libc_init_array>:
 8003244:	b570      	push	{r4, r5, r6, lr}
 8003246:	2600      	movs	r6, #0
 8003248:	4c0c      	ldr	r4, [pc, #48]	; (800327c <__libc_init_array+0x38>)
 800324a:	4d0d      	ldr	r5, [pc, #52]	; (8003280 <__libc_init_array+0x3c>)
 800324c:	1b64      	subs	r4, r4, r5
 800324e:	10a4      	asrs	r4, r4, #2
 8003250:	42a6      	cmp	r6, r4
 8003252:	d109      	bne.n	8003268 <__libc_init_array+0x24>
 8003254:	2600      	movs	r6, #0
 8003256:	f000 f823 	bl	80032a0 <_init>
 800325a:	4c0a      	ldr	r4, [pc, #40]	; (8003284 <__libc_init_array+0x40>)
 800325c:	4d0a      	ldr	r5, [pc, #40]	; (8003288 <__libc_init_array+0x44>)
 800325e:	1b64      	subs	r4, r4, r5
 8003260:	10a4      	asrs	r4, r4, #2
 8003262:	42a6      	cmp	r6, r4
 8003264:	d105      	bne.n	8003272 <__libc_init_array+0x2e>
 8003266:	bd70      	pop	{r4, r5, r6, pc}
 8003268:	00b3      	lsls	r3, r6, #2
 800326a:	58eb      	ldr	r3, [r5, r3]
 800326c:	4798      	blx	r3
 800326e:	3601      	adds	r6, #1
 8003270:	e7ee      	b.n	8003250 <__libc_init_array+0xc>
 8003272:	00b3      	lsls	r3, r6, #2
 8003274:	58eb      	ldr	r3, [r5, r3]
 8003276:	4798      	blx	r3
 8003278:	3601      	adds	r6, #1
 800327a:	e7f2      	b.n	8003262 <__libc_init_array+0x1e>
 800327c:	080032e8 	.word	0x080032e8
 8003280:	080032e8 	.word	0x080032e8
 8003284:	080032ec 	.word	0x080032ec
 8003288:	080032e8 	.word	0x080032e8

0800328c <memcpy>:
 800328c:	2300      	movs	r3, #0
 800328e:	b510      	push	{r4, lr}
 8003290:	429a      	cmp	r2, r3
 8003292:	d100      	bne.n	8003296 <memcpy+0xa>
 8003294:	bd10      	pop	{r4, pc}
 8003296:	5ccc      	ldrb	r4, [r1, r3]
 8003298:	54c4      	strb	r4, [r0, r3]
 800329a:	3301      	adds	r3, #1
 800329c:	e7f8      	b.n	8003290 <memcpy+0x4>
	...

080032a0 <_init>:
 80032a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032a2:	46c0      	nop			; (mov r8, r8)
 80032a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032a6:	bc08      	pop	{r3}
 80032a8:	469e      	mov	lr, r3
 80032aa:	4770      	bx	lr

080032ac <_fini>:
 80032ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ae:	46c0      	nop			; (mov r8, r8)
 80032b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032b2:	bc08      	pop	{r3}
 80032b4:	469e      	mov	lr, r3
 80032b6:	4770      	bx	lr
