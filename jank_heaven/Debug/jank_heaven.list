
jank_heaven.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003458  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003518  08003518  00013518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003548  08003548  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08003548  08003548  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003548  08003548  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003548  08003548  00013548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800354c  0800354c  0001354c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08003550  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  20000020  08003570  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001b4  08003570  000201b4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a81f  00000000  00000000  0002008b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c6b  00000000  00000000  0002a8aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bd8  00000000  00000000  0002c518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000093e  00000000  00000000  0002d0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017ff4  00000000  00000000  0002da2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dbf8  00000000  00000000  00045a22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c07a  00000000  00000000  0005361a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002ad4  00000000  00000000  000df694  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000e2168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000020 	.word	0x20000020
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003500 	.word	0x08003500

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000024 	.word	0x20000024
 8000104:	08003500 	.word	0x08003500

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fe5c 	bl	8000ee0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f830 	bl	800028c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 fa80 	bl	8000730 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000230:	f000 f88c 	bl	800034c <MX_SPI1_Init>
  MX_TIM2_Init();
 8000234:	f000 f97a 	bl	800052c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000238:	f000 f9fa 	bl	8000630 <MX_TIM3_Init>
  MX_CRC_Init();
 800023c:	f000 f866 	bl	800030c <MX_CRC_Init>
  MX_TIM1_Init();
 8000240:	f000 f8be 	bl	80003c0 <MX_TIM1_Init>





  EnablePWMOutput(&htim3);
 8000244:	4b0b      	ldr	r3, [pc, #44]	; (8000274 <main+0x54>)
 8000246:	0018      	movs	r0, r3
 8000248:	f000 faba 	bl	80007c0 <EnablePWMOutput>
  EnablePWMOutput(&htim2);
 800024c:	4b0a      	ldr	r3, [pc, #40]	; (8000278 <main+0x58>)
 800024e:	0018      	movs	r0, r3
 8000250:	f000 fab6 	bl	80007c0 <EnablePWMOutput>
  htim2.Instance->CCR3 = (uint32_t) 250;
  htim2.Instance->CCR4 = (uint32_t) 250;
  */


  HAL_SPI_TransmitReceive_IT(&hspi1, SPI_TX_Buffer, SPI_RX_Buffer, SPI_BUFFER_SIZE);
 8000254:	4a09      	ldr	r2, [pc, #36]	; (800027c <main+0x5c>)
 8000256:	490a      	ldr	r1, [pc, #40]	; (8000280 <main+0x60>)
 8000258:	480a      	ldr	r0, [pc, #40]	; (8000284 <main+0x64>)
 800025a:	2311      	movs	r3, #17
 800025c:	f002 f85a 	bl	8002314 <HAL_SPI_TransmitReceive_IT>
	  //HAL_Delay(100);
	  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
	  //HAL_Delay(100);
	  // Error incrementing

	  HAL_Delay(50);
 8000260:	2032      	movs	r0, #50	; 0x32
 8000262:	f000 fea1 	bl	8000fa8 <HAL_Delay>
	  NUM_ERROR++;
 8000266:	4b08      	ldr	r3, [pc, #32]	; (8000288 <main+0x68>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	1c5a      	adds	r2, r3, #1
 800026c:	4b06      	ldr	r3, [pc, #24]	; (8000288 <main+0x68>)
 800026e:	601a      	str	r2, [r3, #0]
	  HAL_Delay(50);
 8000270:	e7f6      	b.n	8000260 <main+0x40>
 8000272:	46c0      	nop			; (mov r8, r8)
 8000274:	2000014c 	.word	0x2000014c
 8000278:	20000104 	.word	0x20000104
 800027c:	20000000 	.word	0x20000000
 8000280:	20000194 	.word	0x20000194
 8000284:	20000058 	.word	0x20000058
 8000288:	200001ac 	.word	0x200001ac

0800028c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800028c:	b590      	push	{r4, r7, lr}
 800028e:	b093      	sub	sp, #76	; 0x4c
 8000290:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000292:	2414      	movs	r4, #20
 8000294:	193b      	adds	r3, r7, r4
 8000296:	0018      	movs	r0, r3
 8000298:	2334      	movs	r3, #52	; 0x34
 800029a:	001a      	movs	r2, r3
 800029c:	2100      	movs	r1, #0
 800029e:	f003 f8f9 	bl	8003494 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a2:	1d3b      	adds	r3, r7, #4
 80002a4:	0018      	movs	r0, r3
 80002a6:	2310      	movs	r3, #16
 80002a8:	001a      	movs	r2, r3
 80002aa:	2100      	movs	r1, #0
 80002ac:	f003 f8f2 	bl	8003494 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002b0:	0021      	movs	r1, r4
 80002b2:	187b      	adds	r3, r7, r1
 80002b4:	2202      	movs	r2, #2
 80002b6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002b8:	187b      	adds	r3, r7, r1
 80002ba:	2201      	movs	r2, #1
 80002bc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002be:	187b      	adds	r3, r7, r1
 80002c0:	2210      	movs	r2, #16
 80002c2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002c4:	187b      	adds	r3, r7, r1
 80002c6:	2200      	movs	r2, #0
 80002c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ca:	187b      	adds	r3, r7, r1
 80002cc:	0018      	movs	r0, r3
 80002ce:	f001 fa97 	bl	8001800 <HAL_RCC_OscConfig>
 80002d2:	1e03      	subs	r3, r0, #0
 80002d4:	d001      	beq.n	80002da <SystemClock_Config+0x4e>
  {
    Error_Handler();
 80002d6:	f000 fc19 	bl	8000b0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002da:	1d3b      	adds	r3, r7, #4
 80002dc:	2207      	movs	r2, #7
 80002de:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002e0:	1d3b      	adds	r3, r7, #4
 80002e2:	2200      	movs	r2, #0
 80002e4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002e6:	1d3b      	adds	r3, r7, #4
 80002e8:	2200      	movs	r2, #0
 80002ea:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ec:	1d3b      	adds	r3, r7, #4
 80002ee:	2200      	movs	r2, #0
 80002f0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002f2:	1d3b      	adds	r3, r7, #4
 80002f4:	2100      	movs	r1, #0
 80002f6:	0018      	movs	r0, r3
 80002f8:	f001 fe08 	bl	8001f0c <HAL_RCC_ClockConfig>
 80002fc:	1e03      	subs	r3, r0, #0
 80002fe:	d001      	beq.n	8000304 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000300:	f000 fc04 	bl	8000b0c <Error_Handler>
  }
}
 8000304:	46c0      	nop			; (mov r8, r8)
 8000306:	46bd      	mov	sp, r7
 8000308:	b013      	add	sp, #76	; 0x4c
 800030a:	bd90      	pop	{r4, r7, pc}

0800030c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000310:	4b0c      	ldr	r3, [pc, #48]	; (8000344 <MX_CRC_Init+0x38>)
 8000312:	4a0d      	ldr	r2, [pc, #52]	; (8000348 <MX_CRC_Init+0x3c>)
 8000314:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000316:	4b0b      	ldr	r3, [pc, #44]	; (8000344 <MX_CRC_Init+0x38>)
 8000318:	2200      	movs	r2, #0
 800031a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800031c:	4b09      	ldr	r3, [pc, #36]	; (8000344 <MX_CRC_Init+0x38>)
 800031e:	2200      	movs	r2, #0
 8000320:	60da      	str	r2, [r3, #12]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000322:	4b08      	ldr	r3, [pc, #32]	; (8000344 <MX_CRC_Init+0x38>)
 8000324:	2200      	movs	r2, #0
 8000326:	611a      	str	r2, [r3, #16]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 8000328:	4b06      	ldr	r3, [pc, #24]	; (8000344 <MX_CRC_Init+0x38>)
 800032a:	2203      	movs	r2, #3
 800032c:	619a      	str	r2, [r3, #24]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800032e:	4b05      	ldr	r3, [pc, #20]	; (8000344 <MX_CRC_Init+0x38>)
 8000330:	0018      	movs	r0, r3
 8000332:	f000 ff3b 	bl	80011ac <HAL_CRC_Init>
 8000336:	1e03      	subs	r3, r0, #0
 8000338:	d001      	beq.n	800033e <MX_CRC_Init+0x32>
  {
    Error_Handler();
 800033a:	f000 fbe7 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800033e:	46c0      	nop			; (mov r8, r8)
 8000340:	46bd      	mov	sp, r7
 8000342:	bd80      	pop	{r7, pc}
 8000344:	2000003c 	.word	0x2000003c
 8000348:	40023000 	.word	0x40023000

0800034c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000350:	4b19      	ldr	r3, [pc, #100]	; (80003b8 <MX_SPI1_Init+0x6c>)
 8000352:	4a1a      	ldr	r2, [pc, #104]	; (80003bc <MX_SPI1_Init+0x70>)
 8000354:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000356:	4b18      	ldr	r3, [pc, #96]	; (80003b8 <MX_SPI1_Init+0x6c>)
 8000358:	2200      	movs	r2, #0
 800035a:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800035c:	4b16      	ldr	r3, [pc, #88]	; (80003b8 <MX_SPI1_Init+0x6c>)
 800035e:	2200      	movs	r2, #0
 8000360:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000362:	4b15      	ldr	r3, [pc, #84]	; (80003b8 <MX_SPI1_Init+0x6c>)
 8000364:	22e0      	movs	r2, #224	; 0xe0
 8000366:	00d2      	lsls	r2, r2, #3
 8000368:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800036a:	4b13      	ldr	r3, [pc, #76]	; (80003b8 <MX_SPI1_Init+0x6c>)
 800036c:	2200      	movs	r2, #0
 800036e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000370:	4b11      	ldr	r3, [pc, #68]	; (80003b8 <MX_SPI1_Init+0x6c>)
 8000372:	2200      	movs	r2, #0
 8000374:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000376:	4b10      	ldr	r3, [pc, #64]	; (80003b8 <MX_SPI1_Init+0x6c>)
 8000378:	2280      	movs	r2, #128	; 0x80
 800037a:	0092      	lsls	r2, r2, #2
 800037c:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800037e:	4b0e      	ldr	r3, [pc, #56]	; (80003b8 <MX_SPI1_Init+0x6c>)
 8000380:	2200      	movs	r2, #0
 8000382:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000384:	4b0c      	ldr	r3, [pc, #48]	; (80003b8 <MX_SPI1_Init+0x6c>)
 8000386:	2200      	movs	r2, #0
 8000388:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800038a:	4b0b      	ldr	r3, [pc, #44]	; (80003b8 <MX_SPI1_Init+0x6c>)
 800038c:	2200      	movs	r2, #0
 800038e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000390:	4b09      	ldr	r3, [pc, #36]	; (80003b8 <MX_SPI1_Init+0x6c>)
 8000392:	2207      	movs	r2, #7
 8000394:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000396:	4b08      	ldr	r3, [pc, #32]	; (80003b8 <MX_SPI1_Init+0x6c>)
 8000398:	2200      	movs	r2, #0
 800039a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800039c:	4b06      	ldr	r3, [pc, #24]	; (80003b8 <MX_SPI1_Init+0x6c>)
 800039e:	2200      	movs	r2, #0
 80003a0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003a2:	4b05      	ldr	r3, [pc, #20]	; (80003b8 <MX_SPI1_Init+0x6c>)
 80003a4:	0018      	movs	r0, r3
 80003a6:	f001 fefd 	bl	80021a4 <HAL_SPI_Init>
 80003aa:	1e03      	subs	r3, r0, #0
 80003ac:	d001      	beq.n	80003b2 <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 80003ae:	f000 fbad 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80003b2:	46c0      	nop			; (mov r8, r8)
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	20000058 	.word	0x20000058
 80003bc:	40013000 	.word	0x40013000

080003c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b092      	sub	sp, #72	; 0x48
 80003c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003c6:	2340      	movs	r3, #64	; 0x40
 80003c8:	18fb      	adds	r3, r7, r3
 80003ca:	0018      	movs	r0, r3
 80003cc:	2308      	movs	r3, #8
 80003ce:	001a      	movs	r2, r3
 80003d0:	2100      	movs	r1, #0
 80003d2:	f003 f85f 	bl	8003494 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003d6:	2324      	movs	r3, #36	; 0x24
 80003d8:	18fb      	adds	r3, r7, r3
 80003da:	0018      	movs	r0, r3
 80003dc:	231c      	movs	r3, #28
 80003de:	001a      	movs	r2, r3
 80003e0:	2100      	movs	r1, #0
 80003e2:	f003 f857 	bl	8003494 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80003e6:	1d3b      	adds	r3, r7, #4
 80003e8:	0018      	movs	r0, r3
 80003ea:	2320      	movs	r3, #32
 80003ec:	001a      	movs	r2, r3
 80003ee:	2100      	movs	r1, #0
 80003f0:	f003 f850 	bl	8003494 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003f4:	4b4b      	ldr	r3, [pc, #300]	; (8000524 <MX_TIM1_Init+0x164>)
 80003f6:	4a4c      	ldr	r2, [pc, #304]	; (8000528 <MX_TIM1_Init+0x168>)
 80003f8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 32-1;
 80003fa:	4b4a      	ldr	r3, [pc, #296]	; (8000524 <MX_TIM1_Init+0x164>)
 80003fc:	221f      	movs	r2, #31
 80003fe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000400:	4b48      	ldr	r3, [pc, #288]	; (8000524 <MX_TIM1_Init+0x164>)
 8000402:	2200      	movs	r2, #0
 8000404:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 500-1;
 8000406:	4b47      	ldr	r3, [pc, #284]	; (8000524 <MX_TIM1_Init+0x164>)
 8000408:	22f4      	movs	r2, #244	; 0xf4
 800040a:	32ff      	adds	r2, #255	; 0xff
 800040c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800040e:	4b45      	ldr	r3, [pc, #276]	; (8000524 <MX_TIM1_Init+0x164>)
 8000410:	2200      	movs	r2, #0
 8000412:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000414:	4b43      	ldr	r3, [pc, #268]	; (8000524 <MX_TIM1_Init+0x164>)
 8000416:	2200      	movs	r2, #0
 8000418:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800041a:	4b42      	ldr	r3, [pc, #264]	; (8000524 <MX_TIM1_Init+0x164>)
 800041c:	2200      	movs	r2, #0
 800041e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000420:	4b40      	ldr	r3, [pc, #256]	; (8000524 <MX_TIM1_Init+0x164>)
 8000422:	0018      	movs	r0, r3
 8000424:	f002 fc14 	bl	8002c50 <HAL_TIM_PWM_Init>
 8000428:	1e03      	subs	r3, r0, #0
 800042a:	d001      	beq.n	8000430 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 800042c:	f000 fb6e 	bl	8000b0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000430:	2140      	movs	r1, #64	; 0x40
 8000432:	187b      	adds	r3, r7, r1
 8000434:	2200      	movs	r2, #0
 8000436:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000438:	187b      	adds	r3, r7, r1
 800043a:	2200      	movs	r2, #0
 800043c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800043e:	187a      	adds	r2, r7, r1
 8000440:	4b38      	ldr	r3, [pc, #224]	; (8000524 <MX_TIM1_Init+0x164>)
 8000442:	0011      	movs	r1, r2
 8000444:	0018      	movs	r0, r3
 8000446:	f002 ff6f 	bl	8003328 <HAL_TIMEx_MasterConfigSynchronization>
 800044a:	1e03      	subs	r3, r0, #0
 800044c:	d001      	beq.n	8000452 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800044e:	f000 fb5d 	bl	8000b0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000452:	2124      	movs	r1, #36	; 0x24
 8000454:	187b      	adds	r3, r7, r1
 8000456:	2260      	movs	r2, #96	; 0x60
 8000458:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800045a:	187b      	adds	r3, r7, r1
 800045c:	2200      	movs	r2, #0
 800045e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000460:	187b      	adds	r3, r7, r1
 8000462:	2200      	movs	r2, #0
 8000464:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000466:	187b      	adds	r3, r7, r1
 8000468:	2200      	movs	r2, #0
 800046a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800046c:	187b      	adds	r3, r7, r1
 800046e:	2200      	movs	r2, #0
 8000470:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000472:	187b      	adds	r3, r7, r1
 8000474:	2200      	movs	r2, #0
 8000476:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000478:	187b      	adds	r3, r7, r1
 800047a:	2200      	movs	r2, #0
 800047c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800047e:	1879      	adds	r1, r7, r1
 8000480:	4b28      	ldr	r3, [pc, #160]	; (8000524 <MX_TIM1_Init+0x164>)
 8000482:	2200      	movs	r2, #0
 8000484:	0018      	movs	r0, r3
 8000486:	f002 fc33 	bl	8002cf0 <HAL_TIM_PWM_ConfigChannel>
 800048a:	1e03      	subs	r3, r0, #0
 800048c:	d001      	beq.n	8000492 <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 800048e:	f000 fb3d 	bl	8000b0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000492:	2324      	movs	r3, #36	; 0x24
 8000494:	18f9      	adds	r1, r7, r3
 8000496:	4b23      	ldr	r3, [pc, #140]	; (8000524 <MX_TIM1_Init+0x164>)
 8000498:	2204      	movs	r2, #4
 800049a:	0018      	movs	r0, r3
 800049c:	f002 fc28 	bl	8002cf0 <HAL_TIM_PWM_ConfigChannel>
 80004a0:	1e03      	subs	r3, r0, #0
 80004a2:	d001      	beq.n	80004a8 <MX_TIM1_Init+0xe8>
  {
    Error_Handler();
 80004a4:	f000 fb32 	bl	8000b0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80004a8:	2324      	movs	r3, #36	; 0x24
 80004aa:	18f9      	adds	r1, r7, r3
 80004ac:	4b1d      	ldr	r3, [pc, #116]	; (8000524 <MX_TIM1_Init+0x164>)
 80004ae:	2208      	movs	r2, #8
 80004b0:	0018      	movs	r0, r3
 80004b2:	f002 fc1d 	bl	8002cf0 <HAL_TIM_PWM_ConfigChannel>
 80004b6:	1e03      	subs	r3, r0, #0
 80004b8:	d001      	beq.n	80004be <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80004ba:	f000 fb27 	bl	8000b0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80004be:	2324      	movs	r3, #36	; 0x24
 80004c0:	18f9      	adds	r1, r7, r3
 80004c2:	4b18      	ldr	r3, [pc, #96]	; (8000524 <MX_TIM1_Init+0x164>)
 80004c4:	220c      	movs	r2, #12
 80004c6:	0018      	movs	r0, r3
 80004c8:	f002 fc12 	bl	8002cf0 <HAL_TIM_PWM_ConfigChannel>
 80004cc:	1e03      	subs	r3, r0, #0
 80004ce:	d001      	beq.n	80004d4 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 80004d0:	f000 fb1c 	bl	8000b0c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80004d4:	1d3b      	adds	r3, r7, #4
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80004da:	1d3b      	adds	r3, r7, #4
 80004dc:	2200      	movs	r2, #0
 80004de:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80004e0:	1d3b      	adds	r3, r7, #4
 80004e2:	2200      	movs	r2, #0
 80004e4:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80004e6:	1d3b      	adds	r3, r7, #4
 80004e8:	2200      	movs	r2, #0
 80004ea:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80004ec:	1d3b      	adds	r3, r7, #4
 80004ee:	2200      	movs	r2, #0
 80004f0:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80004f2:	1d3b      	adds	r3, r7, #4
 80004f4:	2280      	movs	r2, #128	; 0x80
 80004f6:	0192      	lsls	r2, r2, #6
 80004f8:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80004fa:	1d3b      	adds	r3, r7, #4
 80004fc:	2200      	movs	r2, #0
 80004fe:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000500:	1d3a      	adds	r2, r7, #4
 8000502:	4b08      	ldr	r3, [pc, #32]	; (8000524 <MX_TIM1_Init+0x164>)
 8000504:	0011      	movs	r1, r2
 8000506:	0018      	movs	r0, r3
 8000508:	f002 ff66 	bl	80033d8 <HAL_TIMEx_ConfigBreakDeadTime>
 800050c:	1e03      	subs	r3, r0, #0
 800050e:	d001      	beq.n	8000514 <MX_TIM1_Init+0x154>
  {
    Error_Handler();
 8000510:	f000 fafc 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000514:	4b03      	ldr	r3, [pc, #12]	; (8000524 <MX_TIM1_Init+0x164>)
 8000516:	0018      	movs	r0, r3
 8000518:	f000 fbda 	bl	8000cd0 <HAL_TIM_MspPostInit>

}
 800051c:	46c0      	nop			; (mov r8, r8)
 800051e:	46bd      	mov	sp, r7
 8000520:	b012      	add	sp, #72	; 0x48
 8000522:	bd80      	pop	{r7, pc}
 8000524:	200000bc 	.word	0x200000bc
 8000528:	40012c00 	.word	0x40012c00

0800052c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b08a      	sub	sp, #40	; 0x28
 8000530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000532:	2320      	movs	r3, #32
 8000534:	18fb      	adds	r3, r7, r3
 8000536:	0018      	movs	r0, r3
 8000538:	2308      	movs	r3, #8
 800053a:	001a      	movs	r2, r3
 800053c:	2100      	movs	r1, #0
 800053e:	f002 ffa9 	bl	8003494 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000542:	1d3b      	adds	r3, r7, #4
 8000544:	0018      	movs	r0, r3
 8000546:	231c      	movs	r3, #28
 8000548:	001a      	movs	r2, r3
 800054a:	2100      	movs	r1, #0
 800054c:	f002 ffa2 	bl	8003494 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000550:	4b36      	ldr	r3, [pc, #216]	; (800062c <MX_TIM2_Init+0x100>)
 8000552:	2280      	movs	r2, #128	; 0x80
 8000554:	05d2      	lsls	r2, r2, #23
 8000556:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32-1;
 8000558:	4b34      	ldr	r3, [pc, #208]	; (800062c <MX_TIM2_Init+0x100>)
 800055a:	221f      	movs	r2, #31
 800055c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800055e:	4b33      	ldr	r3, [pc, #204]	; (800062c <MX_TIM2_Init+0x100>)
 8000560:	2200      	movs	r2, #0
 8000562:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 500-1;
 8000564:	4b31      	ldr	r3, [pc, #196]	; (800062c <MX_TIM2_Init+0x100>)
 8000566:	22f4      	movs	r2, #244	; 0xf4
 8000568:	32ff      	adds	r2, #255	; 0xff
 800056a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800056c:	4b2f      	ldr	r3, [pc, #188]	; (800062c <MX_TIM2_Init+0x100>)
 800056e:	2200      	movs	r2, #0
 8000570:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000572:	4b2e      	ldr	r3, [pc, #184]	; (800062c <MX_TIM2_Init+0x100>)
 8000574:	2200      	movs	r2, #0
 8000576:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000578:	4b2c      	ldr	r3, [pc, #176]	; (800062c <MX_TIM2_Init+0x100>)
 800057a:	0018      	movs	r0, r3
 800057c:	f002 fb68 	bl	8002c50 <HAL_TIM_PWM_Init>
 8000580:	1e03      	subs	r3, r0, #0
 8000582:	d001      	beq.n	8000588 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000584:	f000 fac2 	bl	8000b0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000588:	2120      	movs	r1, #32
 800058a:	187b      	adds	r3, r7, r1
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000590:	187b      	adds	r3, r7, r1
 8000592:	2200      	movs	r2, #0
 8000594:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000596:	187a      	adds	r2, r7, r1
 8000598:	4b24      	ldr	r3, [pc, #144]	; (800062c <MX_TIM2_Init+0x100>)
 800059a:	0011      	movs	r1, r2
 800059c:	0018      	movs	r0, r3
 800059e:	f002 fec3 	bl	8003328 <HAL_TIMEx_MasterConfigSynchronization>
 80005a2:	1e03      	subs	r3, r0, #0
 80005a4:	d001      	beq.n	80005aa <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80005a6:	f000 fab1 	bl	8000b0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005aa:	1d3b      	adds	r3, r7, #4
 80005ac:	2260      	movs	r2, #96	; 0x60
 80005ae:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80005b0:	1d3b      	adds	r3, r7, #4
 80005b2:	2200      	movs	r2, #0
 80005b4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005b6:	1d3b      	adds	r3, r7, #4
 80005b8:	2200      	movs	r2, #0
 80005ba:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005bc:	1d3b      	adds	r3, r7, #4
 80005be:	2200      	movs	r2, #0
 80005c0:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005c2:	1d39      	adds	r1, r7, #4
 80005c4:	4b19      	ldr	r3, [pc, #100]	; (800062c <MX_TIM2_Init+0x100>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	0018      	movs	r0, r3
 80005ca:	f002 fb91 	bl	8002cf0 <HAL_TIM_PWM_ConfigChannel>
 80005ce:	1e03      	subs	r3, r0, #0
 80005d0:	d001      	beq.n	80005d6 <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 80005d2:	f000 fa9b 	bl	8000b0c <Error_Handler>
  }
  sConfigOC.Pulse = 375;
 80005d6:	1d3b      	adds	r3, r7, #4
 80005d8:	2278      	movs	r2, #120	; 0x78
 80005da:	32ff      	adds	r2, #255	; 0xff
 80005dc:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80005de:	1d39      	adds	r1, r7, #4
 80005e0:	4b12      	ldr	r3, [pc, #72]	; (800062c <MX_TIM2_Init+0x100>)
 80005e2:	2204      	movs	r2, #4
 80005e4:	0018      	movs	r0, r3
 80005e6:	f002 fb83 	bl	8002cf0 <HAL_TIM_PWM_ConfigChannel>
 80005ea:	1e03      	subs	r3, r0, #0
 80005ec:	d001      	beq.n	80005f2 <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 80005ee:	f000 fa8d 	bl	8000b0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80005f2:	1d39      	adds	r1, r7, #4
 80005f4:	4b0d      	ldr	r3, [pc, #52]	; (800062c <MX_TIM2_Init+0x100>)
 80005f6:	2208      	movs	r2, #8
 80005f8:	0018      	movs	r0, r3
 80005fa:	f002 fb79 	bl	8002cf0 <HAL_TIM_PWM_ConfigChannel>
 80005fe:	1e03      	subs	r3, r0, #0
 8000600:	d001      	beq.n	8000606 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000602:	f000 fa83 	bl	8000b0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000606:	1d39      	adds	r1, r7, #4
 8000608:	4b08      	ldr	r3, [pc, #32]	; (800062c <MX_TIM2_Init+0x100>)
 800060a:	220c      	movs	r2, #12
 800060c:	0018      	movs	r0, r3
 800060e:	f002 fb6f 	bl	8002cf0 <HAL_TIM_PWM_ConfigChannel>
 8000612:	1e03      	subs	r3, r0, #0
 8000614:	d001      	beq.n	800061a <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000616:	f000 fa79 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800061a:	4b04      	ldr	r3, [pc, #16]	; (800062c <MX_TIM2_Init+0x100>)
 800061c:	0018      	movs	r0, r3
 800061e:	f000 fb57 	bl	8000cd0 <HAL_TIM_MspPostInit>

}
 8000622:	46c0      	nop			; (mov r8, r8)
 8000624:	46bd      	mov	sp, r7
 8000626:	b00a      	add	sp, #40	; 0x28
 8000628:	bd80      	pop	{r7, pc}
 800062a:	46c0      	nop			; (mov r8, r8)
 800062c:	20000104 	.word	0x20000104

08000630 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b08a      	sub	sp, #40	; 0x28
 8000634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000636:	2320      	movs	r3, #32
 8000638:	18fb      	adds	r3, r7, r3
 800063a:	0018      	movs	r0, r3
 800063c:	2308      	movs	r3, #8
 800063e:	001a      	movs	r2, r3
 8000640:	2100      	movs	r1, #0
 8000642:	f002 ff27 	bl	8003494 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000646:	1d3b      	adds	r3, r7, #4
 8000648:	0018      	movs	r0, r3
 800064a:	231c      	movs	r3, #28
 800064c:	001a      	movs	r2, r3
 800064e:	2100      	movs	r1, #0
 8000650:	f002 ff20 	bl	8003494 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000654:	4b34      	ldr	r3, [pc, #208]	; (8000728 <MX_TIM3_Init+0xf8>)
 8000656:	4a35      	ldr	r2, [pc, #212]	; (800072c <MX_TIM3_Init+0xfc>)
 8000658:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32-1;
 800065a:	4b33      	ldr	r3, [pc, #204]	; (8000728 <MX_TIM3_Init+0xf8>)
 800065c:	221f      	movs	r2, #31
 800065e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000660:	4b31      	ldr	r3, [pc, #196]	; (8000728 <MX_TIM3_Init+0xf8>)
 8000662:	2200      	movs	r2, #0
 8000664:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500-1;
 8000666:	4b30      	ldr	r3, [pc, #192]	; (8000728 <MX_TIM3_Init+0xf8>)
 8000668:	22f4      	movs	r2, #244	; 0xf4
 800066a:	32ff      	adds	r2, #255	; 0xff
 800066c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800066e:	4b2e      	ldr	r3, [pc, #184]	; (8000728 <MX_TIM3_Init+0xf8>)
 8000670:	2200      	movs	r2, #0
 8000672:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000674:	4b2c      	ldr	r3, [pc, #176]	; (8000728 <MX_TIM3_Init+0xf8>)
 8000676:	2200      	movs	r2, #0
 8000678:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800067a:	4b2b      	ldr	r3, [pc, #172]	; (8000728 <MX_TIM3_Init+0xf8>)
 800067c:	0018      	movs	r0, r3
 800067e:	f002 fae7 	bl	8002c50 <HAL_TIM_PWM_Init>
 8000682:	1e03      	subs	r3, r0, #0
 8000684:	d001      	beq.n	800068a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000686:	f000 fa41 	bl	8000b0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800068a:	2120      	movs	r1, #32
 800068c:	187b      	adds	r3, r7, r1
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000692:	187b      	adds	r3, r7, r1
 8000694:	2200      	movs	r2, #0
 8000696:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000698:	187a      	adds	r2, r7, r1
 800069a:	4b23      	ldr	r3, [pc, #140]	; (8000728 <MX_TIM3_Init+0xf8>)
 800069c:	0011      	movs	r1, r2
 800069e:	0018      	movs	r0, r3
 80006a0:	f002 fe42 	bl	8003328 <HAL_TIMEx_MasterConfigSynchronization>
 80006a4:	1e03      	subs	r3, r0, #0
 80006a6:	d001      	beq.n	80006ac <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80006a8:	f000 fa30 	bl	8000b0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006ac:	1d3b      	adds	r3, r7, #4
 80006ae:	2260      	movs	r2, #96	; 0x60
 80006b0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 375;
 80006b2:	1d3b      	adds	r3, r7, #4
 80006b4:	2278      	movs	r2, #120	; 0x78
 80006b6:	32ff      	adds	r2, #255	; 0xff
 80006b8:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006c0:	1d3b      	adds	r3, r7, #4
 80006c2:	2200      	movs	r2, #0
 80006c4:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006c6:	1d39      	adds	r1, r7, #4
 80006c8:	4b17      	ldr	r3, [pc, #92]	; (8000728 <MX_TIM3_Init+0xf8>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	0018      	movs	r0, r3
 80006ce:	f002 fb0f 	bl	8002cf0 <HAL_TIM_PWM_ConfigChannel>
 80006d2:	1e03      	subs	r3, r0, #0
 80006d4:	d001      	beq.n	80006da <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 80006d6:	f000 fa19 	bl	8000b0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80006da:	1d39      	adds	r1, r7, #4
 80006dc:	4b12      	ldr	r3, [pc, #72]	; (8000728 <MX_TIM3_Init+0xf8>)
 80006de:	2204      	movs	r2, #4
 80006e0:	0018      	movs	r0, r3
 80006e2:	f002 fb05 	bl	8002cf0 <HAL_TIM_PWM_ConfigChannel>
 80006e6:	1e03      	subs	r3, r0, #0
 80006e8:	d001      	beq.n	80006ee <MX_TIM3_Init+0xbe>
  {
    Error_Handler();
 80006ea:	f000 fa0f 	bl	8000b0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80006ee:	1d39      	adds	r1, r7, #4
 80006f0:	4b0d      	ldr	r3, [pc, #52]	; (8000728 <MX_TIM3_Init+0xf8>)
 80006f2:	2208      	movs	r2, #8
 80006f4:	0018      	movs	r0, r3
 80006f6:	f002 fafb 	bl	8002cf0 <HAL_TIM_PWM_ConfigChannel>
 80006fa:	1e03      	subs	r3, r0, #0
 80006fc:	d001      	beq.n	8000702 <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 80006fe:	f000 fa05 	bl	8000b0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000702:	1d39      	adds	r1, r7, #4
 8000704:	4b08      	ldr	r3, [pc, #32]	; (8000728 <MX_TIM3_Init+0xf8>)
 8000706:	220c      	movs	r2, #12
 8000708:	0018      	movs	r0, r3
 800070a:	f002 faf1 	bl	8002cf0 <HAL_TIM_PWM_ConfigChannel>
 800070e:	1e03      	subs	r3, r0, #0
 8000710:	d001      	beq.n	8000716 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8000712:	f000 f9fb 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000716:	4b04      	ldr	r3, [pc, #16]	; (8000728 <MX_TIM3_Init+0xf8>)
 8000718:	0018      	movs	r0, r3
 800071a:	f000 fad9 	bl	8000cd0 <HAL_TIM_MspPostInit>

}
 800071e:	46c0      	nop			; (mov r8, r8)
 8000720:	46bd      	mov	sp, r7
 8000722:	b00a      	add	sp, #40	; 0x28
 8000724:	bd80      	pop	{r7, pc}
 8000726:	46c0      	nop			; (mov r8, r8)
 8000728:	2000014c 	.word	0x2000014c
 800072c:	40000400 	.word	0x40000400

08000730 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000730:	b590      	push	{r4, r7, lr}
 8000732:	b089      	sub	sp, #36	; 0x24
 8000734:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000736:	240c      	movs	r4, #12
 8000738:	193b      	adds	r3, r7, r4
 800073a:	0018      	movs	r0, r3
 800073c:	2314      	movs	r3, #20
 800073e:	001a      	movs	r2, r3
 8000740:	2100      	movs	r1, #0
 8000742:	f002 fea7 	bl	8003494 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000746:	4b1c      	ldr	r3, [pc, #112]	; (80007b8 <MX_GPIO_Init+0x88>)
 8000748:	695a      	ldr	r2, [r3, #20]
 800074a:	4b1b      	ldr	r3, [pc, #108]	; (80007b8 <MX_GPIO_Init+0x88>)
 800074c:	2180      	movs	r1, #128	; 0x80
 800074e:	0289      	lsls	r1, r1, #10
 8000750:	430a      	orrs	r2, r1
 8000752:	615a      	str	r2, [r3, #20]
 8000754:	4b18      	ldr	r3, [pc, #96]	; (80007b8 <MX_GPIO_Init+0x88>)
 8000756:	695a      	ldr	r2, [r3, #20]
 8000758:	2380      	movs	r3, #128	; 0x80
 800075a:	029b      	lsls	r3, r3, #10
 800075c:	4013      	ands	r3, r2
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000762:	4b15      	ldr	r3, [pc, #84]	; (80007b8 <MX_GPIO_Init+0x88>)
 8000764:	695a      	ldr	r2, [r3, #20]
 8000766:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <MX_GPIO_Init+0x88>)
 8000768:	2180      	movs	r1, #128	; 0x80
 800076a:	02c9      	lsls	r1, r1, #11
 800076c:	430a      	orrs	r2, r1
 800076e:	615a      	str	r2, [r3, #20]
 8000770:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <MX_GPIO_Init+0x88>)
 8000772:	695a      	ldr	r2, [r3, #20]
 8000774:	2380      	movs	r3, #128	; 0x80
 8000776:	02db      	lsls	r3, r3, #11
 8000778:	4013      	ands	r3, r2
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <MX_GPIO_Init+0x8c>)
 8000780:	2200      	movs	r2, #0
 8000782:	2140      	movs	r1, #64	; 0x40
 8000784:	0018      	movs	r0, r3
 8000786:	f001 f81d 	bl	80017c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800078a:	0021      	movs	r1, r4
 800078c:	187b      	adds	r3, r7, r1
 800078e:	2240      	movs	r2, #64	; 0x40
 8000790:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000792:	187b      	adds	r3, r7, r1
 8000794:	2201      	movs	r2, #1
 8000796:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	187b      	adds	r3, r7, r1
 800079a:	2200      	movs	r2, #0
 800079c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079e:	187b      	adds	r3, r7, r1
 80007a0:	2200      	movs	r2, #0
 80007a2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a4:	187b      	adds	r3, r7, r1
 80007a6:	4a05      	ldr	r2, [pc, #20]	; (80007bc <MX_GPIO_Init+0x8c>)
 80007a8:	0019      	movs	r1, r3
 80007aa:	0010      	movs	r0, r2
 80007ac:	f000 fea2 	bl	80014f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007b0:	46c0      	nop			; (mov r8, r8)
 80007b2:	46bd      	mov	sp, r7
 80007b4:	b009      	add	sp, #36	; 0x24
 80007b6:	bd90      	pop	{r4, r7, pc}
 80007b8:	40021000 	.word	0x40021000
 80007bc:	48000400 	.word	0x48000400

080007c0 <EnablePWMOutput>:

/* USER CODE BEGIN 4 */

void EnablePWMOutput(TIM_HandleTypeDef *_htim) {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	//  Set HAL Timer Channel Status
	TIM_CHANNEL_STATE_SET_ALL(_htim, HAL_TIM_CHANNEL_STATE_BUSY);
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	223e      	movs	r2, #62	; 0x3e
 80007cc:	2102      	movs	r1, #2
 80007ce:	5499      	strb	r1, [r3, r2]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	223f      	movs	r2, #63	; 0x3f
 80007d4:	2102      	movs	r1, #2
 80007d6:	5499      	strb	r1, [r3, r2]
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	2240      	movs	r2, #64	; 0x40
 80007dc:	2102      	movs	r1, #2
 80007de:	5499      	strb	r1, [r3, r2]
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	2241      	movs	r2, #65	; 0x41
 80007e4:	2102      	movs	r1, #2
 80007e6:	5499      	strb	r1, [r3, r2]

	//  Enable outputs for all 4 PWM Channels
	_htim->Instance->CCER |= (TIM_CCER_CC1E | TIM_CCER_CC2E | TIM_CCER_CC3E | TIM_CCER_CC4E);
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	6a1a      	ldr	r2, [r3, #32]
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	4907      	ldr	r1, [pc, #28]	; (8000810 <EnablePWMOutput+0x50>)
 80007f4:	430a      	orrs	r2, r1
 80007f6:	621a      	str	r2, [r3, #32]

	//  Enable Timer Counter
	_htim->Instance->CR1 |= TIM_CR1_CEN;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	681a      	ldr	r2, [r3, #0]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	2101      	movs	r1, #1
 8000804:	430a      	orrs	r2, r1
 8000806:	601a      	str	r2, [r3, #0]
}
 8000808:	46c0      	nop			; (mov r8, r8)
 800080a:	46bd      	mov	sp, r7
 800080c:	b002      	add	sp, #8
 800080e:	bd80      	pop	{r7, pc}
 8000810:	00001111 	.word	0x00001111

08000814 <CRC_compare>:

// Configure the CRC polynomial (e.g., CRC-CCITT)
// hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;

 uint8_t CRC_compare(struct tctp_message received_msg)
 {
 8000814:	b084      	sub	sp, #16
 8000816:	b5b0      	push	{r4, r5, r7, lr}
 8000818:	b094      	sub	sp, #80	; 0x50
 800081a:	af00      	add	r7, sp, #0
 800081c:	2560      	movs	r5, #96	; 0x60
 800081e:	197c      	adds	r4, r7, r5
 8000820:	6020      	str	r0, [r4, #0]
 8000822:	6061      	str	r1, [r4, #4]
 8000824:	60a2      	str	r2, [r4, #8]
 8000826:	60e3      	str	r3, [r4, #12]
     //HAL_CRC_Reset(&hcrc);
     /* I think this will calculate the CRC of the message including the CRC in it, needs
      * to just be calculating on everything before the CRC. Does the -2 fix it? */
     //HAL_CRC_Accumulate(&hcrc, (uint32_t*)&received_msg, ((sizeof(received_msg) - 2) / 4));

     uint16_t received_crc = received_msg.crc;
 8000828:	234a      	movs	r3, #74	; 0x4a
 800082a:	18fa      	adds	r2, r7, r3
 800082c:	197b      	adds	r3, r7, r5
 800082e:	7bd9      	ldrb	r1, [r3, #15]
 8000830:	7c1b      	ldrb	r3, [r3, #16]
 8000832:	021b      	lsls	r3, r3, #8
 8000834:	430b      	orrs	r3, r1
 8000836:	8013      	strh	r3, [r2, #0]
     //uint32_t calculated_crc = HAL_CRC_Calculate(&hcrc, (uint32_t*)&received_msg, sizeof(received_msg) - 2);

     uint32_t SPI_RX_Buffer_32[SPI_BUFFER_SIZE];

     int i;
     for (i=0;i<SPI_BUFFER_SIZE;i++) {
 8000838:	2300      	movs	r3, #0
 800083a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800083c:	e00b      	b.n	8000856 <CRC_compare+0x42>
   	  SPI_RX_Buffer_32[i] = (uint32_t) SPI_RX_Buffer[i];
 800083e:	4a14      	ldr	r2, [pc, #80]	; (8000890 <CRC_compare+0x7c>)
 8000840:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000842:	18d3      	adds	r3, r2, r3
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	0019      	movs	r1, r3
 8000848:	003b      	movs	r3, r7
 800084a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800084c:	0092      	lsls	r2, r2, #2
 800084e:	50d1      	str	r1, [r2, r3]
     for (i=0;i<SPI_BUFFER_SIZE;i++) {
 8000850:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000852:	3301      	adds	r3, #1
 8000854:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000856:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000858:	2b10      	cmp	r3, #16
 800085a:	ddf0      	ble.n	800083e <CRC_compare+0x2a>
     }

     uint32_t calculated_crc = HAL_CRC_Calculate(&hcrc, SPI_RX_Buffer_32, 15);
 800085c:	0039      	movs	r1, r7
 800085e:	4b0d      	ldr	r3, [pc, #52]	; (8000894 <CRC_compare+0x80>)
 8000860:	220f      	movs	r2, #15
 8000862:	0018      	movs	r0, r3
 8000864:	f000 fce9 	bl	800123a <HAL_CRC_Calculate>
 8000868:	0003      	movs	r3, r0
 800086a:	647b      	str	r3, [r7, #68]	; 0x44
     calculated_crc = (uint16_t) calculated_crc;
 800086c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800086e:	b29b      	uxth	r3, r3
 8000870:	647b      	str	r3, [r7, #68]	; 0x44
     //uint32_t NEW_RX_Buffer[3];
     //NEW_RX_Buffer[0] = SPI_RX_Buffer[0] << |;
     //uint32_t calculated_crc = HAL_CRC_Calculate(&hcrc, SPI_RX_Buffer, 11);


     return received_crc == calculated_crc;
 8000872:	234a      	movs	r3, #74	; 0x4a
 8000874:	18fb      	adds	r3, r7, r3
 8000876:	881b      	ldrh	r3, [r3, #0]
 8000878:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800087a:	1ad3      	subs	r3, r2, r3
 800087c:	425a      	negs	r2, r3
 800087e:	4153      	adcs	r3, r2
 8000880:	b2db      	uxtb	r3, r3
 }
 8000882:	0018      	movs	r0, r3
 8000884:	46bd      	mov	sp, r7
 8000886:	b014      	add	sp, #80	; 0x50
 8000888:	bcb0      	pop	{r4, r5, r7}
 800088a:	bc08      	pop	{r3}
 800088c:	b004      	add	sp, #16
 800088e:	4718      	bx	r3
 8000890:	20000000 	.word	0x20000000
 8000894:	2000003c 	.word	0x2000003c

08000898 <tctp_handler>:

uint8_t tctp_handler(struct tctp_message received, struct tctp_message_tx* send_me)
{
 8000898:	b084      	sub	sp, #16
 800089a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800089c:	b089      	sub	sp, #36	; 0x24
 800089e:	af02      	add	r7, sp, #8
 80008a0:	2528      	movs	r5, #40	; 0x28
 80008a2:	2608      	movs	r6, #8
 80008a4:	19ac      	adds	r4, r5, r6
 80008a6:	19e4      	adds	r4, r4, r7
 80008a8:	6020      	str	r0, [r4, #0]
 80008aa:	6061      	str	r1, [r4, #4]
 80008ac:	60a2      	str	r2, [r4, #8]
 80008ae:	60e3      	str	r3, [r4, #12]
    /* Once we recieve this we need to calculate its CRC to determine if it is valid */
    struct tctp_message message = {
 80008b0:	1d3b      	adds	r3, r7, #4
 80008b2:	0018      	movs	r0, r3
 80008b4:	2311      	movs	r3, #17
 80008b6:	001a      	movs	r2, r3
 80008b8:	2100      	movs	r1, #0
 80008ba:	f002 fdeb 	bl	8003494 <memset>
        .message_id = received.message_id,
 80008be:	19aa      	adds	r2, r5, r6
 80008c0:	19d3      	adds	r3, r2, r7
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	021b      	lsls	r3, r3, #8
 80008c6:	0c1b      	lsrs	r3, r3, #16
 80008c8:	b29a      	uxth	r2, r3
    struct tctp_message message = {
 80008ca:	1d3b      	adds	r3, r7, #4
 80008cc:	3301      	adds	r3, #1
 80008ce:	21ff      	movs	r1, #255	; 0xff
 80008d0:	4011      	ands	r1, r2
 80008d2:	000c      	movs	r4, r1
 80008d4:	7819      	ldrb	r1, [r3, #0]
 80008d6:	2000      	movs	r0, #0
 80008d8:	4001      	ands	r1, r0
 80008da:	1c08      	adds	r0, r1, #0
 80008dc:	1c21      	adds	r1, r4, #0
 80008de:	4301      	orrs	r1, r0
 80008e0:	7019      	strb	r1, [r3, #0]
 80008e2:	0a12      	lsrs	r2, r2, #8
 80008e4:	b290      	uxth	r0, r2
 80008e6:	785a      	ldrb	r2, [r3, #1]
 80008e8:	2100      	movs	r1, #0
 80008ea:	400a      	ands	r2, r1
 80008ec:	1c11      	adds	r1, r2, #0
 80008ee:	1c02      	adds	r2, r0, #0
 80008f0:	430a      	orrs	r2, r1
 80008f2:	705a      	strb	r2, [r3, #1]
//            .padding = 0,
//        },
        .crc = 0, /* Placeholder, we may have hardware calculate this for us */
    };

    uint8_t message_correct = CRC_compare(received);
 80008f4:	2617      	movs	r6, #23
 80008f6:	19bc      	adds	r4, r7, r6
 80008f8:	2308      	movs	r3, #8
 80008fa:	18eb      	adds	r3, r5, r3
 80008fc:	19db      	adds	r3, r3, r7
 80008fe:	466a      	mov	r2, sp
 8000900:	7c19      	ldrb	r1, [r3, #16]
 8000902:	7011      	strb	r1, [r2, #0]
 8000904:	6818      	ldr	r0, [r3, #0]
 8000906:	6859      	ldr	r1, [r3, #4]
 8000908:	689a      	ldr	r2, [r3, #8]
 800090a:	68db      	ldr	r3, [r3, #12]
 800090c:	f7ff ff82 	bl	8000814 <CRC_compare>
 8000910:	0003      	movs	r3, r0
 8000912:	7023      	strb	r3, [r4, #0]
    // message_correct = (expected_msg_id == received.message_id);

    /* maybe add back error codes to say what is wrong with the message,
     * ex: CRC wrong, unmatching msg ids etc */

    if (message_correct) {
 8000914:	19bb      	adds	r3, r7, r6
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d003      	beq.n	8000924 <tctp_handler+0x8c>
        message.type = ACK;
 800091c:	1d3b      	adds	r3, r7, #4
 800091e:	2201      	movs	r2, #1
 8000920:	701a      	strb	r2, [r3, #0]
 8000922:	e002      	b.n	800092a <tctp_handler+0x92>
    } else {
        message.type = NACK;
 8000924:	1d3b      	adds	r3, r7, #4
 8000926:	2200      	movs	r2, #0
 8000928:	701a      	strb	r2, [r3, #0]
    //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);

    // MAYBE TODO FOR THE FUTURE
    //expected_msg_id++;

    return message_correct;
 800092a:	2317      	movs	r3, #23
 800092c:	18fb      	adds	r3, r7, r3
 800092e:	781b      	ldrb	r3, [r3, #0]
}
 8000930:	0018      	movs	r0, r3
 8000932:	46bd      	mov	sp, r7
 8000934:	b007      	add	sp, #28
 8000936:	bcf0      	pop	{r4, r5, r6, r7}
 8000938:	bc08      	pop	{r3}
 800093a:	b004      	add	sp, #16
 800093c:	4718      	bx	r3
	...

08000940 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef * hspi)
{
 8000940:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000942:	b08b      	sub	sp, #44	; 0x2c
 8000944:	af02      	add	r7, sp, #8
 8000946:	6078      	str	r0, [r7, #4]
    struct tctp_message* received_msg = (struct tctp_message*) SPI_RX_Buffer;
 8000948:	4b65      	ldr	r3, [pc, #404]	; (8000ae0 <HAL_SPI_TxRxCpltCallback+0x1a0>)
 800094a:	61bb      	str	r3, [r7, #24]
    struct tctp_message_tx* send_me = NULL;
 800094c:	2300      	movs	r3, #0
 800094e:	617b      	str	r3, [r7, #20]
    uint8_t message_correct = tctp_handler(*received_msg, send_me);
 8000950:	2313      	movs	r3, #19
 8000952:	18fc      	adds	r4, r7, r3
 8000954:	69bb      	ldr	r3, [r7, #24]
 8000956:	697a      	ldr	r2, [r7, #20]
 8000958:	9201      	str	r2, [sp, #4]
 800095a:	781a      	ldrb	r2, [r3, #0]
 800095c:	7859      	ldrb	r1, [r3, #1]
 800095e:	0209      	lsls	r1, r1, #8
 8000960:	430a      	orrs	r2, r1
 8000962:	7899      	ldrb	r1, [r3, #2]
 8000964:	0409      	lsls	r1, r1, #16
 8000966:	430a      	orrs	r2, r1
 8000968:	78d9      	ldrb	r1, [r3, #3]
 800096a:	0609      	lsls	r1, r1, #24
 800096c:	430a      	orrs	r2, r1
 800096e:	0010      	movs	r0, r2
 8000970:	791a      	ldrb	r2, [r3, #4]
 8000972:	7959      	ldrb	r1, [r3, #5]
 8000974:	0209      	lsls	r1, r1, #8
 8000976:	430a      	orrs	r2, r1
 8000978:	7999      	ldrb	r1, [r3, #6]
 800097a:	0409      	lsls	r1, r1, #16
 800097c:	430a      	orrs	r2, r1
 800097e:	79d9      	ldrb	r1, [r3, #7]
 8000980:	0609      	lsls	r1, r1, #24
 8000982:	430a      	orrs	r2, r1
 8000984:	4694      	mov	ip, r2
 8000986:	7a1a      	ldrb	r2, [r3, #8]
 8000988:	7a59      	ldrb	r1, [r3, #9]
 800098a:	0209      	lsls	r1, r1, #8
 800098c:	430a      	orrs	r2, r1
 800098e:	7a99      	ldrb	r1, [r3, #10]
 8000990:	0409      	lsls	r1, r1, #16
 8000992:	430a      	orrs	r2, r1
 8000994:	7ad9      	ldrb	r1, [r3, #11]
 8000996:	0609      	lsls	r1, r1, #24
 8000998:	430a      	orrs	r2, r1
 800099a:	0016      	movs	r6, r2
 800099c:	7b1a      	ldrb	r2, [r3, #12]
 800099e:	7b59      	ldrb	r1, [r3, #13]
 80009a0:	0209      	lsls	r1, r1, #8
 80009a2:	430a      	orrs	r2, r1
 80009a4:	7b99      	ldrb	r1, [r3, #14]
 80009a6:	0409      	lsls	r1, r1, #16
 80009a8:	430a      	orrs	r2, r1
 80009aa:	7bd9      	ldrb	r1, [r3, #15]
 80009ac:	0609      	lsls	r1, r1, #24
 80009ae:	430a      	orrs	r2, r1
 80009b0:	0015      	movs	r5, r2
 80009b2:	466a      	mov	r2, sp
 80009b4:	7c1b      	ldrb	r3, [r3, #16]
 80009b6:	7013      	strb	r3, [r2, #0]
 80009b8:	4661      	mov	r1, ip
 80009ba:	0032      	movs	r2, r6
 80009bc:	002b      	movs	r3, r5
 80009be:	f7ff ff6b 	bl	8000898 <tctp_handler>
 80009c2:	0003      	movs	r3, r0
 80009c4:	7023      	strb	r3, [r4, #0]

    if (counter == 0) {
 80009c6:	4b47      	ldr	r3, [pc, #284]	; (8000ae4 <HAL_SPI_TxRxCpltCallback+0x1a4>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d105      	bne.n	80009da <HAL_SPI_TxRxCpltCallback+0x9a>
    	counter += 1;
 80009ce:	4b45      	ldr	r3, [pc, #276]	; (8000ae4 <HAL_SPI_TxRxCpltCallback+0x1a4>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	1c5a      	adds	r2, r3, #1
 80009d4:	4b43      	ldr	r3, [pc, #268]	; (8000ae4 <HAL_SPI_TxRxCpltCallback+0x1a4>)
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	e002      	b.n	80009e0 <HAL_SPI_TxRxCpltCallback+0xa0>
    } else {
    	counter = 0;
 80009da:	4b42      	ldr	r3, [pc, #264]	; (8000ae4 <HAL_SPI_TxRxCpltCallback+0x1a4>)
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
//    temp[10] = 0;
//    temp[11] = 0;
//    temp[12] = 0;
    int i;

    if (message_correct) {
 80009e0:	2313      	movs	r3, #19
 80009e2:	18fb      	adds	r3, r7, r3
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d003      	beq.n	80009f2 <HAL_SPI_TxRxCpltCallback+0xb2>
    	SPI_TX_Buffer[0] = ACK;
 80009ea:	4b3f      	ldr	r3, [pc, #252]	; (8000ae8 <HAL_SPI_TxRxCpltCallback+0x1a8>)
 80009ec:	2201      	movs	r2, #1
 80009ee:	701a      	strb	r2, [r3, #0]
 80009f0:	e002      	b.n	80009f8 <HAL_SPI_TxRxCpltCallback+0xb8>
    }
    else {
    	SPI_TX_Buffer[0] = NACK;
 80009f2:	4b3d      	ldr	r3, [pc, #244]	; (8000ae8 <HAL_SPI_TxRxCpltCallback+0x1a8>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	701a      	strb	r2, [r3, #0]
    }
	SPI_TX_Buffer[1] = SPI_RX_Buffer[1];
 80009f8:	4b39      	ldr	r3, [pc, #228]	; (8000ae0 <HAL_SPI_TxRxCpltCallback+0x1a0>)
 80009fa:	785a      	ldrb	r2, [r3, #1]
 80009fc:	4b3a      	ldr	r3, [pc, #232]	; (8000ae8 <HAL_SPI_TxRxCpltCallback+0x1a8>)
 80009fe:	705a      	strb	r2, [r3, #1]
	SPI_TX_Buffer[2] = SPI_RX_Buffer[2];
 8000a00:	4b37      	ldr	r3, [pc, #220]	; (8000ae0 <HAL_SPI_TxRxCpltCallback+0x1a0>)
 8000a02:	789a      	ldrb	r2, [r3, #2]
 8000a04:	4b38      	ldr	r3, [pc, #224]	; (8000ae8 <HAL_SPI_TxRxCpltCallback+0x1a8>)
 8000a06:	709a      	strb	r2, [r3, #2]
	//SPI_TX_Buffer[3] = SPI_RX_Buffer[11];
	//SPI_TX_Buffer[4] = SPI_RX_Buffer[12];
	SPI_TX_Buffer[3] = SPI_RX_Buffer[15];
 8000a08:	4b35      	ldr	r3, [pc, #212]	; (8000ae0 <HAL_SPI_TxRxCpltCallback+0x1a0>)
 8000a0a:	7bda      	ldrb	r2, [r3, #15]
 8000a0c:	4b36      	ldr	r3, [pc, #216]	; (8000ae8 <HAL_SPI_TxRxCpltCallback+0x1a8>)
 8000a0e:	70da      	strb	r2, [r3, #3]
	SPI_TX_Buffer[4] = SPI_RX_Buffer[16];
 8000a10:	4b33      	ldr	r3, [pc, #204]	; (8000ae0 <HAL_SPI_TxRxCpltCallback+0x1a0>)
 8000a12:	7c1a      	ldrb	r2, [r3, #16]
 8000a14:	4b34      	ldr	r3, [pc, #208]	; (8000ae8 <HAL_SPI_TxRxCpltCallback+0x1a8>)
 8000a16:	711a      	strb	r2, [r3, #4]

	for (i=5;i<SPI_BUFFER_SIZE;i++) {
 8000a18:	2305      	movs	r3, #5
 8000a1a:	61fb      	str	r3, [r7, #28]
 8000a1c:	e007      	b.n	8000a2e <HAL_SPI_TxRxCpltCallback+0xee>
		SPI_TX_Buffer[i] = 0;
 8000a1e:	4a32      	ldr	r2, [pc, #200]	; (8000ae8 <HAL_SPI_TxRxCpltCallback+0x1a8>)
 8000a20:	69fb      	ldr	r3, [r7, #28]
 8000a22:	18d3      	adds	r3, r2, r3
 8000a24:	2200      	movs	r2, #0
 8000a26:	701a      	strb	r2, [r3, #0]
	for (i=5;i<SPI_BUFFER_SIZE;i++) {
 8000a28:	69fb      	ldr	r3, [r7, #28]
 8000a2a:	3301      	adds	r3, #1
 8000a2c:	61fb      	str	r3, [r7, #28]
 8000a2e:	69fb      	ldr	r3, [r7, #28]
 8000a30:	2b10      	cmp	r3, #16
 8000a32:	ddf4      	ble.n	8000a1e <HAL_SPI_TxRxCpltCallback+0xde>
	SPI_TX_Buffer[11] = 0;
	SPI_TX_Buffer[12] = 0;
	*/


    HAL_SPI_TransmitReceive_IT(&hspi1, SPI_TX_Buffer, SPI_RX_Buffer, SPI_BUFFER_SIZE);
 8000a34:	4a2a      	ldr	r2, [pc, #168]	; (8000ae0 <HAL_SPI_TxRxCpltCallback+0x1a0>)
 8000a36:	492c      	ldr	r1, [pc, #176]	; (8000ae8 <HAL_SPI_TxRxCpltCallback+0x1a8>)
 8000a38:	482c      	ldr	r0, [pc, #176]	; (8000aec <HAL_SPI_TxRxCpltCallback+0x1ac>)
 8000a3a:	2311      	movs	r3, #17
 8000a3c:	f001 fc6a 	bl	8002314 <HAL_SPI_TransmitReceive_IT>
    uint8_t received_payload[NUM_THRUSTERS];
    memcpy(received_payload, received_msg->data_thrust.full_thrust_values, NUM_THRUSTERS);
 8000a40:	69bb      	ldr	r3, [r7, #24]
 8000a42:	3303      	adds	r3, #3
 8000a44:	2408      	movs	r4, #8
 8000a46:	193a      	adds	r2, r7, r4
 8000a48:	0010      	movs	r0, r2
 8000a4a:	0019      	movs	r1, r3
 8000a4c:	2308      	movs	r3, #8
 8000a4e:	001a      	movs	r2, r3
 8000a50:	f002 fd4c 	bl	80034ec <memcpy>

    /* NOTE: Cannot do a guard clause here because this is an interrupt handler */
    /* Send data to PWMs */
    if (message_correct) {
 8000a54:	2313      	movs	r3, #19
 8000a56:	18fb      	adds	r3, r7, r3
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d03b      	beq.n	8000ad6 <HAL_SPI_TxRxCpltCallback+0x196>
        htim3.Instance->CCR1 = (uint32_t) received_payload[0] + 250;
 8000a5e:	0021      	movs	r1, r4
 8000a60:	187b      	adds	r3, r7, r1
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	001a      	movs	r2, r3
 8000a66:	4b22      	ldr	r3, [pc, #136]	; (8000af0 <HAL_SPI_TxRxCpltCallback+0x1b0>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	32fa      	adds	r2, #250	; 0xfa
 8000a6c:	635a      	str	r2, [r3, #52]	; 0x34
        htim3.Instance->CCR2 = (uint32_t) received_payload[1] + 250;
 8000a6e:	187b      	adds	r3, r7, r1
 8000a70:	785b      	ldrb	r3, [r3, #1]
 8000a72:	001a      	movs	r2, r3
 8000a74:	4b1e      	ldr	r3, [pc, #120]	; (8000af0 <HAL_SPI_TxRxCpltCallback+0x1b0>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	32fa      	adds	r2, #250	; 0xfa
 8000a7a:	639a      	str	r2, [r3, #56]	; 0x38
        htim3.Instance->CCR3 = (uint32_t) received_payload[2] + 250;
 8000a7c:	187b      	adds	r3, r7, r1
 8000a7e:	789b      	ldrb	r3, [r3, #2]
 8000a80:	001a      	movs	r2, r3
 8000a82:	4b1b      	ldr	r3, [pc, #108]	; (8000af0 <HAL_SPI_TxRxCpltCallback+0x1b0>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	32fa      	adds	r2, #250	; 0xfa
 8000a88:	63da      	str	r2, [r3, #60]	; 0x3c
        htim3.Instance->CCR4 = (uint32_t) received_payload[3] + 250;
 8000a8a:	187b      	adds	r3, r7, r1
 8000a8c:	78db      	ldrb	r3, [r3, #3]
 8000a8e:	001a      	movs	r2, r3
 8000a90:	4b17      	ldr	r3, [pc, #92]	; (8000af0 <HAL_SPI_TxRxCpltCallback+0x1b0>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	32fa      	adds	r2, #250	; 0xfa
 8000a96:	641a      	str	r2, [r3, #64]	; 0x40

        htim2.Instance->CCR1 = (uint32_t) received_payload[4] + 250;
 8000a98:	187b      	adds	r3, r7, r1
 8000a9a:	791b      	ldrb	r3, [r3, #4]
 8000a9c:	001a      	movs	r2, r3
 8000a9e:	4b15      	ldr	r3, [pc, #84]	; (8000af4 <HAL_SPI_TxRxCpltCallback+0x1b4>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	32fa      	adds	r2, #250	; 0xfa
 8000aa4:	635a      	str	r2, [r3, #52]	; 0x34
        htim2.Instance->CCR2 = (uint32_t) received_payload[5] + 250;
 8000aa6:	187b      	adds	r3, r7, r1
 8000aa8:	795b      	ldrb	r3, [r3, #5]
 8000aaa:	001a      	movs	r2, r3
 8000aac:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <HAL_SPI_TxRxCpltCallback+0x1b4>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	32fa      	adds	r2, #250	; 0xfa
 8000ab2:	639a      	str	r2, [r3, #56]	; 0x38
        htim2.Instance->CCR3 = (uint32_t) received_payload[6] + 250;
 8000ab4:	187b      	adds	r3, r7, r1
 8000ab6:	799b      	ldrb	r3, [r3, #6]
 8000ab8:	001a      	movs	r2, r3
 8000aba:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <HAL_SPI_TxRxCpltCallback+0x1b4>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	32fa      	adds	r2, #250	; 0xfa
 8000ac0:	63da      	str	r2, [r3, #60]	; 0x3c
        htim2.Instance->CCR4 = (uint32_t) received_payload[7] + 250;
 8000ac2:	187b      	adds	r3, r7, r1
 8000ac4:	79db      	ldrb	r3, [r3, #7]
 8000ac6:	001a      	movs	r2, r3
 8000ac8:	4b0a      	ldr	r3, [pc, #40]	; (8000af4 <HAL_SPI_TxRxCpltCallback+0x1b4>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	32fa      	adds	r2, #250	; 0xfa
 8000ace:	641a      	str	r2, [r3, #64]	; 0x40
        NUM_ERROR = 0;
 8000ad0:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <HAL_SPI_TxRxCpltCallback+0x1b8>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
	//
	// htim2.Instance->CCR1 = (uint32_t) SPI_RX_Buffer[4] + 250;
	// htim2.Instance->CCR2 = (uint32_t) SPI_RX_Buffer[5] + 250;
	// htim2.Instance->CCR3 = (uint32_t) SPI_RX_Buffer[6] + 250;
	// htim2.Instance->CCR4 = (uint32_t) SPI_RX_Buffer[7] + 250;
}
 8000ad6:	46c0      	nop			; (mov r8, r8)
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	b009      	add	sp, #36	; 0x24
 8000adc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ade:	46c0      	nop			; (mov r8, r8)
 8000ae0:	20000000 	.word	0x20000000
 8000ae4:	200001a8 	.word	0x200001a8
 8000ae8:	20000194 	.word	0x20000194
 8000aec:	20000058 	.word	0x20000058
 8000af0:	2000014c 	.word	0x2000014c
 8000af4:	20000104 	.word	0x20000104
 8000af8:	200001ac 	.word	0x200001ac

08000afc <HAL_SPI_RxCpltCallback>:


void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef * hspi)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
	//
	// htim2.Instance->CCR1 = (uint32_t) SPI_RX_Buffer[4] + 250;
	// htim2.Instance->CCR2 = (uint32_t) SPI_RX_Buffer[5] + 250;
	// htim2.Instance->CCR3 = (uint32_t) SPI_RX_Buffer[6] + 250;
	// htim2.Instance->CCR4 = (uint32_t) SPI_RX_Buffer[7] + 250;
}
 8000b04:	46c0      	nop			; (mov r8, r8)
 8000b06:	46bd      	mov	sp, r7
 8000b08:	b002      	add	sp, #8
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b10:	46c0      	nop			; (mov r8, r8)
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
	...

08000b18 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b1e:	4b0f      	ldr	r3, [pc, #60]	; (8000b5c <HAL_MspInit+0x44>)
 8000b20:	699a      	ldr	r2, [r3, #24]
 8000b22:	4b0e      	ldr	r3, [pc, #56]	; (8000b5c <HAL_MspInit+0x44>)
 8000b24:	2101      	movs	r1, #1
 8000b26:	430a      	orrs	r2, r1
 8000b28:	619a      	str	r2, [r3, #24]
 8000b2a:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <HAL_MspInit+0x44>)
 8000b2c:	699b      	ldr	r3, [r3, #24]
 8000b2e:	2201      	movs	r2, #1
 8000b30:	4013      	ands	r3, r2
 8000b32:	607b      	str	r3, [r7, #4]
 8000b34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b36:	4b09      	ldr	r3, [pc, #36]	; (8000b5c <HAL_MspInit+0x44>)
 8000b38:	69da      	ldr	r2, [r3, #28]
 8000b3a:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <HAL_MspInit+0x44>)
 8000b3c:	2180      	movs	r1, #128	; 0x80
 8000b3e:	0549      	lsls	r1, r1, #21
 8000b40:	430a      	orrs	r2, r1
 8000b42:	61da      	str	r2, [r3, #28]
 8000b44:	4b05      	ldr	r3, [pc, #20]	; (8000b5c <HAL_MspInit+0x44>)
 8000b46:	69da      	ldr	r2, [r3, #28]
 8000b48:	2380      	movs	r3, #128	; 0x80
 8000b4a:	055b      	lsls	r3, r3, #21
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	603b      	str	r3, [r7, #0]
 8000b50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b52:	46c0      	nop			; (mov r8, r8)
 8000b54:	46bd      	mov	sp, r7
 8000b56:	b002      	add	sp, #8
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	46c0      	nop			; (mov r8, r8)
 8000b5c:	40021000 	.word	0x40021000

08000b60 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a09      	ldr	r2, [pc, #36]	; (8000b94 <HAL_CRC_MspInit+0x34>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d10b      	bne.n	8000b8a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000b72:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <HAL_CRC_MspInit+0x38>)
 8000b74:	695a      	ldr	r2, [r3, #20]
 8000b76:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <HAL_CRC_MspInit+0x38>)
 8000b78:	2140      	movs	r1, #64	; 0x40
 8000b7a:	430a      	orrs	r2, r1
 8000b7c:	615a      	str	r2, [r3, #20]
 8000b7e:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <HAL_CRC_MspInit+0x38>)
 8000b80:	695b      	ldr	r3, [r3, #20]
 8000b82:	2240      	movs	r2, #64	; 0x40
 8000b84:	4013      	ands	r3, r2
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000b8a:	46c0      	nop			; (mov r8, r8)
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	b004      	add	sp, #16
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	46c0      	nop			; (mov r8, r8)
 8000b94:	40023000 	.word	0x40023000
 8000b98:	40021000 	.word	0x40021000

08000b9c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b9c:	b590      	push	{r4, r7, lr}
 8000b9e:	b08b      	sub	sp, #44	; 0x2c
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba4:	2414      	movs	r4, #20
 8000ba6:	193b      	adds	r3, r7, r4
 8000ba8:	0018      	movs	r0, r3
 8000baa:	2314      	movs	r3, #20
 8000bac:	001a      	movs	r2, r3
 8000bae:	2100      	movs	r1, #0
 8000bb0:	f002 fc70 	bl	8003494 <memset>
  if(hspi->Instance==SPI1)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a20      	ldr	r2, [pc, #128]	; (8000c3c <HAL_SPI_MspInit+0xa0>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d13a      	bne.n	8000c34 <HAL_SPI_MspInit+0x98>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bbe:	4b20      	ldr	r3, [pc, #128]	; (8000c40 <HAL_SPI_MspInit+0xa4>)
 8000bc0:	699a      	ldr	r2, [r3, #24]
 8000bc2:	4b1f      	ldr	r3, [pc, #124]	; (8000c40 <HAL_SPI_MspInit+0xa4>)
 8000bc4:	2180      	movs	r1, #128	; 0x80
 8000bc6:	0149      	lsls	r1, r1, #5
 8000bc8:	430a      	orrs	r2, r1
 8000bca:	619a      	str	r2, [r3, #24]
 8000bcc:	4b1c      	ldr	r3, [pc, #112]	; (8000c40 <HAL_SPI_MspInit+0xa4>)
 8000bce:	699a      	ldr	r2, [r3, #24]
 8000bd0:	2380      	movs	r3, #128	; 0x80
 8000bd2:	015b      	lsls	r3, r3, #5
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	613b      	str	r3, [r7, #16]
 8000bd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bda:	4b19      	ldr	r3, [pc, #100]	; (8000c40 <HAL_SPI_MspInit+0xa4>)
 8000bdc:	695a      	ldr	r2, [r3, #20]
 8000bde:	4b18      	ldr	r3, [pc, #96]	; (8000c40 <HAL_SPI_MspInit+0xa4>)
 8000be0:	2180      	movs	r1, #128	; 0x80
 8000be2:	0289      	lsls	r1, r1, #10
 8000be4:	430a      	orrs	r2, r1
 8000be6:	615a      	str	r2, [r3, #20]
 8000be8:	4b15      	ldr	r3, [pc, #84]	; (8000c40 <HAL_SPI_MspInit+0xa4>)
 8000bea:	695a      	ldr	r2, [r3, #20]
 8000bec:	2380      	movs	r3, #128	; 0x80
 8000bee:	029b      	lsls	r3, r3, #10
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000bf6:	0021      	movs	r1, r4
 8000bf8:	187b      	adds	r3, r7, r1
 8000bfa:	22f0      	movs	r2, #240	; 0xf0
 8000bfc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfe:	187b      	adds	r3, r7, r1
 8000c00:	2202      	movs	r2, #2
 8000c02:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	187b      	adds	r3, r7, r1
 8000c06:	2200      	movs	r2, #0
 8000c08:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c0a:	187b      	adds	r3, r7, r1
 8000c0c:	2203      	movs	r2, #3
 8000c0e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000c10:	187b      	adds	r3, r7, r1
 8000c12:	2200      	movs	r2, #0
 8000c14:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c16:	187a      	adds	r2, r7, r1
 8000c18:	2390      	movs	r3, #144	; 0x90
 8000c1a:	05db      	lsls	r3, r3, #23
 8000c1c:	0011      	movs	r1, r2
 8000c1e:	0018      	movs	r0, r3
 8000c20:	f000 fc68 	bl	80014f4 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000c24:	2200      	movs	r2, #0
 8000c26:	2100      	movs	r1, #0
 8000c28:	2019      	movs	r0, #25
 8000c2a:	f000 fa8d 	bl	8001148 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000c2e:	2019      	movs	r0, #25
 8000c30:	f000 fa9f 	bl	8001172 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c34:	46c0      	nop			; (mov r8, r8)
 8000c36:	46bd      	mov	sp, r7
 8000c38:	b00b      	add	sp, #44	; 0x2c
 8000c3a:	bd90      	pop	{r4, r7, pc}
 8000c3c:	40013000 	.word	0x40013000
 8000c40:	40021000 	.word	0x40021000

08000c44 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b086      	sub	sp, #24
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a1c      	ldr	r2, [pc, #112]	; (8000cc4 <HAL_TIM_PWM_MspInit+0x80>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d10e      	bne.n	8000c74 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c56:	4b1c      	ldr	r3, [pc, #112]	; (8000cc8 <HAL_TIM_PWM_MspInit+0x84>)
 8000c58:	699a      	ldr	r2, [r3, #24]
 8000c5a:	4b1b      	ldr	r3, [pc, #108]	; (8000cc8 <HAL_TIM_PWM_MspInit+0x84>)
 8000c5c:	2180      	movs	r1, #128	; 0x80
 8000c5e:	0109      	lsls	r1, r1, #4
 8000c60:	430a      	orrs	r2, r1
 8000c62:	619a      	str	r2, [r3, #24]
 8000c64:	4b18      	ldr	r3, [pc, #96]	; (8000cc8 <HAL_TIM_PWM_MspInit+0x84>)
 8000c66:	699a      	ldr	r2, [r3, #24]
 8000c68:	2380      	movs	r3, #128	; 0x80
 8000c6a:	011b      	lsls	r3, r3, #4
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	617b      	str	r3, [r7, #20]
 8000c70:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000c72:	e023      	b.n	8000cbc <HAL_TIM_PWM_MspInit+0x78>
  else if(htim_pwm->Instance==TIM2)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	2380      	movs	r3, #128	; 0x80
 8000c7a:	05db      	lsls	r3, r3, #23
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	d10c      	bne.n	8000c9a <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c80:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <HAL_TIM_PWM_MspInit+0x84>)
 8000c82:	69da      	ldr	r2, [r3, #28]
 8000c84:	4b10      	ldr	r3, [pc, #64]	; (8000cc8 <HAL_TIM_PWM_MspInit+0x84>)
 8000c86:	2101      	movs	r1, #1
 8000c88:	430a      	orrs	r2, r1
 8000c8a:	61da      	str	r2, [r3, #28]
 8000c8c:	4b0e      	ldr	r3, [pc, #56]	; (8000cc8 <HAL_TIM_PWM_MspInit+0x84>)
 8000c8e:	69db      	ldr	r3, [r3, #28]
 8000c90:	2201      	movs	r2, #1
 8000c92:	4013      	ands	r3, r2
 8000c94:	613b      	str	r3, [r7, #16]
 8000c96:	693b      	ldr	r3, [r7, #16]
}
 8000c98:	e010      	b.n	8000cbc <HAL_TIM_PWM_MspInit+0x78>
  else if(htim_pwm->Instance==TIM3)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a0b      	ldr	r2, [pc, #44]	; (8000ccc <HAL_TIM_PWM_MspInit+0x88>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d10b      	bne.n	8000cbc <HAL_TIM_PWM_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ca4:	4b08      	ldr	r3, [pc, #32]	; (8000cc8 <HAL_TIM_PWM_MspInit+0x84>)
 8000ca6:	69da      	ldr	r2, [r3, #28]
 8000ca8:	4b07      	ldr	r3, [pc, #28]	; (8000cc8 <HAL_TIM_PWM_MspInit+0x84>)
 8000caa:	2102      	movs	r1, #2
 8000cac:	430a      	orrs	r2, r1
 8000cae:	61da      	str	r2, [r3, #28]
 8000cb0:	4b05      	ldr	r3, [pc, #20]	; (8000cc8 <HAL_TIM_PWM_MspInit+0x84>)
 8000cb2:	69db      	ldr	r3, [r3, #28]
 8000cb4:	2202      	movs	r2, #2
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	60fb      	str	r3, [r7, #12]
 8000cba:	68fb      	ldr	r3, [r7, #12]
}
 8000cbc:	46c0      	nop			; (mov r8, r8)
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	b006      	add	sp, #24
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	40012c00 	.word	0x40012c00
 8000cc8:	40021000 	.word	0x40021000
 8000ccc:	40000400 	.word	0x40000400

08000cd0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000cd0:	b590      	push	{r4, r7, lr}
 8000cd2:	b08b      	sub	sp, #44	; 0x2c
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd8:	2414      	movs	r4, #20
 8000cda:	193b      	adds	r3, r7, r4
 8000cdc:	0018      	movs	r0, r3
 8000cde:	2314      	movs	r3, #20
 8000ce0:	001a      	movs	r2, r3
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	f002 fbd6 	bl	8003494 <memset>
  if(htim->Instance==TIM1)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a41      	ldr	r2, [pc, #260]	; (8000df4 <HAL_TIM_MspPostInit+0x124>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d126      	bne.n	8000d40 <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf2:	4b41      	ldr	r3, [pc, #260]	; (8000df8 <HAL_TIM_MspPostInit+0x128>)
 8000cf4:	695a      	ldr	r2, [r3, #20]
 8000cf6:	4b40      	ldr	r3, [pc, #256]	; (8000df8 <HAL_TIM_MspPostInit+0x128>)
 8000cf8:	2180      	movs	r1, #128	; 0x80
 8000cfa:	0289      	lsls	r1, r1, #10
 8000cfc:	430a      	orrs	r2, r1
 8000cfe:	615a      	str	r2, [r3, #20]
 8000d00:	4b3d      	ldr	r3, [pc, #244]	; (8000df8 <HAL_TIM_MspPostInit+0x128>)
 8000d02:	695a      	ldr	r2, [r3, #20]
 8000d04:	2380      	movs	r3, #128	; 0x80
 8000d06:	029b      	lsls	r3, r3, #10
 8000d08:	4013      	ands	r3, r2
 8000d0a:	613b      	str	r3, [r7, #16]
 8000d0c:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000d0e:	193b      	adds	r3, r7, r4
 8000d10:	22f0      	movs	r2, #240	; 0xf0
 8000d12:	0112      	lsls	r2, r2, #4
 8000d14:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d16:	0021      	movs	r1, r4
 8000d18:	187b      	adds	r3, r7, r1
 8000d1a:	2202      	movs	r2, #2
 8000d1c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	187b      	adds	r3, r7, r1
 8000d20:	2200      	movs	r2, #0
 8000d22:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d24:	187b      	adds	r3, r7, r1
 8000d26:	2200      	movs	r2, #0
 8000d28:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000d2a:	187b      	adds	r3, r7, r1
 8000d2c:	2202      	movs	r2, #2
 8000d2e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d30:	187a      	adds	r2, r7, r1
 8000d32:	2390      	movs	r3, #144	; 0x90
 8000d34:	05db      	lsls	r3, r3, #23
 8000d36:	0011      	movs	r1, r2
 8000d38:	0018      	movs	r0, r3
 8000d3a:	f000 fbdb 	bl	80014f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000d3e:	e054      	b.n	8000dea <HAL_TIM_MspPostInit+0x11a>
  else if(htim->Instance==TIM2)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	2380      	movs	r3, #128	; 0x80
 8000d46:	05db      	lsls	r3, r3, #23
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d125      	bne.n	8000d98 <HAL_TIM_MspPostInit+0xc8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4c:	4b2a      	ldr	r3, [pc, #168]	; (8000df8 <HAL_TIM_MspPostInit+0x128>)
 8000d4e:	695a      	ldr	r2, [r3, #20]
 8000d50:	4b29      	ldr	r3, [pc, #164]	; (8000df8 <HAL_TIM_MspPostInit+0x128>)
 8000d52:	2180      	movs	r1, #128	; 0x80
 8000d54:	0289      	lsls	r1, r1, #10
 8000d56:	430a      	orrs	r2, r1
 8000d58:	615a      	str	r2, [r3, #20]
 8000d5a:	4b27      	ldr	r3, [pc, #156]	; (8000df8 <HAL_TIM_MspPostInit+0x128>)
 8000d5c:	695a      	ldr	r2, [r3, #20]
 8000d5e:	2380      	movs	r3, #128	; 0x80
 8000d60:	029b      	lsls	r3, r3, #10
 8000d62:	4013      	ands	r3, r2
 8000d64:	60fb      	str	r3, [r7, #12]
 8000d66:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000d68:	2114      	movs	r1, #20
 8000d6a:	187b      	adds	r3, r7, r1
 8000d6c:	220f      	movs	r2, #15
 8000d6e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d70:	187b      	adds	r3, r7, r1
 8000d72:	2202      	movs	r2, #2
 8000d74:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	187b      	adds	r3, r7, r1
 8000d78:	2200      	movs	r2, #0
 8000d7a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7c:	187b      	adds	r3, r7, r1
 8000d7e:	2200      	movs	r2, #0
 8000d80:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000d82:	187b      	adds	r3, r7, r1
 8000d84:	2202      	movs	r2, #2
 8000d86:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d88:	187a      	adds	r2, r7, r1
 8000d8a:	2390      	movs	r3, #144	; 0x90
 8000d8c:	05db      	lsls	r3, r3, #23
 8000d8e:	0011      	movs	r1, r2
 8000d90:	0018      	movs	r0, r3
 8000d92:	f000 fbaf 	bl	80014f4 <HAL_GPIO_Init>
}
 8000d96:	e028      	b.n	8000dea <HAL_TIM_MspPostInit+0x11a>
  else if(htim->Instance==TIM3)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a17      	ldr	r2, [pc, #92]	; (8000dfc <HAL_TIM_MspPostInit+0x12c>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d123      	bne.n	8000dea <HAL_TIM_MspPostInit+0x11a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da2:	4b15      	ldr	r3, [pc, #84]	; (8000df8 <HAL_TIM_MspPostInit+0x128>)
 8000da4:	695a      	ldr	r2, [r3, #20]
 8000da6:	4b14      	ldr	r3, [pc, #80]	; (8000df8 <HAL_TIM_MspPostInit+0x128>)
 8000da8:	2180      	movs	r1, #128	; 0x80
 8000daa:	02c9      	lsls	r1, r1, #11
 8000dac:	430a      	orrs	r2, r1
 8000dae:	615a      	str	r2, [r3, #20]
 8000db0:	4b11      	ldr	r3, [pc, #68]	; (8000df8 <HAL_TIM_MspPostInit+0x128>)
 8000db2:	695a      	ldr	r2, [r3, #20]
 8000db4:	2380      	movs	r3, #128	; 0x80
 8000db6:	02db      	lsls	r3, r3, #11
 8000db8:	4013      	ands	r3, r2
 8000dba:	60bb      	str	r3, [r7, #8]
 8000dbc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000dbe:	2114      	movs	r1, #20
 8000dc0:	187b      	adds	r3, r7, r1
 8000dc2:	2233      	movs	r2, #51	; 0x33
 8000dc4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc6:	187b      	adds	r3, r7, r1
 8000dc8:	2202      	movs	r2, #2
 8000dca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	187b      	adds	r3, r7, r1
 8000dce:	2200      	movs	r2, #0
 8000dd0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd2:	187b      	adds	r3, r7, r1
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000dd8:	187b      	adds	r3, r7, r1
 8000dda:	2201      	movs	r2, #1
 8000ddc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dde:	187b      	adds	r3, r7, r1
 8000de0:	4a07      	ldr	r2, [pc, #28]	; (8000e00 <HAL_TIM_MspPostInit+0x130>)
 8000de2:	0019      	movs	r1, r3
 8000de4:	0010      	movs	r0, r2
 8000de6:	f000 fb85 	bl	80014f4 <HAL_GPIO_Init>
}
 8000dea:	46c0      	nop			; (mov r8, r8)
 8000dec:	46bd      	mov	sp, r7
 8000dee:	b00b      	add	sp, #44	; 0x2c
 8000df0:	bd90      	pop	{r4, r7, pc}
 8000df2:	46c0      	nop			; (mov r8, r8)
 8000df4:	40012c00 	.word	0x40012c00
 8000df8:	40021000 	.word	0x40021000
 8000dfc:	40000400 	.word	0x40000400
 8000e00:	48000400 	.word	0x48000400

08000e04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e08:	46c0      	nop			; (mov r8, r8)
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e12:	e7fe      	b.n	8000e12 <HardFault_Handler+0x4>

08000e14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000e18:	46c0      	nop			; (mov r8, r8)
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e22:	46c0      	nop			; (mov r8, r8)
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e2c:	f000 f8a0 	bl	8000f70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e30:	46c0      	nop			; (mov r8, r8)
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
	...

08000e38 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000e3c:	4b03      	ldr	r3, [pc, #12]	; (8000e4c <SPI1_IRQHandler+0x14>)
 8000e3e:	0018      	movs	r0, r3
 8000e40:	f001 fb32 	bl	80024a8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000e44:	46c0      	nop			; (mov r8, r8)
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	46c0      	nop			; (mov r8, r8)
 8000e4c:	20000058 	.word	0x20000058

08000e50 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000e54:	46c0      	nop			; (mov r8, r8)
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
	...

08000e5c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e5c:	4813      	ldr	r0, [pc, #76]	; (8000eac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e5e:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8000e60:	4813      	ldr	r0, [pc, #76]	; (8000eb0 <LoopForever+0x6>)
    LDR R1, [R0]
 8000e62:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000e64:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000e66:	4a13      	ldr	r2, [pc, #76]	; (8000eb4 <LoopForever+0xa>)
    CMP R1, R2
 8000e68:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000e6a:	d105      	bne.n	8000e78 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000e6c:	4812      	ldr	r0, [pc, #72]	; (8000eb8 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000e6e:	4913      	ldr	r1, [pc, #76]	; (8000ebc <LoopForever+0x12>)
    STR R1, [R0]
 8000e70:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000e72:	4813      	ldr	r0, [pc, #76]	; (8000ec0 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000e74:	4913      	ldr	r1, [pc, #76]	; (8000ec4 <LoopForever+0x1a>)
    STR R1, [R0]
 8000e76:	6001      	str	r1, [r0, #0]

08000e78 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e78:	4813      	ldr	r0, [pc, #76]	; (8000ec8 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000e7a:	4914      	ldr	r1, [pc, #80]	; (8000ecc <LoopForever+0x22>)
  ldr r2, =_sidata
 8000e7c:	4a14      	ldr	r2, [pc, #80]	; (8000ed0 <LoopForever+0x26>)
  movs r3, #0
 8000e7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e80:	e002      	b.n	8000e88 <LoopCopyDataInit>

08000e82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e86:	3304      	adds	r3, #4

08000e88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e8c:	d3f9      	bcc.n	8000e82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e8e:	4a11      	ldr	r2, [pc, #68]	; (8000ed4 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000e90:	4c11      	ldr	r4, [pc, #68]	; (8000ed8 <LoopForever+0x2e>)
  movs r3, #0
 8000e92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e94:	e001      	b.n	8000e9a <LoopFillZerobss>

08000e96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e98:	3204      	adds	r2, #4

08000e9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e9c:	d3fb      	bcc.n	8000e96 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000e9e:	f7ff ffd7 	bl	8000e50 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000ea2:	f002 faff 	bl	80034a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ea6:	f7ff f9bb 	bl	8000220 <main>

08000eaa <LoopForever>:

LoopForever:
    b LoopForever
 8000eaa:	e7fe      	b.n	8000eaa <LoopForever>
  ldr   r0, =_estack
 8000eac:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000eb0:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000eb4:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000eb8:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000ebc:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000ec0:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000ec4:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000ec8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ecc:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000ed0:	08003550 	.word	0x08003550
  ldr r2, =_sbss
 8000ed4:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000ed8:	200001b4 	.word	0x200001b4

08000edc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000edc:	e7fe      	b.n	8000edc <ADC1_IRQHandler>
	...

08000ee0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ee4:	4b07      	ldr	r3, [pc, #28]	; (8000f04 <HAL_Init+0x24>)
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <HAL_Init+0x24>)
 8000eea:	2110      	movs	r1, #16
 8000eec:	430a      	orrs	r2, r1
 8000eee:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000ef0:	2003      	movs	r0, #3
 8000ef2:	f000 f809 	bl	8000f08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ef6:	f7ff fe0f 	bl	8000b18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000efa:	2300      	movs	r3, #0
}
 8000efc:	0018      	movs	r0, r3
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	46c0      	nop			; (mov r8, r8)
 8000f04:	40022000 	.word	0x40022000

08000f08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f08:	b590      	push	{r4, r7, lr}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f10:	4b14      	ldr	r3, [pc, #80]	; (8000f64 <HAL_InitTick+0x5c>)
 8000f12:	681c      	ldr	r4, [r3, #0]
 8000f14:	4b14      	ldr	r3, [pc, #80]	; (8000f68 <HAL_InitTick+0x60>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	0019      	movs	r1, r3
 8000f1a:	23fa      	movs	r3, #250	; 0xfa
 8000f1c:	0098      	lsls	r0, r3, #2
 8000f1e:	f7ff f8f3 	bl	8000108 <__udivsi3>
 8000f22:	0003      	movs	r3, r0
 8000f24:	0019      	movs	r1, r3
 8000f26:	0020      	movs	r0, r4
 8000f28:	f7ff f8ee 	bl	8000108 <__udivsi3>
 8000f2c:	0003      	movs	r3, r0
 8000f2e:	0018      	movs	r0, r3
 8000f30:	f000 f92f 	bl	8001192 <HAL_SYSTICK_Config>
 8000f34:	1e03      	subs	r3, r0, #0
 8000f36:	d001      	beq.n	8000f3c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	e00f      	b.n	8000f5c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2b03      	cmp	r3, #3
 8000f40:	d80b      	bhi.n	8000f5a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f42:	6879      	ldr	r1, [r7, #4]
 8000f44:	2301      	movs	r3, #1
 8000f46:	425b      	negs	r3, r3
 8000f48:	2200      	movs	r2, #0
 8000f4a:	0018      	movs	r0, r3
 8000f4c:	f000 f8fc 	bl	8001148 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f50:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <HAL_InitTick+0x64>)
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000f56:	2300      	movs	r3, #0
 8000f58:	e000      	b.n	8000f5c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
}
 8000f5c:	0018      	movs	r0, r3
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	b003      	add	sp, #12
 8000f62:	bd90      	pop	{r4, r7, pc}
 8000f64:	20000014 	.word	0x20000014
 8000f68:	2000001c 	.word	0x2000001c
 8000f6c:	20000018 	.word	0x20000018

08000f70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f74:	4b05      	ldr	r3, [pc, #20]	; (8000f8c <HAL_IncTick+0x1c>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	001a      	movs	r2, r3
 8000f7a:	4b05      	ldr	r3, [pc, #20]	; (8000f90 <HAL_IncTick+0x20>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	18d2      	adds	r2, r2, r3
 8000f80:	4b03      	ldr	r3, [pc, #12]	; (8000f90 <HAL_IncTick+0x20>)
 8000f82:	601a      	str	r2, [r3, #0]
}
 8000f84:	46c0      	nop			; (mov r8, r8)
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	46c0      	nop			; (mov r8, r8)
 8000f8c:	2000001c 	.word	0x2000001c
 8000f90:	200001b0 	.word	0x200001b0

08000f94 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  return uwTick;
 8000f98:	4b02      	ldr	r3, [pc, #8]	; (8000fa4 <HAL_GetTick+0x10>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
}
 8000f9c:	0018      	movs	r0, r3
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	46c0      	nop			; (mov r8, r8)
 8000fa4:	200001b0 	.word	0x200001b0

08000fa8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fb0:	f7ff fff0 	bl	8000f94 <HAL_GetTick>
 8000fb4:	0003      	movs	r3, r0
 8000fb6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	d005      	beq.n	8000fce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fc2:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <HAL_Delay+0x44>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	001a      	movs	r2, r3
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	189b      	adds	r3, r3, r2
 8000fcc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000fce:	46c0      	nop			; (mov r8, r8)
 8000fd0:	f7ff ffe0 	bl	8000f94 <HAL_GetTick>
 8000fd4:	0002      	movs	r2, r0
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	68fa      	ldr	r2, [r7, #12]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	d8f7      	bhi.n	8000fd0 <HAL_Delay+0x28>
  {
  }
}
 8000fe0:	46c0      	nop			; (mov r8, r8)
 8000fe2:	46c0      	nop			; (mov r8, r8)
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	b004      	add	sp, #16
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	46c0      	nop			; (mov r8, r8)
 8000fec:	2000001c 	.word	0x2000001c

08000ff0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	0002      	movs	r2, r0
 8000ff8:	1dfb      	adds	r3, r7, #7
 8000ffa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ffc:	1dfb      	adds	r3, r7, #7
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	2b7f      	cmp	r3, #127	; 0x7f
 8001002:	d809      	bhi.n	8001018 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001004:	1dfb      	adds	r3, r7, #7
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	001a      	movs	r2, r3
 800100a:	231f      	movs	r3, #31
 800100c:	401a      	ands	r2, r3
 800100e:	4b04      	ldr	r3, [pc, #16]	; (8001020 <__NVIC_EnableIRQ+0x30>)
 8001010:	2101      	movs	r1, #1
 8001012:	4091      	lsls	r1, r2
 8001014:	000a      	movs	r2, r1
 8001016:	601a      	str	r2, [r3, #0]
  }
}
 8001018:	46c0      	nop			; (mov r8, r8)
 800101a:	46bd      	mov	sp, r7
 800101c:	b002      	add	sp, #8
 800101e:	bd80      	pop	{r7, pc}
 8001020:	e000e100 	.word	0xe000e100

08001024 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001024:	b590      	push	{r4, r7, lr}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	0002      	movs	r2, r0
 800102c:	6039      	str	r1, [r7, #0]
 800102e:	1dfb      	adds	r3, r7, #7
 8001030:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001032:	1dfb      	adds	r3, r7, #7
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	2b7f      	cmp	r3, #127	; 0x7f
 8001038:	d828      	bhi.n	800108c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800103a:	4a2f      	ldr	r2, [pc, #188]	; (80010f8 <__NVIC_SetPriority+0xd4>)
 800103c:	1dfb      	adds	r3, r7, #7
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	b25b      	sxtb	r3, r3
 8001042:	089b      	lsrs	r3, r3, #2
 8001044:	33c0      	adds	r3, #192	; 0xc0
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	589b      	ldr	r3, [r3, r2]
 800104a:	1dfa      	adds	r2, r7, #7
 800104c:	7812      	ldrb	r2, [r2, #0]
 800104e:	0011      	movs	r1, r2
 8001050:	2203      	movs	r2, #3
 8001052:	400a      	ands	r2, r1
 8001054:	00d2      	lsls	r2, r2, #3
 8001056:	21ff      	movs	r1, #255	; 0xff
 8001058:	4091      	lsls	r1, r2
 800105a:	000a      	movs	r2, r1
 800105c:	43d2      	mvns	r2, r2
 800105e:	401a      	ands	r2, r3
 8001060:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	019b      	lsls	r3, r3, #6
 8001066:	22ff      	movs	r2, #255	; 0xff
 8001068:	401a      	ands	r2, r3
 800106a:	1dfb      	adds	r3, r7, #7
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	0018      	movs	r0, r3
 8001070:	2303      	movs	r3, #3
 8001072:	4003      	ands	r3, r0
 8001074:	00db      	lsls	r3, r3, #3
 8001076:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001078:	481f      	ldr	r0, [pc, #124]	; (80010f8 <__NVIC_SetPriority+0xd4>)
 800107a:	1dfb      	adds	r3, r7, #7
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	b25b      	sxtb	r3, r3
 8001080:	089b      	lsrs	r3, r3, #2
 8001082:	430a      	orrs	r2, r1
 8001084:	33c0      	adds	r3, #192	; 0xc0
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800108a:	e031      	b.n	80010f0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800108c:	4a1b      	ldr	r2, [pc, #108]	; (80010fc <__NVIC_SetPriority+0xd8>)
 800108e:	1dfb      	adds	r3, r7, #7
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	0019      	movs	r1, r3
 8001094:	230f      	movs	r3, #15
 8001096:	400b      	ands	r3, r1
 8001098:	3b08      	subs	r3, #8
 800109a:	089b      	lsrs	r3, r3, #2
 800109c:	3306      	adds	r3, #6
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	18d3      	adds	r3, r2, r3
 80010a2:	3304      	adds	r3, #4
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	1dfa      	adds	r2, r7, #7
 80010a8:	7812      	ldrb	r2, [r2, #0]
 80010aa:	0011      	movs	r1, r2
 80010ac:	2203      	movs	r2, #3
 80010ae:	400a      	ands	r2, r1
 80010b0:	00d2      	lsls	r2, r2, #3
 80010b2:	21ff      	movs	r1, #255	; 0xff
 80010b4:	4091      	lsls	r1, r2
 80010b6:	000a      	movs	r2, r1
 80010b8:	43d2      	mvns	r2, r2
 80010ba:	401a      	ands	r2, r3
 80010bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	019b      	lsls	r3, r3, #6
 80010c2:	22ff      	movs	r2, #255	; 0xff
 80010c4:	401a      	ands	r2, r3
 80010c6:	1dfb      	adds	r3, r7, #7
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	0018      	movs	r0, r3
 80010cc:	2303      	movs	r3, #3
 80010ce:	4003      	ands	r3, r0
 80010d0:	00db      	lsls	r3, r3, #3
 80010d2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010d4:	4809      	ldr	r0, [pc, #36]	; (80010fc <__NVIC_SetPriority+0xd8>)
 80010d6:	1dfb      	adds	r3, r7, #7
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	001c      	movs	r4, r3
 80010dc:	230f      	movs	r3, #15
 80010de:	4023      	ands	r3, r4
 80010e0:	3b08      	subs	r3, #8
 80010e2:	089b      	lsrs	r3, r3, #2
 80010e4:	430a      	orrs	r2, r1
 80010e6:	3306      	adds	r3, #6
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	18c3      	adds	r3, r0, r3
 80010ec:	3304      	adds	r3, #4
 80010ee:	601a      	str	r2, [r3, #0]
}
 80010f0:	46c0      	nop			; (mov r8, r8)
 80010f2:	46bd      	mov	sp, r7
 80010f4:	b003      	add	sp, #12
 80010f6:	bd90      	pop	{r4, r7, pc}
 80010f8:	e000e100 	.word	0xe000e100
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	1e5a      	subs	r2, r3, #1
 800110c:	2380      	movs	r3, #128	; 0x80
 800110e:	045b      	lsls	r3, r3, #17
 8001110:	429a      	cmp	r2, r3
 8001112:	d301      	bcc.n	8001118 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001114:	2301      	movs	r3, #1
 8001116:	e010      	b.n	800113a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001118:	4b0a      	ldr	r3, [pc, #40]	; (8001144 <SysTick_Config+0x44>)
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	3a01      	subs	r2, #1
 800111e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001120:	2301      	movs	r3, #1
 8001122:	425b      	negs	r3, r3
 8001124:	2103      	movs	r1, #3
 8001126:	0018      	movs	r0, r3
 8001128:	f7ff ff7c 	bl	8001024 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800112c:	4b05      	ldr	r3, [pc, #20]	; (8001144 <SysTick_Config+0x44>)
 800112e:	2200      	movs	r2, #0
 8001130:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001132:	4b04      	ldr	r3, [pc, #16]	; (8001144 <SysTick_Config+0x44>)
 8001134:	2207      	movs	r2, #7
 8001136:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001138:	2300      	movs	r3, #0
}
 800113a:	0018      	movs	r0, r3
 800113c:	46bd      	mov	sp, r7
 800113e:	b002      	add	sp, #8
 8001140:	bd80      	pop	{r7, pc}
 8001142:	46c0      	nop			; (mov r8, r8)
 8001144:	e000e010 	.word	0xe000e010

08001148 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	60b9      	str	r1, [r7, #8]
 8001150:	607a      	str	r2, [r7, #4]
 8001152:	210f      	movs	r1, #15
 8001154:	187b      	adds	r3, r7, r1
 8001156:	1c02      	adds	r2, r0, #0
 8001158:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800115a:	68ba      	ldr	r2, [r7, #8]
 800115c:	187b      	adds	r3, r7, r1
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	b25b      	sxtb	r3, r3
 8001162:	0011      	movs	r1, r2
 8001164:	0018      	movs	r0, r3
 8001166:	f7ff ff5d 	bl	8001024 <__NVIC_SetPriority>
}
 800116a:	46c0      	nop			; (mov r8, r8)
 800116c:	46bd      	mov	sp, r7
 800116e:	b004      	add	sp, #16
 8001170:	bd80      	pop	{r7, pc}

08001172 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b082      	sub	sp, #8
 8001176:	af00      	add	r7, sp, #0
 8001178:	0002      	movs	r2, r0
 800117a:	1dfb      	adds	r3, r7, #7
 800117c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800117e:	1dfb      	adds	r3, r7, #7
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	b25b      	sxtb	r3, r3
 8001184:	0018      	movs	r0, r3
 8001186:	f7ff ff33 	bl	8000ff0 <__NVIC_EnableIRQ>
}
 800118a:	46c0      	nop			; (mov r8, r8)
 800118c:	46bd      	mov	sp, r7
 800118e:	b002      	add	sp, #8
 8001190:	bd80      	pop	{r7, pc}

08001192 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	b082      	sub	sp, #8
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	0018      	movs	r0, r3
 800119e:	f7ff ffaf 	bl	8001100 <SysTick_Config>
 80011a2:	0003      	movs	r3, r0
}
 80011a4:	0018      	movs	r0, r3
 80011a6:	46bd      	mov	sp, r7
 80011a8:	b002      	add	sp, #8
 80011aa:	bd80      	pop	{r7, pc}

080011ac <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d101      	bne.n	80011be <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e039      	b.n	8001232 <HAL_CRC_Init+0x86>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	7d5b      	ldrb	r3, [r3, #21]
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d106      	bne.n	80011d6 <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2200      	movs	r2, #0
 80011cc:	751a      	strb	r2, [r3, #20]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	0018      	movs	r0, r3
 80011d2:	f7ff fcc5 	bl	8000b60 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2202      	movs	r2, #2
 80011da:	755a      	strb	r2, [r3, #21]
#endif /* CRC_POL_POL */

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	791b      	ldrb	r3, [r3, #4]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d105      	bne.n	80011f0 <HAL_CRC_Init+0x44>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2201      	movs	r2, #1
 80011ea:	4252      	negs	r2, r2
 80011ec:	611a      	str	r2, [r3, #16]
 80011ee:	e004      	b.n	80011fa <HAL_CRC_Init+0x4e>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	687a      	ldr	r2, [r7, #4]
 80011f6:	6892      	ldr	r2, [r2, #8]
 80011f8:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	2260      	movs	r2, #96	; 0x60
 8001202:	4393      	bics	r3, r2
 8001204:	0019      	movs	r1, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	68da      	ldr	r2, [r3, #12]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	430a      	orrs	r2, r1
 8001210:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	2280      	movs	r2, #128	; 0x80
 800121a:	4393      	bics	r3, r2
 800121c:	0019      	movs	r1, r3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	691a      	ldr	r2, [r3, #16]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	430a      	orrs	r2, r1
 8001228:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2201      	movs	r2, #1
 800122e:	755a      	strb	r2, [r3, #21]

  /* Return function status */
  return HAL_OK;
 8001230:	2300      	movs	r3, #0
}
 8001232:	0018      	movs	r0, r3
 8001234:	46bd      	mov	sp, r7
 8001236:	b002      	add	sp, #8
 8001238:	bd80      	pop	{r7, pc}

0800123a <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b086      	sub	sp, #24
 800123e:	af00      	add	r7, sp, #0
 8001240:	60f8      	str	r0, [r7, #12]
 8001242:	60b9      	str	r1, [r7, #8]
 8001244:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001246:	2300      	movs	r3, #0
 8001248:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	2202      	movs	r2, #2
 800124e:	755a      	strb	r2, [r3, #21]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	689a      	ldr	r2, [r3, #8]
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	2101      	movs	r1, #1
 800125c:	430a      	orrs	r2, r1
 800125e:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	2b03      	cmp	r3, #3
 8001266:	d005      	beq.n	8001274 <HAL_CRC_Calculate+0x3a>
 8001268:	d82d      	bhi.n	80012c6 <HAL_CRC_Calculate+0x8c>
 800126a:	2b01      	cmp	r3, #1
 800126c:	d019      	beq.n	80012a2 <HAL_CRC_Calculate+0x68>
 800126e:	2b02      	cmp	r3, #2
 8001270:	d020      	beq.n	80012b4 <HAL_CRC_Calculate+0x7a>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8001272:	e028      	b.n	80012c6 <HAL_CRC_Calculate+0x8c>
      for (index = 0U; index < BufferLength; index++)
 8001274:	2300      	movs	r3, #0
 8001276:	617b      	str	r3, [r7, #20]
 8001278:	e00a      	b.n	8001290 <HAL_CRC_Calculate+0x56>
        hcrc->Instance->DR = pBuffer[index];
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	68ba      	ldr	r2, [r7, #8]
 8001280:	18d2      	adds	r2, r2, r3
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	6812      	ldr	r2, [r2, #0]
 8001288:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	3301      	adds	r3, #1
 800128e:	617b      	str	r3, [r7, #20]
 8001290:	697a      	ldr	r2, [r7, #20]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	429a      	cmp	r2, r3
 8001296:	d3f0      	bcc.n	800127a <HAL_CRC_Calculate+0x40>
      temp = hcrc->Instance->DR;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	613b      	str	r3, [r7, #16]
      break;
 80012a0:	e012      	b.n	80012c8 <HAL_CRC_Calculate+0x8e>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	68b9      	ldr	r1, [r7, #8]
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	0018      	movs	r0, r3
 80012aa:	f000 f815 	bl	80012d8 <CRC_Handle_8>
 80012ae:	0003      	movs	r3, r0
 80012b0:	613b      	str	r3, [r7, #16]
      break;
 80012b2:	e009      	b.n	80012c8 <HAL_CRC_Calculate+0x8e>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 80012b4:	687a      	ldr	r2, [r7, #4]
 80012b6:	68b9      	ldr	r1, [r7, #8]
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	0018      	movs	r0, r3
 80012bc:	f000 f89d 	bl	80013fa <CRC_Handle_16>
 80012c0:	0003      	movs	r3, r0
 80012c2:	613b      	str	r3, [r7, #16]
      break;
 80012c4:	e000      	b.n	80012c8 <HAL_CRC_Calculate+0x8e>
      break;
 80012c6:	46c0      	nop			; (mov r8, r8)
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	2201      	movs	r2, #1
 80012cc:	755a      	strb	r2, [r3, #21]

  /* Return the CRC computed value */
  return temp;
 80012ce:	693b      	ldr	r3, [r7, #16]
}
 80012d0:	0018      	movs	r0, r3
 80012d2:	46bd      	mov	sp, r7
 80012d4:	b006      	add	sp, #24
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b088      	sub	sp, #32
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 80012e4:	2300      	movs	r3, #0
 80012e6:	61fb      	str	r3, [r7, #28]
 80012e8:	e023      	b.n	8001332 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	68ba      	ldr	r2, [r7, #8]
 80012f0:	18d3      	adds	r3, r2, r3
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	3301      	adds	r3, #1
 80012fc:	68b9      	ldr	r1, [r7, #8]
 80012fe:	18cb      	adds	r3, r1, r3
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001304:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	3302      	adds	r3, #2
 800130c:	68b9      	ldr	r1, [r7, #8]
 800130e:	18cb      	adds	r3, r1, r3
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8001314:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	3303      	adds	r3, #3
 800131c:	68b9      	ldr	r1, [r7, #8]
 800131e:	18cb      	adds	r3, r1, r3
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	0019      	movs	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8001328:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800132a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	3301      	adds	r3, #1
 8001330:	61fb      	str	r3, [r7, #28]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	089b      	lsrs	r3, r3, #2
 8001336:	69fa      	ldr	r2, [r7, #28]
 8001338:	429a      	cmp	r2, r3
 800133a:	d3d6      	bcc.n	80012ea <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2203      	movs	r2, #3
 8001340:	4013      	ands	r3, r2
 8001342:	d053      	beq.n	80013ec <CRC_Handle_8+0x114>
  {
    if ((BufferLength % 4U) == 1U)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2203      	movs	r2, #3
 8001348:	4013      	ands	r3, r2
 800134a:	2b01      	cmp	r3, #1
 800134c:	d107      	bne.n	800135e <CRC_Handle_8+0x86>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	68ba      	ldr	r2, [r7, #8]
 8001354:	18d2      	adds	r2, r2, r3
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	7812      	ldrb	r2, [r2, #0]
 800135c:	701a      	strb	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 2U)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2203      	movs	r2, #3
 8001362:	4013      	ands	r3, r2
 8001364:	2b02      	cmp	r3, #2
 8001366:	d119      	bne.n	800139c <CRC_Handle_8+0xc4>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	68ba      	ldr	r2, [r7, #8]
 800136e:	18d3      	adds	r3, r2, r3
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	021b      	lsls	r3, r3, #8
 8001374:	b21a      	sxth	r2, r3
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	3301      	adds	r3, #1
 800137c:	68b9      	ldr	r1, [r7, #8]
 800137e:	18cb      	adds	r3, r1, r3
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	b21b      	sxth	r3, r3
 8001384:	4313      	orrs	r3, r2
 8001386:	b21a      	sxth	r2, r3
 8001388:	211a      	movs	r1, #26
 800138a:	187b      	adds	r3, r7, r1
 800138c:	801a      	strh	r2, [r3, #0]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	187a      	adds	r2, r7, r1
 8001398:	8812      	ldrh	r2, [r2, #0]
 800139a:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2203      	movs	r2, #3
 80013a0:	4013      	ands	r3, r2
 80013a2:	2b03      	cmp	r3, #3
 80013a4:	d122      	bne.n	80013ec <CRC_Handle_8+0x114>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	68ba      	ldr	r2, [r7, #8]
 80013ac:	18d3      	adds	r3, r2, r3
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	021b      	lsls	r3, r3, #8
 80013b2:	b21a      	sxth	r2, r3
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	3301      	adds	r3, #1
 80013ba:	68b9      	ldr	r1, [r7, #8]
 80013bc:	18cb      	adds	r3, r1, r3
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	b21b      	sxth	r3, r3
 80013c2:	4313      	orrs	r3, r2
 80013c4:	b21a      	sxth	r2, r3
 80013c6:	211a      	movs	r1, #26
 80013c8:	187b      	adds	r3, r7, r1
 80013ca:	801a      	strh	r2, [r3, #0]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	187a      	adds	r2, r7, r1
 80013d6:	8812      	ldrh	r2, [r2, #0]
 80013d8:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	3302      	adds	r3, #2
 80013e0:	68ba      	ldr	r2, [r7, #8]
 80013e2:	18d2      	adds	r2, r2, r3
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	7812      	ldrb	r2, [r2, #0]
 80013ea:	701a      	strb	r2, [r3, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	681b      	ldr	r3, [r3, #0]
}
 80013f2:	0018      	movs	r0, r3
 80013f4:	46bd      	mov	sp, r7
 80013f6:	b008      	add	sp, #32
 80013f8:	bd80      	pop	{r7, pc}

080013fa <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b086      	sub	sp, #24
 80013fe:	af00      	add	r7, sp, #0
 8001400:	60f8      	str	r0, [r7, #12]
 8001402:	60b9      	str	r1, [r7, #8]
 8001404:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8001406:	2300      	movs	r3, #0
 8001408:	617b      	str	r3, [r7, #20]
 800140a:	e013      	b.n	8001434 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	68ba      	ldr	r2, [r7, #8]
 8001412:	18d3      	adds	r3, r2, r3
 8001414:	881b      	ldrh	r3, [r3, #0]
 8001416:	041a      	lsls	r2, r3, #16
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	3302      	adds	r3, #2
 800141e:	68b9      	ldr	r1, [r7, #8]
 8001420:	18cb      	adds	r3, r1, r3
 8001422:	881b      	ldrh	r3, [r3, #0]
 8001424:	0019      	movs	r1, r3
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	430a      	orrs	r2, r1
 800142c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	3301      	adds	r3, #1
 8001432:	617b      	str	r3, [r7, #20]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	085b      	lsrs	r3, r3, #1
 8001438:	697a      	ldr	r2, [r7, #20]
 800143a:	429a      	cmp	r2, r3
 800143c:	d3e6      	bcc.n	800140c <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2201      	movs	r2, #1
 8001442:	4013      	ands	r3, r2
 8001444:	d009      	beq.n	800145a <CRC_Handle_16+0x60>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	68ba      	ldr	r2, [r7, #8]
 8001452:	18d3      	adds	r3, r2, r3
 8001454:	881a      	ldrh	r2, [r3, #0]
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	681b      	ldr	r3, [r3, #0]
}
 8001460:	0018      	movs	r0, r3
 8001462:	46bd      	mov	sp, r7
 8001464:	b006      	add	sp, #24
 8001466:	bd80      	pop	{r7, pc}

08001468 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001470:	210f      	movs	r1, #15
 8001472:	187b      	adds	r3, r7, r1
 8001474:	2200      	movs	r2, #0
 8001476:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2221      	movs	r2, #33	; 0x21
 800147c:	5c9b      	ldrb	r3, [r3, r2]
 800147e:	b2db      	uxtb	r3, r3
 8001480:	2b02      	cmp	r3, #2
 8001482:	d006      	beq.n	8001492 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2204      	movs	r2, #4
 8001488:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 800148a:	187b      	adds	r3, r7, r1
 800148c:	2201      	movs	r2, #1
 800148e:	701a      	strb	r2, [r3, #0]
 8001490:	e028      	b.n	80014e4 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	210e      	movs	r1, #14
 800149e:	438a      	bics	r2, r1
 80014a0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2101      	movs	r1, #1
 80014ae:	438a      	bics	r2, r1
 80014b0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014ba:	2101      	movs	r1, #1
 80014bc:	4091      	lsls	r1, r2
 80014be:	000a      	movs	r2, r1
 80014c0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2221      	movs	r2, #33	; 0x21
 80014c6:	2101      	movs	r1, #1
 80014c8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2220      	movs	r2, #32
 80014ce:	2100      	movs	r1, #0
 80014d0:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d004      	beq.n	80014e4 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	0010      	movs	r0, r2
 80014e2:	4798      	blx	r3
    }
  }
  return status;
 80014e4:	230f      	movs	r3, #15
 80014e6:	18fb      	adds	r3, r7, r3
 80014e8:	781b      	ldrb	r3, [r3, #0]
}
 80014ea:	0018      	movs	r0, r3
 80014ec:	46bd      	mov	sp, r7
 80014ee:	b004      	add	sp, #16
 80014f0:	bd80      	pop	{r7, pc}
	...

080014f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b086      	sub	sp, #24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014fe:	2300      	movs	r3, #0
 8001500:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001502:	e149      	b.n	8001798 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2101      	movs	r1, #1
 800150a:	697a      	ldr	r2, [r7, #20]
 800150c:	4091      	lsls	r1, r2
 800150e:	000a      	movs	r2, r1
 8001510:	4013      	ands	r3, r2
 8001512:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d100      	bne.n	800151c <HAL_GPIO_Init+0x28>
 800151a:	e13a      	b.n	8001792 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	2203      	movs	r2, #3
 8001522:	4013      	ands	r3, r2
 8001524:	2b01      	cmp	r3, #1
 8001526:	d005      	beq.n	8001534 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	2203      	movs	r2, #3
 800152e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001530:	2b02      	cmp	r3, #2
 8001532:	d130      	bne.n	8001596 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	2203      	movs	r2, #3
 8001540:	409a      	lsls	r2, r3
 8001542:	0013      	movs	r3, r2
 8001544:	43da      	mvns	r2, r3
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	4013      	ands	r3, r2
 800154a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	68da      	ldr	r2, [r3, #12]
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	409a      	lsls	r2, r3
 8001556:	0013      	movs	r3, r2
 8001558:	693a      	ldr	r2, [r7, #16]
 800155a:	4313      	orrs	r3, r2
 800155c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	693a      	ldr	r2, [r7, #16]
 8001562:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800156a:	2201      	movs	r2, #1
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	409a      	lsls	r2, r3
 8001570:	0013      	movs	r3, r2
 8001572:	43da      	mvns	r2, r3
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	4013      	ands	r3, r2
 8001578:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	091b      	lsrs	r3, r3, #4
 8001580:	2201      	movs	r2, #1
 8001582:	401a      	ands	r2, r3
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	409a      	lsls	r2, r3
 8001588:	0013      	movs	r3, r2
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	4313      	orrs	r3, r2
 800158e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	2203      	movs	r2, #3
 800159c:	4013      	ands	r3, r2
 800159e:	2b03      	cmp	r3, #3
 80015a0:	d017      	beq.n	80015d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	68db      	ldr	r3, [r3, #12]
 80015a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	2203      	movs	r2, #3
 80015ae:	409a      	lsls	r2, r3
 80015b0:	0013      	movs	r3, r2
 80015b2:	43da      	mvns	r2, r3
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	4013      	ands	r3, r2
 80015b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	689a      	ldr	r2, [r3, #8]
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	409a      	lsls	r2, r3
 80015c4:	0013      	movs	r3, r2
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	2203      	movs	r2, #3
 80015d8:	4013      	ands	r3, r2
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d123      	bne.n	8001626 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	08da      	lsrs	r2, r3, #3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	3208      	adds	r2, #8
 80015e6:	0092      	lsls	r2, r2, #2
 80015e8:	58d3      	ldr	r3, [r2, r3]
 80015ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	2207      	movs	r2, #7
 80015f0:	4013      	ands	r3, r2
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	220f      	movs	r2, #15
 80015f6:	409a      	lsls	r2, r3
 80015f8:	0013      	movs	r3, r2
 80015fa:	43da      	mvns	r2, r3
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	4013      	ands	r3, r2
 8001600:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	691a      	ldr	r2, [r3, #16]
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	2107      	movs	r1, #7
 800160a:	400b      	ands	r3, r1
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	409a      	lsls	r2, r3
 8001610:	0013      	movs	r3, r2
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	4313      	orrs	r3, r2
 8001616:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	08da      	lsrs	r2, r3, #3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	3208      	adds	r2, #8
 8001620:	0092      	lsls	r2, r2, #2
 8001622:	6939      	ldr	r1, [r7, #16]
 8001624:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	2203      	movs	r2, #3
 8001632:	409a      	lsls	r2, r3
 8001634:	0013      	movs	r3, r2
 8001636:	43da      	mvns	r2, r3
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	4013      	ands	r3, r2
 800163c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	2203      	movs	r2, #3
 8001644:	401a      	ands	r2, r3
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	409a      	lsls	r2, r3
 800164c:	0013      	movs	r3, r2
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	4313      	orrs	r3, r2
 8001652:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685a      	ldr	r2, [r3, #4]
 800165e:	23c0      	movs	r3, #192	; 0xc0
 8001660:	029b      	lsls	r3, r3, #10
 8001662:	4013      	ands	r3, r2
 8001664:	d100      	bne.n	8001668 <HAL_GPIO_Init+0x174>
 8001666:	e094      	b.n	8001792 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001668:	4b51      	ldr	r3, [pc, #324]	; (80017b0 <HAL_GPIO_Init+0x2bc>)
 800166a:	699a      	ldr	r2, [r3, #24]
 800166c:	4b50      	ldr	r3, [pc, #320]	; (80017b0 <HAL_GPIO_Init+0x2bc>)
 800166e:	2101      	movs	r1, #1
 8001670:	430a      	orrs	r2, r1
 8001672:	619a      	str	r2, [r3, #24]
 8001674:	4b4e      	ldr	r3, [pc, #312]	; (80017b0 <HAL_GPIO_Init+0x2bc>)
 8001676:	699b      	ldr	r3, [r3, #24]
 8001678:	2201      	movs	r2, #1
 800167a:	4013      	ands	r3, r2
 800167c:	60bb      	str	r3, [r7, #8]
 800167e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001680:	4a4c      	ldr	r2, [pc, #304]	; (80017b4 <HAL_GPIO_Init+0x2c0>)
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	089b      	lsrs	r3, r3, #2
 8001686:	3302      	adds	r3, #2
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	589b      	ldr	r3, [r3, r2]
 800168c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	2203      	movs	r2, #3
 8001692:	4013      	ands	r3, r2
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	220f      	movs	r2, #15
 8001698:	409a      	lsls	r2, r3
 800169a:	0013      	movs	r3, r2
 800169c:	43da      	mvns	r2, r3
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	4013      	ands	r3, r2
 80016a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	2390      	movs	r3, #144	; 0x90
 80016a8:	05db      	lsls	r3, r3, #23
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d00d      	beq.n	80016ca <HAL_GPIO_Init+0x1d6>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a41      	ldr	r2, [pc, #260]	; (80017b8 <HAL_GPIO_Init+0x2c4>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d007      	beq.n	80016c6 <HAL_GPIO_Init+0x1d2>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a40      	ldr	r2, [pc, #256]	; (80017bc <HAL_GPIO_Init+0x2c8>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d101      	bne.n	80016c2 <HAL_GPIO_Init+0x1ce>
 80016be:	2302      	movs	r3, #2
 80016c0:	e004      	b.n	80016cc <HAL_GPIO_Init+0x1d8>
 80016c2:	2305      	movs	r3, #5
 80016c4:	e002      	b.n	80016cc <HAL_GPIO_Init+0x1d8>
 80016c6:	2301      	movs	r3, #1
 80016c8:	e000      	b.n	80016cc <HAL_GPIO_Init+0x1d8>
 80016ca:	2300      	movs	r3, #0
 80016cc:	697a      	ldr	r2, [r7, #20]
 80016ce:	2103      	movs	r1, #3
 80016d0:	400a      	ands	r2, r1
 80016d2:	0092      	lsls	r2, r2, #2
 80016d4:	4093      	lsls	r3, r2
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	4313      	orrs	r3, r2
 80016da:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80016dc:	4935      	ldr	r1, [pc, #212]	; (80017b4 <HAL_GPIO_Init+0x2c0>)
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	089b      	lsrs	r3, r3, #2
 80016e2:	3302      	adds	r3, #2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016ea:	4b35      	ldr	r3, [pc, #212]	; (80017c0 <HAL_GPIO_Init+0x2cc>)
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	43da      	mvns	r2, r3
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	4013      	ands	r3, r2
 80016f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685a      	ldr	r2, [r3, #4]
 80016fe:	2380      	movs	r3, #128	; 0x80
 8001700:	035b      	lsls	r3, r3, #13
 8001702:	4013      	ands	r3, r2
 8001704:	d003      	beq.n	800170e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001706:	693a      	ldr	r2, [r7, #16]
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	4313      	orrs	r3, r2
 800170c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800170e:	4b2c      	ldr	r3, [pc, #176]	; (80017c0 <HAL_GPIO_Init+0x2cc>)
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001714:	4b2a      	ldr	r3, [pc, #168]	; (80017c0 <HAL_GPIO_Init+0x2cc>)
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	43da      	mvns	r2, r3
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	4013      	ands	r3, r2
 8001722:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685a      	ldr	r2, [r3, #4]
 8001728:	2380      	movs	r3, #128	; 0x80
 800172a:	039b      	lsls	r3, r3, #14
 800172c:	4013      	ands	r3, r2
 800172e:	d003      	beq.n	8001738 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	4313      	orrs	r3, r2
 8001736:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001738:	4b21      	ldr	r3, [pc, #132]	; (80017c0 <HAL_GPIO_Init+0x2cc>)
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800173e:	4b20      	ldr	r3, [pc, #128]	; (80017c0 <HAL_GPIO_Init+0x2cc>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	43da      	mvns	r2, r3
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	4013      	ands	r3, r2
 800174c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685a      	ldr	r2, [r3, #4]
 8001752:	2380      	movs	r3, #128	; 0x80
 8001754:	029b      	lsls	r3, r3, #10
 8001756:	4013      	ands	r3, r2
 8001758:	d003      	beq.n	8001762 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	4313      	orrs	r3, r2
 8001760:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001762:	4b17      	ldr	r3, [pc, #92]	; (80017c0 <HAL_GPIO_Init+0x2cc>)
 8001764:	693a      	ldr	r2, [r7, #16]
 8001766:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001768:	4b15      	ldr	r3, [pc, #84]	; (80017c0 <HAL_GPIO_Init+0x2cc>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	43da      	mvns	r2, r3
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	4013      	ands	r3, r2
 8001776:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685a      	ldr	r2, [r3, #4]
 800177c:	2380      	movs	r3, #128	; 0x80
 800177e:	025b      	lsls	r3, r3, #9
 8001780:	4013      	ands	r3, r2
 8001782:	d003      	beq.n	800178c <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	4313      	orrs	r3, r2
 800178a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800178c:	4b0c      	ldr	r3, [pc, #48]	; (80017c0 <HAL_GPIO_Init+0x2cc>)
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	3301      	adds	r3, #1
 8001796:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	40da      	lsrs	r2, r3
 80017a0:	1e13      	subs	r3, r2, #0
 80017a2:	d000      	beq.n	80017a6 <HAL_GPIO_Init+0x2b2>
 80017a4:	e6ae      	b.n	8001504 <HAL_GPIO_Init+0x10>
  } 
}
 80017a6:	46c0      	nop			; (mov r8, r8)
 80017a8:	46c0      	nop			; (mov r8, r8)
 80017aa:	46bd      	mov	sp, r7
 80017ac:	b006      	add	sp, #24
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40021000 	.word	0x40021000
 80017b4:	40010000 	.word	0x40010000
 80017b8:	48000400 	.word	0x48000400
 80017bc:	48000800 	.word	0x48000800
 80017c0:	40010400 	.word	0x40010400

080017c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	0008      	movs	r0, r1
 80017ce:	0011      	movs	r1, r2
 80017d0:	1cbb      	adds	r3, r7, #2
 80017d2:	1c02      	adds	r2, r0, #0
 80017d4:	801a      	strh	r2, [r3, #0]
 80017d6:	1c7b      	adds	r3, r7, #1
 80017d8:	1c0a      	adds	r2, r1, #0
 80017da:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017dc:	1c7b      	adds	r3, r7, #1
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d004      	beq.n	80017ee <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017e4:	1cbb      	adds	r3, r7, #2
 80017e6:	881a      	ldrh	r2, [r3, #0]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017ec:	e003      	b.n	80017f6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017ee:	1cbb      	adds	r3, r7, #2
 80017f0:	881a      	ldrh	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017f6:	46c0      	nop			; (mov r8, r8)
 80017f8:	46bd      	mov	sp, r7
 80017fa:	b002      	add	sp, #8
 80017fc:	bd80      	pop	{r7, pc}
	...

08001800 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b088      	sub	sp, #32
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d102      	bne.n	8001814 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	f000 fb76 	bl	8001f00 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2201      	movs	r2, #1
 800181a:	4013      	ands	r3, r2
 800181c:	d100      	bne.n	8001820 <HAL_RCC_OscConfig+0x20>
 800181e:	e08e      	b.n	800193e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001820:	4bc5      	ldr	r3, [pc, #788]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	220c      	movs	r2, #12
 8001826:	4013      	ands	r3, r2
 8001828:	2b04      	cmp	r3, #4
 800182a:	d00e      	beq.n	800184a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800182c:	4bc2      	ldr	r3, [pc, #776]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	220c      	movs	r2, #12
 8001832:	4013      	ands	r3, r2
 8001834:	2b08      	cmp	r3, #8
 8001836:	d117      	bne.n	8001868 <HAL_RCC_OscConfig+0x68>
 8001838:	4bbf      	ldr	r3, [pc, #764]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 800183a:	685a      	ldr	r2, [r3, #4]
 800183c:	23c0      	movs	r3, #192	; 0xc0
 800183e:	025b      	lsls	r3, r3, #9
 8001840:	401a      	ands	r2, r3
 8001842:	2380      	movs	r3, #128	; 0x80
 8001844:	025b      	lsls	r3, r3, #9
 8001846:	429a      	cmp	r2, r3
 8001848:	d10e      	bne.n	8001868 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800184a:	4bbb      	ldr	r3, [pc, #748]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	2380      	movs	r3, #128	; 0x80
 8001850:	029b      	lsls	r3, r3, #10
 8001852:	4013      	ands	r3, r2
 8001854:	d100      	bne.n	8001858 <HAL_RCC_OscConfig+0x58>
 8001856:	e071      	b.n	800193c <HAL_RCC_OscConfig+0x13c>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d000      	beq.n	8001862 <HAL_RCC_OscConfig+0x62>
 8001860:	e06c      	b.n	800193c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	f000 fb4c 	bl	8001f00 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d107      	bne.n	8001880 <HAL_RCC_OscConfig+0x80>
 8001870:	4bb1      	ldr	r3, [pc, #708]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	4bb0      	ldr	r3, [pc, #704]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 8001876:	2180      	movs	r1, #128	; 0x80
 8001878:	0249      	lsls	r1, r1, #9
 800187a:	430a      	orrs	r2, r1
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	e02f      	b.n	80018e0 <HAL_RCC_OscConfig+0xe0>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d10c      	bne.n	80018a2 <HAL_RCC_OscConfig+0xa2>
 8001888:	4bab      	ldr	r3, [pc, #684]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	4baa      	ldr	r3, [pc, #680]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 800188e:	49ab      	ldr	r1, [pc, #684]	; (8001b3c <HAL_RCC_OscConfig+0x33c>)
 8001890:	400a      	ands	r2, r1
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	4ba8      	ldr	r3, [pc, #672]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	4ba7      	ldr	r3, [pc, #668]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 800189a:	49a9      	ldr	r1, [pc, #676]	; (8001b40 <HAL_RCC_OscConfig+0x340>)
 800189c:	400a      	ands	r2, r1
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	e01e      	b.n	80018e0 <HAL_RCC_OscConfig+0xe0>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	2b05      	cmp	r3, #5
 80018a8:	d10e      	bne.n	80018c8 <HAL_RCC_OscConfig+0xc8>
 80018aa:	4ba3      	ldr	r3, [pc, #652]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	4ba2      	ldr	r3, [pc, #648]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 80018b0:	2180      	movs	r1, #128	; 0x80
 80018b2:	02c9      	lsls	r1, r1, #11
 80018b4:	430a      	orrs	r2, r1
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	4b9f      	ldr	r3, [pc, #636]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	4b9e      	ldr	r3, [pc, #632]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 80018be:	2180      	movs	r1, #128	; 0x80
 80018c0:	0249      	lsls	r1, r1, #9
 80018c2:	430a      	orrs	r2, r1
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	e00b      	b.n	80018e0 <HAL_RCC_OscConfig+0xe0>
 80018c8:	4b9b      	ldr	r3, [pc, #620]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	4b9a      	ldr	r3, [pc, #616]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 80018ce:	499b      	ldr	r1, [pc, #620]	; (8001b3c <HAL_RCC_OscConfig+0x33c>)
 80018d0:	400a      	ands	r2, r1
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	4b98      	ldr	r3, [pc, #608]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	4b97      	ldr	r3, [pc, #604]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 80018da:	4999      	ldr	r1, [pc, #612]	; (8001b40 <HAL_RCC_OscConfig+0x340>)
 80018dc:	400a      	ands	r2, r1
 80018de:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d014      	beq.n	8001912 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e8:	f7ff fb54 	bl	8000f94 <HAL_GetTick>
 80018ec:	0003      	movs	r3, r0
 80018ee:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018f0:	e008      	b.n	8001904 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018f2:	f7ff fb4f 	bl	8000f94 <HAL_GetTick>
 80018f6:	0002      	movs	r2, r0
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	2b64      	cmp	r3, #100	; 0x64
 80018fe:	d901      	bls.n	8001904 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e2fd      	b.n	8001f00 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001904:	4b8c      	ldr	r3, [pc, #560]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	2380      	movs	r3, #128	; 0x80
 800190a:	029b      	lsls	r3, r3, #10
 800190c:	4013      	ands	r3, r2
 800190e:	d0f0      	beq.n	80018f2 <HAL_RCC_OscConfig+0xf2>
 8001910:	e015      	b.n	800193e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001912:	f7ff fb3f 	bl	8000f94 <HAL_GetTick>
 8001916:	0003      	movs	r3, r0
 8001918:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800191a:	e008      	b.n	800192e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800191c:	f7ff fb3a 	bl	8000f94 <HAL_GetTick>
 8001920:	0002      	movs	r2, r0
 8001922:	69bb      	ldr	r3, [r7, #24]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	2b64      	cmp	r3, #100	; 0x64
 8001928:	d901      	bls.n	800192e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e2e8      	b.n	8001f00 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800192e:	4b82      	ldr	r3, [pc, #520]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	2380      	movs	r3, #128	; 0x80
 8001934:	029b      	lsls	r3, r3, #10
 8001936:	4013      	ands	r3, r2
 8001938:	d1f0      	bne.n	800191c <HAL_RCC_OscConfig+0x11c>
 800193a:	e000      	b.n	800193e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800193c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2202      	movs	r2, #2
 8001944:	4013      	ands	r3, r2
 8001946:	d100      	bne.n	800194a <HAL_RCC_OscConfig+0x14a>
 8001948:	e06c      	b.n	8001a24 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800194a:	4b7b      	ldr	r3, [pc, #492]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	220c      	movs	r2, #12
 8001950:	4013      	ands	r3, r2
 8001952:	d00e      	beq.n	8001972 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001954:	4b78      	ldr	r3, [pc, #480]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	220c      	movs	r2, #12
 800195a:	4013      	ands	r3, r2
 800195c:	2b08      	cmp	r3, #8
 800195e:	d11f      	bne.n	80019a0 <HAL_RCC_OscConfig+0x1a0>
 8001960:	4b75      	ldr	r3, [pc, #468]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 8001962:	685a      	ldr	r2, [r3, #4]
 8001964:	23c0      	movs	r3, #192	; 0xc0
 8001966:	025b      	lsls	r3, r3, #9
 8001968:	401a      	ands	r2, r3
 800196a:	2380      	movs	r3, #128	; 0x80
 800196c:	021b      	lsls	r3, r3, #8
 800196e:	429a      	cmp	r2, r3
 8001970:	d116      	bne.n	80019a0 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001972:	4b71      	ldr	r3, [pc, #452]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2202      	movs	r2, #2
 8001978:	4013      	ands	r3, r2
 800197a:	d005      	beq.n	8001988 <HAL_RCC_OscConfig+0x188>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d001      	beq.n	8001988 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e2bb      	b.n	8001f00 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001988:	4b6b      	ldr	r3, [pc, #428]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	22f8      	movs	r2, #248	; 0xf8
 800198e:	4393      	bics	r3, r2
 8001990:	0019      	movs	r1, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	691b      	ldr	r3, [r3, #16]
 8001996:	00da      	lsls	r2, r3, #3
 8001998:	4b67      	ldr	r3, [pc, #412]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 800199a:	430a      	orrs	r2, r1
 800199c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800199e:	e041      	b.n	8001a24 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d024      	beq.n	80019f2 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019a8:	4b63      	ldr	r3, [pc, #396]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	4b62      	ldr	r3, [pc, #392]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 80019ae:	2101      	movs	r1, #1
 80019b0:	430a      	orrs	r2, r1
 80019b2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b4:	f7ff faee 	bl	8000f94 <HAL_GetTick>
 80019b8:	0003      	movs	r3, r0
 80019ba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019bc:	e008      	b.n	80019d0 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019be:	f7ff fae9 	bl	8000f94 <HAL_GetTick>
 80019c2:	0002      	movs	r2, r0
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d901      	bls.n	80019d0 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e297      	b.n	8001f00 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019d0:	4b59      	ldr	r3, [pc, #356]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2202      	movs	r2, #2
 80019d6:	4013      	ands	r3, r2
 80019d8:	d0f1      	beq.n	80019be <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019da:	4b57      	ldr	r3, [pc, #348]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	22f8      	movs	r2, #248	; 0xf8
 80019e0:	4393      	bics	r3, r2
 80019e2:	0019      	movs	r1, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	691b      	ldr	r3, [r3, #16]
 80019e8:	00da      	lsls	r2, r3, #3
 80019ea:	4b53      	ldr	r3, [pc, #332]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 80019ec:	430a      	orrs	r2, r1
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	e018      	b.n	8001a24 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019f2:	4b51      	ldr	r3, [pc, #324]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	4b50      	ldr	r3, [pc, #320]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 80019f8:	2101      	movs	r1, #1
 80019fa:	438a      	bics	r2, r1
 80019fc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019fe:	f7ff fac9 	bl	8000f94 <HAL_GetTick>
 8001a02:	0003      	movs	r3, r0
 8001a04:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a06:	e008      	b.n	8001a1a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a08:	f7ff fac4 	bl	8000f94 <HAL_GetTick>
 8001a0c:	0002      	movs	r2, r0
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e272      	b.n	8001f00 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a1a:	4b47      	ldr	r3, [pc, #284]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2202      	movs	r2, #2
 8001a20:	4013      	ands	r3, r2
 8001a22:	d1f1      	bne.n	8001a08 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2208      	movs	r2, #8
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	d036      	beq.n	8001a9c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	69db      	ldr	r3, [r3, #28]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d019      	beq.n	8001a6a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a36:	4b40      	ldr	r3, [pc, #256]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 8001a38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a3a:	4b3f      	ldr	r3, [pc, #252]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 8001a3c:	2101      	movs	r1, #1
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a42:	f7ff faa7 	bl	8000f94 <HAL_GetTick>
 8001a46:	0003      	movs	r3, r0
 8001a48:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a4a:	e008      	b.n	8001a5e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a4c:	f7ff faa2 	bl	8000f94 <HAL_GetTick>
 8001a50:	0002      	movs	r2, r0
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e250      	b.n	8001f00 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a5e:	4b36      	ldr	r3, [pc, #216]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 8001a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a62:	2202      	movs	r2, #2
 8001a64:	4013      	ands	r3, r2
 8001a66:	d0f1      	beq.n	8001a4c <HAL_RCC_OscConfig+0x24c>
 8001a68:	e018      	b.n	8001a9c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a6a:	4b33      	ldr	r3, [pc, #204]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 8001a6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a6e:	4b32      	ldr	r3, [pc, #200]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 8001a70:	2101      	movs	r1, #1
 8001a72:	438a      	bics	r2, r1
 8001a74:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a76:	f7ff fa8d 	bl	8000f94 <HAL_GetTick>
 8001a7a:	0003      	movs	r3, r0
 8001a7c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a7e:	e008      	b.n	8001a92 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a80:	f7ff fa88 	bl	8000f94 <HAL_GetTick>
 8001a84:	0002      	movs	r2, r0
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e236      	b.n	8001f00 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a92:	4b29      	ldr	r3, [pc, #164]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 8001a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a96:	2202      	movs	r2, #2
 8001a98:	4013      	ands	r3, r2
 8001a9a:	d1f1      	bne.n	8001a80 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2204      	movs	r2, #4
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	d100      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x2a8>
 8001aa6:	e0b5      	b.n	8001c14 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aa8:	201f      	movs	r0, #31
 8001aaa:	183b      	adds	r3, r7, r0
 8001aac:	2200      	movs	r2, #0
 8001aae:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ab0:	4b21      	ldr	r3, [pc, #132]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 8001ab2:	69da      	ldr	r2, [r3, #28]
 8001ab4:	2380      	movs	r3, #128	; 0x80
 8001ab6:	055b      	lsls	r3, r3, #21
 8001ab8:	4013      	ands	r3, r2
 8001aba:	d110      	bne.n	8001ade <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001abc:	4b1e      	ldr	r3, [pc, #120]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 8001abe:	69da      	ldr	r2, [r3, #28]
 8001ac0:	4b1d      	ldr	r3, [pc, #116]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 8001ac2:	2180      	movs	r1, #128	; 0x80
 8001ac4:	0549      	lsls	r1, r1, #21
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	61da      	str	r2, [r3, #28]
 8001aca:	4b1b      	ldr	r3, [pc, #108]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 8001acc:	69da      	ldr	r2, [r3, #28]
 8001ace:	2380      	movs	r3, #128	; 0x80
 8001ad0:	055b      	lsls	r3, r3, #21
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	60fb      	str	r3, [r7, #12]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001ad8:	183b      	adds	r3, r7, r0
 8001ada:	2201      	movs	r2, #1
 8001adc:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ade:	4b19      	ldr	r3, [pc, #100]	; (8001b44 <HAL_RCC_OscConfig+0x344>)
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	2380      	movs	r3, #128	; 0x80
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	d11a      	bne.n	8001b20 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001aea:	4b16      	ldr	r3, [pc, #88]	; (8001b44 <HAL_RCC_OscConfig+0x344>)
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	4b15      	ldr	r3, [pc, #84]	; (8001b44 <HAL_RCC_OscConfig+0x344>)
 8001af0:	2180      	movs	r1, #128	; 0x80
 8001af2:	0049      	lsls	r1, r1, #1
 8001af4:	430a      	orrs	r2, r1
 8001af6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001af8:	f7ff fa4c 	bl	8000f94 <HAL_GetTick>
 8001afc:	0003      	movs	r3, r0
 8001afe:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b00:	e008      	b.n	8001b14 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b02:	f7ff fa47 	bl	8000f94 <HAL_GetTick>
 8001b06:	0002      	movs	r2, r0
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	2b64      	cmp	r3, #100	; 0x64
 8001b0e:	d901      	bls.n	8001b14 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e1f5      	b.n	8001f00 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b14:	4b0b      	ldr	r3, [pc, #44]	; (8001b44 <HAL_RCC_OscConfig+0x344>)
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	2380      	movs	r3, #128	; 0x80
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	d0f0      	beq.n	8001b02 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d10f      	bne.n	8001b48 <HAL_RCC_OscConfig+0x348>
 8001b28:	4b03      	ldr	r3, [pc, #12]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 8001b2a:	6a1a      	ldr	r2, [r3, #32]
 8001b2c:	4b02      	ldr	r3, [pc, #8]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 8001b2e:	2101      	movs	r1, #1
 8001b30:	430a      	orrs	r2, r1
 8001b32:	621a      	str	r2, [r3, #32]
 8001b34:	e036      	b.n	8001ba4 <HAL_RCC_OscConfig+0x3a4>
 8001b36:	46c0      	nop			; (mov r8, r8)
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	fffeffff 	.word	0xfffeffff
 8001b40:	fffbffff 	.word	0xfffbffff
 8001b44:	40007000 	.word	0x40007000
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d10c      	bne.n	8001b6a <HAL_RCC_OscConfig+0x36a>
 8001b50:	4bca      	ldr	r3, [pc, #808]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001b52:	6a1a      	ldr	r2, [r3, #32]
 8001b54:	4bc9      	ldr	r3, [pc, #804]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001b56:	2101      	movs	r1, #1
 8001b58:	438a      	bics	r2, r1
 8001b5a:	621a      	str	r2, [r3, #32]
 8001b5c:	4bc7      	ldr	r3, [pc, #796]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001b5e:	6a1a      	ldr	r2, [r3, #32]
 8001b60:	4bc6      	ldr	r3, [pc, #792]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001b62:	2104      	movs	r1, #4
 8001b64:	438a      	bics	r2, r1
 8001b66:	621a      	str	r2, [r3, #32]
 8001b68:	e01c      	b.n	8001ba4 <HAL_RCC_OscConfig+0x3a4>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	2b05      	cmp	r3, #5
 8001b70:	d10c      	bne.n	8001b8c <HAL_RCC_OscConfig+0x38c>
 8001b72:	4bc2      	ldr	r3, [pc, #776]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001b74:	6a1a      	ldr	r2, [r3, #32]
 8001b76:	4bc1      	ldr	r3, [pc, #772]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001b78:	2104      	movs	r1, #4
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	621a      	str	r2, [r3, #32]
 8001b7e:	4bbf      	ldr	r3, [pc, #764]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001b80:	6a1a      	ldr	r2, [r3, #32]
 8001b82:	4bbe      	ldr	r3, [pc, #760]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001b84:	2101      	movs	r1, #1
 8001b86:	430a      	orrs	r2, r1
 8001b88:	621a      	str	r2, [r3, #32]
 8001b8a:	e00b      	b.n	8001ba4 <HAL_RCC_OscConfig+0x3a4>
 8001b8c:	4bbb      	ldr	r3, [pc, #748]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001b8e:	6a1a      	ldr	r2, [r3, #32]
 8001b90:	4bba      	ldr	r3, [pc, #744]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001b92:	2101      	movs	r1, #1
 8001b94:	438a      	bics	r2, r1
 8001b96:	621a      	str	r2, [r3, #32]
 8001b98:	4bb8      	ldr	r3, [pc, #736]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001b9a:	6a1a      	ldr	r2, [r3, #32]
 8001b9c:	4bb7      	ldr	r3, [pc, #732]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001b9e:	2104      	movs	r1, #4
 8001ba0:	438a      	bics	r2, r1
 8001ba2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d014      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bac:	f7ff f9f2 	bl	8000f94 <HAL_GetTick>
 8001bb0:	0003      	movs	r3, r0
 8001bb2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bb4:	e009      	b.n	8001bca <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bb6:	f7ff f9ed 	bl	8000f94 <HAL_GetTick>
 8001bba:	0002      	movs	r2, r0
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	4aaf      	ldr	r2, [pc, #700]	; (8001e80 <HAL_RCC_OscConfig+0x680>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e19a      	b.n	8001f00 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bca:	4bac      	ldr	r3, [pc, #688]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001bcc:	6a1b      	ldr	r3, [r3, #32]
 8001bce:	2202      	movs	r2, #2
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	d0f0      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x3b6>
 8001bd4:	e013      	b.n	8001bfe <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bd6:	f7ff f9dd 	bl	8000f94 <HAL_GetTick>
 8001bda:	0003      	movs	r3, r0
 8001bdc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bde:	e009      	b.n	8001bf4 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001be0:	f7ff f9d8 	bl	8000f94 <HAL_GetTick>
 8001be4:	0002      	movs	r2, r0
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	4aa5      	ldr	r2, [pc, #660]	; (8001e80 <HAL_RCC_OscConfig+0x680>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d901      	bls.n	8001bf4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e185      	b.n	8001f00 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bf4:	4ba1      	ldr	r3, [pc, #644]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001bf6:	6a1b      	ldr	r3, [r3, #32]
 8001bf8:	2202      	movs	r2, #2
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	d1f0      	bne.n	8001be0 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001bfe:	231f      	movs	r3, #31
 8001c00:	18fb      	adds	r3, r7, r3
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d105      	bne.n	8001c14 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c08:	4b9c      	ldr	r3, [pc, #624]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001c0a:	69da      	ldr	r2, [r3, #28]
 8001c0c:	4b9b      	ldr	r3, [pc, #620]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001c0e:	499d      	ldr	r1, [pc, #628]	; (8001e84 <HAL_RCC_OscConfig+0x684>)
 8001c10:	400a      	ands	r2, r1
 8001c12:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2210      	movs	r2, #16
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	d063      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	695b      	ldr	r3, [r3, #20]
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d12a      	bne.n	8001c7c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001c26:	4b95      	ldr	r3, [pc, #596]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001c28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c2a:	4b94      	ldr	r3, [pc, #592]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001c2c:	2104      	movs	r1, #4
 8001c2e:	430a      	orrs	r2, r1
 8001c30:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001c32:	4b92      	ldr	r3, [pc, #584]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001c34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c36:	4b91      	ldr	r3, [pc, #580]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001c38:	2101      	movs	r1, #1
 8001c3a:	430a      	orrs	r2, r1
 8001c3c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c3e:	f7ff f9a9 	bl	8000f94 <HAL_GetTick>
 8001c42:	0003      	movs	r3, r0
 8001c44:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001c46:	e008      	b.n	8001c5a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001c48:	f7ff f9a4 	bl	8000f94 <HAL_GetTick>
 8001c4c:	0002      	movs	r2, r0
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e152      	b.n	8001f00 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001c5a:	4b88      	ldr	r3, [pc, #544]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c5e:	2202      	movs	r2, #2
 8001c60:	4013      	ands	r3, r2
 8001c62:	d0f1      	beq.n	8001c48 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001c64:	4b85      	ldr	r3, [pc, #532]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c68:	22f8      	movs	r2, #248	; 0xf8
 8001c6a:	4393      	bics	r3, r2
 8001c6c:	0019      	movs	r1, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	699b      	ldr	r3, [r3, #24]
 8001c72:	00da      	lsls	r2, r3, #3
 8001c74:	4b81      	ldr	r3, [pc, #516]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001c76:	430a      	orrs	r2, r1
 8001c78:	635a      	str	r2, [r3, #52]	; 0x34
 8001c7a:	e034      	b.n	8001ce6 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	695b      	ldr	r3, [r3, #20]
 8001c80:	3305      	adds	r3, #5
 8001c82:	d111      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001c84:	4b7d      	ldr	r3, [pc, #500]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001c86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c88:	4b7c      	ldr	r3, [pc, #496]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001c8a:	2104      	movs	r1, #4
 8001c8c:	438a      	bics	r2, r1
 8001c8e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001c90:	4b7a      	ldr	r3, [pc, #488]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c94:	22f8      	movs	r2, #248	; 0xf8
 8001c96:	4393      	bics	r3, r2
 8001c98:	0019      	movs	r1, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	699b      	ldr	r3, [r3, #24]
 8001c9e:	00da      	lsls	r2, r3, #3
 8001ca0:	4b76      	ldr	r3, [pc, #472]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001ca2:	430a      	orrs	r2, r1
 8001ca4:	635a      	str	r2, [r3, #52]	; 0x34
 8001ca6:	e01e      	b.n	8001ce6 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001ca8:	4b74      	ldr	r3, [pc, #464]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001caa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cac:	4b73      	ldr	r3, [pc, #460]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001cae:	2104      	movs	r1, #4
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001cb4:	4b71      	ldr	r3, [pc, #452]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001cb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cb8:	4b70      	ldr	r3, [pc, #448]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001cba:	2101      	movs	r1, #1
 8001cbc:	438a      	bics	r2, r1
 8001cbe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cc0:	f7ff f968 	bl	8000f94 <HAL_GetTick>
 8001cc4:	0003      	movs	r3, r0
 8001cc6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001cc8:	e008      	b.n	8001cdc <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001cca:	f7ff f963 	bl	8000f94 <HAL_GetTick>
 8001cce:	0002      	movs	r2, r0
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d901      	bls.n	8001cdc <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e111      	b.n	8001f00 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001cdc:	4b67      	ldr	r3, [pc, #412]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001cde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ce0:	2202      	movs	r2, #2
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	d1f1      	bne.n	8001cca <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2220      	movs	r2, #32
 8001cec:	4013      	ands	r3, r2
 8001cee:	d05c      	beq.n	8001daa <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001cf0:	4b62      	ldr	r3, [pc, #392]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	220c      	movs	r2, #12
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	2b0c      	cmp	r3, #12
 8001cfa:	d00e      	beq.n	8001d1a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001cfc:	4b5f      	ldr	r3, [pc, #380]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	220c      	movs	r2, #12
 8001d02:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001d04:	2b08      	cmp	r3, #8
 8001d06:	d114      	bne.n	8001d32 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001d08:	4b5c      	ldr	r3, [pc, #368]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001d0a:	685a      	ldr	r2, [r3, #4]
 8001d0c:	23c0      	movs	r3, #192	; 0xc0
 8001d0e:	025b      	lsls	r3, r3, #9
 8001d10:	401a      	ands	r2, r3
 8001d12:	23c0      	movs	r3, #192	; 0xc0
 8001d14:	025b      	lsls	r3, r3, #9
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d10b      	bne.n	8001d32 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001d1a:	4b58      	ldr	r3, [pc, #352]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001d1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d1e:	2380      	movs	r3, #128	; 0x80
 8001d20:	029b      	lsls	r3, r3, #10
 8001d22:	4013      	ands	r3, r2
 8001d24:	d040      	beq.n	8001da8 <HAL_RCC_OscConfig+0x5a8>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a1b      	ldr	r3, [r3, #32]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d03c      	beq.n	8001da8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e0e6      	b.n	8001f00 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6a1b      	ldr	r3, [r3, #32]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d01b      	beq.n	8001d72 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001d3a:	4b50      	ldr	r3, [pc, #320]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001d3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d3e:	4b4f      	ldr	r3, [pc, #316]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001d40:	2180      	movs	r1, #128	; 0x80
 8001d42:	0249      	lsls	r1, r1, #9
 8001d44:	430a      	orrs	r2, r1
 8001d46:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d48:	f7ff f924 	bl	8000f94 <HAL_GetTick>
 8001d4c:	0003      	movs	r3, r0
 8001d4e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001d50:	e008      	b.n	8001d64 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d52:	f7ff f91f 	bl	8000f94 <HAL_GetTick>
 8001d56:	0002      	movs	r2, r0
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d901      	bls.n	8001d64 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001d60:	2303      	movs	r3, #3
 8001d62:	e0cd      	b.n	8001f00 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001d64:	4b45      	ldr	r3, [pc, #276]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001d66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d68:	2380      	movs	r3, #128	; 0x80
 8001d6a:	029b      	lsls	r3, r3, #10
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	d0f0      	beq.n	8001d52 <HAL_RCC_OscConfig+0x552>
 8001d70:	e01b      	b.n	8001daa <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001d72:	4b42      	ldr	r3, [pc, #264]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001d74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d76:	4b41      	ldr	r3, [pc, #260]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001d78:	4943      	ldr	r1, [pc, #268]	; (8001e88 <HAL_RCC_OscConfig+0x688>)
 8001d7a:	400a      	ands	r2, r1
 8001d7c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7e:	f7ff f909 	bl	8000f94 <HAL_GetTick>
 8001d82:	0003      	movs	r3, r0
 8001d84:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001d86:	e008      	b.n	8001d9a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d88:	f7ff f904 	bl	8000f94 <HAL_GetTick>
 8001d8c:	0002      	movs	r2, r0
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e0b2      	b.n	8001f00 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001d9a:	4b38      	ldr	r3, [pc, #224]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001d9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d9e:	2380      	movs	r3, #128	; 0x80
 8001da0:	029b      	lsls	r3, r3, #10
 8001da2:	4013      	ands	r3, r2
 8001da4:	d1f0      	bne.n	8001d88 <HAL_RCC_OscConfig+0x588>
 8001da6:	e000      	b.n	8001daa <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001da8:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d100      	bne.n	8001db4 <HAL_RCC_OscConfig+0x5b4>
 8001db2:	e0a4      	b.n	8001efe <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001db4:	4b31      	ldr	r3, [pc, #196]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	220c      	movs	r2, #12
 8001dba:	4013      	ands	r3, r2
 8001dbc:	2b08      	cmp	r3, #8
 8001dbe:	d100      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x5c2>
 8001dc0:	e078      	b.n	8001eb4 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d14c      	bne.n	8001e64 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dca:	4b2c      	ldr	r3, [pc, #176]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	4b2b      	ldr	r3, [pc, #172]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001dd0:	492e      	ldr	r1, [pc, #184]	; (8001e8c <HAL_RCC_OscConfig+0x68c>)
 8001dd2:	400a      	ands	r2, r1
 8001dd4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd6:	f7ff f8dd 	bl	8000f94 <HAL_GetTick>
 8001dda:	0003      	movs	r3, r0
 8001ddc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dde:	e008      	b.n	8001df2 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001de0:	f7ff f8d8 	bl	8000f94 <HAL_GetTick>
 8001de4:	0002      	movs	r2, r0
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e086      	b.n	8001f00 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001df2:	4b22      	ldr	r3, [pc, #136]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	2380      	movs	r3, #128	; 0x80
 8001df8:	049b      	lsls	r3, r3, #18
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	d1f0      	bne.n	8001de0 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dfe:	4b1f      	ldr	r3, [pc, #124]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e02:	220f      	movs	r2, #15
 8001e04:	4393      	bics	r3, r2
 8001e06:	0019      	movs	r1, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e0c:	4b1b      	ldr	r3, [pc, #108]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001e0e:	430a      	orrs	r2, r1
 8001e10:	62da      	str	r2, [r3, #44]	; 0x2c
 8001e12:	4b1a      	ldr	r3, [pc, #104]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	4a1e      	ldr	r2, [pc, #120]	; (8001e90 <HAL_RCC_OscConfig+0x690>)
 8001e18:	4013      	ands	r3, r2
 8001e1a:	0019      	movs	r1, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e24:	431a      	orrs	r2, r3
 8001e26:	4b15      	ldr	r3, [pc, #84]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e2c:	4b13      	ldr	r3, [pc, #76]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	4b12      	ldr	r3, [pc, #72]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001e32:	2180      	movs	r1, #128	; 0x80
 8001e34:	0449      	lsls	r1, r1, #17
 8001e36:	430a      	orrs	r2, r1
 8001e38:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e3a:	f7ff f8ab 	bl	8000f94 <HAL_GetTick>
 8001e3e:	0003      	movs	r3, r0
 8001e40:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e44:	f7ff f8a6 	bl	8000f94 <HAL_GetTick>
 8001e48:	0002      	movs	r2, r0
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e054      	b.n	8001f00 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e56:	4b09      	ldr	r3, [pc, #36]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	2380      	movs	r3, #128	; 0x80
 8001e5c:	049b      	lsls	r3, r3, #18
 8001e5e:	4013      	ands	r3, r2
 8001e60:	d0f0      	beq.n	8001e44 <HAL_RCC_OscConfig+0x644>
 8001e62:	e04c      	b.n	8001efe <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e64:	4b05      	ldr	r3, [pc, #20]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	4b04      	ldr	r3, [pc, #16]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001e6a:	4908      	ldr	r1, [pc, #32]	; (8001e8c <HAL_RCC_OscConfig+0x68c>)
 8001e6c:	400a      	ands	r2, r1
 8001e6e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e70:	f7ff f890 	bl	8000f94 <HAL_GetTick>
 8001e74:	0003      	movs	r3, r0
 8001e76:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e78:	e015      	b.n	8001ea6 <HAL_RCC_OscConfig+0x6a6>
 8001e7a:	46c0      	nop			; (mov r8, r8)
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	00001388 	.word	0x00001388
 8001e84:	efffffff 	.word	0xefffffff
 8001e88:	fffeffff 	.word	0xfffeffff
 8001e8c:	feffffff 	.word	0xfeffffff
 8001e90:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e94:	f7ff f87e 	bl	8000f94 <HAL_GetTick>
 8001e98:	0002      	movs	r2, r0
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e02c      	b.n	8001f00 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ea6:	4b18      	ldr	r3, [pc, #96]	; (8001f08 <HAL_RCC_OscConfig+0x708>)
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	2380      	movs	r3, #128	; 0x80
 8001eac:	049b      	lsls	r3, r3, #18
 8001eae:	4013      	ands	r3, r2
 8001eb0:	d1f0      	bne.n	8001e94 <HAL_RCC_OscConfig+0x694>
 8001eb2:	e024      	b.n	8001efe <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d101      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e01f      	b.n	8001f00 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001ec0:	4b11      	ldr	r3, [pc, #68]	; (8001f08 <HAL_RCC_OscConfig+0x708>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001ec6:	4b10      	ldr	r3, [pc, #64]	; (8001f08 <HAL_RCC_OscConfig+0x708>)
 8001ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eca:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ecc:	697a      	ldr	r2, [r7, #20]
 8001ece:	23c0      	movs	r3, #192	; 0xc0
 8001ed0:	025b      	lsls	r3, r3, #9
 8001ed2:	401a      	ands	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d10e      	bne.n	8001efa <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	220f      	movs	r2, #15
 8001ee0:	401a      	ands	r2, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d107      	bne.n	8001efa <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001eea:	697a      	ldr	r2, [r7, #20]
 8001eec:	23f0      	movs	r3, #240	; 0xf0
 8001eee:	039b      	lsls	r3, r3, #14
 8001ef0:	401a      	ands	r2, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d001      	beq.n	8001efe <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e000      	b.n	8001f00 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	0018      	movs	r0, r3
 8001f02:	46bd      	mov	sp, r7
 8001f04:	b008      	add	sp, #32
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	40021000 	.word	0x40021000

08001f0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d101      	bne.n	8001f20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e0bf      	b.n	80020a0 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f20:	4b61      	ldr	r3, [pc, #388]	; (80020a8 <HAL_RCC_ClockConfig+0x19c>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2201      	movs	r2, #1
 8001f26:	4013      	ands	r3, r2
 8001f28:	683a      	ldr	r2, [r7, #0]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d911      	bls.n	8001f52 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f2e:	4b5e      	ldr	r3, [pc, #376]	; (80020a8 <HAL_RCC_ClockConfig+0x19c>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2201      	movs	r2, #1
 8001f34:	4393      	bics	r3, r2
 8001f36:	0019      	movs	r1, r3
 8001f38:	4b5b      	ldr	r3, [pc, #364]	; (80020a8 <HAL_RCC_ClockConfig+0x19c>)
 8001f3a:	683a      	ldr	r2, [r7, #0]
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f40:	4b59      	ldr	r3, [pc, #356]	; (80020a8 <HAL_RCC_ClockConfig+0x19c>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2201      	movs	r2, #1
 8001f46:	4013      	ands	r3, r2
 8001f48:	683a      	ldr	r2, [r7, #0]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d001      	beq.n	8001f52 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e0a6      	b.n	80020a0 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2202      	movs	r2, #2
 8001f58:	4013      	ands	r3, r2
 8001f5a:	d015      	beq.n	8001f88 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2204      	movs	r2, #4
 8001f62:	4013      	ands	r3, r2
 8001f64:	d006      	beq.n	8001f74 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001f66:	4b51      	ldr	r3, [pc, #324]	; (80020ac <HAL_RCC_ClockConfig+0x1a0>)
 8001f68:	685a      	ldr	r2, [r3, #4]
 8001f6a:	4b50      	ldr	r3, [pc, #320]	; (80020ac <HAL_RCC_ClockConfig+0x1a0>)
 8001f6c:	21e0      	movs	r1, #224	; 0xe0
 8001f6e:	00c9      	lsls	r1, r1, #3
 8001f70:	430a      	orrs	r2, r1
 8001f72:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f74:	4b4d      	ldr	r3, [pc, #308]	; (80020ac <HAL_RCC_ClockConfig+0x1a0>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	22f0      	movs	r2, #240	; 0xf0
 8001f7a:	4393      	bics	r3, r2
 8001f7c:	0019      	movs	r1, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	689a      	ldr	r2, [r3, #8]
 8001f82:	4b4a      	ldr	r3, [pc, #296]	; (80020ac <HAL_RCC_ClockConfig+0x1a0>)
 8001f84:	430a      	orrs	r2, r1
 8001f86:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	4013      	ands	r3, r2
 8001f90:	d04c      	beq.n	800202c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d107      	bne.n	8001faa <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f9a:	4b44      	ldr	r3, [pc, #272]	; (80020ac <HAL_RCC_ClockConfig+0x1a0>)
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	2380      	movs	r3, #128	; 0x80
 8001fa0:	029b      	lsls	r3, r3, #10
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	d120      	bne.n	8001fe8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e07a      	b.n	80020a0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d107      	bne.n	8001fc2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fb2:	4b3e      	ldr	r3, [pc, #248]	; (80020ac <HAL_RCC_ClockConfig+0x1a0>)
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	2380      	movs	r3, #128	; 0x80
 8001fb8:	049b      	lsls	r3, r3, #18
 8001fba:	4013      	ands	r3, r2
 8001fbc:	d114      	bne.n	8001fe8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e06e      	b.n	80020a0 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	2b03      	cmp	r3, #3
 8001fc8:	d107      	bne.n	8001fda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001fca:	4b38      	ldr	r3, [pc, #224]	; (80020ac <HAL_RCC_ClockConfig+0x1a0>)
 8001fcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fce:	2380      	movs	r3, #128	; 0x80
 8001fd0:	029b      	lsls	r3, r3, #10
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	d108      	bne.n	8001fe8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e062      	b.n	80020a0 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fda:	4b34      	ldr	r3, [pc, #208]	; (80020ac <HAL_RCC_ClockConfig+0x1a0>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2202      	movs	r2, #2
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	d101      	bne.n	8001fe8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e05b      	b.n	80020a0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fe8:	4b30      	ldr	r3, [pc, #192]	; (80020ac <HAL_RCC_ClockConfig+0x1a0>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	2203      	movs	r2, #3
 8001fee:	4393      	bics	r3, r2
 8001ff0:	0019      	movs	r1, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685a      	ldr	r2, [r3, #4]
 8001ff6:	4b2d      	ldr	r3, [pc, #180]	; (80020ac <HAL_RCC_ClockConfig+0x1a0>)
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ffc:	f7fe ffca 	bl	8000f94 <HAL_GetTick>
 8002000:	0003      	movs	r3, r0
 8002002:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002004:	e009      	b.n	800201a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002006:	f7fe ffc5 	bl	8000f94 <HAL_GetTick>
 800200a:	0002      	movs	r2, r0
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	4a27      	ldr	r2, [pc, #156]	; (80020b0 <HAL_RCC_ClockConfig+0x1a4>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d901      	bls.n	800201a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e042      	b.n	80020a0 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800201a:	4b24      	ldr	r3, [pc, #144]	; (80020ac <HAL_RCC_ClockConfig+0x1a0>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	220c      	movs	r2, #12
 8002020:	401a      	ands	r2, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	429a      	cmp	r2, r3
 800202a:	d1ec      	bne.n	8002006 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800202c:	4b1e      	ldr	r3, [pc, #120]	; (80020a8 <HAL_RCC_ClockConfig+0x19c>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2201      	movs	r2, #1
 8002032:	4013      	ands	r3, r2
 8002034:	683a      	ldr	r2, [r7, #0]
 8002036:	429a      	cmp	r2, r3
 8002038:	d211      	bcs.n	800205e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800203a:	4b1b      	ldr	r3, [pc, #108]	; (80020a8 <HAL_RCC_ClockConfig+0x19c>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2201      	movs	r2, #1
 8002040:	4393      	bics	r3, r2
 8002042:	0019      	movs	r1, r3
 8002044:	4b18      	ldr	r3, [pc, #96]	; (80020a8 <HAL_RCC_ClockConfig+0x19c>)
 8002046:	683a      	ldr	r2, [r7, #0]
 8002048:	430a      	orrs	r2, r1
 800204a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800204c:	4b16      	ldr	r3, [pc, #88]	; (80020a8 <HAL_RCC_ClockConfig+0x19c>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2201      	movs	r2, #1
 8002052:	4013      	ands	r3, r2
 8002054:	683a      	ldr	r2, [r7, #0]
 8002056:	429a      	cmp	r2, r3
 8002058:	d001      	beq.n	800205e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e020      	b.n	80020a0 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2204      	movs	r2, #4
 8002064:	4013      	ands	r3, r2
 8002066:	d009      	beq.n	800207c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002068:	4b10      	ldr	r3, [pc, #64]	; (80020ac <HAL_RCC_ClockConfig+0x1a0>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	4a11      	ldr	r2, [pc, #68]	; (80020b4 <HAL_RCC_ClockConfig+0x1a8>)
 800206e:	4013      	ands	r3, r2
 8002070:	0019      	movs	r1, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	68da      	ldr	r2, [r3, #12]
 8002076:	4b0d      	ldr	r3, [pc, #52]	; (80020ac <HAL_RCC_ClockConfig+0x1a0>)
 8002078:	430a      	orrs	r2, r1
 800207a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800207c:	f000 f820 	bl	80020c0 <HAL_RCC_GetSysClockFreq>
 8002080:	0001      	movs	r1, r0
 8002082:	4b0a      	ldr	r3, [pc, #40]	; (80020ac <HAL_RCC_ClockConfig+0x1a0>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	091b      	lsrs	r3, r3, #4
 8002088:	220f      	movs	r2, #15
 800208a:	4013      	ands	r3, r2
 800208c:	4a0a      	ldr	r2, [pc, #40]	; (80020b8 <HAL_RCC_ClockConfig+0x1ac>)
 800208e:	5cd3      	ldrb	r3, [r2, r3]
 8002090:	000a      	movs	r2, r1
 8002092:	40da      	lsrs	r2, r3
 8002094:	4b09      	ldr	r3, [pc, #36]	; (80020bc <HAL_RCC_ClockConfig+0x1b0>)
 8002096:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002098:	2003      	movs	r0, #3
 800209a:	f7fe ff35 	bl	8000f08 <HAL_InitTick>
  
  return HAL_OK;
 800209e:	2300      	movs	r3, #0
}
 80020a0:	0018      	movs	r0, r3
 80020a2:	46bd      	mov	sp, r7
 80020a4:	b004      	add	sp, #16
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	40022000 	.word	0x40022000
 80020ac:	40021000 	.word	0x40021000
 80020b0:	00001388 	.word	0x00001388
 80020b4:	fffff8ff 	.word	0xfffff8ff
 80020b8:	08003518 	.word	0x08003518
 80020bc:	20000014 	.word	0x20000014

080020c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020c6:	2300      	movs	r3, #0
 80020c8:	60fb      	str	r3, [r7, #12]
 80020ca:	2300      	movs	r3, #0
 80020cc:	60bb      	str	r3, [r7, #8]
 80020ce:	2300      	movs	r3, #0
 80020d0:	617b      	str	r3, [r7, #20]
 80020d2:	2300      	movs	r3, #0
 80020d4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80020d6:	2300      	movs	r3, #0
 80020d8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80020da:	4b2d      	ldr	r3, [pc, #180]	; (8002190 <HAL_RCC_GetSysClockFreq+0xd0>)
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	220c      	movs	r2, #12
 80020e4:	4013      	ands	r3, r2
 80020e6:	2b0c      	cmp	r3, #12
 80020e8:	d046      	beq.n	8002178 <HAL_RCC_GetSysClockFreq+0xb8>
 80020ea:	d848      	bhi.n	800217e <HAL_RCC_GetSysClockFreq+0xbe>
 80020ec:	2b04      	cmp	r3, #4
 80020ee:	d002      	beq.n	80020f6 <HAL_RCC_GetSysClockFreq+0x36>
 80020f0:	2b08      	cmp	r3, #8
 80020f2:	d003      	beq.n	80020fc <HAL_RCC_GetSysClockFreq+0x3c>
 80020f4:	e043      	b.n	800217e <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020f6:	4b27      	ldr	r3, [pc, #156]	; (8002194 <HAL_RCC_GetSysClockFreq+0xd4>)
 80020f8:	613b      	str	r3, [r7, #16]
      break;
 80020fa:	e043      	b.n	8002184 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	0c9b      	lsrs	r3, r3, #18
 8002100:	220f      	movs	r2, #15
 8002102:	4013      	ands	r3, r2
 8002104:	4a24      	ldr	r2, [pc, #144]	; (8002198 <HAL_RCC_GetSysClockFreq+0xd8>)
 8002106:	5cd3      	ldrb	r3, [r2, r3]
 8002108:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800210a:	4b21      	ldr	r3, [pc, #132]	; (8002190 <HAL_RCC_GetSysClockFreq+0xd0>)
 800210c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800210e:	220f      	movs	r2, #15
 8002110:	4013      	ands	r3, r2
 8002112:	4a22      	ldr	r2, [pc, #136]	; (800219c <HAL_RCC_GetSysClockFreq+0xdc>)
 8002114:	5cd3      	ldrb	r3, [r2, r3]
 8002116:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002118:	68fa      	ldr	r2, [r7, #12]
 800211a:	23c0      	movs	r3, #192	; 0xc0
 800211c:	025b      	lsls	r3, r3, #9
 800211e:	401a      	ands	r2, r3
 8002120:	2380      	movs	r3, #128	; 0x80
 8002122:	025b      	lsls	r3, r3, #9
 8002124:	429a      	cmp	r2, r3
 8002126:	d109      	bne.n	800213c <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002128:	68b9      	ldr	r1, [r7, #8]
 800212a:	481a      	ldr	r0, [pc, #104]	; (8002194 <HAL_RCC_GetSysClockFreq+0xd4>)
 800212c:	f7fd ffec 	bl	8000108 <__udivsi3>
 8002130:	0003      	movs	r3, r0
 8002132:	001a      	movs	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4353      	muls	r3, r2
 8002138:	617b      	str	r3, [r7, #20]
 800213a:	e01a      	b.n	8002172 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800213c:	68fa      	ldr	r2, [r7, #12]
 800213e:	23c0      	movs	r3, #192	; 0xc0
 8002140:	025b      	lsls	r3, r3, #9
 8002142:	401a      	ands	r2, r3
 8002144:	23c0      	movs	r3, #192	; 0xc0
 8002146:	025b      	lsls	r3, r3, #9
 8002148:	429a      	cmp	r2, r3
 800214a:	d109      	bne.n	8002160 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800214c:	68b9      	ldr	r1, [r7, #8]
 800214e:	4814      	ldr	r0, [pc, #80]	; (80021a0 <HAL_RCC_GetSysClockFreq+0xe0>)
 8002150:	f7fd ffda 	bl	8000108 <__udivsi3>
 8002154:	0003      	movs	r3, r0
 8002156:	001a      	movs	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4353      	muls	r3, r2
 800215c:	617b      	str	r3, [r7, #20]
 800215e:	e008      	b.n	8002172 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002160:	68b9      	ldr	r1, [r7, #8]
 8002162:	480c      	ldr	r0, [pc, #48]	; (8002194 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002164:	f7fd ffd0 	bl	8000108 <__udivsi3>
 8002168:	0003      	movs	r3, r0
 800216a:	001a      	movs	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4353      	muls	r3, r2
 8002170:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	613b      	str	r3, [r7, #16]
      break;
 8002176:	e005      	b.n	8002184 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002178:	4b09      	ldr	r3, [pc, #36]	; (80021a0 <HAL_RCC_GetSysClockFreq+0xe0>)
 800217a:	613b      	str	r3, [r7, #16]
      break;
 800217c:	e002      	b.n	8002184 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800217e:	4b05      	ldr	r3, [pc, #20]	; (8002194 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002180:	613b      	str	r3, [r7, #16]
      break;
 8002182:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002184:	693b      	ldr	r3, [r7, #16]
}
 8002186:	0018      	movs	r0, r3
 8002188:	46bd      	mov	sp, r7
 800218a:	b006      	add	sp, #24
 800218c:	bd80      	pop	{r7, pc}
 800218e:	46c0      	nop			; (mov r8, r8)
 8002190:	40021000 	.word	0x40021000
 8002194:	007a1200 	.word	0x007a1200
 8002198:	08003528 	.word	0x08003528
 800219c:	08003538 	.word	0x08003538
 80021a0:	02dc6c00 	.word	0x02dc6c00

080021a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d101      	bne.n	80021b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e0a8      	b.n	8002308 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d109      	bne.n	80021d2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685a      	ldr	r2, [r3, #4]
 80021c2:	2382      	movs	r3, #130	; 0x82
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d009      	beq.n	80021de <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	61da      	str	r2, [r3, #28]
 80021d0:	e005      	b.n	80021de <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	225d      	movs	r2, #93	; 0x5d
 80021e8:	5c9b      	ldrb	r3, [r3, r2]
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d107      	bne.n	8002200 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	225c      	movs	r2, #92	; 0x5c
 80021f4:	2100      	movs	r1, #0
 80021f6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	0018      	movs	r0, r3
 80021fc:	f7fe fcce 	bl	8000b9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	225d      	movs	r2, #93	; 0x5d
 8002204:	2102      	movs	r1, #2
 8002206:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2140      	movs	r1, #64	; 0x40
 8002214:	438a      	bics	r2, r1
 8002216:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	68da      	ldr	r2, [r3, #12]
 800221c:	23e0      	movs	r3, #224	; 0xe0
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	429a      	cmp	r2, r3
 8002222:	d902      	bls.n	800222a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002224:	2300      	movs	r3, #0
 8002226:	60fb      	str	r3, [r7, #12]
 8002228:	e002      	b.n	8002230 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800222a:	2380      	movs	r3, #128	; 0x80
 800222c:	015b      	lsls	r3, r3, #5
 800222e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	68da      	ldr	r2, [r3, #12]
 8002234:	23f0      	movs	r3, #240	; 0xf0
 8002236:	011b      	lsls	r3, r3, #4
 8002238:	429a      	cmp	r2, r3
 800223a:	d008      	beq.n	800224e <HAL_SPI_Init+0xaa>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	68da      	ldr	r2, [r3, #12]
 8002240:	23e0      	movs	r3, #224	; 0xe0
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	429a      	cmp	r2, r3
 8002246:	d002      	beq.n	800224e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685a      	ldr	r2, [r3, #4]
 8002252:	2382      	movs	r3, #130	; 0x82
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	401a      	ands	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6899      	ldr	r1, [r3, #8]
 800225c:	2384      	movs	r3, #132	; 0x84
 800225e:	021b      	lsls	r3, r3, #8
 8002260:	400b      	ands	r3, r1
 8002262:	431a      	orrs	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	691b      	ldr	r3, [r3, #16]
 8002268:	2102      	movs	r1, #2
 800226a:	400b      	ands	r3, r1
 800226c:	431a      	orrs	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	2101      	movs	r1, #1
 8002274:	400b      	ands	r3, r1
 8002276:	431a      	orrs	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6999      	ldr	r1, [r3, #24]
 800227c:	2380      	movs	r3, #128	; 0x80
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	400b      	ands	r3, r1
 8002282:	431a      	orrs	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	69db      	ldr	r3, [r3, #28]
 8002288:	2138      	movs	r1, #56	; 0x38
 800228a:	400b      	ands	r3, r1
 800228c:	431a      	orrs	r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6a1b      	ldr	r3, [r3, #32]
 8002292:	2180      	movs	r1, #128	; 0x80
 8002294:	400b      	ands	r3, r1
 8002296:	431a      	orrs	r2, r3
 8002298:	0011      	movs	r1, r2
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800229e:	2380      	movs	r3, #128	; 0x80
 80022a0:	019b      	lsls	r3, r3, #6
 80022a2:	401a      	ands	r2, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	430a      	orrs	r2, r1
 80022aa:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	699b      	ldr	r3, [r3, #24]
 80022b0:	0c1b      	lsrs	r3, r3, #16
 80022b2:	2204      	movs	r2, #4
 80022b4:	401a      	ands	r2, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ba:	2110      	movs	r1, #16
 80022bc:	400b      	ands	r3, r1
 80022be:	431a      	orrs	r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022c4:	2108      	movs	r1, #8
 80022c6:	400b      	ands	r3, r1
 80022c8:	431a      	orrs	r2, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	68d9      	ldr	r1, [r3, #12]
 80022ce:	23f0      	movs	r3, #240	; 0xf0
 80022d0:	011b      	lsls	r3, r3, #4
 80022d2:	400b      	ands	r3, r1
 80022d4:	431a      	orrs	r2, r3
 80022d6:	0011      	movs	r1, r2
 80022d8:	68fa      	ldr	r2, [r7, #12]
 80022da:	2380      	movs	r3, #128	; 0x80
 80022dc:	015b      	lsls	r3, r3, #5
 80022de:	401a      	ands	r2, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	430a      	orrs	r2, r1
 80022e6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	69da      	ldr	r2, [r3, #28]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4907      	ldr	r1, [pc, #28]	; (8002310 <HAL_SPI_Init+0x16c>)
 80022f4:	400a      	ands	r2, r1
 80022f6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	225d      	movs	r2, #93	; 0x5d
 8002302:	2101      	movs	r1, #1
 8002304:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002306:	2300      	movs	r3, #0
}
 8002308:	0018      	movs	r0, r3
 800230a:	46bd      	mov	sp, r7
 800230c:	b004      	add	sp, #16
 800230e:	bd80      	pop	{r7, pc}
 8002310:	fffff7ff 	.word	0xfffff7ff

08002314 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b086      	sub	sp, #24
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	607a      	str	r2, [r7, #4]
 8002320:	001a      	movs	r2, r3
 8002322:	1cbb      	adds	r3, r7, #2
 8002324:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002326:	2317      	movs	r3, #23
 8002328:	18fb      	adds	r3, r7, r3
 800232a:	2200      	movs	r2, #0
 800232c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	225c      	movs	r2, #92	; 0x5c
 8002332:	5c9b      	ldrb	r3, [r3, r2]
 8002334:	2b01      	cmp	r3, #1
 8002336:	d101      	bne.n	800233c <HAL_SPI_TransmitReceive_IT+0x28>
 8002338:	2302      	movs	r3, #2
 800233a:	e0a6      	b.n	800248a <HAL_SPI_TransmitReceive_IT+0x176>
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	225c      	movs	r2, #92	; 0x5c
 8002340:	2101      	movs	r1, #1
 8002342:	5499      	strb	r1, [r3, r2]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002344:	2016      	movs	r0, #22
 8002346:	183b      	adds	r3, r7, r0
 8002348:	68fa      	ldr	r2, [r7, #12]
 800234a:	215d      	movs	r1, #93	; 0x5d
 800234c:	5c52      	ldrb	r2, [r2, r1]
 800234e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002356:	0001      	movs	r1, r0
 8002358:	187b      	adds	r3, r7, r1
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	2b01      	cmp	r3, #1
 800235e:	d011      	beq.n	8002384 <HAL_SPI_TransmitReceive_IT+0x70>
 8002360:	693a      	ldr	r2, [r7, #16]
 8002362:	2382      	movs	r3, #130	; 0x82
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	429a      	cmp	r2, r3
 8002368:	d107      	bne.n	800237a <HAL_SPI_TransmitReceive_IT+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d103      	bne.n	800237a <HAL_SPI_TransmitReceive_IT+0x66>
 8002372:	187b      	adds	r3, r7, r1
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	2b04      	cmp	r3, #4
 8002378:	d004      	beq.n	8002384 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_BUSY;
 800237a:	2317      	movs	r3, #23
 800237c:	18fb      	adds	r3, r7, r3
 800237e:	2202      	movs	r2, #2
 8002380:	701a      	strb	r2, [r3, #0]
    goto error;
 8002382:	e07b      	b.n	800247c <HAL_SPI_TransmitReceive_IT+0x168>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d006      	beq.n	8002398 <HAL_SPI_TransmitReceive_IT+0x84>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d003      	beq.n	8002398 <HAL_SPI_TransmitReceive_IT+0x84>
 8002390:	1cbb      	adds	r3, r7, #2
 8002392:	881b      	ldrh	r3, [r3, #0]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d104      	bne.n	80023a2 <HAL_SPI_TransmitReceive_IT+0x8e>
  {
    errorcode = HAL_ERROR;
 8002398:	2317      	movs	r3, #23
 800239a:	18fb      	adds	r3, r7, r3
 800239c:	2201      	movs	r2, #1
 800239e:	701a      	strb	r2, [r3, #0]
    goto error;
 80023a0:	e06c      	b.n	800247c <HAL_SPI_TransmitReceive_IT+0x168>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	225d      	movs	r2, #93	; 0x5d
 80023a6:	5c9b      	ldrb	r3, [r3, r2]
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	2b04      	cmp	r3, #4
 80023ac:	d003      	beq.n	80023b6 <HAL_SPI_TransmitReceive_IT+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	225d      	movs	r2, #93	; 0x5d
 80023b2:	2105      	movs	r1, #5
 80023b4:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2200      	movs	r2, #0
 80023ba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	68ba      	ldr	r2, [r7, #8]
 80023c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	1cba      	adds	r2, r7, #2
 80023c6:	8812      	ldrh	r2, [r2, #0]
 80023c8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	1cba      	adds	r2, r7, #2
 80023ce:	8812      	ldrh	r2, [r2, #0]
 80023d0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	1cba      	adds	r2, r7, #2
 80023dc:	2144      	movs	r1, #68	; 0x44
 80023de:	8812      	ldrh	r2, [r2, #0]
 80023e0:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	1cba      	adds	r2, r7, #2
 80023e6:	2146      	movs	r1, #70	; 0x46
 80023e8:	8812      	ldrh	r2, [r2, #0]
 80023ea:	525a      	strh	r2, [r3, r1]

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	68da      	ldr	r2, [r3, #12]
 80023f0:	23e0      	movs	r3, #224	; 0xe0
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d906      	bls.n	8002406 <HAL_SPI_TransmitReceive_IT+0xf2>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	4a26      	ldr	r2, [pc, #152]	; (8002494 <HAL_SPI_TransmitReceive_IT+0x180>)
 80023fc:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	4a25      	ldr	r2, [pc, #148]	; (8002498 <HAL_SPI_TransmitReceive_IT+0x184>)
 8002402:	651a      	str	r2, [r3, #80]	; 0x50
 8002404:	e005      	b.n	8002412 <HAL_SPI_TransmitReceive_IT+0xfe>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	4a24      	ldr	r2, [pc, #144]	; (800249c <HAL_SPI_TransmitReceive_IT+0x188>)
 800240a:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	4a24      	ldr	r2, [pc, #144]	; (80024a0 <HAL_SPI_TransmitReceive_IT+0x18c>)
 8002410:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	68da      	ldr	r2, [r3, #12]
 8002416:	23e0      	movs	r3, #224	; 0xe0
 8002418:	00db      	lsls	r3, r3, #3
 800241a:	429a      	cmp	r2, r3
 800241c:	d803      	bhi.n	8002426 <HAL_SPI_TransmitReceive_IT+0x112>
 800241e:	1cbb      	adds	r3, r7, #2
 8002420:	881b      	ldrh	r3, [r3, #0]
 8002422:	2b01      	cmp	r3, #1
 8002424:	d908      	bls.n	8002438 <HAL_SPI_TransmitReceive_IT+0x124>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	685a      	ldr	r2, [r3, #4]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	491c      	ldr	r1, [pc, #112]	; (80024a4 <HAL_SPI_TransmitReceive_IT+0x190>)
 8002432:	400a      	ands	r2, r1
 8002434:	605a      	str	r2, [r3, #4]
 8002436:	e008      	b.n	800244a <HAL_SPI_TransmitReceive_IT+0x136>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	685a      	ldr	r2, [r3, #4]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2180      	movs	r1, #128	; 0x80
 8002444:	0149      	lsls	r1, r1, #5
 8002446:	430a      	orrs	r2, r1
 8002448:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	685a      	ldr	r2, [r3, #4]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	21e0      	movs	r1, #224	; 0xe0
 8002456:	430a      	orrs	r2, r1
 8002458:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2240      	movs	r2, #64	; 0x40
 8002462:	4013      	ands	r3, r2
 8002464:	2b40      	cmp	r3, #64	; 0x40
 8002466:	d008      	beq.n	800247a <HAL_SPI_TransmitReceive_IT+0x166>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2140      	movs	r1, #64	; 0x40
 8002474:	430a      	orrs	r2, r1
 8002476:	601a      	str	r2, [r3, #0]
 8002478:	e000      	b.n	800247c <HAL_SPI_TransmitReceive_IT+0x168>
  }

error :
 800247a:	46c0      	nop			; (mov r8, r8)
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	225c      	movs	r2, #92	; 0x5c
 8002480:	2100      	movs	r1, #0
 8002482:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002484:	2317      	movs	r3, #23
 8002486:	18fb      	adds	r3, r7, r3
 8002488:	781b      	ldrb	r3, [r3, #0]
}
 800248a:	0018      	movs	r0, r3
 800248c:	46bd      	mov	sp, r7
 800248e:	b006      	add	sp, #24
 8002490:	bd80      	pop	{r7, pc}
 8002492:	46c0      	nop			; (mov r8, r8)
 8002494:	0800280f 	.word	0x0800280f
 8002498:	08002877 	.word	0x08002877
 800249c:	080026b9 	.word	0x080026b9
 80024a0:	0800277b 	.word	0x0800277b
 80024a4:	ffffefff 	.word	0xffffefff

080024a8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b088      	sub	sp, #32
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	2240      	movs	r2, #64	; 0x40
 80024c4:	4013      	ands	r3, r2
 80024c6:	d10d      	bne.n	80024e4 <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	2201      	movs	r2, #1
 80024cc:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80024ce:	d009      	beq.n	80024e4 <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	2240      	movs	r2, #64	; 0x40
 80024d4:	4013      	ands	r3, r2
 80024d6:	d005      	beq.n	80024e4 <HAL_SPI_IRQHandler+0x3c>
  {
    hspi->RxISR(hspi);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	0010      	movs	r0, r2
 80024e0:	4798      	blx	r3
    return;
 80024e2:	e0c5      	b.n	8002670 <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	2202      	movs	r2, #2
 80024e8:	4013      	ands	r3, r2
 80024ea:	d009      	beq.n	8002500 <HAL_SPI_IRQHandler+0x58>
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	2280      	movs	r2, #128	; 0x80
 80024f0:	4013      	ands	r3, r2
 80024f2:	d005      	beq.n	8002500 <HAL_SPI_IRQHandler+0x58>
  {
    hspi->TxISR(hspi);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	0010      	movs	r0, r2
 80024fc:	4798      	blx	r3
    return;
 80024fe:	e0b7      	b.n	8002670 <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	2220      	movs	r2, #32
 8002504:	4013      	ands	r3, r2
 8002506:	d109      	bne.n	800251c <HAL_SPI_IRQHandler+0x74>
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	2240      	movs	r2, #64	; 0x40
 800250c:	4013      	ands	r3, r2
 800250e:	d105      	bne.n	800251c <HAL_SPI_IRQHandler+0x74>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	2380      	movs	r3, #128	; 0x80
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	4013      	ands	r3, r2
 8002518:	d100      	bne.n	800251c <HAL_SPI_IRQHandler+0x74>
 800251a:	e0a9      	b.n	8002670 <HAL_SPI_IRQHandler+0x1c8>
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	2220      	movs	r2, #32
 8002520:	4013      	ands	r3, r2
 8002522:	d100      	bne.n	8002526 <HAL_SPI_IRQHandler+0x7e>
 8002524:	e0a4      	b.n	8002670 <HAL_SPI_IRQHandler+0x1c8>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	2240      	movs	r2, #64	; 0x40
 800252a:	4013      	ands	r3, r2
 800252c:	d023      	beq.n	8002576 <HAL_SPI_IRQHandler+0xce>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	225d      	movs	r2, #93	; 0x5d
 8002532:	5c9b      	ldrb	r3, [r3, r2]
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b03      	cmp	r3, #3
 8002538:	d011      	beq.n	800255e <HAL_SPI_IRQHandler+0xb6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800253e:	2204      	movs	r2, #4
 8002540:	431a      	orrs	r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002546:	2300      	movs	r3, #0
 8002548:	617b      	str	r3, [r7, #20]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	617b      	str	r3, [r7, #20]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	617b      	str	r3, [r7, #20]
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	e00b      	b.n	8002576 <HAL_SPI_IRQHandler+0xce>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800255e:	2300      	movs	r3, #0
 8002560:	613b      	str	r3, [r7, #16]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	613b      	str	r3, [r7, #16]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	613b      	str	r3, [r7, #16]
 8002572:	693b      	ldr	r3, [r7, #16]
        return;
 8002574:	e07c      	b.n	8002670 <HAL_SPI_IRQHandler+0x1c8>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	2220      	movs	r2, #32
 800257a:	4013      	ands	r3, r2
 800257c:	d014      	beq.n	80025a8 <HAL_SPI_IRQHandler+0x100>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002582:	2201      	movs	r2, #1
 8002584:	431a      	orrs	r2, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800258a:	2300      	movs	r3, #0
 800258c:	60fb      	str	r3, [r7, #12]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	60fb      	str	r3, [r7, #12]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2140      	movs	r1, #64	; 0x40
 80025a2:	438a      	bics	r2, r1
 80025a4:	601a      	str	r2, [r3, #0]
 80025a6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	2380      	movs	r3, #128	; 0x80
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	4013      	ands	r3, r2
 80025b0:	d00c      	beq.n	80025cc <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025b6:	2208      	movs	r2, #8
 80025b8:	431a      	orrs	r2, r3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80025be:	2300      	movs	r3, #0
 80025c0:	60bb      	str	r3, [r7, #8]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	60bb      	str	r3, [r7, #8]
 80025ca:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d04c      	beq.n	800266e <HAL_SPI_IRQHandler+0x1c6>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	685a      	ldr	r2, [r3, #4]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	21e0      	movs	r1, #224	; 0xe0
 80025e0:	438a      	bics	r2, r1
 80025e2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	225d      	movs	r2, #93	; 0x5d
 80025e8:	2101      	movs	r1, #1
 80025ea:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	2202      	movs	r2, #2
 80025f0:	4013      	ands	r3, r2
 80025f2:	d103      	bne.n	80025fc <HAL_SPI_IRQHandler+0x154>
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	2201      	movs	r2, #1
 80025f8:	4013      	ands	r3, r2
 80025fa:	d032      	beq.n	8002662 <HAL_SPI_IRQHandler+0x1ba>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	685a      	ldr	r2, [r3, #4]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2103      	movs	r1, #3
 8002608:	438a      	bics	r2, r1
 800260a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002610:	2b00      	cmp	r3, #0
 8002612:	d010      	beq.n	8002636 <HAL_SPI_IRQHandler+0x18e>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002618:	4a17      	ldr	r2, [pc, #92]	; (8002678 <HAL_SPI_IRQHandler+0x1d0>)
 800261a:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002620:	0018      	movs	r0, r3
 8002622:	f7fe ff21 	bl	8001468 <HAL_DMA_Abort_IT>
 8002626:	1e03      	subs	r3, r0, #0
 8002628:	d005      	beq.n	8002636 <HAL_SPI_IRQHandler+0x18e>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800262e:	2240      	movs	r2, #64	; 0x40
 8002630:	431a      	orrs	r2, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800263a:	2b00      	cmp	r3, #0
 800263c:	d016      	beq.n	800266c <HAL_SPI_IRQHandler+0x1c4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002642:	4a0d      	ldr	r2, [pc, #52]	; (8002678 <HAL_SPI_IRQHandler+0x1d0>)
 8002644:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800264a:	0018      	movs	r0, r3
 800264c:	f7fe ff0c 	bl	8001468 <HAL_DMA_Abort_IT>
 8002650:	1e03      	subs	r3, r0, #0
 8002652:	d00b      	beq.n	800266c <HAL_SPI_IRQHandler+0x1c4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002658:	2240      	movs	r2, #64	; 0x40
 800265a:	431a      	orrs	r2, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8002660:	e004      	b.n	800266c <HAL_SPI_IRQHandler+0x1c4>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	0018      	movs	r0, r3
 8002666:	f000 f809 	bl	800267c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800266a:	e000      	b.n	800266e <HAL_SPI_IRQHandler+0x1c6>
        if (hspi->hdmatx != NULL)
 800266c:	46c0      	nop			; (mov r8, r8)
    return;
 800266e:	46c0      	nop			; (mov r8, r8)
  }
}
 8002670:	46bd      	mov	sp, r7
 8002672:	b008      	add	sp, #32
 8002674:	bd80      	pop	{r7, pc}
 8002676:	46c0      	nop			; (mov r8, r8)
 8002678:	0800268d 	.word	0x0800268d

0800267c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002684:	46c0      	nop			; (mov r8, r8)
 8002686:	46bd      	mov	sp, r7
 8002688:	b002      	add	sp, #8
 800268a:	bd80      	pop	{r7, pc}

0800268c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002698:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2246      	movs	r2, #70	; 0x46
 800269e:	2100      	movs	r1, #0
 80026a0:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2200      	movs	r2, #0
 80026a6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	0018      	movs	r0, r3
 80026ac:	f7ff ffe6 	bl	800267c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80026b0:	46c0      	nop			; (mov r8, r8)
 80026b2:	46bd      	mov	sp, r7
 80026b4:	b004      	add	sp, #16
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2246      	movs	r2, #70	; 0x46
 80026c4:	5a9b      	ldrh	r3, [r3, r2]
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d924      	bls.n	8002716 <SPI_2linesRxISR_8BIT+0x5e>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	68da      	ldr	r2, [r3, #12]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d6:	b292      	uxth	r2, r2
 80026d8:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026de:	1c9a      	adds	r2, r3, #2
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2246      	movs	r2, #70	; 0x46
 80026e8:	5a9b      	ldrh	r3, [r3, r2]
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	3b02      	subs	r3, #2
 80026ee:	b299      	uxth	r1, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2246      	movs	r2, #70	; 0x46
 80026f4:	5299      	strh	r1, [r3, r2]
    if (hspi->RxXferCount == 1U)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2246      	movs	r2, #70	; 0x46
 80026fa:	5a9b      	ldrh	r3, [r3, r2]
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d120      	bne.n	8002744 <SPI_2linesRxISR_8BIT+0x8c>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	685a      	ldr	r2, [r3, #4]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2180      	movs	r1, #128	; 0x80
 800270e:	0149      	lsls	r1, r1, #5
 8002710:	430a      	orrs	r2, r1
 8002712:	605a      	str	r2, [r3, #4]
 8002714:	e016      	b.n	8002744 <SPI_2linesRxISR_8BIT+0x8c>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	330c      	adds	r3, #12
 800271c:	001a      	movs	r2, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	7812      	ldrb	r2, [r2, #0]
 8002724:	b2d2      	uxtb	r2, r2
 8002726:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272c:	1c5a      	adds	r2, r3, #1
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2246      	movs	r2, #70	; 0x46
 8002736:	5a9b      	ldrh	r3, [r3, r2]
 8002738:	b29b      	uxth	r3, r3
 800273a:	3b01      	subs	r3, #1
 800273c:	b299      	uxth	r1, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2246      	movs	r2, #70	; 0x46
 8002742:	5299      	strh	r1, [r3, r2]
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2246      	movs	r2, #70	; 0x46
 8002748:	5a9b      	ldrh	r3, [r3, r2]
 800274a:	b29b      	uxth	r3, r3
 800274c:	2b00      	cmp	r3, #0
 800274e:	d110      	bne.n	8002772 <SPI_2linesRxISR_8BIT+0xba>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	685a      	ldr	r2, [r3, #4]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2160      	movs	r1, #96	; 0x60
 800275c:	438a      	bics	r2, r1
 800275e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002764:	b29b      	uxth	r3, r3
 8002766:	2b00      	cmp	r3, #0
 8002768:	d103      	bne.n	8002772 <SPI_2linesRxISR_8BIT+0xba>
    {
      SPI_CloseRxTx_ISR(hspi);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	0018      	movs	r0, r3
 800276e:	f000 fa29 	bl	8002bc4 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002772:	46c0      	nop			; (mov r8, r8)
 8002774:	46bd      	mov	sp, r7
 8002776:	b002      	add	sp, #8
 8002778:	bd80      	pop	{r7, pc}

0800277a <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800277a:	b580      	push	{r7, lr}
 800277c:	b082      	sub	sp, #8
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002786:	b29b      	uxth	r3, r3
 8002788:	2b01      	cmp	r3, #1
 800278a:	d912      	bls.n	80027b2 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002790:	881a      	ldrh	r2, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800279c:	1c9a      	adds	r2, r3, #2
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	3b02      	subs	r3, #2
 80027aa:	b29a      	uxth	r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80027b0:	e012      	b.n	80027d8 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	330c      	adds	r3, #12
 80027bc:	7812      	ldrb	r2, [r2, #0]
 80027be:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027c4:	1c5a      	adds	r2, r3, #1
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	3b01      	subs	r3, #1
 80027d2:	b29a      	uxth	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027dc:	b29b      	uxth	r3, r3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d111      	bne.n	8002806 <SPI_2linesTxISR_8BIT+0x8c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	685a      	ldr	r2, [r3, #4]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2180      	movs	r1, #128	; 0x80
 80027ee:	438a      	bics	r2, r1
 80027f0:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2246      	movs	r2, #70	; 0x46
 80027f6:	5a9b      	ldrh	r3, [r3, r2]
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d103      	bne.n	8002806 <SPI_2linesTxISR_8BIT+0x8c>
    {
      SPI_CloseRxTx_ISR(hspi);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	0018      	movs	r0, r3
 8002802:	f000 f9df 	bl	8002bc4 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002806:	46c0      	nop			; (mov r8, r8)
 8002808:	46bd      	mov	sp, r7
 800280a:	b002      	add	sp, #8
 800280c:	bd80      	pop	{r7, pc}

0800280e <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800280e:	b580      	push	{r7, lr}
 8002810:	b082      	sub	sp, #8
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68da      	ldr	r2, [r3, #12]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002820:	b292      	uxth	r2, r2
 8002822:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002828:	1c9a      	adds	r2, r3, #2
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2246      	movs	r2, #70	; 0x46
 8002832:	5a9b      	ldrh	r3, [r3, r2]
 8002834:	b29b      	uxth	r3, r3
 8002836:	3b01      	subs	r3, #1
 8002838:	b299      	uxth	r1, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2246      	movs	r2, #70	; 0x46
 800283e:	5299      	strh	r1, [r3, r2]

  if (hspi->RxXferCount == 0U)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2246      	movs	r2, #70	; 0x46
 8002844:	5a9b      	ldrh	r3, [r3, r2]
 8002846:	b29b      	uxth	r3, r3
 8002848:	2b00      	cmp	r3, #0
 800284a:	d110      	bne.n	800286e <SPI_2linesRxISR_16BIT+0x60>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	685a      	ldr	r2, [r3, #4]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2140      	movs	r1, #64	; 0x40
 8002858:	438a      	bics	r2, r1
 800285a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002860:	b29b      	uxth	r3, r3
 8002862:	2b00      	cmp	r3, #0
 8002864:	d103      	bne.n	800286e <SPI_2linesRxISR_16BIT+0x60>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	0018      	movs	r0, r3
 800286a:	f000 f9ab 	bl	8002bc4 <SPI_CloseRxTx_ISR>
    }
  }
}
 800286e:	46c0      	nop			; (mov r8, r8)
 8002870:	46bd      	mov	sp, r7
 8002872:	b002      	add	sp, #8
 8002874:	bd80      	pop	{r7, pc}

08002876 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002876:	b580      	push	{r7, lr}
 8002878:	b082      	sub	sp, #8
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002882:	881a      	ldrh	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800288e:	1c9a      	adds	r2, r3, #2
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002898:	b29b      	uxth	r3, r3
 800289a:	3b01      	subs	r3, #1
 800289c:	b29a      	uxth	r2, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d111      	bne.n	80028d0 <SPI_2linesTxISR_16BIT+0x5a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	685a      	ldr	r2, [r3, #4]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2180      	movs	r1, #128	; 0x80
 80028b8:	438a      	bics	r2, r1
 80028ba:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2246      	movs	r2, #70	; 0x46
 80028c0:	5a9b      	ldrh	r3, [r3, r2]
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d103      	bne.n	80028d0 <SPI_2linesTxISR_16BIT+0x5a>
    {
      SPI_CloseRxTx_ISR(hspi);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	0018      	movs	r0, r3
 80028cc:	f000 f97a 	bl	8002bc4 <SPI_CloseRxTx_ISR>
    }
  }
}
 80028d0:	46c0      	nop			; (mov r8, r8)
 80028d2:	46bd      	mov	sp, r7
 80028d4:	b002      	add	sp, #8
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b088      	sub	sp, #32
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	603b      	str	r3, [r7, #0]
 80028e4:	1dfb      	adds	r3, r7, #7
 80028e6:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80028e8:	f7fe fb54 	bl	8000f94 <HAL_GetTick>
 80028ec:	0002      	movs	r2, r0
 80028ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f0:	1a9b      	subs	r3, r3, r2
 80028f2:	683a      	ldr	r2, [r7, #0]
 80028f4:	18d3      	adds	r3, r2, r3
 80028f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80028f8:	f7fe fb4c 	bl	8000f94 <HAL_GetTick>
 80028fc:	0003      	movs	r3, r0
 80028fe:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002900:	4b3a      	ldr	r3, [pc, #232]	; (80029ec <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	015b      	lsls	r3, r3, #5
 8002906:	0d1b      	lsrs	r3, r3, #20
 8002908:	69fa      	ldr	r2, [r7, #28]
 800290a:	4353      	muls	r3, r2
 800290c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800290e:	e058      	b.n	80029c2 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	3301      	adds	r3, #1
 8002914:	d055      	beq.n	80029c2 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002916:	f7fe fb3d 	bl	8000f94 <HAL_GetTick>
 800291a:	0002      	movs	r2, r0
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	69fa      	ldr	r2, [r7, #28]
 8002922:	429a      	cmp	r2, r3
 8002924:	d902      	bls.n	800292c <SPI_WaitFlagStateUntilTimeout+0x54>
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d142      	bne.n	80029b2 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	685a      	ldr	r2, [r3, #4]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	21e0      	movs	r1, #224	; 0xe0
 8002938:	438a      	bics	r2, r1
 800293a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	685a      	ldr	r2, [r3, #4]
 8002940:	2382      	movs	r3, #130	; 0x82
 8002942:	005b      	lsls	r3, r3, #1
 8002944:	429a      	cmp	r2, r3
 8002946:	d113      	bne.n	8002970 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	2380      	movs	r3, #128	; 0x80
 800294e:	021b      	lsls	r3, r3, #8
 8002950:	429a      	cmp	r2, r3
 8002952:	d005      	beq.n	8002960 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	689a      	ldr	r2, [r3, #8]
 8002958:	2380      	movs	r3, #128	; 0x80
 800295a:	00db      	lsls	r3, r3, #3
 800295c:	429a      	cmp	r2, r3
 800295e:	d107      	bne.n	8002970 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2140      	movs	r1, #64	; 0x40
 800296c:	438a      	bics	r2, r1
 800296e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002974:	2380      	movs	r3, #128	; 0x80
 8002976:	019b      	lsls	r3, r3, #6
 8002978:	429a      	cmp	r2, r3
 800297a:	d110      	bne.n	800299e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	491a      	ldr	r1, [pc, #104]	; (80029f0 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002988:	400a      	ands	r2, r1
 800298a:	601a      	str	r2, [r3, #0]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2180      	movs	r1, #128	; 0x80
 8002998:	0189      	lsls	r1, r1, #6
 800299a:	430a      	orrs	r2, r1
 800299c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	225d      	movs	r2, #93	; 0x5d
 80029a2:	2101      	movs	r1, #1
 80029a4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	225c      	movs	r2, #92	; 0x5c
 80029aa:	2100      	movs	r1, #0
 80029ac:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e017      	b.n	80029e2 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d101      	bne.n	80029bc <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80029b8:	2300      	movs	r3, #0
 80029ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	3b01      	subs	r3, #1
 80029c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	68ba      	ldr	r2, [r7, #8]
 80029ca:	4013      	ands	r3, r2
 80029cc:	68ba      	ldr	r2, [r7, #8]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	425a      	negs	r2, r3
 80029d2:	4153      	adcs	r3, r2
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	001a      	movs	r2, r3
 80029d8:	1dfb      	adds	r3, r7, #7
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	429a      	cmp	r2, r3
 80029de:	d197      	bne.n	8002910 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	0018      	movs	r0, r3
 80029e4:	46bd      	mov	sp, r7
 80029e6:	b008      	add	sp, #32
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	46c0      	nop			; (mov r8, r8)
 80029ec:	20000014 	.word	0x20000014
 80029f0:	ffffdfff 	.word	0xffffdfff

080029f4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b08a      	sub	sp, #40	; 0x28
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	607a      	str	r2, [r7, #4]
 8002a00:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002a02:	2317      	movs	r3, #23
 8002a04:	18fb      	adds	r3, r7, r3
 8002a06:	2200      	movs	r2, #0
 8002a08:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002a0a:	f7fe fac3 	bl	8000f94 <HAL_GetTick>
 8002a0e:	0002      	movs	r2, r0
 8002a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a12:	1a9b      	subs	r3, r3, r2
 8002a14:	683a      	ldr	r2, [r7, #0]
 8002a16:	18d3      	adds	r3, r2, r3
 8002a18:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002a1a:	f7fe fabb 	bl	8000f94 <HAL_GetTick>
 8002a1e:	0003      	movs	r3, r0
 8002a20:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	330c      	adds	r3, #12
 8002a28:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002a2a:	4b41      	ldr	r3, [pc, #260]	; (8002b30 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	0013      	movs	r3, r2
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	189b      	adds	r3, r3, r2
 8002a34:	00da      	lsls	r2, r3, #3
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	0d1b      	lsrs	r3, r3, #20
 8002a3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a3c:	4353      	muls	r3, r2
 8002a3e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002a40:	e068      	b.n	8002b14 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002a42:	68ba      	ldr	r2, [r7, #8]
 8002a44:	23c0      	movs	r3, #192	; 0xc0
 8002a46:	00db      	lsls	r3, r3, #3
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d10a      	bne.n	8002a62 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d107      	bne.n	8002a62 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	b2da      	uxtb	r2, r3
 8002a58:	2117      	movs	r1, #23
 8002a5a:	187b      	adds	r3, r7, r1
 8002a5c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002a5e:	187b      	adds	r3, r7, r1
 8002a60:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	3301      	adds	r3, #1
 8002a66:	d055      	beq.n	8002b14 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002a68:	f7fe fa94 	bl	8000f94 <HAL_GetTick>
 8002a6c:	0002      	movs	r2, r0
 8002a6e:	6a3b      	ldr	r3, [r7, #32]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d902      	bls.n	8002a7e <SPI_WaitFifoStateUntilTimeout+0x8a>
 8002a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d142      	bne.n	8002b04 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	685a      	ldr	r2, [r3, #4]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	21e0      	movs	r1, #224	; 0xe0
 8002a8a:	438a      	bics	r2, r1
 8002a8c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	685a      	ldr	r2, [r3, #4]
 8002a92:	2382      	movs	r3, #130	; 0x82
 8002a94:	005b      	lsls	r3, r3, #1
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d113      	bne.n	8002ac2 <SPI_WaitFifoStateUntilTimeout+0xce>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	689a      	ldr	r2, [r3, #8]
 8002a9e:	2380      	movs	r3, #128	; 0x80
 8002aa0:	021b      	lsls	r3, r3, #8
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d005      	beq.n	8002ab2 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	689a      	ldr	r2, [r3, #8]
 8002aaa:	2380      	movs	r3, #128	; 0x80
 8002aac:	00db      	lsls	r3, r3, #3
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d107      	bne.n	8002ac2 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2140      	movs	r1, #64	; 0x40
 8002abe:	438a      	bics	r2, r1
 8002ac0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ac6:	2380      	movs	r3, #128	; 0x80
 8002ac8:	019b      	lsls	r3, r3, #6
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d110      	bne.n	8002af0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4916      	ldr	r1, [pc, #88]	; (8002b34 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8002ada:	400a      	ands	r2, r1
 8002adc:	601a      	str	r2, [r3, #0]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2180      	movs	r1, #128	; 0x80
 8002aea:	0189      	lsls	r1, r1, #6
 8002aec:	430a      	orrs	r2, r1
 8002aee:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	225d      	movs	r2, #93	; 0x5d
 8002af4:	2101      	movs	r1, #1
 8002af6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	225c      	movs	r2, #92	; 0x5c
 8002afc:	2100      	movs	r1, #0
 8002afe:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e010      	b.n	8002b26 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d101      	bne.n	8002b0e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	3b01      	subs	r3, #1
 8002b12:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	68ba      	ldr	r2, [r7, #8]
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d18e      	bne.n	8002a42 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	0018      	movs	r0, r3
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	b00a      	add	sp, #40	; 0x28
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	46c0      	nop			; (mov r8, r8)
 8002b30:	20000014 	.word	0x20000014
 8002b34:	ffffdfff 	.word	0xffffdfff

08002b38 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b086      	sub	sp, #24
 8002b3c:	af02      	add	r7, sp, #8
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	60b9      	str	r1, [r7, #8]
 8002b42:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002b44:	68ba      	ldr	r2, [r7, #8]
 8002b46:	23c0      	movs	r3, #192	; 0xc0
 8002b48:	0159      	lsls	r1, r3, #5
 8002b4a:	68f8      	ldr	r0, [r7, #12]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	9300      	str	r3, [sp, #0]
 8002b50:	0013      	movs	r3, r2
 8002b52:	2200      	movs	r2, #0
 8002b54:	f7ff ff4e 	bl	80029f4 <SPI_WaitFifoStateUntilTimeout>
 8002b58:	1e03      	subs	r3, r0, #0
 8002b5a:	d007      	beq.n	8002b6c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b60:	2220      	movs	r2, #32
 8002b62:	431a      	orrs	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e027      	b.n	8002bbc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b6c:	68ba      	ldr	r2, [r7, #8]
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	9300      	str	r3, [sp, #0]
 8002b74:	0013      	movs	r3, r2
 8002b76:	2200      	movs	r2, #0
 8002b78:	2180      	movs	r1, #128	; 0x80
 8002b7a:	f7ff fead 	bl	80028d8 <SPI_WaitFlagStateUntilTimeout>
 8002b7e:	1e03      	subs	r3, r0, #0
 8002b80:	d007      	beq.n	8002b92 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b86:	2220      	movs	r2, #32
 8002b88:	431a      	orrs	r2, r3
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e014      	b.n	8002bbc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002b92:	68ba      	ldr	r2, [r7, #8]
 8002b94:	23c0      	movs	r3, #192	; 0xc0
 8002b96:	00d9      	lsls	r1, r3, #3
 8002b98:	68f8      	ldr	r0, [r7, #12]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	9300      	str	r3, [sp, #0]
 8002b9e:	0013      	movs	r3, r2
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f7ff ff27 	bl	80029f4 <SPI_WaitFifoStateUntilTimeout>
 8002ba6:	1e03      	subs	r3, r0, #0
 8002ba8:	d007      	beq.n	8002bba <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bae:	2220      	movs	r2, #32
 8002bb0:	431a      	orrs	r2, r3
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e000      	b.n	8002bbc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	0018      	movs	r0, r3
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	b004      	add	sp, #16
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002bcc:	f7fe f9e2 	bl	8000f94 <HAL_GetTick>
 8002bd0:	0003      	movs	r3, r0
 8002bd2:	60fb      	str	r3, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	685a      	ldr	r2, [r3, #4]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2120      	movs	r1, #32
 8002be0:	438a      	bics	r2, r1
 8002be2:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002be4:	68fa      	ldr	r2, [r7, #12]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2164      	movs	r1, #100	; 0x64
 8002bea:	0018      	movs	r0, r3
 8002bec:	f7ff ffa4 	bl	8002b38 <SPI_EndRxTxTransaction>
 8002bf0:	1e03      	subs	r3, r0, #0
 8002bf2:	d005      	beq.n	8002c00 <SPI_CloseRxTx_ISR+0x3c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bf8:	2220      	movs	r2, #32
 8002bfa:	431a      	orrs	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d117      	bne.n	8002c38 <SPI_CloseRxTx_ISR+0x74>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	225d      	movs	r2, #93	; 0x5d
 8002c0c:	5c9b      	ldrb	r3, [r3, r2]
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	2b04      	cmp	r3, #4
 8002c12:	d108      	bne.n	8002c26 <SPI_CloseRxTx_ISR+0x62>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	225d      	movs	r2, #93	; 0x5d
 8002c18:	2101      	movs	r1, #1
 8002c1a:	5499      	strb	r1, [r3, r2]
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	0018      	movs	r0, r3
 8002c20:	f7fd ff6c 	bl	8000afc <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8002c24:	e010      	b.n	8002c48 <SPI_CloseRxTx_ISR+0x84>
        hspi->State = HAL_SPI_STATE_READY;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	225d      	movs	r2, #93	; 0x5d
 8002c2a:	2101      	movs	r1, #1
 8002c2c:	5499      	strb	r1, [r3, r2]
        HAL_SPI_TxRxCpltCallback(hspi);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	0018      	movs	r0, r3
 8002c32:	f7fd fe85 	bl	8000940 <HAL_SPI_TxRxCpltCallback>
}
 8002c36:	e007      	b.n	8002c48 <SPI_CloseRxTx_ISR+0x84>
      hspi->State = HAL_SPI_STATE_READY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	225d      	movs	r2, #93	; 0x5d
 8002c3c:	2101      	movs	r1, #1
 8002c3e:	5499      	strb	r1, [r3, r2]
      HAL_SPI_ErrorCallback(hspi);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	0018      	movs	r0, r3
 8002c44:	f7ff fd1a 	bl	800267c <HAL_SPI_ErrorCallback>
}
 8002c48:	46c0      	nop			; (mov r8, r8)
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	b004      	add	sp, #16
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d101      	bne.n	8002c62 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e042      	b.n	8002ce8 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	223d      	movs	r2, #61	; 0x3d
 8002c66:	5c9b      	ldrb	r3, [r3, r2]
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d107      	bne.n	8002c7e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	223c      	movs	r2, #60	; 0x3c
 8002c72:	2100      	movs	r1, #0
 8002c74:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	0018      	movs	r0, r3
 8002c7a:	f7fd ffe3 	bl	8000c44 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	223d      	movs	r2, #61	; 0x3d
 8002c82:	2102      	movs	r1, #2
 8002c84:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	3304      	adds	r3, #4
 8002c8e:	0019      	movs	r1, r3
 8002c90:	0010      	movs	r0, r2
 8002c92:	f000 f8f3 	bl	8002e7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2246      	movs	r2, #70	; 0x46
 8002c9a:	2101      	movs	r1, #1
 8002c9c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	223e      	movs	r2, #62	; 0x3e
 8002ca2:	2101      	movs	r1, #1
 8002ca4:	5499      	strb	r1, [r3, r2]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	223f      	movs	r2, #63	; 0x3f
 8002caa:	2101      	movs	r1, #1
 8002cac:	5499      	strb	r1, [r3, r2]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2240      	movs	r2, #64	; 0x40
 8002cb2:	2101      	movs	r1, #1
 8002cb4:	5499      	strb	r1, [r3, r2]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2241      	movs	r2, #65	; 0x41
 8002cba:	2101      	movs	r1, #1
 8002cbc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2242      	movs	r2, #66	; 0x42
 8002cc2:	2101      	movs	r1, #1
 8002cc4:	5499      	strb	r1, [r3, r2]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2243      	movs	r2, #67	; 0x43
 8002cca:	2101      	movs	r1, #1
 8002ccc:	5499      	strb	r1, [r3, r2]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2244      	movs	r2, #68	; 0x44
 8002cd2:	2101      	movs	r1, #1
 8002cd4:	5499      	strb	r1, [r3, r2]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2245      	movs	r2, #69	; 0x45
 8002cda:	2101      	movs	r1, #1
 8002cdc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	223d      	movs	r2, #61	; 0x3d
 8002ce2:	2101      	movs	r1, #1
 8002ce4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ce6:	2300      	movs	r3, #0
}
 8002ce8:	0018      	movs	r0, r3
 8002cea:	46bd      	mov	sp, r7
 8002cec:	b002      	add	sp, #8
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cfc:	2317      	movs	r3, #23
 8002cfe:	18fb      	adds	r3, r7, r3
 8002d00:	2200      	movs	r2, #0
 8002d02:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	223c      	movs	r2, #60	; 0x3c
 8002d08:	5c9b      	ldrb	r3, [r3, r2]
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d101      	bne.n	8002d12 <HAL_TIM_PWM_ConfigChannel+0x22>
 8002d0e:	2302      	movs	r3, #2
 8002d10:	e0ad      	b.n	8002e6e <HAL_TIM_PWM_ConfigChannel+0x17e>
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	223c      	movs	r2, #60	; 0x3c
 8002d16:	2101      	movs	r1, #1
 8002d18:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2b0c      	cmp	r3, #12
 8002d1e:	d100      	bne.n	8002d22 <HAL_TIM_PWM_ConfigChannel+0x32>
 8002d20:	e076      	b.n	8002e10 <HAL_TIM_PWM_ConfigChannel+0x120>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2b0c      	cmp	r3, #12
 8002d26:	d900      	bls.n	8002d2a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002d28:	e095      	b.n	8002e56 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2b08      	cmp	r3, #8
 8002d2e:	d04e      	beq.n	8002dce <HAL_TIM_PWM_ConfigChannel+0xde>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2b08      	cmp	r3, #8
 8002d34:	d900      	bls.n	8002d38 <HAL_TIM_PWM_ConfigChannel+0x48>
 8002d36:	e08e      	b.n	8002e56 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d003      	beq.n	8002d46 <HAL_TIM_PWM_ConfigChannel+0x56>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2b04      	cmp	r3, #4
 8002d42:	d021      	beq.n	8002d88 <HAL_TIM_PWM_ConfigChannel+0x98>
 8002d44:	e087      	b.n	8002e56 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	68ba      	ldr	r2, [r7, #8]
 8002d4c:	0011      	movs	r1, r2
 8002d4e:	0018      	movs	r0, r3
 8002d50:	f000 f90a 	bl	8002f68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	699a      	ldr	r2, [r3, #24]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2108      	movs	r1, #8
 8002d60:	430a      	orrs	r2, r1
 8002d62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	699a      	ldr	r2, [r3, #24]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2104      	movs	r1, #4
 8002d70:	438a      	bics	r2, r1
 8002d72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	6999      	ldr	r1, [r3, #24]
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	691a      	ldr	r2, [r3, #16]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	430a      	orrs	r2, r1
 8002d84:	619a      	str	r2, [r3, #24]
      break;
 8002d86:	e06b      	b.n	8002e60 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	68ba      	ldr	r2, [r7, #8]
 8002d8e:	0011      	movs	r1, r2
 8002d90:	0018      	movs	r0, r3
 8002d92:	f000 f967 	bl	8003064 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	699a      	ldr	r2, [r3, #24]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2180      	movs	r1, #128	; 0x80
 8002da2:	0109      	lsls	r1, r1, #4
 8002da4:	430a      	orrs	r2, r1
 8002da6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	699a      	ldr	r2, [r3, #24]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4931      	ldr	r1, [pc, #196]	; (8002e78 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002db4:	400a      	ands	r2, r1
 8002db6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	6999      	ldr	r1, [r3, #24]
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	021a      	lsls	r2, r3, #8
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	619a      	str	r2, [r3, #24]
      break;
 8002dcc:	e048      	b.n	8002e60 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	68ba      	ldr	r2, [r7, #8]
 8002dd4:	0011      	movs	r1, r2
 8002dd6:	0018      	movs	r0, r3
 8002dd8:	f000 f9c2 	bl	8003160 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	69da      	ldr	r2, [r3, #28]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2108      	movs	r1, #8
 8002de8:	430a      	orrs	r2, r1
 8002dea:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	69da      	ldr	r2, [r3, #28]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2104      	movs	r1, #4
 8002df8:	438a      	bics	r2, r1
 8002dfa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	69d9      	ldr	r1, [r3, #28]
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	691a      	ldr	r2, [r3, #16]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	61da      	str	r2, [r3, #28]
      break;
 8002e0e:	e027      	b.n	8002e60 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	68ba      	ldr	r2, [r7, #8]
 8002e16:	0011      	movs	r1, r2
 8002e18:	0018      	movs	r0, r3
 8002e1a:	f000 fa21 	bl	8003260 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	69da      	ldr	r2, [r3, #28]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2180      	movs	r1, #128	; 0x80
 8002e2a:	0109      	lsls	r1, r1, #4
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	69da      	ldr	r2, [r3, #28]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	490f      	ldr	r1, [pc, #60]	; (8002e78 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002e3c:	400a      	ands	r2, r1
 8002e3e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	69d9      	ldr	r1, [r3, #28]
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	021a      	lsls	r2, r3, #8
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	430a      	orrs	r2, r1
 8002e52:	61da      	str	r2, [r3, #28]
      break;
 8002e54:	e004      	b.n	8002e60 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8002e56:	2317      	movs	r3, #23
 8002e58:	18fb      	adds	r3, r7, r3
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	701a      	strb	r2, [r3, #0]
      break;
 8002e5e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	223c      	movs	r2, #60	; 0x3c
 8002e64:	2100      	movs	r1, #0
 8002e66:	5499      	strb	r1, [r3, r2]

  return status;
 8002e68:	2317      	movs	r3, #23
 8002e6a:	18fb      	adds	r3, r7, r3
 8002e6c:	781b      	ldrb	r3, [r3, #0]
}
 8002e6e:	0018      	movs	r0, r3
 8002e70:	46bd      	mov	sp, r7
 8002e72:	b006      	add	sp, #24
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	46c0      	nop			; (mov r8, r8)
 8002e78:	fffffbff 	.word	0xfffffbff

08002e7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	4a30      	ldr	r2, [pc, #192]	; (8002f50 <TIM_Base_SetConfig+0xd4>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d008      	beq.n	8002ea6 <TIM_Base_SetConfig+0x2a>
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	2380      	movs	r3, #128	; 0x80
 8002e98:	05db      	lsls	r3, r3, #23
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d003      	beq.n	8002ea6 <TIM_Base_SetConfig+0x2a>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a2c      	ldr	r2, [pc, #176]	; (8002f54 <TIM_Base_SetConfig+0xd8>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d108      	bne.n	8002eb8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2270      	movs	r2, #112	; 0x70
 8002eaa:	4393      	bics	r3, r2
 8002eac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a25      	ldr	r2, [pc, #148]	; (8002f50 <TIM_Base_SetConfig+0xd4>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d014      	beq.n	8002eea <TIM_Base_SetConfig+0x6e>
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	2380      	movs	r3, #128	; 0x80
 8002ec4:	05db      	lsls	r3, r3, #23
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d00f      	beq.n	8002eea <TIM_Base_SetConfig+0x6e>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a21      	ldr	r2, [pc, #132]	; (8002f54 <TIM_Base_SetConfig+0xd8>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d00b      	beq.n	8002eea <TIM_Base_SetConfig+0x6e>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a20      	ldr	r2, [pc, #128]	; (8002f58 <TIM_Base_SetConfig+0xdc>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d007      	beq.n	8002eea <TIM_Base_SetConfig+0x6e>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a1f      	ldr	r2, [pc, #124]	; (8002f5c <TIM_Base_SetConfig+0xe0>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d003      	beq.n	8002eea <TIM_Base_SetConfig+0x6e>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a1e      	ldr	r2, [pc, #120]	; (8002f60 <TIM_Base_SetConfig+0xe4>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d108      	bne.n	8002efc <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	4a1d      	ldr	r2, [pc, #116]	; (8002f64 <TIM_Base_SetConfig+0xe8>)
 8002eee:	4013      	ands	r3, r2
 8002ef0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2280      	movs	r2, #128	; 0x80
 8002f00:	4393      	bics	r3, r2
 8002f02:	001a      	movs	r2, r3
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	695b      	ldr	r3, [r3, #20]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	68fa      	ldr	r2, [r7, #12]
 8002f10:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	689a      	ldr	r2, [r3, #8]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a0a      	ldr	r2, [pc, #40]	; (8002f50 <TIM_Base_SetConfig+0xd4>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d007      	beq.n	8002f3a <TIM_Base_SetConfig+0xbe>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a0b      	ldr	r2, [pc, #44]	; (8002f5c <TIM_Base_SetConfig+0xe0>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d003      	beq.n	8002f3a <TIM_Base_SetConfig+0xbe>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a0a      	ldr	r2, [pc, #40]	; (8002f60 <TIM_Base_SetConfig+0xe4>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d103      	bne.n	8002f42 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	691a      	ldr	r2, [r3, #16]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2201      	movs	r2, #1
 8002f46:	615a      	str	r2, [r3, #20]
}
 8002f48:	46c0      	nop			; (mov r8, r8)
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	b004      	add	sp, #16
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	40012c00 	.word	0x40012c00
 8002f54:	40000400 	.word	0x40000400
 8002f58:	40002000 	.word	0x40002000
 8002f5c:	40014400 	.word	0x40014400
 8002f60:	40014800 	.word	0x40014800
 8002f64:	fffffcff 	.word	0xfffffcff

08002f68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b086      	sub	sp, #24
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a1b      	ldr	r3, [r3, #32]
 8002f76:	2201      	movs	r2, #1
 8002f78:	4393      	bics	r3, r2
 8002f7a:	001a      	movs	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a1b      	ldr	r3, [r3, #32]
 8002f84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2270      	movs	r2, #112	; 0x70
 8002f96:	4393      	bics	r3, r2
 8002f98:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2203      	movs	r2, #3
 8002f9e:	4393      	bics	r3, r2
 8002fa0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68fa      	ldr	r2, [r7, #12]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	2202      	movs	r2, #2
 8002fb0:	4393      	bics	r3, r2
 8002fb2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	697a      	ldr	r2, [r7, #20]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a23      	ldr	r2, [pc, #140]	; (8003050 <TIM_OC1_SetConfig+0xe8>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d007      	beq.n	8002fd6 <TIM_OC1_SetConfig+0x6e>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a22      	ldr	r2, [pc, #136]	; (8003054 <TIM_OC1_SetConfig+0xec>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d003      	beq.n	8002fd6 <TIM_OC1_SetConfig+0x6e>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a21      	ldr	r2, [pc, #132]	; (8003058 <TIM_OC1_SetConfig+0xf0>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d10c      	bne.n	8002ff0 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	2208      	movs	r2, #8
 8002fda:	4393      	bics	r3, r2
 8002fdc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	697a      	ldr	r2, [r7, #20]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	2204      	movs	r2, #4
 8002fec:	4393      	bics	r3, r2
 8002fee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4a17      	ldr	r2, [pc, #92]	; (8003050 <TIM_OC1_SetConfig+0xe8>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d007      	beq.n	8003008 <TIM_OC1_SetConfig+0xa0>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a16      	ldr	r2, [pc, #88]	; (8003054 <TIM_OC1_SetConfig+0xec>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d003      	beq.n	8003008 <TIM_OC1_SetConfig+0xa0>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4a15      	ldr	r2, [pc, #84]	; (8003058 <TIM_OC1_SetConfig+0xf0>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d111      	bne.n	800302c <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	4a14      	ldr	r2, [pc, #80]	; (800305c <TIM_OC1_SetConfig+0xf4>)
 800300c:	4013      	ands	r3, r2
 800300e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	4a13      	ldr	r2, [pc, #76]	; (8003060 <TIM_OC1_SetConfig+0xf8>)
 8003014:	4013      	ands	r3, r2
 8003016:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	695b      	ldr	r3, [r3, #20]
 800301c:	693a      	ldr	r2, [r7, #16]
 800301e:	4313      	orrs	r3, r2
 8003020:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	693a      	ldr	r2, [r7, #16]
 8003028:	4313      	orrs	r3, r2
 800302a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	693a      	ldr	r2, [r7, #16]
 8003030:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	68fa      	ldr	r2, [r7, #12]
 8003036:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	685a      	ldr	r2, [r3, #4]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	697a      	ldr	r2, [r7, #20]
 8003044:	621a      	str	r2, [r3, #32]
}
 8003046:	46c0      	nop			; (mov r8, r8)
 8003048:	46bd      	mov	sp, r7
 800304a:	b006      	add	sp, #24
 800304c:	bd80      	pop	{r7, pc}
 800304e:	46c0      	nop			; (mov r8, r8)
 8003050:	40012c00 	.word	0x40012c00
 8003054:	40014400 	.word	0x40014400
 8003058:	40014800 	.word	0x40014800
 800305c:	fffffeff 	.word	0xfffffeff
 8003060:	fffffdff 	.word	0xfffffdff

08003064 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b086      	sub	sp, #24
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a1b      	ldr	r3, [r3, #32]
 8003072:	2210      	movs	r2, #16
 8003074:	4393      	bics	r3, r2
 8003076:	001a      	movs	r2, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a1b      	ldr	r3, [r3, #32]
 8003080:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	699b      	ldr	r3, [r3, #24]
 800308c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	4a2c      	ldr	r2, [pc, #176]	; (8003144 <TIM_OC2_SetConfig+0xe0>)
 8003092:	4013      	ands	r3, r2
 8003094:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	4a2b      	ldr	r2, [pc, #172]	; (8003148 <TIM_OC2_SetConfig+0xe4>)
 800309a:	4013      	ands	r3, r2
 800309c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	021b      	lsls	r3, r3, #8
 80030a4:	68fa      	ldr	r2, [r7, #12]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	2220      	movs	r2, #32
 80030ae:	4393      	bics	r3, r2
 80030b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	011b      	lsls	r3, r3, #4
 80030b8:	697a      	ldr	r2, [r7, #20]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a22      	ldr	r2, [pc, #136]	; (800314c <TIM_OC2_SetConfig+0xe8>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d10d      	bne.n	80030e2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	2280      	movs	r2, #128	; 0x80
 80030ca:	4393      	bics	r3, r2
 80030cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	011b      	lsls	r3, r3, #4
 80030d4:	697a      	ldr	r2, [r7, #20]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	2240      	movs	r2, #64	; 0x40
 80030de:	4393      	bics	r3, r2
 80030e0:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a19      	ldr	r2, [pc, #100]	; (800314c <TIM_OC2_SetConfig+0xe8>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d007      	beq.n	80030fa <TIM_OC2_SetConfig+0x96>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a18      	ldr	r2, [pc, #96]	; (8003150 <TIM_OC2_SetConfig+0xec>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d003      	beq.n	80030fa <TIM_OC2_SetConfig+0x96>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a17      	ldr	r2, [pc, #92]	; (8003154 <TIM_OC2_SetConfig+0xf0>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d113      	bne.n	8003122 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	4a16      	ldr	r2, [pc, #88]	; (8003158 <TIM_OC2_SetConfig+0xf4>)
 80030fe:	4013      	ands	r3, r2
 8003100:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	4a15      	ldr	r2, [pc, #84]	; (800315c <TIM_OC2_SetConfig+0xf8>)
 8003106:	4013      	ands	r3, r2
 8003108:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	695b      	ldr	r3, [r3, #20]
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	693a      	ldr	r2, [r7, #16]
 8003112:	4313      	orrs	r3, r2
 8003114:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	699b      	ldr	r3, [r3, #24]
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	693a      	ldr	r2, [r7, #16]
 800311e:	4313      	orrs	r3, r2
 8003120:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	693a      	ldr	r2, [r7, #16]
 8003126:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	685a      	ldr	r2, [r3, #4]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	697a      	ldr	r2, [r7, #20]
 800313a:	621a      	str	r2, [r3, #32]
}
 800313c:	46c0      	nop			; (mov r8, r8)
 800313e:	46bd      	mov	sp, r7
 8003140:	b006      	add	sp, #24
 8003142:	bd80      	pop	{r7, pc}
 8003144:	ffff8fff 	.word	0xffff8fff
 8003148:	fffffcff 	.word	0xfffffcff
 800314c:	40012c00 	.word	0x40012c00
 8003150:	40014400 	.word	0x40014400
 8003154:	40014800 	.word	0x40014800
 8003158:	fffffbff 	.word	0xfffffbff
 800315c:	fffff7ff 	.word	0xfffff7ff

08003160 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b086      	sub	sp, #24
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a1b      	ldr	r3, [r3, #32]
 800316e:	4a33      	ldr	r2, [pc, #204]	; (800323c <TIM_OC3_SetConfig+0xdc>)
 8003170:	401a      	ands	r2, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a1b      	ldr	r3, [r3, #32]
 800317a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	69db      	ldr	r3, [r3, #28]
 8003186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2270      	movs	r2, #112	; 0x70
 800318c:	4393      	bics	r3, r2
 800318e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2203      	movs	r2, #3
 8003194:	4393      	bics	r3, r2
 8003196:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	68fa      	ldr	r2, [r7, #12]
 800319e:	4313      	orrs	r3, r2
 80031a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	4a26      	ldr	r2, [pc, #152]	; (8003240 <TIM_OC3_SetConfig+0xe0>)
 80031a6:	4013      	ands	r3, r2
 80031a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	021b      	lsls	r3, r3, #8
 80031b0:	697a      	ldr	r2, [r7, #20]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a22      	ldr	r2, [pc, #136]	; (8003244 <TIM_OC3_SetConfig+0xe4>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d10d      	bne.n	80031da <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	4a21      	ldr	r2, [pc, #132]	; (8003248 <TIM_OC3_SetConfig+0xe8>)
 80031c2:	4013      	ands	r3, r2
 80031c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	021b      	lsls	r3, r3, #8
 80031cc:	697a      	ldr	r2, [r7, #20]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	4a1d      	ldr	r2, [pc, #116]	; (800324c <TIM_OC3_SetConfig+0xec>)
 80031d6:	4013      	ands	r3, r2
 80031d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a19      	ldr	r2, [pc, #100]	; (8003244 <TIM_OC3_SetConfig+0xe4>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d007      	beq.n	80031f2 <TIM_OC3_SetConfig+0x92>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a1a      	ldr	r2, [pc, #104]	; (8003250 <TIM_OC3_SetConfig+0xf0>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d003      	beq.n	80031f2 <TIM_OC3_SetConfig+0x92>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a19      	ldr	r2, [pc, #100]	; (8003254 <TIM_OC3_SetConfig+0xf4>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d113      	bne.n	800321a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	4a18      	ldr	r2, [pc, #96]	; (8003258 <TIM_OC3_SetConfig+0xf8>)
 80031f6:	4013      	ands	r3, r2
 80031f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	4a17      	ldr	r2, [pc, #92]	; (800325c <TIM_OC3_SetConfig+0xfc>)
 80031fe:	4013      	ands	r3, r2
 8003200:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	695b      	ldr	r3, [r3, #20]
 8003206:	011b      	lsls	r3, r3, #4
 8003208:	693a      	ldr	r2, [r7, #16]
 800320a:	4313      	orrs	r3, r2
 800320c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	011b      	lsls	r3, r3, #4
 8003214:	693a      	ldr	r2, [r7, #16]
 8003216:	4313      	orrs	r3, r2
 8003218:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	693a      	ldr	r2, [r7, #16]
 800321e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	68fa      	ldr	r2, [r7, #12]
 8003224:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	685a      	ldr	r2, [r3, #4]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	697a      	ldr	r2, [r7, #20]
 8003232:	621a      	str	r2, [r3, #32]
}
 8003234:	46c0      	nop			; (mov r8, r8)
 8003236:	46bd      	mov	sp, r7
 8003238:	b006      	add	sp, #24
 800323a:	bd80      	pop	{r7, pc}
 800323c:	fffffeff 	.word	0xfffffeff
 8003240:	fffffdff 	.word	0xfffffdff
 8003244:	40012c00 	.word	0x40012c00
 8003248:	fffff7ff 	.word	0xfffff7ff
 800324c:	fffffbff 	.word	0xfffffbff
 8003250:	40014400 	.word	0x40014400
 8003254:	40014800 	.word	0x40014800
 8003258:	ffffefff 	.word	0xffffefff
 800325c:	ffffdfff 	.word	0xffffdfff

08003260 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b086      	sub	sp, #24
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a1b      	ldr	r3, [r3, #32]
 800326e:	4a26      	ldr	r2, [pc, #152]	; (8003308 <TIM_OC4_SetConfig+0xa8>)
 8003270:	401a      	ands	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a1b      	ldr	r3, [r3, #32]
 800327a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	69db      	ldr	r3, [r3, #28]
 8003286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	4a20      	ldr	r2, [pc, #128]	; (800330c <TIM_OC4_SetConfig+0xac>)
 800328c:	4013      	ands	r3, r2
 800328e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	4a1f      	ldr	r2, [pc, #124]	; (8003310 <TIM_OC4_SetConfig+0xb0>)
 8003294:	4013      	ands	r3, r2
 8003296:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	021b      	lsls	r3, r3, #8
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	4a1b      	ldr	r2, [pc, #108]	; (8003314 <TIM_OC4_SetConfig+0xb4>)
 80032a8:	4013      	ands	r3, r2
 80032aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	031b      	lsls	r3, r3, #12
 80032b2:	693a      	ldr	r2, [r7, #16]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a17      	ldr	r2, [pc, #92]	; (8003318 <TIM_OC4_SetConfig+0xb8>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d007      	beq.n	80032d0 <TIM_OC4_SetConfig+0x70>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4a16      	ldr	r2, [pc, #88]	; (800331c <TIM_OC4_SetConfig+0xbc>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d003      	beq.n	80032d0 <TIM_OC4_SetConfig+0x70>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4a15      	ldr	r2, [pc, #84]	; (8003320 <TIM_OC4_SetConfig+0xc0>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d109      	bne.n	80032e4 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	4a14      	ldr	r2, [pc, #80]	; (8003324 <TIM_OC4_SetConfig+0xc4>)
 80032d4:	4013      	ands	r3, r2
 80032d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	695b      	ldr	r3, [r3, #20]
 80032dc:	019b      	lsls	r3, r3, #6
 80032de:	697a      	ldr	r2, [r7, #20]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	697a      	ldr	r2, [r7, #20]
 80032e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	68fa      	ldr	r2, [r7, #12]
 80032ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	685a      	ldr	r2, [r3, #4]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	693a      	ldr	r2, [r7, #16]
 80032fc:	621a      	str	r2, [r3, #32]
}
 80032fe:	46c0      	nop			; (mov r8, r8)
 8003300:	46bd      	mov	sp, r7
 8003302:	b006      	add	sp, #24
 8003304:	bd80      	pop	{r7, pc}
 8003306:	46c0      	nop			; (mov r8, r8)
 8003308:	ffffefff 	.word	0xffffefff
 800330c:	ffff8fff 	.word	0xffff8fff
 8003310:	fffffcff 	.word	0xfffffcff
 8003314:	ffffdfff 	.word	0xffffdfff
 8003318:	40012c00 	.word	0x40012c00
 800331c:	40014400 	.word	0x40014400
 8003320:	40014800 	.word	0x40014800
 8003324:	ffffbfff 	.word	0xffffbfff

08003328 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	223c      	movs	r2, #60	; 0x3c
 8003336:	5c9b      	ldrb	r3, [r3, r2]
 8003338:	2b01      	cmp	r3, #1
 800333a:	d101      	bne.n	8003340 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800333c:	2302      	movs	r3, #2
 800333e:	e042      	b.n	80033c6 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	223c      	movs	r2, #60	; 0x3c
 8003344:	2101      	movs	r1, #1
 8003346:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	223d      	movs	r2, #61	; 0x3d
 800334c:	2102      	movs	r1, #2
 800334e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2270      	movs	r2, #112	; 0x70
 8003364:	4393      	bics	r3, r2
 8003366:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68fa      	ldr	r2, [r7, #12]
 800336e:	4313      	orrs	r3, r2
 8003370:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a14      	ldr	r2, [pc, #80]	; (80033d0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d00a      	beq.n	800339a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	2380      	movs	r3, #128	; 0x80
 800338a:	05db      	lsls	r3, r3, #23
 800338c:	429a      	cmp	r2, r3
 800338e:	d004      	beq.n	800339a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a0f      	ldr	r2, [pc, #60]	; (80033d4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d10c      	bne.n	80033b4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	2280      	movs	r2, #128	; 0x80
 800339e:	4393      	bics	r3, r2
 80033a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	68ba      	ldr	r2, [r7, #8]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68ba      	ldr	r2, [r7, #8]
 80033b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	223d      	movs	r2, #61	; 0x3d
 80033b8:	2101      	movs	r1, #1
 80033ba:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	223c      	movs	r2, #60	; 0x3c
 80033c0:	2100      	movs	r1, #0
 80033c2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	0018      	movs	r0, r3
 80033c8:	46bd      	mov	sp, r7
 80033ca:	b004      	add	sp, #16
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	46c0      	nop			; (mov r8, r8)
 80033d0:	40012c00 	.word	0x40012c00
 80033d4:	40000400 	.word	0x40000400

080033d8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80033e2:	2300      	movs	r3, #0
 80033e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	223c      	movs	r2, #60	; 0x3c
 80033ea:	5c9b      	ldrb	r3, [r3, r2]
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d101      	bne.n	80033f4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80033f0:	2302      	movs	r3, #2
 80033f2:	e03e      	b.n	8003472 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	223c      	movs	r2, #60	; 0x3c
 80033f8:	2101      	movs	r1, #1
 80033fa:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	22ff      	movs	r2, #255	; 0xff
 8003400:	4393      	bics	r3, r2
 8003402:	001a      	movs	r2, r3
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	4313      	orrs	r3, r2
 800340a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	4a1b      	ldr	r2, [pc, #108]	; (800347c <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8003410:	401a      	ands	r2, r3
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	4313      	orrs	r3, r2
 8003418:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	4a18      	ldr	r2, [pc, #96]	; (8003480 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 800341e:	401a      	ands	r2, r3
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	4313      	orrs	r3, r2
 8003426:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	4a16      	ldr	r2, [pc, #88]	; (8003484 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 800342c:	401a      	ands	r2, r3
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4313      	orrs	r3, r2
 8003434:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	4a13      	ldr	r2, [pc, #76]	; (8003488 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 800343a:	401a      	ands	r2, r3
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	691b      	ldr	r3, [r3, #16]
 8003440:	4313      	orrs	r3, r2
 8003442:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	4a11      	ldr	r2, [pc, #68]	; (800348c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8003448:	401a      	ands	r2, r3
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	4313      	orrs	r3, r2
 8003450:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	4a0e      	ldr	r2, [pc, #56]	; (8003490 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8003456:	401a      	ands	r2, r3
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	69db      	ldr	r3, [r3, #28]
 800345c:	4313      	orrs	r3, r2
 800345e:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	68fa      	ldr	r2, [r7, #12]
 8003466:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	223c      	movs	r2, #60	; 0x3c
 800346c:	2100      	movs	r1, #0
 800346e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	0018      	movs	r0, r3
 8003474:	46bd      	mov	sp, r7
 8003476:	b004      	add	sp, #16
 8003478:	bd80      	pop	{r7, pc}
 800347a:	46c0      	nop			; (mov r8, r8)
 800347c:	fffffcff 	.word	0xfffffcff
 8003480:	fffffbff 	.word	0xfffffbff
 8003484:	fffff7ff 	.word	0xfffff7ff
 8003488:	ffffefff 	.word	0xffffefff
 800348c:	ffffdfff 	.word	0xffffdfff
 8003490:	ffffbfff 	.word	0xffffbfff

08003494 <memset>:
 8003494:	0003      	movs	r3, r0
 8003496:	1882      	adds	r2, r0, r2
 8003498:	4293      	cmp	r3, r2
 800349a:	d100      	bne.n	800349e <memset+0xa>
 800349c:	4770      	bx	lr
 800349e:	7019      	strb	r1, [r3, #0]
 80034a0:	3301      	adds	r3, #1
 80034a2:	e7f9      	b.n	8003498 <memset+0x4>

080034a4 <__libc_init_array>:
 80034a4:	b570      	push	{r4, r5, r6, lr}
 80034a6:	2600      	movs	r6, #0
 80034a8:	4c0c      	ldr	r4, [pc, #48]	; (80034dc <__libc_init_array+0x38>)
 80034aa:	4d0d      	ldr	r5, [pc, #52]	; (80034e0 <__libc_init_array+0x3c>)
 80034ac:	1b64      	subs	r4, r4, r5
 80034ae:	10a4      	asrs	r4, r4, #2
 80034b0:	42a6      	cmp	r6, r4
 80034b2:	d109      	bne.n	80034c8 <__libc_init_array+0x24>
 80034b4:	2600      	movs	r6, #0
 80034b6:	f000 f823 	bl	8003500 <_init>
 80034ba:	4c0a      	ldr	r4, [pc, #40]	; (80034e4 <__libc_init_array+0x40>)
 80034bc:	4d0a      	ldr	r5, [pc, #40]	; (80034e8 <__libc_init_array+0x44>)
 80034be:	1b64      	subs	r4, r4, r5
 80034c0:	10a4      	asrs	r4, r4, #2
 80034c2:	42a6      	cmp	r6, r4
 80034c4:	d105      	bne.n	80034d2 <__libc_init_array+0x2e>
 80034c6:	bd70      	pop	{r4, r5, r6, pc}
 80034c8:	00b3      	lsls	r3, r6, #2
 80034ca:	58eb      	ldr	r3, [r5, r3]
 80034cc:	4798      	blx	r3
 80034ce:	3601      	adds	r6, #1
 80034d0:	e7ee      	b.n	80034b0 <__libc_init_array+0xc>
 80034d2:	00b3      	lsls	r3, r6, #2
 80034d4:	58eb      	ldr	r3, [r5, r3]
 80034d6:	4798      	blx	r3
 80034d8:	3601      	adds	r6, #1
 80034da:	e7f2      	b.n	80034c2 <__libc_init_array+0x1e>
 80034dc:	08003548 	.word	0x08003548
 80034e0:	08003548 	.word	0x08003548
 80034e4:	0800354c 	.word	0x0800354c
 80034e8:	08003548 	.word	0x08003548

080034ec <memcpy>:
 80034ec:	2300      	movs	r3, #0
 80034ee:	b510      	push	{r4, lr}
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d100      	bne.n	80034f6 <memcpy+0xa>
 80034f4:	bd10      	pop	{r4, pc}
 80034f6:	5ccc      	ldrb	r4, [r1, r3]
 80034f8:	54c4      	strb	r4, [r0, r3]
 80034fa:	3301      	adds	r3, #1
 80034fc:	e7f8      	b.n	80034f0 <memcpy+0x4>
	...

08003500 <_init>:
 8003500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003502:	46c0      	nop			; (mov r8, r8)
 8003504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003506:	bc08      	pop	{r3}
 8003508:	469e      	mov	lr, r3
 800350a:	4770      	bx	lr

0800350c <_fini>:
 800350c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800350e:	46c0      	nop			; (mov r8, r8)
 8003510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003512:	bc08      	pop	{r3}
 8003514:	469e      	mov	lr, r3
 8003516:	4770      	bx	lr
