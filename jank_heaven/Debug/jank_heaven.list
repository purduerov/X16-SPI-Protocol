
jank_heaven.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002828  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080028e8  080028e8  000128e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002918  08002918  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002918  08002918  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002918  08002918  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002918  08002918  00012918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800291c  0800291c  0001291c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002920  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  2000000c  0800292c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  0800292c  00020188  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a81f  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c6b  00000000  00000000  0002a896  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bd8  00000000  00000000  0002c508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000093f  00000000  00000000  0002d0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017ff4  00000000  00000000  0002da1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dc69  00000000  00000000  00045a13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c07a  00000000  00000000  0005367c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002aac  00000000  00000000  000df6f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000e21a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080028d0 	.word	0x080028d0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080028d0 	.word	0x080028d0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fcfc 	bl	8000c20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f84c 	bl	80002c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 fa9c 	bl	8000768 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000230:	f000 f8a8 	bl	8000384 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000234:	f000 f996 	bl	8000564 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000238:	f000 fa16 	bl	8000668 <MX_TIM3_Init>
  MX_CRC_Init();
 800023c:	f000 f882 	bl	8000344 <MX_CRC_Init>
  MX_TIM1_Init();
 8000240:	f000 f8da 	bl	80003f8 <MX_TIM1_Init>





  EnablePWMOutput(&htim3);
 8000244:	4b1c      	ldr	r3, [pc, #112]	; (80002b8 <main+0x98>)
 8000246:	0018      	movs	r0, r3
 8000248:	f000 fad6 	bl	80007f8 <EnablePWMOutput>
  EnablePWMOutput(&htim2);
 800024c:	4b1b      	ldr	r3, [pc, #108]	; (80002bc <main+0x9c>)
 800024e:	0018      	movs	r0, r3
 8000250:	f000 fad2 	bl	80007f8 <EnablePWMOutput>
	  //HAL_Delay(100);
	  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
	  //HAL_Delay(100);
	  // Error incrementing

	  HAL_Delay(50);
 8000254:	2032      	movs	r0, #50	; 0x32
 8000256:	f000 fd47 	bl	8000ce8 <HAL_Delay>
	  NUM_ERROR++;
 800025a:	4b19      	ldr	r3, [pc, #100]	; (80002c0 <main+0xa0>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	1c5a      	adds	r2, r3, #1
 8000260:	4b17      	ldr	r3, [pc, #92]	; (80002c0 <main+0xa0>)
 8000262:	601a      	str	r2, [r3, #0]
	        htim2.Instance->CCR2 = (uint32_t) 250 + 127;
	        htim2.Instance->CCR3 = (uint32_t) 250 + 127;
	        htim2.Instance->CCR4 = (uint32_t) 250 + 127;
	  }*/

	  htim3.Instance->CCR1 = (uint32_t) 250 + 180;
 8000264:	4b14      	ldr	r3, [pc, #80]	; (80002b8 <main+0x98>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	22d7      	movs	r2, #215	; 0xd7
 800026a:	0052      	lsls	r2, r2, #1
 800026c:	635a      	str	r2, [r3, #52]	; 0x34
	  htim3.Instance->CCR2 = (uint32_t) 250 + 180;
 800026e:	4b12      	ldr	r3, [pc, #72]	; (80002b8 <main+0x98>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	22d7      	movs	r2, #215	; 0xd7
 8000274:	0052      	lsls	r2, r2, #1
 8000276:	639a      	str	r2, [r3, #56]	; 0x38
	  htim3.Instance->CCR3 = (uint32_t) 250 + 180;
 8000278:	4b0f      	ldr	r3, [pc, #60]	; (80002b8 <main+0x98>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	22d7      	movs	r2, #215	; 0xd7
 800027e:	0052      	lsls	r2, r2, #1
 8000280:	63da      	str	r2, [r3, #60]	; 0x3c
	  htim3.Instance->CCR4 = (uint32_t) 250 + 180;
 8000282:	4b0d      	ldr	r3, [pc, #52]	; (80002b8 <main+0x98>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	22d7      	movs	r2, #215	; 0xd7
 8000288:	0052      	lsls	r2, r2, #1
 800028a:	641a      	str	r2, [r3, #64]	; 0x40

	  htim2.Instance->CCR1 = (uint32_t) 250 + 180;
 800028c:	4b0b      	ldr	r3, [pc, #44]	; (80002bc <main+0x9c>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	22d7      	movs	r2, #215	; 0xd7
 8000292:	0052      	lsls	r2, r2, #1
 8000294:	635a      	str	r2, [r3, #52]	; 0x34
	  htim2.Instance->CCR2 = (uint32_t) 250 + 180;
 8000296:	4b09      	ldr	r3, [pc, #36]	; (80002bc <main+0x9c>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	22d7      	movs	r2, #215	; 0xd7
 800029c:	0052      	lsls	r2, r2, #1
 800029e:	639a      	str	r2, [r3, #56]	; 0x38
	  htim2.Instance->CCR3 = (uint32_t) 250 + 180;
 80002a0:	4b06      	ldr	r3, [pc, #24]	; (80002bc <main+0x9c>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	22d7      	movs	r2, #215	; 0xd7
 80002a6:	0052      	lsls	r2, r2, #1
 80002a8:	63da      	str	r2, [r3, #60]	; 0x3c
	  htim2.Instance->CCR4 = (uint32_t) 250 + 180;
 80002aa:	4b04      	ldr	r3, [pc, #16]	; (80002bc <main+0x9c>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	22d7      	movs	r2, #215	; 0xd7
 80002b0:	0052      	lsls	r2, r2, #1
 80002b2:	641a      	str	r2, [r3, #64]	; 0x40
	  HAL_Delay(50);
 80002b4:	e7ce      	b.n	8000254 <main+0x34>
 80002b6:	46c0      	nop			; (mov r8, r8)
 80002b8:	20000138 	.word	0x20000138
 80002bc:	200000f0 	.word	0x200000f0
 80002c0:	20000180 	.word	0x20000180

080002c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c4:	b590      	push	{r4, r7, lr}
 80002c6:	b093      	sub	sp, #76	; 0x4c
 80002c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ca:	2414      	movs	r4, #20
 80002cc:	193b      	adds	r3, r7, r4
 80002ce:	0018      	movs	r0, r3
 80002d0:	2334      	movs	r3, #52	; 0x34
 80002d2:	001a      	movs	r2, r3
 80002d4:	2100      	movs	r1, #0
 80002d6:	f002 facf 	bl	8002878 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002da:	1d3b      	adds	r3, r7, #4
 80002dc:	0018      	movs	r0, r3
 80002de:	2310      	movs	r3, #16
 80002e0:	001a      	movs	r2, r3
 80002e2:	2100      	movs	r1, #0
 80002e4:	f002 fac8 	bl	8002878 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002e8:	0021      	movs	r1, r4
 80002ea:	187b      	adds	r3, r7, r1
 80002ec:	2202      	movs	r2, #2
 80002ee:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002f0:	187b      	adds	r3, r7, r1
 80002f2:	2201      	movs	r2, #1
 80002f4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002f6:	187b      	adds	r3, r7, r1
 80002f8:	2210      	movs	r2, #16
 80002fa:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002fc:	187b      	adds	r3, r7, r1
 80002fe:	2200      	movs	r2, #0
 8000300:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000302:	187b      	adds	r3, r7, r1
 8000304:	0018      	movs	r0, r3
 8000306:	f001 f803 	bl	8001310 <HAL_RCC_OscConfig>
 800030a:	1e03      	subs	r3, r0, #0
 800030c:	d001      	beq.n	8000312 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 800030e:	f000 fa9d 	bl	800084c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000312:	1d3b      	adds	r3, r7, #4
 8000314:	2207      	movs	r2, #7
 8000316:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000318:	1d3b      	adds	r3, r7, #4
 800031a:	2200      	movs	r2, #0
 800031c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800031e:	1d3b      	adds	r3, r7, #4
 8000320:	2200      	movs	r2, #0
 8000322:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000324:	1d3b      	adds	r3, r7, #4
 8000326:	2200      	movs	r2, #0
 8000328:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800032a:	1d3b      	adds	r3, r7, #4
 800032c:	2100      	movs	r1, #0
 800032e:	0018      	movs	r0, r3
 8000330:	f001 fb74 	bl	8001a1c <HAL_RCC_ClockConfig>
 8000334:	1e03      	subs	r3, r0, #0
 8000336:	d001      	beq.n	800033c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000338:	f000 fa88 	bl	800084c <Error_Handler>
  }
}
 800033c:	46c0      	nop			; (mov r8, r8)
 800033e:	46bd      	mov	sp, r7
 8000340:	b013      	add	sp, #76	; 0x4c
 8000342:	bd90      	pop	{r4, r7, pc}

08000344 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000348:	4b0c      	ldr	r3, [pc, #48]	; (800037c <MX_CRC_Init+0x38>)
 800034a:	4a0d      	ldr	r2, [pc, #52]	; (8000380 <MX_CRC_Init+0x3c>)
 800034c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800034e:	4b0b      	ldr	r3, [pc, #44]	; (800037c <MX_CRC_Init+0x38>)
 8000350:	2200      	movs	r2, #0
 8000352:	711a      	strb	r2, [r3, #4]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000354:	4b09      	ldr	r3, [pc, #36]	; (800037c <MX_CRC_Init+0x38>)
 8000356:	2200      	movs	r2, #0
 8000358:	60da      	str	r2, [r3, #12]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800035a:	4b08      	ldr	r3, [pc, #32]	; (800037c <MX_CRC_Init+0x38>)
 800035c:	2200      	movs	r2, #0
 800035e:	611a      	str	r2, [r3, #16]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 8000360:	4b06      	ldr	r3, [pc, #24]	; (800037c <MX_CRC_Init+0x38>)
 8000362:	2203      	movs	r2, #3
 8000364:	619a      	str	r2, [r3, #24]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000366:	4b05      	ldr	r3, [pc, #20]	; (800037c <MX_CRC_Init+0x38>)
 8000368:	0018      	movs	r0, r3
 800036a:	f000 fdbf 	bl	8000eec <HAL_CRC_Init>
 800036e:	1e03      	subs	r3, r0, #0
 8000370:	d001      	beq.n	8000376 <MX_CRC_Init+0x32>
  {
    Error_Handler();
 8000372:	f000 fa6b 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000376:	46c0      	nop			; (mov r8, r8)
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}
 800037c:	20000028 	.word	0x20000028
 8000380:	40023000 	.word	0x40023000

08000384 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000388:	4b19      	ldr	r3, [pc, #100]	; (80003f0 <MX_SPI1_Init+0x6c>)
 800038a:	4a1a      	ldr	r2, [pc, #104]	; (80003f4 <MX_SPI1_Init+0x70>)
 800038c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800038e:	4b18      	ldr	r3, [pc, #96]	; (80003f0 <MX_SPI1_Init+0x6c>)
 8000390:	2200      	movs	r2, #0
 8000392:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000394:	4b16      	ldr	r3, [pc, #88]	; (80003f0 <MX_SPI1_Init+0x6c>)
 8000396:	2200      	movs	r2, #0
 8000398:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800039a:	4b15      	ldr	r3, [pc, #84]	; (80003f0 <MX_SPI1_Init+0x6c>)
 800039c:	22e0      	movs	r2, #224	; 0xe0
 800039e:	00d2      	lsls	r2, r2, #3
 80003a0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003a2:	4b13      	ldr	r3, [pc, #76]	; (80003f0 <MX_SPI1_Init+0x6c>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003a8:	4b11      	ldr	r3, [pc, #68]	; (80003f0 <MX_SPI1_Init+0x6c>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80003ae:	4b10      	ldr	r3, [pc, #64]	; (80003f0 <MX_SPI1_Init+0x6c>)
 80003b0:	2280      	movs	r2, #128	; 0x80
 80003b2:	0092      	lsls	r2, r2, #2
 80003b4:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003b6:	4b0e      	ldr	r3, [pc, #56]	; (80003f0 <MX_SPI1_Init+0x6c>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003bc:	4b0c      	ldr	r3, [pc, #48]	; (80003f0 <MX_SPI1_Init+0x6c>)
 80003be:	2200      	movs	r2, #0
 80003c0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003c2:	4b0b      	ldr	r3, [pc, #44]	; (80003f0 <MX_SPI1_Init+0x6c>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80003c8:	4b09      	ldr	r3, [pc, #36]	; (80003f0 <MX_SPI1_Init+0x6c>)
 80003ca:	2207      	movs	r2, #7
 80003cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80003ce:	4b08      	ldr	r3, [pc, #32]	; (80003f0 <MX_SPI1_Init+0x6c>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80003d4:	4b06      	ldr	r3, [pc, #24]	; (80003f0 <MX_SPI1_Init+0x6c>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003da:	4b05      	ldr	r3, [pc, #20]	; (80003f0 <MX_SPI1_Init+0x6c>)
 80003dc:	0018      	movs	r0, r3
 80003de:	f001 fc69 	bl	8001cb4 <HAL_SPI_Init>
 80003e2:	1e03      	subs	r3, r0, #0
 80003e4:	d001      	beq.n	80003ea <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 80003e6:	f000 fa31 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80003ea:	46c0      	nop			; (mov r8, r8)
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bd80      	pop	{r7, pc}
 80003f0:	20000044 	.word	0x20000044
 80003f4:	40013000 	.word	0x40013000

080003f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b092      	sub	sp, #72	; 0x48
 80003fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003fe:	2340      	movs	r3, #64	; 0x40
 8000400:	18fb      	adds	r3, r7, r3
 8000402:	0018      	movs	r0, r3
 8000404:	2308      	movs	r3, #8
 8000406:	001a      	movs	r2, r3
 8000408:	2100      	movs	r1, #0
 800040a:	f002 fa35 	bl	8002878 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800040e:	2324      	movs	r3, #36	; 0x24
 8000410:	18fb      	adds	r3, r7, r3
 8000412:	0018      	movs	r0, r3
 8000414:	231c      	movs	r3, #28
 8000416:	001a      	movs	r2, r3
 8000418:	2100      	movs	r1, #0
 800041a:	f002 fa2d 	bl	8002878 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800041e:	1d3b      	adds	r3, r7, #4
 8000420:	0018      	movs	r0, r3
 8000422:	2320      	movs	r3, #32
 8000424:	001a      	movs	r2, r3
 8000426:	2100      	movs	r1, #0
 8000428:	f002 fa26 	bl	8002878 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800042c:	4b4b      	ldr	r3, [pc, #300]	; (800055c <MX_TIM1_Init+0x164>)
 800042e:	4a4c      	ldr	r2, [pc, #304]	; (8000560 <MX_TIM1_Init+0x168>)
 8000430:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 32-1;
 8000432:	4b4a      	ldr	r3, [pc, #296]	; (800055c <MX_TIM1_Init+0x164>)
 8000434:	221f      	movs	r2, #31
 8000436:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000438:	4b48      	ldr	r3, [pc, #288]	; (800055c <MX_TIM1_Init+0x164>)
 800043a:	2200      	movs	r2, #0
 800043c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 500-1;
 800043e:	4b47      	ldr	r3, [pc, #284]	; (800055c <MX_TIM1_Init+0x164>)
 8000440:	22f4      	movs	r2, #244	; 0xf4
 8000442:	32ff      	adds	r2, #255	; 0xff
 8000444:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000446:	4b45      	ldr	r3, [pc, #276]	; (800055c <MX_TIM1_Init+0x164>)
 8000448:	2200      	movs	r2, #0
 800044a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800044c:	4b43      	ldr	r3, [pc, #268]	; (800055c <MX_TIM1_Init+0x164>)
 800044e:	2200      	movs	r2, #0
 8000450:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000452:	4b42      	ldr	r3, [pc, #264]	; (800055c <MX_TIM1_Init+0x164>)
 8000454:	2200      	movs	r2, #0
 8000456:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000458:	4b40      	ldr	r3, [pc, #256]	; (800055c <MX_TIM1_Init+0x164>)
 800045a:	0018      	movs	r0, r3
 800045c:	f001 fdea 	bl	8002034 <HAL_TIM_PWM_Init>
 8000460:	1e03      	subs	r3, r0, #0
 8000462:	d001      	beq.n	8000468 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8000464:	f000 f9f2 	bl	800084c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000468:	2140      	movs	r1, #64	; 0x40
 800046a:	187b      	adds	r3, r7, r1
 800046c:	2200      	movs	r2, #0
 800046e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000470:	187b      	adds	r3, r7, r1
 8000472:	2200      	movs	r2, #0
 8000474:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000476:	187a      	adds	r2, r7, r1
 8000478:	4b38      	ldr	r3, [pc, #224]	; (800055c <MX_TIM1_Init+0x164>)
 800047a:	0011      	movs	r1, r2
 800047c:	0018      	movs	r0, r3
 800047e:	f002 f945 	bl	800270c <HAL_TIMEx_MasterConfigSynchronization>
 8000482:	1e03      	subs	r3, r0, #0
 8000484:	d001      	beq.n	800048a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000486:	f000 f9e1 	bl	800084c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800048a:	2124      	movs	r1, #36	; 0x24
 800048c:	187b      	adds	r3, r7, r1
 800048e:	2260      	movs	r2, #96	; 0x60
 8000490:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000492:	187b      	adds	r3, r7, r1
 8000494:	2200      	movs	r2, #0
 8000496:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000498:	187b      	adds	r3, r7, r1
 800049a:	2200      	movs	r2, #0
 800049c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800049e:	187b      	adds	r3, r7, r1
 80004a0:	2200      	movs	r2, #0
 80004a2:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004a4:	187b      	adds	r3, r7, r1
 80004a6:	2200      	movs	r2, #0
 80004a8:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80004aa:	187b      	adds	r3, r7, r1
 80004ac:	2200      	movs	r2, #0
 80004ae:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80004b0:	187b      	adds	r3, r7, r1
 80004b2:	2200      	movs	r2, #0
 80004b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004b6:	1879      	adds	r1, r7, r1
 80004b8:	4b28      	ldr	r3, [pc, #160]	; (800055c <MX_TIM1_Init+0x164>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	0018      	movs	r0, r3
 80004be:	f001 fe09 	bl	80020d4 <HAL_TIM_PWM_ConfigChannel>
 80004c2:	1e03      	subs	r3, r0, #0
 80004c4:	d001      	beq.n	80004ca <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 80004c6:	f000 f9c1 	bl	800084c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80004ca:	2324      	movs	r3, #36	; 0x24
 80004cc:	18f9      	adds	r1, r7, r3
 80004ce:	4b23      	ldr	r3, [pc, #140]	; (800055c <MX_TIM1_Init+0x164>)
 80004d0:	2204      	movs	r2, #4
 80004d2:	0018      	movs	r0, r3
 80004d4:	f001 fdfe 	bl	80020d4 <HAL_TIM_PWM_ConfigChannel>
 80004d8:	1e03      	subs	r3, r0, #0
 80004da:	d001      	beq.n	80004e0 <MX_TIM1_Init+0xe8>
  {
    Error_Handler();
 80004dc:	f000 f9b6 	bl	800084c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80004e0:	2324      	movs	r3, #36	; 0x24
 80004e2:	18f9      	adds	r1, r7, r3
 80004e4:	4b1d      	ldr	r3, [pc, #116]	; (800055c <MX_TIM1_Init+0x164>)
 80004e6:	2208      	movs	r2, #8
 80004e8:	0018      	movs	r0, r3
 80004ea:	f001 fdf3 	bl	80020d4 <HAL_TIM_PWM_ConfigChannel>
 80004ee:	1e03      	subs	r3, r0, #0
 80004f0:	d001      	beq.n	80004f6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80004f2:	f000 f9ab 	bl	800084c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80004f6:	2324      	movs	r3, #36	; 0x24
 80004f8:	18f9      	adds	r1, r7, r3
 80004fa:	4b18      	ldr	r3, [pc, #96]	; (800055c <MX_TIM1_Init+0x164>)
 80004fc:	220c      	movs	r2, #12
 80004fe:	0018      	movs	r0, r3
 8000500:	f001 fde8 	bl	80020d4 <HAL_TIM_PWM_ConfigChannel>
 8000504:	1e03      	subs	r3, r0, #0
 8000506:	d001      	beq.n	800050c <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8000508:	f000 f9a0 	bl	800084c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800050c:	1d3b      	adds	r3, r7, #4
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000512:	1d3b      	adds	r3, r7, #4
 8000514:	2200      	movs	r2, #0
 8000516:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000518:	1d3b      	adds	r3, r7, #4
 800051a:	2200      	movs	r2, #0
 800051c:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800051e:	1d3b      	adds	r3, r7, #4
 8000520:	2200      	movs	r2, #0
 8000522:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000524:	1d3b      	adds	r3, r7, #4
 8000526:	2200      	movs	r2, #0
 8000528:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800052a:	1d3b      	adds	r3, r7, #4
 800052c:	2280      	movs	r2, #128	; 0x80
 800052e:	0192      	lsls	r2, r2, #6
 8000530:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000532:	1d3b      	adds	r3, r7, #4
 8000534:	2200      	movs	r2, #0
 8000536:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000538:	1d3a      	adds	r2, r7, #4
 800053a:	4b08      	ldr	r3, [pc, #32]	; (800055c <MX_TIM1_Init+0x164>)
 800053c:	0011      	movs	r1, r2
 800053e:	0018      	movs	r0, r3
 8000540:	f002 f93c 	bl	80027bc <HAL_TIMEx_ConfigBreakDeadTime>
 8000544:	1e03      	subs	r3, r0, #0
 8000546:	d001      	beq.n	800054c <MX_TIM1_Init+0x154>
  {
    Error_Handler();
 8000548:	f000 f980 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800054c:	4b03      	ldr	r3, [pc, #12]	; (800055c <MX_TIM1_Init+0x164>)
 800054e:	0018      	movs	r0, r3
 8000550:	f000 fa5e 	bl	8000a10 <HAL_TIM_MspPostInit>

}
 8000554:	46c0      	nop			; (mov r8, r8)
 8000556:	46bd      	mov	sp, r7
 8000558:	b012      	add	sp, #72	; 0x48
 800055a:	bd80      	pop	{r7, pc}
 800055c:	200000a8 	.word	0x200000a8
 8000560:	40012c00 	.word	0x40012c00

08000564 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b08a      	sub	sp, #40	; 0x28
 8000568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800056a:	2320      	movs	r3, #32
 800056c:	18fb      	adds	r3, r7, r3
 800056e:	0018      	movs	r0, r3
 8000570:	2308      	movs	r3, #8
 8000572:	001a      	movs	r2, r3
 8000574:	2100      	movs	r1, #0
 8000576:	f002 f97f 	bl	8002878 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800057a:	1d3b      	adds	r3, r7, #4
 800057c:	0018      	movs	r0, r3
 800057e:	231c      	movs	r3, #28
 8000580:	001a      	movs	r2, r3
 8000582:	2100      	movs	r1, #0
 8000584:	f002 f978 	bl	8002878 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000588:	4b36      	ldr	r3, [pc, #216]	; (8000664 <MX_TIM2_Init+0x100>)
 800058a:	2280      	movs	r2, #128	; 0x80
 800058c:	05d2      	lsls	r2, r2, #23
 800058e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32-1;
 8000590:	4b34      	ldr	r3, [pc, #208]	; (8000664 <MX_TIM2_Init+0x100>)
 8000592:	221f      	movs	r2, #31
 8000594:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000596:	4b33      	ldr	r3, [pc, #204]	; (8000664 <MX_TIM2_Init+0x100>)
 8000598:	2200      	movs	r2, #0
 800059a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 500-1;
 800059c:	4b31      	ldr	r3, [pc, #196]	; (8000664 <MX_TIM2_Init+0x100>)
 800059e:	22f4      	movs	r2, #244	; 0xf4
 80005a0:	32ff      	adds	r2, #255	; 0xff
 80005a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005a4:	4b2f      	ldr	r3, [pc, #188]	; (8000664 <MX_TIM2_Init+0x100>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005aa:	4b2e      	ldr	r3, [pc, #184]	; (8000664 <MX_TIM2_Init+0x100>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80005b0:	4b2c      	ldr	r3, [pc, #176]	; (8000664 <MX_TIM2_Init+0x100>)
 80005b2:	0018      	movs	r0, r3
 80005b4:	f001 fd3e 	bl	8002034 <HAL_TIM_PWM_Init>
 80005b8:	1e03      	subs	r3, r0, #0
 80005ba:	d001      	beq.n	80005c0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80005bc:	f000 f946 	bl	800084c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005c0:	2120      	movs	r1, #32
 80005c2:	187b      	adds	r3, r7, r1
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005c8:	187b      	adds	r3, r7, r1
 80005ca:	2200      	movs	r2, #0
 80005cc:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005ce:	187a      	adds	r2, r7, r1
 80005d0:	4b24      	ldr	r3, [pc, #144]	; (8000664 <MX_TIM2_Init+0x100>)
 80005d2:	0011      	movs	r1, r2
 80005d4:	0018      	movs	r0, r3
 80005d6:	f002 f899 	bl	800270c <HAL_TIMEx_MasterConfigSynchronization>
 80005da:	1e03      	subs	r3, r0, #0
 80005dc:	d001      	beq.n	80005e2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80005de:	f000 f935 	bl	800084c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005e2:	1d3b      	adds	r3, r7, #4
 80005e4:	2260      	movs	r2, #96	; 0x60
 80005e6:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80005e8:	1d3b      	adds	r3, r7, #4
 80005ea:	2200      	movs	r2, #0
 80005ec:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005ee:	1d3b      	adds	r3, r7, #4
 80005f0:	2200      	movs	r2, #0
 80005f2:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005f4:	1d3b      	adds	r3, r7, #4
 80005f6:	2200      	movs	r2, #0
 80005f8:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005fa:	1d39      	adds	r1, r7, #4
 80005fc:	4b19      	ldr	r3, [pc, #100]	; (8000664 <MX_TIM2_Init+0x100>)
 80005fe:	2200      	movs	r2, #0
 8000600:	0018      	movs	r0, r3
 8000602:	f001 fd67 	bl	80020d4 <HAL_TIM_PWM_ConfigChannel>
 8000606:	1e03      	subs	r3, r0, #0
 8000608:	d001      	beq.n	800060e <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 800060a:	f000 f91f 	bl	800084c <Error_Handler>
  }
  sConfigOC.Pulse = 375;
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	2278      	movs	r2, #120	; 0x78
 8000612:	32ff      	adds	r2, #255	; 0xff
 8000614:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000616:	1d39      	adds	r1, r7, #4
 8000618:	4b12      	ldr	r3, [pc, #72]	; (8000664 <MX_TIM2_Init+0x100>)
 800061a:	2204      	movs	r2, #4
 800061c:	0018      	movs	r0, r3
 800061e:	f001 fd59 	bl	80020d4 <HAL_TIM_PWM_ConfigChannel>
 8000622:	1e03      	subs	r3, r0, #0
 8000624:	d001      	beq.n	800062a <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 8000626:	f000 f911 	bl	800084c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800062a:	1d39      	adds	r1, r7, #4
 800062c:	4b0d      	ldr	r3, [pc, #52]	; (8000664 <MX_TIM2_Init+0x100>)
 800062e:	2208      	movs	r2, #8
 8000630:	0018      	movs	r0, r3
 8000632:	f001 fd4f 	bl	80020d4 <HAL_TIM_PWM_ConfigChannel>
 8000636:	1e03      	subs	r3, r0, #0
 8000638:	d001      	beq.n	800063e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800063a:	f000 f907 	bl	800084c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800063e:	1d39      	adds	r1, r7, #4
 8000640:	4b08      	ldr	r3, [pc, #32]	; (8000664 <MX_TIM2_Init+0x100>)
 8000642:	220c      	movs	r2, #12
 8000644:	0018      	movs	r0, r3
 8000646:	f001 fd45 	bl	80020d4 <HAL_TIM_PWM_ConfigChannel>
 800064a:	1e03      	subs	r3, r0, #0
 800064c:	d001      	beq.n	8000652 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800064e:	f000 f8fd 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000652:	4b04      	ldr	r3, [pc, #16]	; (8000664 <MX_TIM2_Init+0x100>)
 8000654:	0018      	movs	r0, r3
 8000656:	f000 f9db 	bl	8000a10 <HAL_TIM_MspPostInit>

}
 800065a:	46c0      	nop			; (mov r8, r8)
 800065c:	46bd      	mov	sp, r7
 800065e:	b00a      	add	sp, #40	; 0x28
 8000660:	bd80      	pop	{r7, pc}
 8000662:	46c0      	nop			; (mov r8, r8)
 8000664:	200000f0 	.word	0x200000f0

08000668 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b08a      	sub	sp, #40	; 0x28
 800066c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800066e:	2320      	movs	r3, #32
 8000670:	18fb      	adds	r3, r7, r3
 8000672:	0018      	movs	r0, r3
 8000674:	2308      	movs	r3, #8
 8000676:	001a      	movs	r2, r3
 8000678:	2100      	movs	r1, #0
 800067a:	f002 f8fd 	bl	8002878 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	0018      	movs	r0, r3
 8000682:	231c      	movs	r3, #28
 8000684:	001a      	movs	r2, r3
 8000686:	2100      	movs	r1, #0
 8000688:	f002 f8f6 	bl	8002878 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800068c:	4b34      	ldr	r3, [pc, #208]	; (8000760 <MX_TIM3_Init+0xf8>)
 800068e:	4a35      	ldr	r2, [pc, #212]	; (8000764 <MX_TIM3_Init+0xfc>)
 8000690:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32-1;
 8000692:	4b33      	ldr	r3, [pc, #204]	; (8000760 <MX_TIM3_Init+0xf8>)
 8000694:	221f      	movs	r2, #31
 8000696:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000698:	4b31      	ldr	r3, [pc, #196]	; (8000760 <MX_TIM3_Init+0xf8>)
 800069a:	2200      	movs	r2, #0
 800069c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500-1;
 800069e:	4b30      	ldr	r3, [pc, #192]	; (8000760 <MX_TIM3_Init+0xf8>)
 80006a0:	22f4      	movs	r2, #244	; 0xf4
 80006a2:	32ff      	adds	r2, #255	; 0xff
 80006a4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006a6:	4b2e      	ldr	r3, [pc, #184]	; (8000760 <MX_TIM3_Init+0xf8>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006ac:	4b2c      	ldr	r3, [pc, #176]	; (8000760 <MX_TIM3_Init+0xf8>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80006b2:	4b2b      	ldr	r3, [pc, #172]	; (8000760 <MX_TIM3_Init+0xf8>)
 80006b4:	0018      	movs	r0, r3
 80006b6:	f001 fcbd 	bl	8002034 <HAL_TIM_PWM_Init>
 80006ba:	1e03      	subs	r3, r0, #0
 80006bc:	d001      	beq.n	80006c2 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80006be:	f000 f8c5 	bl	800084c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006c2:	2120      	movs	r1, #32
 80006c4:	187b      	adds	r3, r7, r1
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006ca:	187b      	adds	r3, r7, r1
 80006cc:	2200      	movs	r2, #0
 80006ce:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80006d0:	187a      	adds	r2, r7, r1
 80006d2:	4b23      	ldr	r3, [pc, #140]	; (8000760 <MX_TIM3_Init+0xf8>)
 80006d4:	0011      	movs	r1, r2
 80006d6:	0018      	movs	r0, r3
 80006d8:	f002 f818 	bl	800270c <HAL_TIMEx_MasterConfigSynchronization>
 80006dc:	1e03      	subs	r3, r0, #0
 80006de:	d001      	beq.n	80006e4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80006e0:	f000 f8b4 	bl	800084c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006e4:	1d3b      	adds	r3, r7, #4
 80006e6:	2260      	movs	r2, #96	; 0x60
 80006e8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 375;
 80006ea:	1d3b      	adds	r3, r7, #4
 80006ec:	2278      	movs	r2, #120	; 0x78
 80006ee:	32ff      	adds	r2, #255	; 0xff
 80006f0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	2200      	movs	r2, #0
 80006f6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006f8:	1d3b      	adds	r3, r7, #4
 80006fa:	2200      	movs	r2, #0
 80006fc:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006fe:	1d39      	adds	r1, r7, #4
 8000700:	4b17      	ldr	r3, [pc, #92]	; (8000760 <MX_TIM3_Init+0xf8>)
 8000702:	2200      	movs	r2, #0
 8000704:	0018      	movs	r0, r3
 8000706:	f001 fce5 	bl	80020d4 <HAL_TIM_PWM_ConfigChannel>
 800070a:	1e03      	subs	r3, r0, #0
 800070c:	d001      	beq.n	8000712 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 800070e:	f000 f89d 	bl	800084c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000712:	1d39      	adds	r1, r7, #4
 8000714:	4b12      	ldr	r3, [pc, #72]	; (8000760 <MX_TIM3_Init+0xf8>)
 8000716:	2204      	movs	r2, #4
 8000718:	0018      	movs	r0, r3
 800071a:	f001 fcdb 	bl	80020d4 <HAL_TIM_PWM_ConfigChannel>
 800071e:	1e03      	subs	r3, r0, #0
 8000720:	d001      	beq.n	8000726 <MX_TIM3_Init+0xbe>
  {
    Error_Handler();
 8000722:	f000 f893 	bl	800084c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000726:	1d39      	adds	r1, r7, #4
 8000728:	4b0d      	ldr	r3, [pc, #52]	; (8000760 <MX_TIM3_Init+0xf8>)
 800072a:	2208      	movs	r2, #8
 800072c:	0018      	movs	r0, r3
 800072e:	f001 fcd1 	bl	80020d4 <HAL_TIM_PWM_ConfigChannel>
 8000732:	1e03      	subs	r3, r0, #0
 8000734:	d001      	beq.n	800073a <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 8000736:	f000 f889 	bl	800084c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800073a:	1d39      	adds	r1, r7, #4
 800073c:	4b08      	ldr	r3, [pc, #32]	; (8000760 <MX_TIM3_Init+0xf8>)
 800073e:	220c      	movs	r2, #12
 8000740:	0018      	movs	r0, r3
 8000742:	f001 fcc7 	bl	80020d4 <HAL_TIM_PWM_ConfigChannel>
 8000746:	1e03      	subs	r3, r0, #0
 8000748:	d001      	beq.n	800074e <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 800074a:	f000 f87f 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800074e:	4b04      	ldr	r3, [pc, #16]	; (8000760 <MX_TIM3_Init+0xf8>)
 8000750:	0018      	movs	r0, r3
 8000752:	f000 f95d 	bl	8000a10 <HAL_TIM_MspPostInit>

}
 8000756:	46c0      	nop			; (mov r8, r8)
 8000758:	46bd      	mov	sp, r7
 800075a:	b00a      	add	sp, #40	; 0x28
 800075c:	bd80      	pop	{r7, pc}
 800075e:	46c0      	nop			; (mov r8, r8)
 8000760:	20000138 	.word	0x20000138
 8000764:	40000400 	.word	0x40000400

08000768 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000768:	b590      	push	{r4, r7, lr}
 800076a:	b089      	sub	sp, #36	; 0x24
 800076c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076e:	240c      	movs	r4, #12
 8000770:	193b      	adds	r3, r7, r4
 8000772:	0018      	movs	r0, r3
 8000774:	2314      	movs	r3, #20
 8000776:	001a      	movs	r2, r3
 8000778:	2100      	movs	r1, #0
 800077a:	f002 f87d 	bl	8002878 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077e:	4b1c      	ldr	r3, [pc, #112]	; (80007f0 <MX_GPIO_Init+0x88>)
 8000780:	695a      	ldr	r2, [r3, #20]
 8000782:	4b1b      	ldr	r3, [pc, #108]	; (80007f0 <MX_GPIO_Init+0x88>)
 8000784:	2180      	movs	r1, #128	; 0x80
 8000786:	0289      	lsls	r1, r1, #10
 8000788:	430a      	orrs	r2, r1
 800078a:	615a      	str	r2, [r3, #20]
 800078c:	4b18      	ldr	r3, [pc, #96]	; (80007f0 <MX_GPIO_Init+0x88>)
 800078e:	695a      	ldr	r2, [r3, #20]
 8000790:	2380      	movs	r3, #128	; 0x80
 8000792:	029b      	lsls	r3, r3, #10
 8000794:	4013      	ands	r3, r2
 8000796:	60bb      	str	r3, [r7, #8]
 8000798:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079a:	4b15      	ldr	r3, [pc, #84]	; (80007f0 <MX_GPIO_Init+0x88>)
 800079c:	695a      	ldr	r2, [r3, #20]
 800079e:	4b14      	ldr	r3, [pc, #80]	; (80007f0 <MX_GPIO_Init+0x88>)
 80007a0:	2180      	movs	r1, #128	; 0x80
 80007a2:	02c9      	lsls	r1, r1, #11
 80007a4:	430a      	orrs	r2, r1
 80007a6:	615a      	str	r2, [r3, #20]
 80007a8:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <MX_GPIO_Init+0x88>)
 80007aa:	695a      	ldr	r2, [r3, #20]
 80007ac:	2380      	movs	r3, #128	; 0x80
 80007ae:	02db      	lsls	r3, r3, #11
 80007b0:	4013      	ands	r3, r2
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80007b6:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <MX_GPIO_Init+0x8c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	2140      	movs	r1, #64	; 0x40
 80007bc:	0018      	movs	r0, r3
 80007be:	f000 fd89 	bl	80012d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80007c2:	0021      	movs	r1, r4
 80007c4:	187b      	adds	r3, r7, r1
 80007c6:	2240      	movs	r2, #64	; 0x40
 80007c8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ca:	187b      	adds	r3, r7, r1
 80007cc:	2201      	movs	r2, #1
 80007ce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	187b      	adds	r3, r7, r1
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d6:	187b      	adds	r3, r7, r1
 80007d8:	2200      	movs	r2, #0
 80007da:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007dc:	187b      	adds	r3, r7, r1
 80007de:	4a05      	ldr	r2, [pc, #20]	; (80007f4 <MX_GPIO_Init+0x8c>)
 80007e0:	0019      	movs	r1, r3
 80007e2:	0010      	movs	r0, r2
 80007e4:	f000 fc0e 	bl	8001004 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007e8:	46c0      	nop			; (mov r8, r8)
 80007ea:	46bd      	mov	sp, r7
 80007ec:	b009      	add	sp, #36	; 0x24
 80007ee:	bd90      	pop	{r4, r7, pc}
 80007f0:	40021000 	.word	0x40021000
 80007f4:	48000400 	.word	0x48000400

080007f8 <EnablePWMOutput>:

/* USER CODE BEGIN 4 */

void EnablePWMOutput(TIM_HandleTypeDef *_htim) {
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
	//  Set HAL Timer Channel Status
	TIM_CHANNEL_STATE_SET_ALL(_htim, HAL_TIM_CHANNEL_STATE_BUSY);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	223e      	movs	r2, #62	; 0x3e
 8000804:	2102      	movs	r1, #2
 8000806:	5499      	strb	r1, [r3, r2]
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	223f      	movs	r2, #63	; 0x3f
 800080c:	2102      	movs	r1, #2
 800080e:	5499      	strb	r1, [r3, r2]
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2240      	movs	r2, #64	; 0x40
 8000814:	2102      	movs	r1, #2
 8000816:	5499      	strb	r1, [r3, r2]
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	2241      	movs	r2, #65	; 0x41
 800081c:	2102      	movs	r1, #2
 800081e:	5499      	strb	r1, [r3, r2]

	//  Enable outputs for all 4 PWM Channels
	_htim->Instance->CCER |= (TIM_CCER_CC1E | TIM_CCER_CC2E | TIM_CCER_CC3E | TIM_CCER_CC4E);
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	6a1a      	ldr	r2, [r3, #32]
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4907      	ldr	r1, [pc, #28]	; (8000848 <EnablePWMOutput+0x50>)
 800082c:	430a      	orrs	r2, r1
 800082e:	621a      	str	r2, [r3, #32]

	//  Enable Timer Counter
	_htim->Instance->CR1 |= TIM_CR1_CEN;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	681a      	ldr	r2, [r3, #0]
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	2101      	movs	r1, #1
 800083c:	430a      	orrs	r2, r1
 800083e:	601a      	str	r2, [r3, #0]
}
 8000840:	46c0      	nop			; (mov r8, r8)
 8000842:	46bd      	mov	sp, r7
 8000844:	b002      	add	sp, #8
 8000846:	bd80      	pop	{r7, pc}
 8000848:	00001111 	.word	0x00001111

0800084c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000850:	46c0      	nop			; (mov r8, r8)
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
	...

08000858 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800085e:	4b0f      	ldr	r3, [pc, #60]	; (800089c <HAL_MspInit+0x44>)
 8000860:	699a      	ldr	r2, [r3, #24]
 8000862:	4b0e      	ldr	r3, [pc, #56]	; (800089c <HAL_MspInit+0x44>)
 8000864:	2101      	movs	r1, #1
 8000866:	430a      	orrs	r2, r1
 8000868:	619a      	str	r2, [r3, #24]
 800086a:	4b0c      	ldr	r3, [pc, #48]	; (800089c <HAL_MspInit+0x44>)
 800086c:	699b      	ldr	r3, [r3, #24]
 800086e:	2201      	movs	r2, #1
 8000870:	4013      	ands	r3, r2
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000876:	4b09      	ldr	r3, [pc, #36]	; (800089c <HAL_MspInit+0x44>)
 8000878:	69da      	ldr	r2, [r3, #28]
 800087a:	4b08      	ldr	r3, [pc, #32]	; (800089c <HAL_MspInit+0x44>)
 800087c:	2180      	movs	r1, #128	; 0x80
 800087e:	0549      	lsls	r1, r1, #21
 8000880:	430a      	orrs	r2, r1
 8000882:	61da      	str	r2, [r3, #28]
 8000884:	4b05      	ldr	r3, [pc, #20]	; (800089c <HAL_MspInit+0x44>)
 8000886:	69da      	ldr	r2, [r3, #28]
 8000888:	2380      	movs	r3, #128	; 0x80
 800088a:	055b      	lsls	r3, r3, #21
 800088c:	4013      	ands	r3, r2
 800088e:	603b      	str	r3, [r7, #0]
 8000890:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000892:	46c0      	nop			; (mov r8, r8)
 8000894:	46bd      	mov	sp, r7
 8000896:	b002      	add	sp, #8
 8000898:	bd80      	pop	{r7, pc}
 800089a:	46c0      	nop			; (mov r8, r8)
 800089c:	40021000 	.word	0x40021000

080008a0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a09      	ldr	r2, [pc, #36]	; (80008d4 <HAL_CRC_MspInit+0x34>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d10b      	bne.n	80008ca <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80008b2:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <HAL_CRC_MspInit+0x38>)
 80008b4:	695a      	ldr	r2, [r3, #20]
 80008b6:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <HAL_CRC_MspInit+0x38>)
 80008b8:	2140      	movs	r1, #64	; 0x40
 80008ba:	430a      	orrs	r2, r1
 80008bc:	615a      	str	r2, [r3, #20]
 80008be:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <HAL_CRC_MspInit+0x38>)
 80008c0:	695b      	ldr	r3, [r3, #20]
 80008c2:	2240      	movs	r2, #64	; 0x40
 80008c4:	4013      	ands	r3, r2
 80008c6:	60fb      	str	r3, [r7, #12]
 80008c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80008ca:	46c0      	nop			; (mov r8, r8)
 80008cc:	46bd      	mov	sp, r7
 80008ce:	b004      	add	sp, #16
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	46c0      	nop			; (mov r8, r8)
 80008d4:	40023000 	.word	0x40023000
 80008d8:	40021000 	.word	0x40021000

080008dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80008dc:	b590      	push	{r4, r7, lr}
 80008de:	b08b      	sub	sp, #44	; 0x2c
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e4:	2414      	movs	r4, #20
 80008e6:	193b      	adds	r3, r7, r4
 80008e8:	0018      	movs	r0, r3
 80008ea:	2314      	movs	r3, #20
 80008ec:	001a      	movs	r2, r3
 80008ee:	2100      	movs	r1, #0
 80008f0:	f001 ffc2 	bl	8002878 <memset>
  if(hspi->Instance==SPI1)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a20      	ldr	r2, [pc, #128]	; (800097c <HAL_SPI_MspInit+0xa0>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d13a      	bne.n	8000974 <HAL_SPI_MspInit+0x98>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008fe:	4b20      	ldr	r3, [pc, #128]	; (8000980 <HAL_SPI_MspInit+0xa4>)
 8000900:	699a      	ldr	r2, [r3, #24]
 8000902:	4b1f      	ldr	r3, [pc, #124]	; (8000980 <HAL_SPI_MspInit+0xa4>)
 8000904:	2180      	movs	r1, #128	; 0x80
 8000906:	0149      	lsls	r1, r1, #5
 8000908:	430a      	orrs	r2, r1
 800090a:	619a      	str	r2, [r3, #24]
 800090c:	4b1c      	ldr	r3, [pc, #112]	; (8000980 <HAL_SPI_MspInit+0xa4>)
 800090e:	699a      	ldr	r2, [r3, #24]
 8000910:	2380      	movs	r3, #128	; 0x80
 8000912:	015b      	lsls	r3, r3, #5
 8000914:	4013      	ands	r3, r2
 8000916:	613b      	str	r3, [r7, #16]
 8000918:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800091a:	4b19      	ldr	r3, [pc, #100]	; (8000980 <HAL_SPI_MspInit+0xa4>)
 800091c:	695a      	ldr	r2, [r3, #20]
 800091e:	4b18      	ldr	r3, [pc, #96]	; (8000980 <HAL_SPI_MspInit+0xa4>)
 8000920:	2180      	movs	r1, #128	; 0x80
 8000922:	0289      	lsls	r1, r1, #10
 8000924:	430a      	orrs	r2, r1
 8000926:	615a      	str	r2, [r3, #20]
 8000928:	4b15      	ldr	r3, [pc, #84]	; (8000980 <HAL_SPI_MspInit+0xa4>)
 800092a:	695a      	ldr	r2, [r3, #20]
 800092c:	2380      	movs	r3, #128	; 0x80
 800092e:	029b      	lsls	r3, r3, #10
 8000930:	4013      	ands	r3, r2
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000936:	0021      	movs	r1, r4
 8000938:	187b      	adds	r3, r7, r1
 800093a:	22f0      	movs	r2, #240	; 0xf0
 800093c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093e:	187b      	adds	r3, r7, r1
 8000940:	2202      	movs	r2, #2
 8000942:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	187b      	adds	r3, r7, r1
 8000946:	2200      	movs	r2, #0
 8000948:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800094a:	187b      	adds	r3, r7, r1
 800094c:	2203      	movs	r2, #3
 800094e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000950:	187b      	adds	r3, r7, r1
 8000952:	2200      	movs	r2, #0
 8000954:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000956:	187a      	adds	r2, r7, r1
 8000958:	2390      	movs	r3, #144	; 0x90
 800095a:	05db      	lsls	r3, r3, #23
 800095c:	0011      	movs	r1, r2
 800095e:	0018      	movs	r0, r3
 8000960:	f000 fb50 	bl	8001004 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000964:	2200      	movs	r2, #0
 8000966:	2100      	movs	r1, #0
 8000968:	2019      	movs	r0, #25
 800096a:	f000 fa8d 	bl	8000e88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800096e:	2019      	movs	r0, #25
 8000970:	f000 fa9f 	bl	8000eb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000974:	46c0      	nop			; (mov r8, r8)
 8000976:	46bd      	mov	sp, r7
 8000978:	b00b      	add	sp, #44	; 0x2c
 800097a:	bd90      	pop	{r4, r7, pc}
 800097c:	40013000 	.word	0x40013000
 8000980:	40021000 	.word	0x40021000

08000984 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b086      	sub	sp, #24
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a1c      	ldr	r2, [pc, #112]	; (8000a04 <HAL_TIM_PWM_MspInit+0x80>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d10e      	bne.n	80009b4 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000996:	4b1c      	ldr	r3, [pc, #112]	; (8000a08 <HAL_TIM_PWM_MspInit+0x84>)
 8000998:	699a      	ldr	r2, [r3, #24]
 800099a:	4b1b      	ldr	r3, [pc, #108]	; (8000a08 <HAL_TIM_PWM_MspInit+0x84>)
 800099c:	2180      	movs	r1, #128	; 0x80
 800099e:	0109      	lsls	r1, r1, #4
 80009a0:	430a      	orrs	r2, r1
 80009a2:	619a      	str	r2, [r3, #24]
 80009a4:	4b18      	ldr	r3, [pc, #96]	; (8000a08 <HAL_TIM_PWM_MspInit+0x84>)
 80009a6:	699a      	ldr	r2, [r3, #24]
 80009a8:	2380      	movs	r3, #128	; 0x80
 80009aa:	011b      	lsls	r3, r3, #4
 80009ac:	4013      	ands	r3, r2
 80009ae:	617b      	str	r3, [r7, #20]
 80009b0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80009b2:	e023      	b.n	80009fc <HAL_TIM_PWM_MspInit+0x78>
  else if(htim_pwm->Instance==TIM2)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681a      	ldr	r2, [r3, #0]
 80009b8:	2380      	movs	r3, #128	; 0x80
 80009ba:	05db      	lsls	r3, r3, #23
 80009bc:	429a      	cmp	r2, r3
 80009be:	d10c      	bne.n	80009da <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009c0:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <HAL_TIM_PWM_MspInit+0x84>)
 80009c2:	69da      	ldr	r2, [r3, #28]
 80009c4:	4b10      	ldr	r3, [pc, #64]	; (8000a08 <HAL_TIM_PWM_MspInit+0x84>)
 80009c6:	2101      	movs	r1, #1
 80009c8:	430a      	orrs	r2, r1
 80009ca:	61da      	str	r2, [r3, #28]
 80009cc:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <HAL_TIM_PWM_MspInit+0x84>)
 80009ce:	69db      	ldr	r3, [r3, #28]
 80009d0:	2201      	movs	r2, #1
 80009d2:	4013      	ands	r3, r2
 80009d4:	613b      	str	r3, [r7, #16]
 80009d6:	693b      	ldr	r3, [r7, #16]
}
 80009d8:	e010      	b.n	80009fc <HAL_TIM_PWM_MspInit+0x78>
  else if(htim_pwm->Instance==TIM3)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4a0b      	ldr	r2, [pc, #44]	; (8000a0c <HAL_TIM_PWM_MspInit+0x88>)
 80009e0:	4293      	cmp	r3, r2
 80009e2:	d10b      	bne.n	80009fc <HAL_TIM_PWM_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80009e4:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <HAL_TIM_PWM_MspInit+0x84>)
 80009e6:	69da      	ldr	r2, [r3, #28]
 80009e8:	4b07      	ldr	r3, [pc, #28]	; (8000a08 <HAL_TIM_PWM_MspInit+0x84>)
 80009ea:	2102      	movs	r1, #2
 80009ec:	430a      	orrs	r2, r1
 80009ee:	61da      	str	r2, [r3, #28]
 80009f0:	4b05      	ldr	r3, [pc, #20]	; (8000a08 <HAL_TIM_PWM_MspInit+0x84>)
 80009f2:	69db      	ldr	r3, [r3, #28]
 80009f4:	2202      	movs	r2, #2
 80009f6:	4013      	ands	r3, r2
 80009f8:	60fb      	str	r3, [r7, #12]
 80009fa:	68fb      	ldr	r3, [r7, #12]
}
 80009fc:	46c0      	nop			; (mov r8, r8)
 80009fe:	46bd      	mov	sp, r7
 8000a00:	b006      	add	sp, #24
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	40012c00 	.word	0x40012c00
 8000a08:	40021000 	.word	0x40021000
 8000a0c:	40000400 	.word	0x40000400

08000a10 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a10:	b590      	push	{r4, r7, lr}
 8000a12:	b08b      	sub	sp, #44	; 0x2c
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a18:	2414      	movs	r4, #20
 8000a1a:	193b      	adds	r3, r7, r4
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	2314      	movs	r3, #20
 8000a20:	001a      	movs	r2, r3
 8000a22:	2100      	movs	r1, #0
 8000a24:	f001 ff28 	bl	8002878 <memset>
  if(htim->Instance==TIM1)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a41      	ldr	r2, [pc, #260]	; (8000b34 <HAL_TIM_MspPostInit+0x124>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d126      	bne.n	8000a80 <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a32:	4b41      	ldr	r3, [pc, #260]	; (8000b38 <HAL_TIM_MspPostInit+0x128>)
 8000a34:	695a      	ldr	r2, [r3, #20]
 8000a36:	4b40      	ldr	r3, [pc, #256]	; (8000b38 <HAL_TIM_MspPostInit+0x128>)
 8000a38:	2180      	movs	r1, #128	; 0x80
 8000a3a:	0289      	lsls	r1, r1, #10
 8000a3c:	430a      	orrs	r2, r1
 8000a3e:	615a      	str	r2, [r3, #20]
 8000a40:	4b3d      	ldr	r3, [pc, #244]	; (8000b38 <HAL_TIM_MspPostInit+0x128>)
 8000a42:	695a      	ldr	r2, [r3, #20]
 8000a44:	2380      	movs	r3, #128	; 0x80
 8000a46:	029b      	lsls	r3, r3, #10
 8000a48:	4013      	ands	r3, r2
 8000a4a:	613b      	str	r3, [r7, #16]
 8000a4c:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000a4e:	193b      	adds	r3, r7, r4
 8000a50:	22f0      	movs	r2, #240	; 0xf0
 8000a52:	0112      	lsls	r2, r2, #4
 8000a54:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a56:	0021      	movs	r1, r4
 8000a58:	187b      	adds	r3, r7, r1
 8000a5a:	2202      	movs	r2, #2
 8000a5c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	187b      	adds	r3, r7, r1
 8000a60:	2200      	movs	r2, #0
 8000a62:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a64:	187b      	adds	r3, r7, r1
 8000a66:	2200      	movs	r2, #0
 8000a68:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000a6a:	187b      	adds	r3, r7, r1
 8000a6c:	2202      	movs	r2, #2
 8000a6e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a70:	187a      	adds	r2, r7, r1
 8000a72:	2390      	movs	r3, #144	; 0x90
 8000a74:	05db      	lsls	r3, r3, #23
 8000a76:	0011      	movs	r1, r2
 8000a78:	0018      	movs	r0, r3
 8000a7a:	f000 fac3 	bl	8001004 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000a7e:	e054      	b.n	8000b2a <HAL_TIM_MspPostInit+0x11a>
  else if(htim->Instance==TIM2)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	2380      	movs	r3, #128	; 0x80
 8000a86:	05db      	lsls	r3, r3, #23
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	d125      	bne.n	8000ad8 <HAL_TIM_MspPostInit+0xc8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8c:	4b2a      	ldr	r3, [pc, #168]	; (8000b38 <HAL_TIM_MspPostInit+0x128>)
 8000a8e:	695a      	ldr	r2, [r3, #20]
 8000a90:	4b29      	ldr	r3, [pc, #164]	; (8000b38 <HAL_TIM_MspPostInit+0x128>)
 8000a92:	2180      	movs	r1, #128	; 0x80
 8000a94:	0289      	lsls	r1, r1, #10
 8000a96:	430a      	orrs	r2, r1
 8000a98:	615a      	str	r2, [r3, #20]
 8000a9a:	4b27      	ldr	r3, [pc, #156]	; (8000b38 <HAL_TIM_MspPostInit+0x128>)
 8000a9c:	695a      	ldr	r2, [r3, #20]
 8000a9e:	2380      	movs	r3, #128	; 0x80
 8000aa0:	029b      	lsls	r3, r3, #10
 8000aa2:	4013      	ands	r3, r2
 8000aa4:	60fb      	str	r3, [r7, #12]
 8000aa6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000aa8:	2114      	movs	r1, #20
 8000aaa:	187b      	adds	r3, r7, r1
 8000aac:	220f      	movs	r2, #15
 8000aae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab0:	187b      	adds	r3, r7, r1
 8000ab2:	2202      	movs	r2, #2
 8000ab4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	187b      	adds	r3, r7, r1
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abc:	187b      	adds	r3, r7, r1
 8000abe:	2200      	movs	r2, #0
 8000ac0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000ac2:	187b      	adds	r3, r7, r1
 8000ac4:	2202      	movs	r2, #2
 8000ac6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac8:	187a      	adds	r2, r7, r1
 8000aca:	2390      	movs	r3, #144	; 0x90
 8000acc:	05db      	lsls	r3, r3, #23
 8000ace:	0011      	movs	r1, r2
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	f000 fa97 	bl	8001004 <HAL_GPIO_Init>
}
 8000ad6:	e028      	b.n	8000b2a <HAL_TIM_MspPostInit+0x11a>
  else if(htim->Instance==TIM3)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a17      	ldr	r2, [pc, #92]	; (8000b3c <HAL_TIM_MspPostInit+0x12c>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d123      	bne.n	8000b2a <HAL_TIM_MspPostInit+0x11a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae2:	4b15      	ldr	r3, [pc, #84]	; (8000b38 <HAL_TIM_MspPostInit+0x128>)
 8000ae4:	695a      	ldr	r2, [r3, #20]
 8000ae6:	4b14      	ldr	r3, [pc, #80]	; (8000b38 <HAL_TIM_MspPostInit+0x128>)
 8000ae8:	2180      	movs	r1, #128	; 0x80
 8000aea:	02c9      	lsls	r1, r1, #11
 8000aec:	430a      	orrs	r2, r1
 8000aee:	615a      	str	r2, [r3, #20]
 8000af0:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <HAL_TIM_MspPostInit+0x128>)
 8000af2:	695a      	ldr	r2, [r3, #20]
 8000af4:	2380      	movs	r3, #128	; 0x80
 8000af6:	02db      	lsls	r3, r3, #11
 8000af8:	4013      	ands	r3, r2
 8000afa:	60bb      	str	r3, [r7, #8]
 8000afc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000afe:	2114      	movs	r1, #20
 8000b00:	187b      	adds	r3, r7, r1
 8000b02:	2233      	movs	r2, #51	; 0x33
 8000b04:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b06:	187b      	adds	r3, r7, r1
 8000b08:	2202      	movs	r2, #2
 8000b0a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	187b      	adds	r3, r7, r1
 8000b0e:	2200      	movs	r2, #0
 8000b10:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b12:	187b      	adds	r3, r7, r1
 8000b14:	2200      	movs	r2, #0
 8000b16:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000b18:	187b      	adds	r3, r7, r1
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b1e:	187b      	adds	r3, r7, r1
 8000b20:	4a07      	ldr	r2, [pc, #28]	; (8000b40 <HAL_TIM_MspPostInit+0x130>)
 8000b22:	0019      	movs	r1, r3
 8000b24:	0010      	movs	r0, r2
 8000b26:	f000 fa6d 	bl	8001004 <HAL_GPIO_Init>
}
 8000b2a:	46c0      	nop			; (mov r8, r8)
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	b00b      	add	sp, #44	; 0x2c
 8000b30:	bd90      	pop	{r4, r7, pc}
 8000b32:	46c0      	nop			; (mov r8, r8)
 8000b34:	40012c00 	.word	0x40012c00
 8000b38:	40021000 	.word	0x40021000
 8000b3c:	40000400 	.word	0x40000400
 8000b40:	48000400 	.word	0x48000400

08000b44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b48:	46c0      	nop			; (mov r8, r8)
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b52:	e7fe      	b.n	8000b52 <HardFault_Handler+0x4>

08000b54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b58:	46c0      	nop			; (mov r8, r8)
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b62:	46c0      	nop			; (mov r8, r8)
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b6c:	f000 f8a0 	bl	8000cb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b70:	46c0      	nop			; (mov r8, r8)
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
	...

08000b78 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000b7c:	4b03      	ldr	r3, [pc, #12]	; (8000b8c <SPI1_IRQHandler+0x14>)
 8000b7e:	0018      	movs	r0, r3
 8000b80:	f001 f950 	bl	8001e24 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000b84:	46c0      	nop			; (mov r8, r8)
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	46c0      	nop			; (mov r8, r8)
 8000b8c:	20000044 	.word	0x20000044

08000b90 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000b94:	46c0      	nop			; (mov r8, r8)
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
	...

08000b9c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b9c:	4813      	ldr	r0, [pc, #76]	; (8000bec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b9e:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8000ba0:	4813      	ldr	r0, [pc, #76]	; (8000bf0 <LoopForever+0x6>)
    LDR R1, [R0]
 8000ba2:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000ba4:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000ba6:	4a13      	ldr	r2, [pc, #76]	; (8000bf4 <LoopForever+0xa>)
    CMP R1, R2
 8000ba8:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000baa:	d105      	bne.n	8000bb8 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000bac:	4812      	ldr	r0, [pc, #72]	; (8000bf8 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000bae:	4913      	ldr	r1, [pc, #76]	; (8000bfc <LoopForever+0x12>)
    STR R1, [R0]
 8000bb0:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000bb2:	4813      	ldr	r0, [pc, #76]	; (8000c00 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000bb4:	4913      	ldr	r1, [pc, #76]	; (8000c04 <LoopForever+0x1a>)
    STR R1, [R0]
 8000bb6:	6001      	str	r1, [r0, #0]

08000bb8 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bb8:	4813      	ldr	r0, [pc, #76]	; (8000c08 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000bba:	4914      	ldr	r1, [pc, #80]	; (8000c0c <LoopForever+0x22>)
  ldr r2, =_sidata
 8000bbc:	4a14      	ldr	r2, [pc, #80]	; (8000c10 <LoopForever+0x26>)
  movs r3, #0
 8000bbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bc0:	e002      	b.n	8000bc8 <LoopCopyDataInit>

08000bc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bc6:	3304      	adds	r3, #4

08000bc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bcc:	d3f9      	bcc.n	8000bc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bce:	4a11      	ldr	r2, [pc, #68]	; (8000c14 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000bd0:	4c11      	ldr	r4, [pc, #68]	; (8000c18 <LoopForever+0x2e>)
  movs r3, #0
 8000bd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd4:	e001      	b.n	8000bda <LoopFillZerobss>

08000bd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd8:	3204      	adds	r2, #4

08000bda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bdc:	d3fb      	bcc.n	8000bd6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000bde:	f7ff ffd7 	bl	8000b90 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000be2:	f001 fe51 	bl	8002888 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000be6:	f7ff fb1b 	bl	8000220 <main>

08000bea <LoopForever>:

LoopForever:
    b LoopForever
 8000bea:	e7fe      	b.n	8000bea <LoopForever>
  ldr   r0, =_estack
 8000bec:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000bf0:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000bf4:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000bf8:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000bfc:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000c00:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000c04:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000c08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c0c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c10:	08002920 	.word	0x08002920
  ldr r2, =_sbss
 8000c14:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c18:	20000188 	.word	0x20000188

08000c1c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c1c:	e7fe      	b.n	8000c1c <ADC1_IRQHandler>
	...

08000c20 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c24:	4b07      	ldr	r3, [pc, #28]	; (8000c44 <HAL_Init+0x24>)
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <HAL_Init+0x24>)
 8000c2a:	2110      	movs	r1, #16
 8000c2c:	430a      	orrs	r2, r1
 8000c2e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000c30:	2003      	movs	r0, #3
 8000c32:	f000 f809 	bl	8000c48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c36:	f7ff fe0f 	bl	8000858 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c3a:	2300      	movs	r3, #0
}
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	46c0      	nop			; (mov r8, r8)
 8000c44:	40022000 	.word	0x40022000

08000c48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c48:	b590      	push	{r4, r7, lr}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c50:	4b14      	ldr	r3, [pc, #80]	; (8000ca4 <HAL_InitTick+0x5c>)
 8000c52:	681c      	ldr	r4, [r3, #0]
 8000c54:	4b14      	ldr	r3, [pc, #80]	; (8000ca8 <HAL_InitTick+0x60>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	0019      	movs	r1, r3
 8000c5a:	23fa      	movs	r3, #250	; 0xfa
 8000c5c:	0098      	lsls	r0, r3, #2
 8000c5e:	f7ff fa53 	bl	8000108 <__udivsi3>
 8000c62:	0003      	movs	r3, r0
 8000c64:	0019      	movs	r1, r3
 8000c66:	0020      	movs	r0, r4
 8000c68:	f7ff fa4e 	bl	8000108 <__udivsi3>
 8000c6c:	0003      	movs	r3, r0
 8000c6e:	0018      	movs	r0, r3
 8000c70:	f000 f92f 	bl	8000ed2 <HAL_SYSTICK_Config>
 8000c74:	1e03      	subs	r3, r0, #0
 8000c76:	d001      	beq.n	8000c7c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	e00f      	b.n	8000c9c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2b03      	cmp	r3, #3
 8000c80:	d80b      	bhi.n	8000c9a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c82:	6879      	ldr	r1, [r7, #4]
 8000c84:	2301      	movs	r3, #1
 8000c86:	425b      	negs	r3, r3
 8000c88:	2200      	movs	r2, #0
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	f000 f8fc 	bl	8000e88 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <HAL_InitTick+0x64>)
 8000c92:	687a      	ldr	r2, [r7, #4]
 8000c94:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000c96:	2300      	movs	r3, #0
 8000c98:	e000      	b.n	8000c9c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000c9a:	2301      	movs	r3, #1
}
 8000c9c:	0018      	movs	r0, r3
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	b003      	add	sp, #12
 8000ca2:	bd90      	pop	{r4, r7, pc}
 8000ca4:	20000000 	.word	0x20000000
 8000ca8:	20000008 	.word	0x20000008
 8000cac:	20000004 	.word	0x20000004

08000cb0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cb4:	4b05      	ldr	r3, [pc, #20]	; (8000ccc <HAL_IncTick+0x1c>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	001a      	movs	r2, r3
 8000cba:	4b05      	ldr	r3, [pc, #20]	; (8000cd0 <HAL_IncTick+0x20>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	18d2      	adds	r2, r2, r3
 8000cc0:	4b03      	ldr	r3, [pc, #12]	; (8000cd0 <HAL_IncTick+0x20>)
 8000cc2:	601a      	str	r2, [r3, #0]
}
 8000cc4:	46c0      	nop			; (mov r8, r8)
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	46c0      	nop			; (mov r8, r8)
 8000ccc:	20000008 	.word	0x20000008
 8000cd0:	20000184 	.word	0x20000184

08000cd4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cd8:	4b02      	ldr	r3, [pc, #8]	; (8000ce4 <HAL_GetTick+0x10>)
 8000cda:	681b      	ldr	r3, [r3, #0]
}
 8000cdc:	0018      	movs	r0, r3
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	46c0      	nop			; (mov r8, r8)
 8000ce4:	20000184 	.word	0x20000184

08000ce8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cf0:	f7ff fff0 	bl	8000cd4 <HAL_GetTick>
 8000cf4:	0003      	movs	r3, r0
 8000cf6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	d005      	beq.n	8000d0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d02:	4b0a      	ldr	r3, [pc, #40]	; (8000d2c <HAL_Delay+0x44>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	001a      	movs	r2, r3
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	189b      	adds	r3, r3, r2
 8000d0c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000d0e:	46c0      	nop			; (mov r8, r8)
 8000d10:	f7ff ffe0 	bl	8000cd4 <HAL_GetTick>
 8000d14:	0002      	movs	r2, r0
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	1ad3      	subs	r3, r2, r3
 8000d1a:	68fa      	ldr	r2, [r7, #12]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	d8f7      	bhi.n	8000d10 <HAL_Delay+0x28>
  {
  }
}
 8000d20:	46c0      	nop			; (mov r8, r8)
 8000d22:	46c0      	nop			; (mov r8, r8)
 8000d24:	46bd      	mov	sp, r7
 8000d26:	b004      	add	sp, #16
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	46c0      	nop			; (mov r8, r8)
 8000d2c:	20000008 	.word	0x20000008

08000d30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	0002      	movs	r2, r0
 8000d38:	1dfb      	adds	r3, r7, #7
 8000d3a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d3c:	1dfb      	adds	r3, r7, #7
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	2b7f      	cmp	r3, #127	; 0x7f
 8000d42:	d809      	bhi.n	8000d58 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d44:	1dfb      	adds	r3, r7, #7
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	001a      	movs	r2, r3
 8000d4a:	231f      	movs	r3, #31
 8000d4c:	401a      	ands	r2, r3
 8000d4e:	4b04      	ldr	r3, [pc, #16]	; (8000d60 <__NVIC_EnableIRQ+0x30>)
 8000d50:	2101      	movs	r1, #1
 8000d52:	4091      	lsls	r1, r2
 8000d54:	000a      	movs	r2, r1
 8000d56:	601a      	str	r2, [r3, #0]
  }
}
 8000d58:	46c0      	nop			; (mov r8, r8)
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	b002      	add	sp, #8
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	e000e100 	.word	0xe000e100

08000d64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d64:	b590      	push	{r4, r7, lr}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	0002      	movs	r2, r0
 8000d6c:	6039      	str	r1, [r7, #0]
 8000d6e:	1dfb      	adds	r3, r7, #7
 8000d70:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d72:	1dfb      	adds	r3, r7, #7
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	2b7f      	cmp	r3, #127	; 0x7f
 8000d78:	d828      	bhi.n	8000dcc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d7a:	4a2f      	ldr	r2, [pc, #188]	; (8000e38 <__NVIC_SetPriority+0xd4>)
 8000d7c:	1dfb      	adds	r3, r7, #7
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	b25b      	sxtb	r3, r3
 8000d82:	089b      	lsrs	r3, r3, #2
 8000d84:	33c0      	adds	r3, #192	; 0xc0
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	589b      	ldr	r3, [r3, r2]
 8000d8a:	1dfa      	adds	r2, r7, #7
 8000d8c:	7812      	ldrb	r2, [r2, #0]
 8000d8e:	0011      	movs	r1, r2
 8000d90:	2203      	movs	r2, #3
 8000d92:	400a      	ands	r2, r1
 8000d94:	00d2      	lsls	r2, r2, #3
 8000d96:	21ff      	movs	r1, #255	; 0xff
 8000d98:	4091      	lsls	r1, r2
 8000d9a:	000a      	movs	r2, r1
 8000d9c:	43d2      	mvns	r2, r2
 8000d9e:	401a      	ands	r2, r3
 8000da0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	019b      	lsls	r3, r3, #6
 8000da6:	22ff      	movs	r2, #255	; 0xff
 8000da8:	401a      	ands	r2, r3
 8000daa:	1dfb      	adds	r3, r7, #7
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	0018      	movs	r0, r3
 8000db0:	2303      	movs	r3, #3
 8000db2:	4003      	ands	r3, r0
 8000db4:	00db      	lsls	r3, r3, #3
 8000db6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000db8:	481f      	ldr	r0, [pc, #124]	; (8000e38 <__NVIC_SetPriority+0xd4>)
 8000dba:	1dfb      	adds	r3, r7, #7
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	b25b      	sxtb	r3, r3
 8000dc0:	089b      	lsrs	r3, r3, #2
 8000dc2:	430a      	orrs	r2, r1
 8000dc4:	33c0      	adds	r3, #192	; 0xc0
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000dca:	e031      	b.n	8000e30 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dcc:	4a1b      	ldr	r2, [pc, #108]	; (8000e3c <__NVIC_SetPriority+0xd8>)
 8000dce:	1dfb      	adds	r3, r7, #7
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	0019      	movs	r1, r3
 8000dd4:	230f      	movs	r3, #15
 8000dd6:	400b      	ands	r3, r1
 8000dd8:	3b08      	subs	r3, #8
 8000dda:	089b      	lsrs	r3, r3, #2
 8000ddc:	3306      	adds	r3, #6
 8000dde:	009b      	lsls	r3, r3, #2
 8000de0:	18d3      	adds	r3, r2, r3
 8000de2:	3304      	adds	r3, #4
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	1dfa      	adds	r2, r7, #7
 8000de8:	7812      	ldrb	r2, [r2, #0]
 8000dea:	0011      	movs	r1, r2
 8000dec:	2203      	movs	r2, #3
 8000dee:	400a      	ands	r2, r1
 8000df0:	00d2      	lsls	r2, r2, #3
 8000df2:	21ff      	movs	r1, #255	; 0xff
 8000df4:	4091      	lsls	r1, r2
 8000df6:	000a      	movs	r2, r1
 8000df8:	43d2      	mvns	r2, r2
 8000dfa:	401a      	ands	r2, r3
 8000dfc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	019b      	lsls	r3, r3, #6
 8000e02:	22ff      	movs	r2, #255	; 0xff
 8000e04:	401a      	ands	r2, r3
 8000e06:	1dfb      	adds	r3, r7, #7
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	0018      	movs	r0, r3
 8000e0c:	2303      	movs	r3, #3
 8000e0e:	4003      	ands	r3, r0
 8000e10:	00db      	lsls	r3, r3, #3
 8000e12:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e14:	4809      	ldr	r0, [pc, #36]	; (8000e3c <__NVIC_SetPriority+0xd8>)
 8000e16:	1dfb      	adds	r3, r7, #7
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	001c      	movs	r4, r3
 8000e1c:	230f      	movs	r3, #15
 8000e1e:	4023      	ands	r3, r4
 8000e20:	3b08      	subs	r3, #8
 8000e22:	089b      	lsrs	r3, r3, #2
 8000e24:	430a      	orrs	r2, r1
 8000e26:	3306      	adds	r3, #6
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	18c3      	adds	r3, r0, r3
 8000e2c:	3304      	adds	r3, #4
 8000e2e:	601a      	str	r2, [r3, #0]
}
 8000e30:	46c0      	nop			; (mov r8, r8)
 8000e32:	46bd      	mov	sp, r7
 8000e34:	b003      	add	sp, #12
 8000e36:	bd90      	pop	{r4, r7, pc}
 8000e38:	e000e100 	.word	0xe000e100
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	1e5a      	subs	r2, r3, #1
 8000e4c:	2380      	movs	r3, #128	; 0x80
 8000e4e:	045b      	lsls	r3, r3, #17
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d301      	bcc.n	8000e58 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e54:	2301      	movs	r3, #1
 8000e56:	e010      	b.n	8000e7a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e58:	4b0a      	ldr	r3, [pc, #40]	; (8000e84 <SysTick_Config+0x44>)
 8000e5a:	687a      	ldr	r2, [r7, #4]
 8000e5c:	3a01      	subs	r2, #1
 8000e5e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e60:	2301      	movs	r3, #1
 8000e62:	425b      	negs	r3, r3
 8000e64:	2103      	movs	r1, #3
 8000e66:	0018      	movs	r0, r3
 8000e68:	f7ff ff7c 	bl	8000d64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e6c:	4b05      	ldr	r3, [pc, #20]	; (8000e84 <SysTick_Config+0x44>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e72:	4b04      	ldr	r3, [pc, #16]	; (8000e84 <SysTick_Config+0x44>)
 8000e74:	2207      	movs	r2, #7
 8000e76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e78:	2300      	movs	r3, #0
}
 8000e7a:	0018      	movs	r0, r3
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	b002      	add	sp, #8
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	46c0      	nop			; (mov r8, r8)
 8000e84:	e000e010 	.word	0xe000e010

08000e88 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	60b9      	str	r1, [r7, #8]
 8000e90:	607a      	str	r2, [r7, #4]
 8000e92:	210f      	movs	r1, #15
 8000e94:	187b      	adds	r3, r7, r1
 8000e96:	1c02      	adds	r2, r0, #0
 8000e98:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000e9a:	68ba      	ldr	r2, [r7, #8]
 8000e9c:	187b      	adds	r3, r7, r1
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	b25b      	sxtb	r3, r3
 8000ea2:	0011      	movs	r1, r2
 8000ea4:	0018      	movs	r0, r3
 8000ea6:	f7ff ff5d 	bl	8000d64 <__NVIC_SetPriority>
}
 8000eaa:	46c0      	nop			; (mov r8, r8)
 8000eac:	46bd      	mov	sp, r7
 8000eae:	b004      	add	sp, #16
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b082      	sub	sp, #8
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	0002      	movs	r2, r0
 8000eba:	1dfb      	adds	r3, r7, #7
 8000ebc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ebe:	1dfb      	adds	r3, r7, #7
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	b25b      	sxtb	r3, r3
 8000ec4:	0018      	movs	r0, r3
 8000ec6:	f7ff ff33 	bl	8000d30 <__NVIC_EnableIRQ>
}
 8000eca:	46c0      	nop			; (mov r8, r8)
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	b002      	add	sp, #8
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b082      	sub	sp, #8
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	0018      	movs	r0, r3
 8000ede:	f7ff ffaf 	bl	8000e40 <SysTick_Config>
 8000ee2:	0003      	movs	r3, r0
}
 8000ee4:	0018      	movs	r0, r3
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	b002      	add	sp, #8
 8000eea:	bd80      	pop	{r7, pc}

08000eec <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d101      	bne.n	8000efe <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	e039      	b.n	8000f72 <HAL_CRC_Init+0x86>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	7d5b      	ldrb	r3, [r3, #21]
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d106      	bne.n	8000f16 <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	751a      	strb	r2, [r3, #20]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	0018      	movs	r0, r3
 8000f12:	f7ff fcc5 	bl	80008a0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2202      	movs	r2, #2
 8000f1a:	755a      	strb	r2, [r3, #21]
#endif /* CRC_POL_POL */

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	791b      	ldrb	r3, [r3, #4]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d105      	bne.n	8000f30 <HAL_CRC_Init+0x44>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2201      	movs	r2, #1
 8000f2a:	4252      	negs	r2, r2
 8000f2c:	611a      	str	r2, [r3, #16]
 8000f2e:	e004      	b.n	8000f3a <HAL_CRC_Init+0x4e>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	687a      	ldr	r2, [r7, #4]
 8000f36:	6892      	ldr	r2, [r2, #8]
 8000f38:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	689b      	ldr	r3, [r3, #8]
 8000f40:	2260      	movs	r2, #96	; 0x60
 8000f42:	4393      	bics	r3, r2
 8000f44:	0019      	movs	r1, r3
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	68da      	ldr	r2, [r3, #12]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	430a      	orrs	r2, r1
 8000f50:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	2280      	movs	r2, #128	; 0x80
 8000f5a:	4393      	bics	r3, r2
 8000f5c:	0019      	movs	r1, r3
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	691a      	ldr	r2, [r3, #16]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	430a      	orrs	r2, r1
 8000f68:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	755a      	strb	r2, [r3, #21]

  /* Return function status */
  return HAL_OK;
 8000f70:	2300      	movs	r3, #0
}
 8000f72:	0018      	movs	r0, r3
 8000f74:	46bd      	mov	sp, r7
 8000f76:	b002      	add	sp, #8
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b084      	sub	sp, #16
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f82:	210f      	movs	r1, #15
 8000f84:	187b      	adds	r3, r7, r1
 8000f86:	2200      	movs	r2, #0
 8000f88:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2221      	movs	r2, #33	; 0x21
 8000f8e:	5c9b      	ldrb	r3, [r3, r2]
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	2b02      	cmp	r3, #2
 8000f94:	d006      	beq.n	8000fa4 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2204      	movs	r2, #4
 8000f9a:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8000f9c:	187b      	adds	r3, r7, r1
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	701a      	strb	r2, [r3, #0]
 8000fa2:	e028      	b.n	8000ff6 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	210e      	movs	r1, #14
 8000fb0:	438a      	bics	r2, r1
 8000fb2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	2101      	movs	r1, #1
 8000fc0:	438a      	bics	r2, r1
 8000fc2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fcc:	2101      	movs	r1, #1
 8000fce:	4091      	lsls	r1, r2
 8000fd0:	000a      	movs	r2, r1
 8000fd2:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2221      	movs	r2, #33	; 0x21
 8000fd8:	2101      	movs	r1, #1
 8000fda:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2220      	movs	r2, #32
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d004      	beq.n	8000ff6 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ff0:	687a      	ldr	r2, [r7, #4]
 8000ff2:	0010      	movs	r0, r2
 8000ff4:	4798      	blx	r3
    }
  }
  return status;
 8000ff6:	230f      	movs	r3, #15
 8000ff8:	18fb      	adds	r3, r7, r3
 8000ffa:	781b      	ldrb	r3, [r3, #0]
}
 8000ffc:	0018      	movs	r0, r3
 8000ffe:	46bd      	mov	sp, r7
 8001000:	b004      	add	sp, #16
 8001002:	bd80      	pop	{r7, pc}

08001004 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800100e:	2300      	movs	r3, #0
 8001010:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001012:	e149      	b.n	80012a8 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2101      	movs	r1, #1
 800101a:	697a      	ldr	r2, [r7, #20]
 800101c:	4091      	lsls	r1, r2
 800101e:	000a      	movs	r2, r1
 8001020:	4013      	ands	r3, r2
 8001022:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d100      	bne.n	800102c <HAL_GPIO_Init+0x28>
 800102a:	e13a      	b.n	80012a2 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	2203      	movs	r2, #3
 8001032:	4013      	ands	r3, r2
 8001034:	2b01      	cmp	r3, #1
 8001036:	d005      	beq.n	8001044 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	2203      	movs	r2, #3
 800103e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001040:	2b02      	cmp	r3, #2
 8001042:	d130      	bne.n	80010a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	2203      	movs	r2, #3
 8001050:	409a      	lsls	r2, r3
 8001052:	0013      	movs	r3, r2
 8001054:	43da      	mvns	r2, r3
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	4013      	ands	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	68da      	ldr	r2, [r3, #12]
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	409a      	lsls	r2, r3
 8001066:	0013      	movs	r3, r2
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	4313      	orrs	r3, r2
 800106c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	693a      	ldr	r2, [r7, #16]
 8001072:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800107a:	2201      	movs	r2, #1
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	409a      	lsls	r2, r3
 8001080:	0013      	movs	r3, r2
 8001082:	43da      	mvns	r2, r3
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	4013      	ands	r3, r2
 8001088:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	091b      	lsrs	r3, r3, #4
 8001090:	2201      	movs	r2, #1
 8001092:	401a      	ands	r2, r3
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	409a      	lsls	r2, r3
 8001098:	0013      	movs	r3, r2
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	4313      	orrs	r3, r2
 800109e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	2203      	movs	r2, #3
 80010ac:	4013      	ands	r3, r2
 80010ae:	2b03      	cmp	r3, #3
 80010b0:	d017      	beq.n	80010e2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	68db      	ldr	r3, [r3, #12]
 80010b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	2203      	movs	r2, #3
 80010be:	409a      	lsls	r2, r3
 80010c0:	0013      	movs	r3, r2
 80010c2:	43da      	mvns	r2, r3
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	4013      	ands	r3, r2
 80010c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	689a      	ldr	r2, [r3, #8]
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	409a      	lsls	r2, r3
 80010d4:	0013      	movs	r3, r2
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	4313      	orrs	r3, r2
 80010da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	2203      	movs	r2, #3
 80010e8:	4013      	ands	r3, r2
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d123      	bne.n	8001136 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	08da      	lsrs	r2, r3, #3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	3208      	adds	r2, #8
 80010f6:	0092      	lsls	r2, r2, #2
 80010f8:	58d3      	ldr	r3, [r2, r3]
 80010fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	2207      	movs	r2, #7
 8001100:	4013      	ands	r3, r2
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	220f      	movs	r2, #15
 8001106:	409a      	lsls	r2, r3
 8001108:	0013      	movs	r3, r2
 800110a:	43da      	mvns	r2, r3
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	4013      	ands	r3, r2
 8001110:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	691a      	ldr	r2, [r3, #16]
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	2107      	movs	r1, #7
 800111a:	400b      	ands	r3, r1
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	409a      	lsls	r2, r3
 8001120:	0013      	movs	r3, r2
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	4313      	orrs	r3, r2
 8001126:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	08da      	lsrs	r2, r3, #3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	3208      	adds	r2, #8
 8001130:	0092      	lsls	r2, r2, #2
 8001132:	6939      	ldr	r1, [r7, #16]
 8001134:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	2203      	movs	r2, #3
 8001142:	409a      	lsls	r2, r3
 8001144:	0013      	movs	r3, r2
 8001146:	43da      	mvns	r2, r3
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	4013      	ands	r3, r2
 800114c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	2203      	movs	r2, #3
 8001154:	401a      	ands	r2, r3
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	409a      	lsls	r2, r3
 800115c:	0013      	movs	r3, r2
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	4313      	orrs	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685a      	ldr	r2, [r3, #4]
 800116e:	23c0      	movs	r3, #192	; 0xc0
 8001170:	029b      	lsls	r3, r3, #10
 8001172:	4013      	ands	r3, r2
 8001174:	d100      	bne.n	8001178 <HAL_GPIO_Init+0x174>
 8001176:	e094      	b.n	80012a2 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001178:	4b51      	ldr	r3, [pc, #324]	; (80012c0 <HAL_GPIO_Init+0x2bc>)
 800117a:	699a      	ldr	r2, [r3, #24]
 800117c:	4b50      	ldr	r3, [pc, #320]	; (80012c0 <HAL_GPIO_Init+0x2bc>)
 800117e:	2101      	movs	r1, #1
 8001180:	430a      	orrs	r2, r1
 8001182:	619a      	str	r2, [r3, #24]
 8001184:	4b4e      	ldr	r3, [pc, #312]	; (80012c0 <HAL_GPIO_Init+0x2bc>)
 8001186:	699b      	ldr	r3, [r3, #24]
 8001188:	2201      	movs	r2, #1
 800118a:	4013      	ands	r3, r2
 800118c:	60bb      	str	r3, [r7, #8]
 800118e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001190:	4a4c      	ldr	r2, [pc, #304]	; (80012c4 <HAL_GPIO_Init+0x2c0>)
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	089b      	lsrs	r3, r3, #2
 8001196:	3302      	adds	r3, #2
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	589b      	ldr	r3, [r3, r2]
 800119c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	2203      	movs	r2, #3
 80011a2:	4013      	ands	r3, r2
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	220f      	movs	r2, #15
 80011a8:	409a      	lsls	r2, r3
 80011aa:	0013      	movs	r3, r2
 80011ac:	43da      	mvns	r2, r3
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	4013      	ands	r3, r2
 80011b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011b4:	687a      	ldr	r2, [r7, #4]
 80011b6:	2390      	movs	r3, #144	; 0x90
 80011b8:	05db      	lsls	r3, r3, #23
 80011ba:	429a      	cmp	r2, r3
 80011bc:	d00d      	beq.n	80011da <HAL_GPIO_Init+0x1d6>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a41      	ldr	r2, [pc, #260]	; (80012c8 <HAL_GPIO_Init+0x2c4>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d007      	beq.n	80011d6 <HAL_GPIO_Init+0x1d2>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a40      	ldr	r2, [pc, #256]	; (80012cc <HAL_GPIO_Init+0x2c8>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d101      	bne.n	80011d2 <HAL_GPIO_Init+0x1ce>
 80011ce:	2302      	movs	r3, #2
 80011d0:	e004      	b.n	80011dc <HAL_GPIO_Init+0x1d8>
 80011d2:	2305      	movs	r3, #5
 80011d4:	e002      	b.n	80011dc <HAL_GPIO_Init+0x1d8>
 80011d6:	2301      	movs	r3, #1
 80011d8:	e000      	b.n	80011dc <HAL_GPIO_Init+0x1d8>
 80011da:	2300      	movs	r3, #0
 80011dc:	697a      	ldr	r2, [r7, #20]
 80011de:	2103      	movs	r1, #3
 80011e0:	400a      	ands	r2, r1
 80011e2:	0092      	lsls	r2, r2, #2
 80011e4:	4093      	lsls	r3, r2
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011ec:	4935      	ldr	r1, [pc, #212]	; (80012c4 <HAL_GPIO_Init+0x2c0>)
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	089b      	lsrs	r3, r3, #2
 80011f2:	3302      	adds	r3, #2
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011fa:	4b35      	ldr	r3, [pc, #212]	; (80012d0 <HAL_GPIO_Init+0x2cc>)
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	43da      	mvns	r2, r3
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	4013      	ands	r3, r2
 8001208:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685a      	ldr	r2, [r3, #4]
 800120e:	2380      	movs	r3, #128	; 0x80
 8001210:	035b      	lsls	r3, r3, #13
 8001212:	4013      	ands	r3, r2
 8001214:	d003      	beq.n	800121e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	4313      	orrs	r3, r2
 800121c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800121e:	4b2c      	ldr	r3, [pc, #176]	; (80012d0 <HAL_GPIO_Init+0x2cc>)
 8001220:	693a      	ldr	r2, [r7, #16]
 8001222:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001224:	4b2a      	ldr	r3, [pc, #168]	; (80012d0 <HAL_GPIO_Init+0x2cc>)
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	43da      	mvns	r2, r3
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	4013      	ands	r3, r2
 8001232:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685a      	ldr	r2, [r3, #4]
 8001238:	2380      	movs	r3, #128	; 0x80
 800123a:	039b      	lsls	r3, r3, #14
 800123c:	4013      	ands	r3, r2
 800123e:	d003      	beq.n	8001248 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001240:	693a      	ldr	r2, [r7, #16]
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	4313      	orrs	r3, r2
 8001246:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001248:	4b21      	ldr	r3, [pc, #132]	; (80012d0 <HAL_GPIO_Init+0x2cc>)
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800124e:	4b20      	ldr	r3, [pc, #128]	; (80012d0 <HAL_GPIO_Init+0x2cc>)
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	43da      	mvns	r2, r3
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	4013      	ands	r3, r2
 800125c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685a      	ldr	r2, [r3, #4]
 8001262:	2380      	movs	r3, #128	; 0x80
 8001264:	029b      	lsls	r3, r3, #10
 8001266:	4013      	ands	r3, r2
 8001268:	d003      	beq.n	8001272 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	4313      	orrs	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001272:	4b17      	ldr	r3, [pc, #92]	; (80012d0 <HAL_GPIO_Init+0x2cc>)
 8001274:	693a      	ldr	r2, [r7, #16]
 8001276:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001278:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <HAL_GPIO_Init+0x2cc>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	43da      	mvns	r2, r3
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	4013      	ands	r3, r2
 8001286:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685a      	ldr	r2, [r3, #4]
 800128c:	2380      	movs	r3, #128	; 0x80
 800128e:	025b      	lsls	r3, r3, #9
 8001290:	4013      	ands	r3, r2
 8001292:	d003      	beq.n	800129c <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	4313      	orrs	r3, r2
 800129a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800129c:	4b0c      	ldr	r3, [pc, #48]	; (80012d0 <HAL_GPIO_Init+0x2cc>)
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	3301      	adds	r3, #1
 80012a6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	40da      	lsrs	r2, r3
 80012b0:	1e13      	subs	r3, r2, #0
 80012b2:	d000      	beq.n	80012b6 <HAL_GPIO_Init+0x2b2>
 80012b4:	e6ae      	b.n	8001014 <HAL_GPIO_Init+0x10>
  } 
}
 80012b6:	46c0      	nop			; (mov r8, r8)
 80012b8:	46c0      	nop			; (mov r8, r8)
 80012ba:	46bd      	mov	sp, r7
 80012bc:	b006      	add	sp, #24
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	40021000 	.word	0x40021000
 80012c4:	40010000 	.word	0x40010000
 80012c8:	48000400 	.word	0x48000400
 80012cc:	48000800 	.word	0x48000800
 80012d0:	40010400 	.word	0x40010400

080012d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	0008      	movs	r0, r1
 80012de:	0011      	movs	r1, r2
 80012e0:	1cbb      	adds	r3, r7, #2
 80012e2:	1c02      	adds	r2, r0, #0
 80012e4:	801a      	strh	r2, [r3, #0]
 80012e6:	1c7b      	adds	r3, r7, #1
 80012e8:	1c0a      	adds	r2, r1, #0
 80012ea:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012ec:	1c7b      	adds	r3, r7, #1
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d004      	beq.n	80012fe <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012f4:	1cbb      	adds	r3, r7, #2
 80012f6:	881a      	ldrh	r2, [r3, #0]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012fc:	e003      	b.n	8001306 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012fe:	1cbb      	adds	r3, r7, #2
 8001300:	881a      	ldrh	r2, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001306:	46c0      	nop			; (mov r8, r8)
 8001308:	46bd      	mov	sp, r7
 800130a:	b002      	add	sp, #8
 800130c:	bd80      	pop	{r7, pc}
	...

08001310 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b088      	sub	sp, #32
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d102      	bne.n	8001324 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	f000 fb76 	bl	8001a10 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2201      	movs	r2, #1
 800132a:	4013      	ands	r3, r2
 800132c:	d100      	bne.n	8001330 <HAL_RCC_OscConfig+0x20>
 800132e:	e08e      	b.n	800144e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001330:	4bc5      	ldr	r3, [pc, #788]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	220c      	movs	r2, #12
 8001336:	4013      	ands	r3, r2
 8001338:	2b04      	cmp	r3, #4
 800133a:	d00e      	beq.n	800135a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800133c:	4bc2      	ldr	r3, [pc, #776]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	220c      	movs	r2, #12
 8001342:	4013      	ands	r3, r2
 8001344:	2b08      	cmp	r3, #8
 8001346:	d117      	bne.n	8001378 <HAL_RCC_OscConfig+0x68>
 8001348:	4bbf      	ldr	r3, [pc, #764]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 800134a:	685a      	ldr	r2, [r3, #4]
 800134c:	23c0      	movs	r3, #192	; 0xc0
 800134e:	025b      	lsls	r3, r3, #9
 8001350:	401a      	ands	r2, r3
 8001352:	2380      	movs	r3, #128	; 0x80
 8001354:	025b      	lsls	r3, r3, #9
 8001356:	429a      	cmp	r2, r3
 8001358:	d10e      	bne.n	8001378 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800135a:	4bbb      	ldr	r3, [pc, #748]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	2380      	movs	r3, #128	; 0x80
 8001360:	029b      	lsls	r3, r3, #10
 8001362:	4013      	ands	r3, r2
 8001364:	d100      	bne.n	8001368 <HAL_RCC_OscConfig+0x58>
 8001366:	e071      	b.n	800144c <HAL_RCC_OscConfig+0x13c>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d000      	beq.n	8001372 <HAL_RCC_OscConfig+0x62>
 8001370:	e06c      	b.n	800144c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	f000 fb4c 	bl	8001a10 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	2b01      	cmp	r3, #1
 800137e:	d107      	bne.n	8001390 <HAL_RCC_OscConfig+0x80>
 8001380:	4bb1      	ldr	r3, [pc, #708]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	4bb0      	ldr	r3, [pc, #704]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 8001386:	2180      	movs	r1, #128	; 0x80
 8001388:	0249      	lsls	r1, r1, #9
 800138a:	430a      	orrs	r2, r1
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	e02f      	b.n	80013f0 <HAL_RCC_OscConfig+0xe0>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d10c      	bne.n	80013b2 <HAL_RCC_OscConfig+0xa2>
 8001398:	4bab      	ldr	r3, [pc, #684]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	4baa      	ldr	r3, [pc, #680]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 800139e:	49ab      	ldr	r1, [pc, #684]	; (800164c <HAL_RCC_OscConfig+0x33c>)
 80013a0:	400a      	ands	r2, r1
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	4ba8      	ldr	r3, [pc, #672]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	4ba7      	ldr	r3, [pc, #668]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 80013aa:	49a9      	ldr	r1, [pc, #676]	; (8001650 <HAL_RCC_OscConfig+0x340>)
 80013ac:	400a      	ands	r2, r1
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	e01e      	b.n	80013f0 <HAL_RCC_OscConfig+0xe0>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	2b05      	cmp	r3, #5
 80013b8:	d10e      	bne.n	80013d8 <HAL_RCC_OscConfig+0xc8>
 80013ba:	4ba3      	ldr	r3, [pc, #652]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	4ba2      	ldr	r3, [pc, #648]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 80013c0:	2180      	movs	r1, #128	; 0x80
 80013c2:	02c9      	lsls	r1, r1, #11
 80013c4:	430a      	orrs	r2, r1
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	4b9f      	ldr	r3, [pc, #636]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	4b9e      	ldr	r3, [pc, #632]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 80013ce:	2180      	movs	r1, #128	; 0x80
 80013d0:	0249      	lsls	r1, r1, #9
 80013d2:	430a      	orrs	r2, r1
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	e00b      	b.n	80013f0 <HAL_RCC_OscConfig+0xe0>
 80013d8:	4b9b      	ldr	r3, [pc, #620]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	4b9a      	ldr	r3, [pc, #616]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 80013de:	499b      	ldr	r1, [pc, #620]	; (800164c <HAL_RCC_OscConfig+0x33c>)
 80013e0:	400a      	ands	r2, r1
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	4b98      	ldr	r3, [pc, #608]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	4b97      	ldr	r3, [pc, #604]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 80013ea:	4999      	ldr	r1, [pc, #612]	; (8001650 <HAL_RCC_OscConfig+0x340>)
 80013ec:	400a      	ands	r2, r1
 80013ee:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d014      	beq.n	8001422 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f8:	f7ff fc6c 	bl	8000cd4 <HAL_GetTick>
 80013fc:	0003      	movs	r3, r0
 80013fe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001400:	e008      	b.n	8001414 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001402:	f7ff fc67 	bl	8000cd4 <HAL_GetTick>
 8001406:	0002      	movs	r2, r0
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	2b64      	cmp	r3, #100	; 0x64
 800140e:	d901      	bls.n	8001414 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001410:	2303      	movs	r3, #3
 8001412:	e2fd      	b.n	8001a10 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001414:	4b8c      	ldr	r3, [pc, #560]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	2380      	movs	r3, #128	; 0x80
 800141a:	029b      	lsls	r3, r3, #10
 800141c:	4013      	ands	r3, r2
 800141e:	d0f0      	beq.n	8001402 <HAL_RCC_OscConfig+0xf2>
 8001420:	e015      	b.n	800144e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001422:	f7ff fc57 	bl	8000cd4 <HAL_GetTick>
 8001426:	0003      	movs	r3, r0
 8001428:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800142a:	e008      	b.n	800143e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800142c:	f7ff fc52 	bl	8000cd4 <HAL_GetTick>
 8001430:	0002      	movs	r2, r0
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	2b64      	cmp	r3, #100	; 0x64
 8001438:	d901      	bls.n	800143e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e2e8      	b.n	8001a10 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800143e:	4b82      	ldr	r3, [pc, #520]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	2380      	movs	r3, #128	; 0x80
 8001444:	029b      	lsls	r3, r3, #10
 8001446:	4013      	ands	r3, r2
 8001448:	d1f0      	bne.n	800142c <HAL_RCC_OscConfig+0x11c>
 800144a:	e000      	b.n	800144e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800144c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2202      	movs	r2, #2
 8001454:	4013      	ands	r3, r2
 8001456:	d100      	bne.n	800145a <HAL_RCC_OscConfig+0x14a>
 8001458:	e06c      	b.n	8001534 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800145a:	4b7b      	ldr	r3, [pc, #492]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	220c      	movs	r2, #12
 8001460:	4013      	ands	r3, r2
 8001462:	d00e      	beq.n	8001482 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001464:	4b78      	ldr	r3, [pc, #480]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	220c      	movs	r2, #12
 800146a:	4013      	ands	r3, r2
 800146c:	2b08      	cmp	r3, #8
 800146e:	d11f      	bne.n	80014b0 <HAL_RCC_OscConfig+0x1a0>
 8001470:	4b75      	ldr	r3, [pc, #468]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 8001472:	685a      	ldr	r2, [r3, #4]
 8001474:	23c0      	movs	r3, #192	; 0xc0
 8001476:	025b      	lsls	r3, r3, #9
 8001478:	401a      	ands	r2, r3
 800147a:	2380      	movs	r3, #128	; 0x80
 800147c:	021b      	lsls	r3, r3, #8
 800147e:	429a      	cmp	r2, r3
 8001480:	d116      	bne.n	80014b0 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001482:	4b71      	ldr	r3, [pc, #452]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	2202      	movs	r2, #2
 8001488:	4013      	ands	r3, r2
 800148a:	d005      	beq.n	8001498 <HAL_RCC_OscConfig+0x188>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	2b01      	cmp	r3, #1
 8001492:	d001      	beq.n	8001498 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e2bb      	b.n	8001a10 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001498:	4b6b      	ldr	r3, [pc, #428]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	22f8      	movs	r2, #248	; 0xf8
 800149e:	4393      	bics	r3, r2
 80014a0:	0019      	movs	r1, r3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	691b      	ldr	r3, [r3, #16]
 80014a6:	00da      	lsls	r2, r3, #3
 80014a8:	4b67      	ldr	r3, [pc, #412]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 80014aa:	430a      	orrs	r2, r1
 80014ac:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ae:	e041      	b.n	8001534 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d024      	beq.n	8001502 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014b8:	4b63      	ldr	r3, [pc, #396]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	4b62      	ldr	r3, [pc, #392]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 80014be:	2101      	movs	r1, #1
 80014c0:	430a      	orrs	r2, r1
 80014c2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c4:	f7ff fc06 	bl	8000cd4 <HAL_GetTick>
 80014c8:	0003      	movs	r3, r0
 80014ca:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014cc:	e008      	b.n	80014e0 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014ce:	f7ff fc01 	bl	8000cd4 <HAL_GetTick>
 80014d2:	0002      	movs	r2, r0
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d901      	bls.n	80014e0 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80014dc:	2303      	movs	r3, #3
 80014de:	e297      	b.n	8001a10 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014e0:	4b59      	ldr	r3, [pc, #356]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2202      	movs	r2, #2
 80014e6:	4013      	ands	r3, r2
 80014e8:	d0f1      	beq.n	80014ce <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ea:	4b57      	ldr	r3, [pc, #348]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	22f8      	movs	r2, #248	; 0xf8
 80014f0:	4393      	bics	r3, r2
 80014f2:	0019      	movs	r1, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	691b      	ldr	r3, [r3, #16]
 80014f8:	00da      	lsls	r2, r3, #3
 80014fa:	4b53      	ldr	r3, [pc, #332]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 80014fc:	430a      	orrs	r2, r1
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	e018      	b.n	8001534 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001502:	4b51      	ldr	r3, [pc, #324]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	4b50      	ldr	r3, [pc, #320]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 8001508:	2101      	movs	r1, #1
 800150a:	438a      	bics	r2, r1
 800150c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800150e:	f7ff fbe1 	bl	8000cd4 <HAL_GetTick>
 8001512:	0003      	movs	r3, r0
 8001514:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001516:	e008      	b.n	800152a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001518:	f7ff fbdc 	bl	8000cd4 <HAL_GetTick>
 800151c:	0002      	movs	r2, r0
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b02      	cmp	r3, #2
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e272      	b.n	8001a10 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800152a:	4b47      	ldr	r3, [pc, #284]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2202      	movs	r2, #2
 8001530:	4013      	ands	r3, r2
 8001532:	d1f1      	bne.n	8001518 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2208      	movs	r2, #8
 800153a:	4013      	ands	r3, r2
 800153c:	d036      	beq.n	80015ac <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	69db      	ldr	r3, [r3, #28]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d019      	beq.n	800157a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001546:	4b40      	ldr	r3, [pc, #256]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 8001548:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800154a:	4b3f      	ldr	r3, [pc, #252]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 800154c:	2101      	movs	r1, #1
 800154e:	430a      	orrs	r2, r1
 8001550:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001552:	f7ff fbbf 	bl	8000cd4 <HAL_GetTick>
 8001556:	0003      	movs	r3, r0
 8001558:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800155a:	e008      	b.n	800156e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800155c:	f7ff fbba 	bl	8000cd4 <HAL_GetTick>
 8001560:	0002      	movs	r2, r0
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b02      	cmp	r3, #2
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e250      	b.n	8001a10 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800156e:	4b36      	ldr	r3, [pc, #216]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 8001570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001572:	2202      	movs	r2, #2
 8001574:	4013      	ands	r3, r2
 8001576:	d0f1      	beq.n	800155c <HAL_RCC_OscConfig+0x24c>
 8001578:	e018      	b.n	80015ac <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800157a:	4b33      	ldr	r3, [pc, #204]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 800157c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800157e:	4b32      	ldr	r3, [pc, #200]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 8001580:	2101      	movs	r1, #1
 8001582:	438a      	bics	r2, r1
 8001584:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001586:	f7ff fba5 	bl	8000cd4 <HAL_GetTick>
 800158a:	0003      	movs	r3, r0
 800158c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800158e:	e008      	b.n	80015a2 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001590:	f7ff fba0 	bl	8000cd4 <HAL_GetTick>
 8001594:	0002      	movs	r2, r0
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b02      	cmp	r3, #2
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e236      	b.n	8001a10 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015a2:	4b29      	ldr	r3, [pc, #164]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 80015a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a6:	2202      	movs	r2, #2
 80015a8:	4013      	ands	r3, r2
 80015aa:	d1f1      	bne.n	8001590 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2204      	movs	r2, #4
 80015b2:	4013      	ands	r3, r2
 80015b4:	d100      	bne.n	80015b8 <HAL_RCC_OscConfig+0x2a8>
 80015b6:	e0b5      	b.n	8001724 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015b8:	201f      	movs	r0, #31
 80015ba:	183b      	adds	r3, r7, r0
 80015bc:	2200      	movs	r2, #0
 80015be:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015c0:	4b21      	ldr	r3, [pc, #132]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 80015c2:	69da      	ldr	r2, [r3, #28]
 80015c4:	2380      	movs	r3, #128	; 0x80
 80015c6:	055b      	lsls	r3, r3, #21
 80015c8:	4013      	ands	r3, r2
 80015ca:	d110      	bne.n	80015ee <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015cc:	4b1e      	ldr	r3, [pc, #120]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 80015ce:	69da      	ldr	r2, [r3, #28]
 80015d0:	4b1d      	ldr	r3, [pc, #116]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 80015d2:	2180      	movs	r1, #128	; 0x80
 80015d4:	0549      	lsls	r1, r1, #21
 80015d6:	430a      	orrs	r2, r1
 80015d8:	61da      	str	r2, [r3, #28]
 80015da:	4b1b      	ldr	r3, [pc, #108]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 80015dc:	69da      	ldr	r2, [r3, #28]
 80015de:	2380      	movs	r3, #128	; 0x80
 80015e0:	055b      	lsls	r3, r3, #21
 80015e2:	4013      	ands	r3, r2
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80015e8:	183b      	adds	r3, r7, r0
 80015ea:	2201      	movs	r2, #1
 80015ec:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ee:	4b19      	ldr	r3, [pc, #100]	; (8001654 <HAL_RCC_OscConfig+0x344>)
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	2380      	movs	r3, #128	; 0x80
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	4013      	ands	r3, r2
 80015f8:	d11a      	bne.n	8001630 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015fa:	4b16      	ldr	r3, [pc, #88]	; (8001654 <HAL_RCC_OscConfig+0x344>)
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	4b15      	ldr	r3, [pc, #84]	; (8001654 <HAL_RCC_OscConfig+0x344>)
 8001600:	2180      	movs	r1, #128	; 0x80
 8001602:	0049      	lsls	r1, r1, #1
 8001604:	430a      	orrs	r2, r1
 8001606:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001608:	f7ff fb64 	bl	8000cd4 <HAL_GetTick>
 800160c:	0003      	movs	r3, r0
 800160e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001610:	e008      	b.n	8001624 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001612:	f7ff fb5f 	bl	8000cd4 <HAL_GetTick>
 8001616:	0002      	movs	r2, r0
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	2b64      	cmp	r3, #100	; 0x64
 800161e:	d901      	bls.n	8001624 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	e1f5      	b.n	8001a10 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001624:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <HAL_RCC_OscConfig+0x344>)
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	2380      	movs	r3, #128	; 0x80
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	4013      	ands	r3, r2
 800162e:	d0f0      	beq.n	8001612 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	2b01      	cmp	r3, #1
 8001636:	d10f      	bne.n	8001658 <HAL_RCC_OscConfig+0x348>
 8001638:	4b03      	ldr	r3, [pc, #12]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 800163a:	6a1a      	ldr	r2, [r3, #32]
 800163c:	4b02      	ldr	r3, [pc, #8]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 800163e:	2101      	movs	r1, #1
 8001640:	430a      	orrs	r2, r1
 8001642:	621a      	str	r2, [r3, #32]
 8001644:	e036      	b.n	80016b4 <HAL_RCC_OscConfig+0x3a4>
 8001646:	46c0      	nop			; (mov r8, r8)
 8001648:	40021000 	.word	0x40021000
 800164c:	fffeffff 	.word	0xfffeffff
 8001650:	fffbffff 	.word	0xfffbffff
 8001654:	40007000 	.word	0x40007000
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d10c      	bne.n	800167a <HAL_RCC_OscConfig+0x36a>
 8001660:	4bca      	ldr	r3, [pc, #808]	; (800198c <HAL_RCC_OscConfig+0x67c>)
 8001662:	6a1a      	ldr	r2, [r3, #32]
 8001664:	4bc9      	ldr	r3, [pc, #804]	; (800198c <HAL_RCC_OscConfig+0x67c>)
 8001666:	2101      	movs	r1, #1
 8001668:	438a      	bics	r2, r1
 800166a:	621a      	str	r2, [r3, #32]
 800166c:	4bc7      	ldr	r3, [pc, #796]	; (800198c <HAL_RCC_OscConfig+0x67c>)
 800166e:	6a1a      	ldr	r2, [r3, #32]
 8001670:	4bc6      	ldr	r3, [pc, #792]	; (800198c <HAL_RCC_OscConfig+0x67c>)
 8001672:	2104      	movs	r1, #4
 8001674:	438a      	bics	r2, r1
 8001676:	621a      	str	r2, [r3, #32]
 8001678:	e01c      	b.n	80016b4 <HAL_RCC_OscConfig+0x3a4>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	2b05      	cmp	r3, #5
 8001680:	d10c      	bne.n	800169c <HAL_RCC_OscConfig+0x38c>
 8001682:	4bc2      	ldr	r3, [pc, #776]	; (800198c <HAL_RCC_OscConfig+0x67c>)
 8001684:	6a1a      	ldr	r2, [r3, #32]
 8001686:	4bc1      	ldr	r3, [pc, #772]	; (800198c <HAL_RCC_OscConfig+0x67c>)
 8001688:	2104      	movs	r1, #4
 800168a:	430a      	orrs	r2, r1
 800168c:	621a      	str	r2, [r3, #32]
 800168e:	4bbf      	ldr	r3, [pc, #764]	; (800198c <HAL_RCC_OscConfig+0x67c>)
 8001690:	6a1a      	ldr	r2, [r3, #32]
 8001692:	4bbe      	ldr	r3, [pc, #760]	; (800198c <HAL_RCC_OscConfig+0x67c>)
 8001694:	2101      	movs	r1, #1
 8001696:	430a      	orrs	r2, r1
 8001698:	621a      	str	r2, [r3, #32]
 800169a:	e00b      	b.n	80016b4 <HAL_RCC_OscConfig+0x3a4>
 800169c:	4bbb      	ldr	r3, [pc, #748]	; (800198c <HAL_RCC_OscConfig+0x67c>)
 800169e:	6a1a      	ldr	r2, [r3, #32]
 80016a0:	4bba      	ldr	r3, [pc, #744]	; (800198c <HAL_RCC_OscConfig+0x67c>)
 80016a2:	2101      	movs	r1, #1
 80016a4:	438a      	bics	r2, r1
 80016a6:	621a      	str	r2, [r3, #32]
 80016a8:	4bb8      	ldr	r3, [pc, #736]	; (800198c <HAL_RCC_OscConfig+0x67c>)
 80016aa:	6a1a      	ldr	r2, [r3, #32]
 80016ac:	4bb7      	ldr	r3, [pc, #732]	; (800198c <HAL_RCC_OscConfig+0x67c>)
 80016ae:	2104      	movs	r1, #4
 80016b0:	438a      	bics	r2, r1
 80016b2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d014      	beq.n	80016e6 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016bc:	f7ff fb0a 	bl	8000cd4 <HAL_GetTick>
 80016c0:	0003      	movs	r3, r0
 80016c2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016c4:	e009      	b.n	80016da <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016c6:	f7ff fb05 	bl	8000cd4 <HAL_GetTick>
 80016ca:	0002      	movs	r2, r0
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	4aaf      	ldr	r2, [pc, #700]	; (8001990 <HAL_RCC_OscConfig+0x680>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d901      	bls.n	80016da <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e19a      	b.n	8001a10 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016da:	4bac      	ldr	r3, [pc, #688]	; (800198c <HAL_RCC_OscConfig+0x67c>)
 80016dc:	6a1b      	ldr	r3, [r3, #32]
 80016de:	2202      	movs	r2, #2
 80016e0:	4013      	ands	r3, r2
 80016e2:	d0f0      	beq.n	80016c6 <HAL_RCC_OscConfig+0x3b6>
 80016e4:	e013      	b.n	800170e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016e6:	f7ff faf5 	bl	8000cd4 <HAL_GetTick>
 80016ea:	0003      	movs	r3, r0
 80016ec:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016ee:	e009      	b.n	8001704 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016f0:	f7ff faf0 	bl	8000cd4 <HAL_GetTick>
 80016f4:	0002      	movs	r2, r0
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	4aa5      	ldr	r2, [pc, #660]	; (8001990 <HAL_RCC_OscConfig+0x680>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d901      	bls.n	8001704 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	e185      	b.n	8001a10 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001704:	4ba1      	ldr	r3, [pc, #644]	; (800198c <HAL_RCC_OscConfig+0x67c>)
 8001706:	6a1b      	ldr	r3, [r3, #32]
 8001708:	2202      	movs	r2, #2
 800170a:	4013      	ands	r3, r2
 800170c:	d1f0      	bne.n	80016f0 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800170e:	231f      	movs	r3, #31
 8001710:	18fb      	adds	r3, r7, r3
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	2b01      	cmp	r3, #1
 8001716:	d105      	bne.n	8001724 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001718:	4b9c      	ldr	r3, [pc, #624]	; (800198c <HAL_RCC_OscConfig+0x67c>)
 800171a:	69da      	ldr	r2, [r3, #28]
 800171c:	4b9b      	ldr	r3, [pc, #620]	; (800198c <HAL_RCC_OscConfig+0x67c>)
 800171e:	499d      	ldr	r1, [pc, #628]	; (8001994 <HAL_RCC_OscConfig+0x684>)
 8001720:	400a      	ands	r2, r1
 8001722:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2210      	movs	r2, #16
 800172a:	4013      	ands	r3, r2
 800172c:	d063      	beq.n	80017f6 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	695b      	ldr	r3, [r3, #20]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d12a      	bne.n	800178c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001736:	4b95      	ldr	r3, [pc, #596]	; (800198c <HAL_RCC_OscConfig+0x67c>)
 8001738:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800173a:	4b94      	ldr	r3, [pc, #592]	; (800198c <HAL_RCC_OscConfig+0x67c>)
 800173c:	2104      	movs	r1, #4
 800173e:	430a      	orrs	r2, r1
 8001740:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001742:	4b92      	ldr	r3, [pc, #584]	; (800198c <HAL_RCC_OscConfig+0x67c>)
 8001744:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001746:	4b91      	ldr	r3, [pc, #580]	; (800198c <HAL_RCC_OscConfig+0x67c>)
 8001748:	2101      	movs	r1, #1
 800174a:	430a      	orrs	r2, r1
 800174c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800174e:	f7ff fac1 	bl	8000cd4 <HAL_GetTick>
 8001752:	0003      	movs	r3, r0
 8001754:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001756:	e008      	b.n	800176a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001758:	f7ff fabc 	bl	8000cd4 <HAL_GetTick>
 800175c:	0002      	movs	r2, r0
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b02      	cmp	r3, #2
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e152      	b.n	8001a10 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800176a:	4b88      	ldr	r3, [pc, #544]	; (800198c <HAL_RCC_OscConfig+0x67c>)
 800176c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800176e:	2202      	movs	r2, #2
 8001770:	4013      	ands	r3, r2
 8001772:	d0f1      	beq.n	8001758 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001774:	4b85      	ldr	r3, [pc, #532]	; (800198c <HAL_RCC_OscConfig+0x67c>)
 8001776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001778:	22f8      	movs	r2, #248	; 0xf8
 800177a:	4393      	bics	r3, r2
 800177c:	0019      	movs	r1, r3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	699b      	ldr	r3, [r3, #24]
 8001782:	00da      	lsls	r2, r3, #3
 8001784:	4b81      	ldr	r3, [pc, #516]	; (800198c <HAL_RCC_OscConfig+0x67c>)
 8001786:	430a      	orrs	r2, r1
 8001788:	635a      	str	r2, [r3, #52]	; 0x34
 800178a:	e034      	b.n	80017f6 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	695b      	ldr	r3, [r3, #20]
 8001790:	3305      	adds	r3, #5
 8001792:	d111      	bne.n	80017b8 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001794:	4b7d      	ldr	r3, [pc, #500]	; (800198c <HAL_RCC_OscConfig+0x67c>)
 8001796:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001798:	4b7c      	ldr	r3, [pc, #496]	; (800198c <HAL_RCC_OscConfig+0x67c>)
 800179a:	2104      	movs	r1, #4
 800179c:	438a      	bics	r2, r1
 800179e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80017a0:	4b7a      	ldr	r3, [pc, #488]	; (800198c <HAL_RCC_OscConfig+0x67c>)
 80017a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017a4:	22f8      	movs	r2, #248	; 0xf8
 80017a6:	4393      	bics	r3, r2
 80017a8:	0019      	movs	r1, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	699b      	ldr	r3, [r3, #24]
 80017ae:	00da      	lsls	r2, r3, #3
 80017b0:	4b76      	ldr	r3, [pc, #472]	; (800198c <HAL_RCC_OscConfig+0x67c>)
 80017b2:	430a      	orrs	r2, r1
 80017b4:	635a      	str	r2, [r3, #52]	; 0x34
 80017b6:	e01e      	b.n	80017f6 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80017b8:	4b74      	ldr	r3, [pc, #464]	; (800198c <HAL_RCC_OscConfig+0x67c>)
 80017ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017bc:	4b73      	ldr	r3, [pc, #460]	; (800198c <HAL_RCC_OscConfig+0x67c>)
 80017be:	2104      	movs	r1, #4
 80017c0:	430a      	orrs	r2, r1
 80017c2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80017c4:	4b71      	ldr	r3, [pc, #452]	; (800198c <HAL_RCC_OscConfig+0x67c>)
 80017c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017c8:	4b70      	ldr	r3, [pc, #448]	; (800198c <HAL_RCC_OscConfig+0x67c>)
 80017ca:	2101      	movs	r1, #1
 80017cc:	438a      	bics	r2, r1
 80017ce:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017d0:	f7ff fa80 	bl	8000cd4 <HAL_GetTick>
 80017d4:	0003      	movs	r3, r0
 80017d6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80017d8:	e008      	b.n	80017ec <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80017da:	f7ff fa7b 	bl	8000cd4 <HAL_GetTick>
 80017de:	0002      	movs	r2, r0
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d901      	bls.n	80017ec <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e111      	b.n	8001a10 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80017ec:	4b67      	ldr	r3, [pc, #412]	; (800198c <HAL_RCC_OscConfig+0x67c>)
 80017ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017f0:	2202      	movs	r2, #2
 80017f2:	4013      	ands	r3, r2
 80017f4:	d1f1      	bne.n	80017da <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2220      	movs	r2, #32
 80017fc:	4013      	ands	r3, r2
 80017fe:	d05c      	beq.n	80018ba <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001800:	4b62      	ldr	r3, [pc, #392]	; (800198c <HAL_RCC_OscConfig+0x67c>)
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	220c      	movs	r2, #12
 8001806:	4013      	ands	r3, r2
 8001808:	2b0c      	cmp	r3, #12
 800180a:	d00e      	beq.n	800182a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800180c:	4b5f      	ldr	r3, [pc, #380]	; (800198c <HAL_RCC_OscConfig+0x67c>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	220c      	movs	r2, #12
 8001812:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001814:	2b08      	cmp	r3, #8
 8001816:	d114      	bne.n	8001842 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001818:	4b5c      	ldr	r3, [pc, #368]	; (800198c <HAL_RCC_OscConfig+0x67c>)
 800181a:	685a      	ldr	r2, [r3, #4]
 800181c:	23c0      	movs	r3, #192	; 0xc0
 800181e:	025b      	lsls	r3, r3, #9
 8001820:	401a      	ands	r2, r3
 8001822:	23c0      	movs	r3, #192	; 0xc0
 8001824:	025b      	lsls	r3, r3, #9
 8001826:	429a      	cmp	r2, r3
 8001828:	d10b      	bne.n	8001842 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800182a:	4b58      	ldr	r3, [pc, #352]	; (800198c <HAL_RCC_OscConfig+0x67c>)
 800182c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800182e:	2380      	movs	r3, #128	; 0x80
 8001830:	029b      	lsls	r3, r3, #10
 8001832:	4013      	ands	r3, r2
 8001834:	d040      	beq.n	80018b8 <HAL_RCC_OscConfig+0x5a8>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6a1b      	ldr	r3, [r3, #32]
 800183a:	2b01      	cmp	r3, #1
 800183c:	d03c      	beq.n	80018b8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e0e6      	b.n	8001a10 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a1b      	ldr	r3, [r3, #32]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d01b      	beq.n	8001882 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800184a:	4b50      	ldr	r3, [pc, #320]	; (800198c <HAL_RCC_OscConfig+0x67c>)
 800184c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800184e:	4b4f      	ldr	r3, [pc, #316]	; (800198c <HAL_RCC_OscConfig+0x67c>)
 8001850:	2180      	movs	r1, #128	; 0x80
 8001852:	0249      	lsls	r1, r1, #9
 8001854:	430a      	orrs	r2, r1
 8001856:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001858:	f7ff fa3c 	bl	8000cd4 <HAL_GetTick>
 800185c:	0003      	movs	r3, r0
 800185e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001860:	e008      	b.n	8001874 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001862:	f7ff fa37 	bl	8000cd4 <HAL_GetTick>
 8001866:	0002      	movs	r2, r0
 8001868:	69bb      	ldr	r3, [r7, #24]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	2b02      	cmp	r3, #2
 800186e:	d901      	bls.n	8001874 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001870:	2303      	movs	r3, #3
 8001872:	e0cd      	b.n	8001a10 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001874:	4b45      	ldr	r3, [pc, #276]	; (800198c <HAL_RCC_OscConfig+0x67c>)
 8001876:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001878:	2380      	movs	r3, #128	; 0x80
 800187a:	029b      	lsls	r3, r3, #10
 800187c:	4013      	ands	r3, r2
 800187e:	d0f0      	beq.n	8001862 <HAL_RCC_OscConfig+0x552>
 8001880:	e01b      	b.n	80018ba <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001882:	4b42      	ldr	r3, [pc, #264]	; (800198c <HAL_RCC_OscConfig+0x67c>)
 8001884:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001886:	4b41      	ldr	r3, [pc, #260]	; (800198c <HAL_RCC_OscConfig+0x67c>)
 8001888:	4943      	ldr	r1, [pc, #268]	; (8001998 <HAL_RCC_OscConfig+0x688>)
 800188a:	400a      	ands	r2, r1
 800188c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800188e:	f7ff fa21 	bl	8000cd4 <HAL_GetTick>
 8001892:	0003      	movs	r3, r0
 8001894:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001896:	e008      	b.n	80018aa <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001898:	f7ff fa1c 	bl	8000cd4 <HAL_GetTick>
 800189c:	0002      	movs	r2, r0
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e0b2      	b.n	8001a10 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80018aa:	4b38      	ldr	r3, [pc, #224]	; (800198c <HAL_RCC_OscConfig+0x67c>)
 80018ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018ae:	2380      	movs	r3, #128	; 0x80
 80018b0:	029b      	lsls	r3, r3, #10
 80018b2:	4013      	ands	r3, r2
 80018b4:	d1f0      	bne.n	8001898 <HAL_RCC_OscConfig+0x588>
 80018b6:	e000      	b.n	80018ba <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80018b8:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d100      	bne.n	80018c4 <HAL_RCC_OscConfig+0x5b4>
 80018c2:	e0a4      	b.n	8001a0e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018c4:	4b31      	ldr	r3, [pc, #196]	; (800198c <HAL_RCC_OscConfig+0x67c>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	220c      	movs	r2, #12
 80018ca:	4013      	ands	r3, r2
 80018cc:	2b08      	cmp	r3, #8
 80018ce:	d100      	bne.n	80018d2 <HAL_RCC_OscConfig+0x5c2>
 80018d0:	e078      	b.n	80019c4 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d14c      	bne.n	8001974 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018da:	4b2c      	ldr	r3, [pc, #176]	; (800198c <HAL_RCC_OscConfig+0x67c>)
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	4b2b      	ldr	r3, [pc, #172]	; (800198c <HAL_RCC_OscConfig+0x67c>)
 80018e0:	492e      	ldr	r1, [pc, #184]	; (800199c <HAL_RCC_OscConfig+0x68c>)
 80018e2:	400a      	ands	r2, r1
 80018e4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e6:	f7ff f9f5 	bl	8000cd4 <HAL_GetTick>
 80018ea:	0003      	movs	r3, r0
 80018ec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018ee:	e008      	b.n	8001902 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018f0:	f7ff f9f0 	bl	8000cd4 <HAL_GetTick>
 80018f4:	0002      	movs	r2, r0
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d901      	bls.n	8001902 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e086      	b.n	8001a10 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001902:	4b22      	ldr	r3, [pc, #136]	; (800198c <HAL_RCC_OscConfig+0x67c>)
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	2380      	movs	r3, #128	; 0x80
 8001908:	049b      	lsls	r3, r3, #18
 800190a:	4013      	ands	r3, r2
 800190c:	d1f0      	bne.n	80018f0 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800190e:	4b1f      	ldr	r3, [pc, #124]	; (800198c <HAL_RCC_OscConfig+0x67c>)
 8001910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001912:	220f      	movs	r2, #15
 8001914:	4393      	bics	r3, r2
 8001916:	0019      	movs	r1, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800191c:	4b1b      	ldr	r3, [pc, #108]	; (800198c <HAL_RCC_OscConfig+0x67c>)
 800191e:	430a      	orrs	r2, r1
 8001920:	62da      	str	r2, [r3, #44]	; 0x2c
 8001922:	4b1a      	ldr	r3, [pc, #104]	; (800198c <HAL_RCC_OscConfig+0x67c>)
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	4a1e      	ldr	r2, [pc, #120]	; (80019a0 <HAL_RCC_OscConfig+0x690>)
 8001928:	4013      	ands	r3, r2
 800192a:	0019      	movs	r1, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001934:	431a      	orrs	r2, r3
 8001936:	4b15      	ldr	r3, [pc, #84]	; (800198c <HAL_RCC_OscConfig+0x67c>)
 8001938:	430a      	orrs	r2, r1
 800193a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800193c:	4b13      	ldr	r3, [pc, #76]	; (800198c <HAL_RCC_OscConfig+0x67c>)
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	4b12      	ldr	r3, [pc, #72]	; (800198c <HAL_RCC_OscConfig+0x67c>)
 8001942:	2180      	movs	r1, #128	; 0x80
 8001944:	0449      	lsls	r1, r1, #17
 8001946:	430a      	orrs	r2, r1
 8001948:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800194a:	f7ff f9c3 	bl	8000cd4 <HAL_GetTick>
 800194e:	0003      	movs	r3, r0
 8001950:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001952:	e008      	b.n	8001966 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001954:	f7ff f9be 	bl	8000cd4 <HAL_GetTick>
 8001958:	0002      	movs	r2, r0
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	2b02      	cmp	r3, #2
 8001960:	d901      	bls.n	8001966 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e054      	b.n	8001a10 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001966:	4b09      	ldr	r3, [pc, #36]	; (800198c <HAL_RCC_OscConfig+0x67c>)
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	2380      	movs	r3, #128	; 0x80
 800196c:	049b      	lsls	r3, r3, #18
 800196e:	4013      	ands	r3, r2
 8001970:	d0f0      	beq.n	8001954 <HAL_RCC_OscConfig+0x644>
 8001972:	e04c      	b.n	8001a0e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001974:	4b05      	ldr	r3, [pc, #20]	; (800198c <HAL_RCC_OscConfig+0x67c>)
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	4b04      	ldr	r3, [pc, #16]	; (800198c <HAL_RCC_OscConfig+0x67c>)
 800197a:	4908      	ldr	r1, [pc, #32]	; (800199c <HAL_RCC_OscConfig+0x68c>)
 800197c:	400a      	ands	r2, r1
 800197e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001980:	f7ff f9a8 	bl	8000cd4 <HAL_GetTick>
 8001984:	0003      	movs	r3, r0
 8001986:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001988:	e015      	b.n	80019b6 <HAL_RCC_OscConfig+0x6a6>
 800198a:	46c0      	nop			; (mov r8, r8)
 800198c:	40021000 	.word	0x40021000
 8001990:	00001388 	.word	0x00001388
 8001994:	efffffff 	.word	0xefffffff
 8001998:	fffeffff 	.word	0xfffeffff
 800199c:	feffffff 	.word	0xfeffffff
 80019a0:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019a4:	f7ff f996 	bl	8000cd4 <HAL_GetTick>
 80019a8:	0002      	movs	r2, r0
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e02c      	b.n	8001a10 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019b6:	4b18      	ldr	r3, [pc, #96]	; (8001a18 <HAL_RCC_OscConfig+0x708>)
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	2380      	movs	r3, #128	; 0x80
 80019bc:	049b      	lsls	r3, r3, #18
 80019be:	4013      	ands	r3, r2
 80019c0:	d1f0      	bne.n	80019a4 <HAL_RCC_OscConfig+0x694>
 80019c2:	e024      	b.n	8001a0e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d101      	bne.n	80019d0 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e01f      	b.n	8001a10 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80019d0:	4b11      	ldr	r3, [pc, #68]	; (8001a18 <HAL_RCC_OscConfig+0x708>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80019d6:	4b10      	ldr	r3, [pc, #64]	; (8001a18 <HAL_RCC_OscConfig+0x708>)
 80019d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019da:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019dc:	697a      	ldr	r2, [r7, #20]
 80019de:	23c0      	movs	r3, #192	; 0xc0
 80019e0:	025b      	lsls	r3, r3, #9
 80019e2:	401a      	ands	r2, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d10e      	bne.n	8001a0a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	220f      	movs	r2, #15
 80019f0:	401a      	ands	r2, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d107      	bne.n	8001a0a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80019fa:	697a      	ldr	r2, [r7, #20]
 80019fc:	23f0      	movs	r3, #240	; 0xf0
 80019fe:	039b      	lsls	r3, r3, #14
 8001a00:	401a      	ands	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d001      	beq.n	8001a0e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e000      	b.n	8001a10 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001a0e:	2300      	movs	r3, #0
}
 8001a10:	0018      	movs	r0, r3
 8001a12:	46bd      	mov	sp, r7
 8001a14:	b008      	add	sp, #32
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	40021000 	.word	0x40021000

08001a1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d101      	bne.n	8001a30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e0bf      	b.n	8001bb0 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a30:	4b61      	ldr	r3, [pc, #388]	; (8001bb8 <HAL_RCC_ClockConfig+0x19c>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2201      	movs	r2, #1
 8001a36:	4013      	ands	r3, r2
 8001a38:	683a      	ldr	r2, [r7, #0]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d911      	bls.n	8001a62 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a3e:	4b5e      	ldr	r3, [pc, #376]	; (8001bb8 <HAL_RCC_ClockConfig+0x19c>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2201      	movs	r2, #1
 8001a44:	4393      	bics	r3, r2
 8001a46:	0019      	movs	r1, r3
 8001a48:	4b5b      	ldr	r3, [pc, #364]	; (8001bb8 <HAL_RCC_ClockConfig+0x19c>)
 8001a4a:	683a      	ldr	r2, [r7, #0]
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a50:	4b59      	ldr	r3, [pc, #356]	; (8001bb8 <HAL_RCC_ClockConfig+0x19c>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2201      	movs	r2, #1
 8001a56:	4013      	ands	r3, r2
 8001a58:	683a      	ldr	r2, [r7, #0]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d001      	beq.n	8001a62 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e0a6      	b.n	8001bb0 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2202      	movs	r2, #2
 8001a68:	4013      	ands	r3, r2
 8001a6a:	d015      	beq.n	8001a98 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2204      	movs	r2, #4
 8001a72:	4013      	ands	r3, r2
 8001a74:	d006      	beq.n	8001a84 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001a76:	4b51      	ldr	r3, [pc, #324]	; (8001bbc <HAL_RCC_ClockConfig+0x1a0>)
 8001a78:	685a      	ldr	r2, [r3, #4]
 8001a7a:	4b50      	ldr	r3, [pc, #320]	; (8001bbc <HAL_RCC_ClockConfig+0x1a0>)
 8001a7c:	21e0      	movs	r1, #224	; 0xe0
 8001a7e:	00c9      	lsls	r1, r1, #3
 8001a80:	430a      	orrs	r2, r1
 8001a82:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a84:	4b4d      	ldr	r3, [pc, #308]	; (8001bbc <HAL_RCC_ClockConfig+0x1a0>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	22f0      	movs	r2, #240	; 0xf0
 8001a8a:	4393      	bics	r3, r2
 8001a8c:	0019      	movs	r1, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	689a      	ldr	r2, [r3, #8]
 8001a92:	4b4a      	ldr	r3, [pc, #296]	; (8001bbc <HAL_RCC_ClockConfig+0x1a0>)
 8001a94:	430a      	orrs	r2, r1
 8001a96:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	d04c      	beq.n	8001b3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d107      	bne.n	8001aba <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aaa:	4b44      	ldr	r3, [pc, #272]	; (8001bbc <HAL_RCC_ClockConfig+0x1a0>)
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	2380      	movs	r3, #128	; 0x80
 8001ab0:	029b      	lsls	r3, r3, #10
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	d120      	bne.n	8001af8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e07a      	b.n	8001bb0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d107      	bne.n	8001ad2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ac2:	4b3e      	ldr	r3, [pc, #248]	; (8001bbc <HAL_RCC_ClockConfig+0x1a0>)
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	2380      	movs	r3, #128	; 0x80
 8001ac8:	049b      	lsls	r3, r3, #18
 8001aca:	4013      	ands	r3, r2
 8001acc:	d114      	bne.n	8001af8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e06e      	b.n	8001bb0 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	2b03      	cmp	r3, #3
 8001ad8:	d107      	bne.n	8001aea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001ada:	4b38      	ldr	r3, [pc, #224]	; (8001bbc <HAL_RCC_ClockConfig+0x1a0>)
 8001adc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ade:	2380      	movs	r3, #128	; 0x80
 8001ae0:	029b      	lsls	r3, r3, #10
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	d108      	bne.n	8001af8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e062      	b.n	8001bb0 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aea:	4b34      	ldr	r3, [pc, #208]	; (8001bbc <HAL_RCC_ClockConfig+0x1a0>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	2202      	movs	r2, #2
 8001af0:	4013      	ands	r3, r2
 8001af2:	d101      	bne.n	8001af8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e05b      	b.n	8001bb0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001af8:	4b30      	ldr	r3, [pc, #192]	; (8001bbc <HAL_RCC_ClockConfig+0x1a0>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	2203      	movs	r2, #3
 8001afe:	4393      	bics	r3, r2
 8001b00:	0019      	movs	r1, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685a      	ldr	r2, [r3, #4]
 8001b06:	4b2d      	ldr	r3, [pc, #180]	; (8001bbc <HAL_RCC_ClockConfig+0x1a0>)
 8001b08:	430a      	orrs	r2, r1
 8001b0a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b0c:	f7ff f8e2 	bl	8000cd4 <HAL_GetTick>
 8001b10:	0003      	movs	r3, r0
 8001b12:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b14:	e009      	b.n	8001b2a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b16:	f7ff f8dd 	bl	8000cd4 <HAL_GetTick>
 8001b1a:	0002      	movs	r2, r0
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	4a27      	ldr	r2, [pc, #156]	; (8001bc0 <HAL_RCC_ClockConfig+0x1a4>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e042      	b.n	8001bb0 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b2a:	4b24      	ldr	r3, [pc, #144]	; (8001bbc <HAL_RCC_ClockConfig+0x1a0>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	220c      	movs	r2, #12
 8001b30:	401a      	ands	r2, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d1ec      	bne.n	8001b16 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b3c:	4b1e      	ldr	r3, [pc, #120]	; (8001bb8 <HAL_RCC_ClockConfig+0x19c>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2201      	movs	r2, #1
 8001b42:	4013      	ands	r3, r2
 8001b44:	683a      	ldr	r2, [r7, #0]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d211      	bcs.n	8001b6e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b4a:	4b1b      	ldr	r3, [pc, #108]	; (8001bb8 <HAL_RCC_ClockConfig+0x19c>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	4393      	bics	r3, r2
 8001b52:	0019      	movs	r1, r3
 8001b54:	4b18      	ldr	r3, [pc, #96]	; (8001bb8 <HAL_RCC_ClockConfig+0x19c>)
 8001b56:	683a      	ldr	r2, [r7, #0]
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b5c:	4b16      	ldr	r3, [pc, #88]	; (8001bb8 <HAL_RCC_ClockConfig+0x19c>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2201      	movs	r2, #1
 8001b62:	4013      	ands	r3, r2
 8001b64:	683a      	ldr	r2, [r7, #0]
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d001      	beq.n	8001b6e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e020      	b.n	8001bb0 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2204      	movs	r2, #4
 8001b74:	4013      	ands	r3, r2
 8001b76:	d009      	beq.n	8001b8c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001b78:	4b10      	ldr	r3, [pc, #64]	; (8001bbc <HAL_RCC_ClockConfig+0x1a0>)
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	4a11      	ldr	r2, [pc, #68]	; (8001bc4 <HAL_RCC_ClockConfig+0x1a8>)
 8001b7e:	4013      	ands	r3, r2
 8001b80:	0019      	movs	r1, r3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	68da      	ldr	r2, [r3, #12]
 8001b86:	4b0d      	ldr	r3, [pc, #52]	; (8001bbc <HAL_RCC_ClockConfig+0x1a0>)
 8001b88:	430a      	orrs	r2, r1
 8001b8a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001b8c:	f000 f820 	bl	8001bd0 <HAL_RCC_GetSysClockFreq>
 8001b90:	0001      	movs	r1, r0
 8001b92:	4b0a      	ldr	r3, [pc, #40]	; (8001bbc <HAL_RCC_ClockConfig+0x1a0>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	091b      	lsrs	r3, r3, #4
 8001b98:	220f      	movs	r2, #15
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	4a0a      	ldr	r2, [pc, #40]	; (8001bc8 <HAL_RCC_ClockConfig+0x1ac>)
 8001b9e:	5cd3      	ldrb	r3, [r2, r3]
 8001ba0:	000a      	movs	r2, r1
 8001ba2:	40da      	lsrs	r2, r3
 8001ba4:	4b09      	ldr	r3, [pc, #36]	; (8001bcc <HAL_RCC_ClockConfig+0x1b0>)
 8001ba6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001ba8:	2003      	movs	r0, #3
 8001baa:	f7ff f84d 	bl	8000c48 <HAL_InitTick>
  
  return HAL_OK;
 8001bae:	2300      	movs	r3, #0
}
 8001bb0:	0018      	movs	r0, r3
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	b004      	add	sp, #16
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	40022000 	.word	0x40022000
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	00001388 	.word	0x00001388
 8001bc4:	fffff8ff 	.word	0xfffff8ff
 8001bc8:	080028e8 	.word	0x080028e8
 8001bcc:	20000000 	.word	0x20000000

08001bd0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b086      	sub	sp, #24
 8001bd4:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60fb      	str	r3, [r7, #12]
 8001bda:	2300      	movs	r3, #0
 8001bdc:	60bb      	str	r3, [r7, #8]
 8001bde:	2300      	movs	r3, #0
 8001be0:	617b      	str	r3, [r7, #20]
 8001be2:	2300      	movs	r3, #0
 8001be4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001be6:	2300      	movs	r3, #0
 8001be8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001bea:	4b2d      	ldr	r3, [pc, #180]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	220c      	movs	r2, #12
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	2b0c      	cmp	r3, #12
 8001bf8:	d046      	beq.n	8001c88 <HAL_RCC_GetSysClockFreq+0xb8>
 8001bfa:	d848      	bhi.n	8001c8e <HAL_RCC_GetSysClockFreq+0xbe>
 8001bfc:	2b04      	cmp	r3, #4
 8001bfe:	d002      	beq.n	8001c06 <HAL_RCC_GetSysClockFreq+0x36>
 8001c00:	2b08      	cmp	r3, #8
 8001c02:	d003      	beq.n	8001c0c <HAL_RCC_GetSysClockFreq+0x3c>
 8001c04:	e043      	b.n	8001c8e <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c06:	4b27      	ldr	r3, [pc, #156]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001c08:	613b      	str	r3, [r7, #16]
      break;
 8001c0a:	e043      	b.n	8001c94 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	0c9b      	lsrs	r3, r3, #18
 8001c10:	220f      	movs	r2, #15
 8001c12:	4013      	ands	r3, r2
 8001c14:	4a24      	ldr	r2, [pc, #144]	; (8001ca8 <HAL_RCC_GetSysClockFreq+0xd8>)
 8001c16:	5cd3      	ldrb	r3, [r2, r3]
 8001c18:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001c1a:	4b21      	ldr	r3, [pc, #132]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1e:	220f      	movs	r2, #15
 8001c20:	4013      	ands	r3, r2
 8001c22:	4a22      	ldr	r2, [pc, #136]	; (8001cac <HAL_RCC_GetSysClockFreq+0xdc>)
 8001c24:	5cd3      	ldrb	r3, [r2, r3]
 8001c26:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001c28:	68fa      	ldr	r2, [r7, #12]
 8001c2a:	23c0      	movs	r3, #192	; 0xc0
 8001c2c:	025b      	lsls	r3, r3, #9
 8001c2e:	401a      	ands	r2, r3
 8001c30:	2380      	movs	r3, #128	; 0x80
 8001c32:	025b      	lsls	r3, r3, #9
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d109      	bne.n	8001c4c <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001c38:	68b9      	ldr	r1, [r7, #8]
 8001c3a:	481a      	ldr	r0, [pc, #104]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001c3c:	f7fe fa64 	bl	8000108 <__udivsi3>
 8001c40:	0003      	movs	r3, r0
 8001c42:	001a      	movs	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	4353      	muls	r3, r2
 8001c48:	617b      	str	r3, [r7, #20]
 8001c4a:	e01a      	b.n	8001c82 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001c4c:	68fa      	ldr	r2, [r7, #12]
 8001c4e:	23c0      	movs	r3, #192	; 0xc0
 8001c50:	025b      	lsls	r3, r3, #9
 8001c52:	401a      	ands	r2, r3
 8001c54:	23c0      	movs	r3, #192	; 0xc0
 8001c56:	025b      	lsls	r3, r3, #9
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d109      	bne.n	8001c70 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001c5c:	68b9      	ldr	r1, [r7, #8]
 8001c5e:	4814      	ldr	r0, [pc, #80]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0xe0>)
 8001c60:	f7fe fa52 	bl	8000108 <__udivsi3>
 8001c64:	0003      	movs	r3, r0
 8001c66:	001a      	movs	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	4353      	muls	r3, r2
 8001c6c:	617b      	str	r3, [r7, #20]
 8001c6e:	e008      	b.n	8001c82 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001c70:	68b9      	ldr	r1, [r7, #8]
 8001c72:	480c      	ldr	r0, [pc, #48]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001c74:	f7fe fa48 	bl	8000108 <__udivsi3>
 8001c78:	0003      	movs	r3, r0
 8001c7a:	001a      	movs	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4353      	muls	r3, r2
 8001c80:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	613b      	str	r3, [r7, #16]
      break;
 8001c86:	e005      	b.n	8001c94 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001c88:	4b09      	ldr	r3, [pc, #36]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0xe0>)
 8001c8a:	613b      	str	r3, [r7, #16]
      break;
 8001c8c:	e002      	b.n	8001c94 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c8e:	4b05      	ldr	r3, [pc, #20]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001c90:	613b      	str	r3, [r7, #16]
      break;
 8001c92:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001c94:	693b      	ldr	r3, [r7, #16]
}
 8001c96:	0018      	movs	r0, r3
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	b006      	add	sp, #24
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	46c0      	nop			; (mov r8, r8)
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	007a1200 	.word	0x007a1200
 8001ca8:	080028f8 	.word	0x080028f8
 8001cac:	08002908 	.word	0x08002908
 8001cb0:	02dc6c00 	.word	0x02dc6c00

08001cb4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d101      	bne.n	8001cc6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e0a8      	b.n	8001e18 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d109      	bne.n	8001ce2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685a      	ldr	r2, [r3, #4]
 8001cd2:	2382      	movs	r3, #130	; 0x82
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d009      	beq.n	8001cee <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	61da      	str	r2, [r3, #28]
 8001ce0:	e005      	b.n	8001cee <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	225d      	movs	r2, #93	; 0x5d
 8001cf8:	5c9b      	ldrb	r3, [r3, r2]
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d107      	bne.n	8001d10 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	225c      	movs	r2, #92	; 0x5c
 8001d04:	2100      	movs	r1, #0
 8001d06:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	0018      	movs	r0, r3
 8001d0c:	f7fe fde6 	bl	80008dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	225d      	movs	r2, #93	; 0x5d
 8001d14:	2102      	movs	r1, #2
 8001d16:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2140      	movs	r1, #64	; 0x40
 8001d24:	438a      	bics	r2, r1
 8001d26:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	68da      	ldr	r2, [r3, #12]
 8001d2c:	23e0      	movs	r3, #224	; 0xe0
 8001d2e:	00db      	lsls	r3, r3, #3
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d902      	bls.n	8001d3a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001d34:	2300      	movs	r3, #0
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	e002      	b.n	8001d40 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001d3a:	2380      	movs	r3, #128	; 0x80
 8001d3c:	015b      	lsls	r3, r3, #5
 8001d3e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	68da      	ldr	r2, [r3, #12]
 8001d44:	23f0      	movs	r3, #240	; 0xf0
 8001d46:	011b      	lsls	r3, r3, #4
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d008      	beq.n	8001d5e <HAL_SPI_Init+0xaa>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	68da      	ldr	r2, [r3, #12]
 8001d50:	23e0      	movs	r3, #224	; 0xe0
 8001d52:	00db      	lsls	r3, r3, #3
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d002      	beq.n	8001d5e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685a      	ldr	r2, [r3, #4]
 8001d62:	2382      	movs	r3, #130	; 0x82
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	401a      	ands	r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6899      	ldr	r1, [r3, #8]
 8001d6c:	2384      	movs	r3, #132	; 0x84
 8001d6e:	021b      	lsls	r3, r3, #8
 8001d70:	400b      	ands	r3, r1
 8001d72:	431a      	orrs	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	691b      	ldr	r3, [r3, #16]
 8001d78:	2102      	movs	r1, #2
 8001d7a:	400b      	ands	r3, r1
 8001d7c:	431a      	orrs	r2, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	695b      	ldr	r3, [r3, #20]
 8001d82:	2101      	movs	r1, #1
 8001d84:	400b      	ands	r3, r1
 8001d86:	431a      	orrs	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6999      	ldr	r1, [r3, #24]
 8001d8c:	2380      	movs	r3, #128	; 0x80
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	400b      	ands	r3, r1
 8001d92:	431a      	orrs	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	69db      	ldr	r3, [r3, #28]
 8001d98:	2138      	movs	r1, #56	; 0x38
 8001d9a:	400b      	ands	r3, r1
 8001d9c:	431a      	orrs	r2, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6a1b      	ldr	r3, [r3, #32]
 8001da2:	2180      	movs	r1, #128	; 0x80
 8001da4:	400b      	ands	r3, r1
 8001da6:	431a      	orrs	r2, r3
 8001da8:	0011      	movs	r1, r2
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001dae:	2380      	movs	r3, #128	; 0x80
 8001db0:	019b      	lsls	r3, r3, #6
 8001db2:	401a      	ands	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	430a      	orrs	r2, r1
 8001dba:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	699b      	ldr	r3, [r3, #24]
 8001dc0:	0c1b      	lsrs	r3, r3, #16
 8001dc2:	2204      	movs	r2, #4
 8001dc4:	401a      	ands	r2, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dca:	2110      	movs	r1, #16
 8001dcc:	400b      	ands	r3, r1
 8001dce:	431a      	orrs	r2, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dd4:	2108      	movs	r1, #8
 8001dd6:	400b      	ands	r3, r1
 8001dd8:	431a      	orrs	r2, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	68d9      	ldr	r1, [r3, #12]
 8001dde:	23f0      	movs	r3, #240	; 0xf0
 8001de0:	011b      	lsls	r3, r3, #4
 8001de2:	400b      	ands	r3, r1
 8001de4:	431a      	orrs	r2, r3
 8001de6:	0011      	movs	r1, r2
 8001de8:	68fa      	ldr	r2, [r7, #12]
 8001dea:	2380      	movs	r3, #128	; 0x80
 8001dec:	015b      	lsls	r3, r3, #5
 8001dee:	401a      	ands	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	430a      	orrs	r2, r1
 8001df6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	69da      	ldr	r2, [r3, #28]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4907      	ldr	r1, [pc, #28]	; (8001e20 <HAL_SPI_Init+0x16c>)
 8001e04:	400a      	ands	r2, r1
 8001e06:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	225d      	movs	r2, #93	; 0x5d
 8001e12:	2101      	movs	r1, #1
 8001e14:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	0018      	movs	r0, r3
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	b004      	add	sp, #16
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	fffff7ff 	.word	0xfffff7ff

08001e24 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b088      	sub	sp, #32
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	2240      	movs	r2, #64	; 0x40
 8001e40:	4013      	ands	r3, r2
 8001e42:	d10d      	bne.n	8001e60 <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	2201      	movs	r2, #1
 8001e48:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001e4a:	d009      	beq.n	8001e60 <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	2240      	movs	r2, #64	; 0x40
 8001e50:	4013      	ands	r3, r2
 8001e52:	d005      	beq.n	8001e60 <HAL_SPI_IRQHandler+0x3c>
  {
    hspi->RxISR(hspi);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	0010      	movs	r0, r2
 8001e5c:	4798      	blx	r3
    return;
 8001e5e:	e0c5      	b.n	8001fec <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	2202      	movs	r2, #2
 8001e64:	4013      	ands	r3, r2
 8001e66:	d009      	beq.n	8001e7c <HAL_SPI_IRQHandler+0x58>
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	2280      	movs	r2, #128	; 0x80
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	d005      	beq.n	8001e7c <HAL_SPI_IRQHandler+0x58>
  {
    hspi->TxISR(hspi);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	0010      	movs	r0, r2
 8001e78:	4798      	blx	r3
    return;
 8001e7a:	e0b7      	b.n	8001fec <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	2220      	movs	r2, #32
 8001e80:	4013      	ands	r3, r2
 8001e82:	d109      	bne.n	8001e98 <HAL_SPI_IRQHandler+0x74>
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	2240      	movs	r2, #64	; 0x40
 8001e88:	4013      	ands	r3, r2
 8001e8a:	d105      	bne.n	8001e98 <HAL_SPI_IRQHandler+0x74>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	2380      	movs	r3, #128	; 0x80
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	4013      	ands	r3, r2
 8001e94:	d100      	bne.n	8001e98 <HAL_SPI_IRQHandler+0x74>
 8001e96:	e0a9      	b.n	8001fec <HAL_SPI_IRQHandler+0x1c8>
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	2220      	movs	r2, #32
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	d100      	bne.n	8001ea2 <HAL_SPI_IRQHandler+0x7e>
 8001ea0:	e0a4      	b.n	8001fec <HAL_SPI_IRQHandler+0x1c8>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	2240      	movs	r2, #64	; 0x40
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	d023      	beq.n	8001ef2 <HAL_SPI_IRQHandler+0xce>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	225d      	movs	r2, #93	; 0x5d
 8001eae:	5c9b      	ldrb	r3, [r3, r2]
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b03      	cmp	r3, #3
 8001eb4:	d011      	beq.n	8001eda <HAL_SPI_IRQHandler+0xb6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eba:	2204      	movs	r2, #4
 8001ebc:	431a      	orrs	r2, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	617b      	str	r3, [r7, #20]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	617b      	str	r3, [r7, #20]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	617b      	str	r3, [r7, #20]
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	e00b      	b.n	8001ef2 <HAL_SPI_IRQHandler+0xce>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001eda:	2300      	movs	r3, #0
 8001edc:	613b      	str	r3, [r7, #16]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	613b      	str	r3, [r7, #16]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	613b      	str	r3, [r7, #16]
 8001eee:	693b      	ldr	r3, [r7, #16]
        return;
 8001ef0:	e07c      	b.n	8001fec <HAL_SPI_IRQHandler+0x1c8>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	2220      	movs	r2, #32
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	d014      	beq.n	8001f24 <HAL_SPI_IRQHandler+0x100>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001efe:	2201      	movs	r2, #1
 8001f00:	431a      	orrs	r2, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8001f06:	2300      	movs	r3, #0
 8001f08:	60fb      	str	r3, [r7, #12]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	60fb      	str	r3, [r7, #12]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2140      	movs	r1, #64	; 0x40
 8001f1e:	438a      	bics	r2, r1
 8001f20:	601a      	str	r2, [r3, #0]
 8001f22:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	2380      	movs	r3, #128	; 0x80
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	d00c      	beq.n	8001f48 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f32:	2208      	movs	r2, #8
 8001f34:	431a      	orrs	r2, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	60bb      	str	r3, [r7, #8]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	60bb      	str	r3, [r7, #8]
 8001f46:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d04c      	beq.n	8001fea <HAL_SPI_IRQHandler+0x1c6>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	685a      	ldr	r2, [r3, #4]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	21e0      	movs	r1, #224	; 0xe0
 8001f5c:	438a      	bics	r2, r1
 8001f5e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	225d      	movs	r2, #93	; 0x5d
 8001f64:	2101      	movs	r1, #1
 8001f66:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	2202      	movs	r2, #2
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	d103      	bne.n	8001f78 <HAL_SPI_IRQHandler+0x154>
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	2201      	movs	r2, #1
 8001f74:	4013      	ands	r3, r2
 8001f76:	d032      	beq.n	8001fde <HAL_SPI_IRQHandler+0x1ba>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	685a      	ldr	r2, [r3, #4]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2103      	movs	r1, #3
 8001f84:	438a      	bics	r2, r1
 8001f86:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d010      	beq.n	8001fb2 <HAL_SPI_IRQHandler+0x18e>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f94:	4a17      	ldr	r2, [pc, #92]	; (8001ff4 <HAL_SPI_IRQHandler+0x1d0>)
 8001f96:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f9c:	0018      	movs	r0, r3
 8001f9e:	f7fe ffec 	bl	8000f7a <HAL_DMA_Abort_IT>
 8001fa2:	1e03      	subs	r3, r0, #0
 8001fa4:	d005      	beq.n	8001fb2 <HAL_SPI_IRQHandler+0x18e>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001faa:	2240      	movs	r2, #64	; 0x40
 8001fac:	431a      	orrs	r2, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d016      	beq.n	8001fe8 <HAL_SPI_IRQHandler+0x1c4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fbe:	4a0d      	ldr	r2, [pc, #52]	; (8001ff4 <HAL_SPI_IRQHandler+0x1d0>)
 8001fc0:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fc6:	0018      	movs	r0, r3
 8001fc8:	f7fe ffd7 	bl	8000f7a <HAL_DMA_Abort_IT>
 8001fcc:	1e03      	subs	r3, r0, #0
 8001fce:	d00b      	beq.n	8001fe8 <HAL_SPI_IRQHandler+0x1c4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fd4:	2240      	movs	r2, #64	; 0x40
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8001fdc:	e004      	b.n	8001fe8 <HAL_SPI_IRQHandler+0x1c4>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	0018      	movs	r0, r3
 8001fe2:	f000 f809 	bl	8001ff8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8001fe6:	e000      	b.n	8001fea <HAL_SPI_IRQHandler+0x1c6>
        if (hspi->hdmatx != NULL)
 8001fe8:	46c0      	nop			; (mov r8, r8)
    return;
 8001fea:	46c0      	nop			; (mov r8, r8)
  }
}
 8001fec:	46bd      	mov	sp, r7
 8001fee:	b008      	add	sp, #32
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	46c0      	nop			; (mov r8, r8)
 8001ff4:	08002009 	.word	0x08002009

08001ff8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002000:	46c0      	nop			; (mov r8, r8)
 8002002:	46bd      	mov	sp, r7
 8002004:	b002      	add	sp, #8
 8002006:	bd80      	pop	{r7, pc}

08002008 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002014:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2246      	movs	r2, #70	; 0x46
 800201a:	2100      	movs	r1, #0
 800201c:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2200      	movs	r2, #0
 8002022:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	0018      	movs	r0, r3
 8002028:	f7ff ffe6 	bl	8001ff8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800202c:	46c0      	nop			; (mov r8, r8)
 800202e:	46bd      	mov	sp, r7
 8002030:	b004      	add	sp, #16
 8002032:	bd80      	pop	{r7, pc}

08002034 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d101      	bne.n	8002046 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e042      	b.n	80020cc <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	223d      	movs	r2, #61	; 0x3d
 800204a:	5c9b      	ldrb	r3, [r3, r2]
 800204c:	b2db      	uxtb	r3, r3
 800204e:	2b00      	cmp	r3, #0
 8002050:	d107      	bne.n	8002062 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	223c      	movs	r2, #60	; 0x3c
 8002056:	2100      	movs	r1, #0
 8002058:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	0018      	movs	r0, r3
 800205e:	f7fe fc91 	bl	8000984 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	223d      	movs	r2, #61	; 0x3d
 8002066:	2102      	movs	r1, #2
 8002068:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	3304      	adds	r3, #4
 8002072:	0019      	movs	r1, r3
 8002074:	0010      	movs	r0, r2
 8002076:	f000 f8f3 	bl	8002260 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2246      	movs	r2, #70	; 0x46
 800207e:	2101      	movs	r1, #1
 8002080:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	223e      	movs	r2, #62	; 0x3e
 8002086:	2101      	movs	r1, #1
 8002088:	5499      	strb	r1, [r3, r2]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	223f      	movs	r2, #63	; 0x3f
 800208e:	2101      	movs	r1, #1
 8002090:	5499      	strb	r1, [r3, r2]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2240      	movs	r2, #64	; 0x40
 8002096:	2101      	movs	r1, #1
 8002098:	5499      	strb	r1, [r3, r2]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2241      	movs	r2, #65	; 0x41
 800209e:	2101      	movs	r1, #1
 80020a0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2242      	movs	r2, #66	; 0x42
 80020a6:	2101      	movs	r1, #1
 80020a8:	5499      	strb	r1, [r3, r2]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2243      	movs	r2, #67	; 0x43
 80020ae:	2101      	movs	r1, #1
 80020b0:	5499      	strb	r1, [r3, r2]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2244      	movs	r2, #68	; 0x44
 80020b6:	2101      	movs	r1, #1
 80020b8:	5499      	strb	r1, [r3, r2]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2245      	movs	r2, #69	; 0x45
 80020be:	2101      	movs	r1, #1
 80020c0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	223d      	movs	r2, #61	; 0x3d
 80020c6:	2101      	movs	r1, #1
 80020c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80020ca:	2300      	movs	r3, #0
}
 80020cc:	0018      	movs	r0, r3
 80020ce:	46bd      	mov	sp, r7
 80020d0:	b002      	add	sp, #8
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b086      	sub	sp, #24
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020e0:	2317      	movs	r3, #23
 80020e2:	18fb      	adds	r3, r7, r3
 80020e4:	2200      	movs	r2, #0
 80020e6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	223c      	movs	r2, #60	; 0x3c
 80020ec:	5c9b      	ldrb	r3, [r3, r2]
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d101      	bne.n	80020f6 <HAL_TIM_PWM_ConfigChannel+0x22>
 80020f2:	2302      	movs	r3, #2
 80020f4:	e0ad      	b.n	8002252 <HAL_TIM_PWM_ConfigChannel+0x17e>
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	223c      	movs	r2, #60	; 0x3c
 80020fa:	2101      	movs	r1, #1
 80020fc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2b0c      	cmp	r3, #12
 8002102:	d100      	bne.n	8002106 <HAL_TIM_PWM_ConfigChannel+0x32>
 8002104:	e076      	b.n	80021f4 <HAL_TIM_PWM_ConfigChannel+0x120>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2b0c      	cmp	r3, #12
 800210a:	d900      	bls.n	800210e <HAL_TIM_PWM_ConfigChannel+0x3a>
 800210c:	e095      	b.n	800223a <HAL_TIM_PWM_ConfigChannel+0x166>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2b08      	cmp	r3, #8
 8002112:	d04e      	beq.n	80021b2 <HAL_TIM_PWM_ConfigChannel+0xde>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2b08      	cmp	r3, #8
 8002118:	d900      	bls.n	800211c <HAL_TIM_PWM_ConfigChannel+0x48>
 800211a:	e08e      	b.n	800223a <HAL_TIM_PWM_ConfigChannel+0x166>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d003      	beq.n	800212a <HAL_TIM_PWM_ConfigChannel+0x56>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2b04      	cmp	r3, #4
 8002126:	d021      	beq.n	800216c <HAL_TIM_PWM_ConfigChannel+0x98>
 8002128:	e087      	b.n	800223a <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	68ba      	ldr	r2, [r7, #8]
 8002130:	0011      	movs	r1, r2
 8002132:	0018      	movs	r0, r3
 8002134:	f000 f90a 	bl	800234c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	699a      	ldr	r2, [r3, #24]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2108      	movs	r1, #8
 8002144:	430a      	orrs	r2, r1
 8002146:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	699a      	ldr	r2, [r3, #24]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2104      	movs	r1, #4
 8002154:	438a      	bics	r2, r1
 8002156:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	6999      	ldr	r1, [r3, #24]
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	691a      	ldr	r2, [r3, #16]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	430a      	orrs	r2, r1
 8002168:	619a      	str	r2, [r3, #24]
      break;
 800216a:	e06b      	b.n	8002244 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	68ba      	ldr	r2, [r7, #8]
 8002172:	0011      	movs	r1, r2
 8002174:	0018      	movs	r0, r3
 8002176:	f000 f967 	bl	8002448 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	699a      	ldr	r2, [r3, #24]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2180      	movs	r1, #128	; 0x80
 8002186:	0109      	lsls	r1, r1, #4
 8002188:	430a      	orrs	r2, r1
 800218a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	699a      	ldr	r2, [r3, #24]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4931      	ldr	r1, [pc, #196]	; (800225c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002198:	400a      	ands	r2, r1
 800219a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	6999      	ldr	r1, [r3, #24]
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	691b      	ldr	r3, [r3, #16]
 80021a6:	021a      	lsls	r2, r3, #8
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	430a      	orrs	r2, r1
 80021ae:	619a      	str	r2, [r3, #24]
      break;
 80021b0:	e048      	b.n	8002244 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	68ba      	ldr	r2, [r7, #8]
 80021b8:	0011      	movs	r1, r2
 80021ba:	0018      	movs	r0, r3
 80021bc:	f000 f9c2 	bl	8002544 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	69da      	ldr	r2, [r3, #28]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2108      	movs	r1, #8
 80021cc:	430a      	orrs	r2, r1
 80021ce:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	69da      	ldr	r2, [r3, #28]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	2104      	movs	r1, #4
 80021dc:	438a      	bics	r2, r1
 80021de:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	69d9      	ldr	r1, [r3, #28]
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	691a      	ldr	r2, [r3, #16]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	430a      	orrs	r2, r1
 80021f0:	61da      	str	r2, [r3, #28]
      break;
 80021f2:	e027      	b.n	8002244 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	68ba      	ldr	r2, [r7, #8]
 80021fa:	0011      	movs	r1, r2
 80021fc:	0018      	movs	r0, r3
 80021fe:	f000 fa21 	bl	8002644 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	69da      	ldr	r2, [r3, #28]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2180      	movs	r1, #128	; 0x80
 800220e:	0109      	lsls	r1, r1, #4
 8002210:	430a      	orrs	r2, r1
 8002212:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	69da      	ldr	r2, [r3, #28]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	490f      	ldr	r1, [pc, #60]	; (800225c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002220:	400a      	ands	r2, r1
 8002222:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	69d9      	ldr	r1, [r3, #28]
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	021a      	lsls	r2, r3, #8
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	430a      	orrs	r2, r1
 8002236:	61da      	str	r2, [r3, #28]
      break;
 8002238:	e004      	b.n	8002244 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800223a:	2317      	movs	r3, #23
 800223c:	18fb      	adds	r3, r7, r3
 800223e:	2201      	movs	r2, #1
 8002240:	701a      	strb	r2, [r3, #0]
      break;
 8002242:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	223c      	movs	r2, #60	; 0x3c
 8002248:	2100      	movs	r1, #0
 800224a:	5499      	strb	r1, [r3, r2]

  return status;
 800224c:	2317      	movs	r3, #23
 800224e:	18fb      	adds	r3, r7, r3
 8002250:	781b      	ldrb	r3, [r3, #0]
}
 8002252:	0018      	movs	r0, r3
 8002254:	46bd      	mov	sp, r7
 8002256:	b006      	add	sp, #24
 8002258:	bd80      	pop	{r7, pc}
 800225a:	46c0      	nop			; (mov r8, r8)
 800225c:	fffffbff 	.word	0xfffffbff

08002260 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	4a30      	ldr	r2, [pc, #192]	; (8002334 <TIM_Base_SetConfig+0xd4>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d008      	beq.n	800228a <TIM_Base_SetConfig+0x2a>
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	2380      	movs	r3, #128	; 0x80
 800227c:	05db      	lsls	r3, r3, #23
 800227e:	429a      	cmp	r2, r3
 8002280:	d003      	beq.n	800228a <TIM_Base_SetConfig+0x2a>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a2c      	ldr	r2, [pc, #176]	; (8002338 <TIM_Base_SetConfig+0xd8>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d108      	bne.n	800229c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2270      	movs	r2, #112	; 0x70
 800228e:	4393      	bics	r3, r2
 8002290:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	68fa      	ldr	r2, [r7, #12]
 8002298:	4313      	orrs	r3, r2
 800229a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	4a25      	ldr	r2, [pc, #148]	; (8002334 <TIM_Base_SetConfig+0xd4>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d014      	beq.n	80022ce <TIM_Base_SetConfig+0x6e>
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	2380      	movs	r3, #128	; 0x80
 80022a8:	05db      	lsls	r3, r3, #23
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d00f      	beq.n	80022ce <TIM_Base_SetConfig+0x6e>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a21      	ldr	r2, [pc, #132]	; (8002338 <TIM_Base_SetConfig+0xd8>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d00b      	beq.n	80022ce <TIM_Base_SetConfig+0x6e>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a20      	ldr	r2, [pc, #128]	; (800233c <TIM_Base_SetConfig+0xdc>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d007      	beq.n	80022ce <TIM_Base_SetConfig+0x6e>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a1f      	ldr	r2, [pc, #124]	; (8002340 <TIM_Base_SetConfig+0xe0>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d003      	beq.n	80022ce <TIM_Base_SetConfig+0x6e>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a1e      	ldr	r2, [pc, #120]	; (8002344 <TIM_Base_SetConfig+0xe4>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d108      	bne.n	80022e0 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	4a1d      	ldr	r2, [pc, #116]	; (8002348 <TIM_Base_SetConfig+0xe8>)
 80022d2:	4013      	ands	r3, r2
 80022d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	68fa      	ldr	r2, [r7, #12]
 80022dc:	4313      	orrs	r3, r2
 80022de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2280      	movs	r2, #128	; 0x80
 80022e4:	4393      	bics	r3, r2
 80022e6:	001a      	movs	r2, r3
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	695b      	ldr	r3, [r3, #20]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	68fa      	ldr	r2, [r7, #12]
 80022f4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	689a      	ldr	r2, [r3, #8]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a0a      	ldr	r2, [pc, #40]	; (8002334 <TIM_Base_SetConfig+0xd4>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d007      	beq.n	800231e <TIM_Base_SetConfig+0xbe>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a0b      	ldr	r2, [pc, #44]	; (8002340 <TIM_Base_SetConfig+0xe0>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d003      	beq.n	800231e <TIM_Base_SetConfig+0xbe>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a0a      	ldr	r2, [pc, #40]	; (8002344 <TIM_Base_SetConfig+0xe4>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d103      	bne.n	8002326 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	691a      	ldr	r2, [r3, #16]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2201      	movs	r2, #1
 800232a:	615a      	str	r2, [r3, #20]
}
 800232c:	46c0      	nop			; (mov r8, r8)
 800232e:	46bd      	mov	sp, r7
 8002330:	b004      	add	sp, #16
 8002332:	bd80      	pop	{r7, pc}
 8002334:	40012c00 	.word	0x40012c00
 8002338:	40000400 	.word	0x40000400
 800233c:	40002000 	.word	0x40002000
 8002340:	40014400 	.word	0x40014400
 8002344:	40014800 	.word	0x40014800
 8002348:	fffffcff 	.word	0xfffffcff

0800234c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a1b      	ldr	r3, [r3, #32]
 800235a:	2201      	movs	r2, #1
 800235c:	4393      	bics	r3, r2
 800235e:	001a      	movs	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6a1b      	ldr	r3, [r3, #32]
 8002368:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2270      	movs	r2, #112	; 0x70
 800237a:	4393      	bics	r3, r2
 800237c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2203      	movs	r2, #3
 8002382:	4393      	bics	r3, r2
 8002384:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68fa      	ldr	r2, [r7, #12]
 800238c:	4313      	orrs	r3, r2
 800238e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	2202      	movs	r2, #2
 8002394:	4393      	bics	r3, r2
 8002396:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	697a      	ldr	r2, [r7, #20]
 800239e:	4313      	orrs	r3, r2
 80023a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a23      	ldr	r2, [pc, #140]	; (8002434 <TIM_OC1_SetConfig+0xe8>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d007      	beq.n	80023ba <TIM_OC1_SetConfig+0x6e>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a22      	ldr	r2, [pc, #136]	; (8002438 <TIM_OC1_SetConfig+0xec>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d003      	beq.n	80023ba <TIM_OC1_SetConfig+0x6e>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a21      	ldr	r2, [pc, #132]	; (800243c <TIM_OC1_SetConfig+0xf0>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d10c      	bne.n	80023d4 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	2208      	movs	r2, #8
 80023be:	4393      	bics	r3, r2
 80023c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	697a      	ldr	r2, [r7, #20]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	2204      	movs	r2, #4
 80023d0:	4393      	bics	r3, r2
 80023d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	4a17      	ldr	r2, [pc, #92]	; (8002434 <TIM_OC1_SetConfig+0xe8>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d007      	beq.n	80023ec <TIM_OC1_SetConfig+0xa0>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4a16      	ldr	r2, [pc, #88]	; (8002438 <TIM_OC1_SetConfig+0xec>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d003      	beq.n	80023ec <TIM_OC1_SetConfig+0xa0>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4a15      	ldr	r2, [pc, #84]	; (800243c <TIM_OC1_SetConfig+0xf0>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d111      	bne.n	8002410 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	4a14      	ldr	r2, [pc, #80]	; (8002440 <TIM_OC1_SetConfig+0xf4>)
 80023f0:	4013      	ands	r3, r2
 80023f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	4a13      	ldr	r2, [pc, #76]	; (8002444 <TIM_OC1_SetConfig+0xf8>)
 80023f8:	4013      	ands	r3, r2
 80023fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	695b      	ldr	r3, [r3, #20]
 8002400:	693a      	ldr	r2, [r7, #16]
 8002402:	4313      	orrs	r3, r2
 8002404:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	693a      	ldr	r2, [r7, #16]
 800240c:	4313      	orrs	r3, r2
 800240e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	693a      	ldr	r2, [r7, #16]
 8002414:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	68fa      	ldr	r2, [r7, #12]
 800241a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685a      	ldr	r2, [r3, #4]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	697a      	ldr	r2, [r7, #20]
 8002428:	621a      	str	r2, [r3, #32]
}
 800242a:	46c0      	nop			; (mov r8, r8)
 800242c:	46bd      	mov	sp, r7
 800242e:	b006      	add	sp, #24
 8002430:	bd80      	pop	{r7, pc}
 8002432:	46c0      	nop			; (mov r8, r8)
 8002434:	40012c00 	.word	0x40012c00
 8002438:	40014400 	.word	0x40014400
 800243c:	40014800 	.word	0x40014800
 8002440:	fffffeff 	.word	0xfffffeff
 8002444:	fffffdff 	.word	0xfffffdff

08002448 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a1b      	ldr	r3, [r3, #32]
 8002456:	2210      	movs	r2, #16
 8002458:	4393      	bics	r3, r2
 800245a:	001a      	movs	r2, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6a1b      	ldr	r3, [r3, #32]
 8002464:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	699b      	ldr	r3, [r3, #24]
 8002470:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	4a2c      	ldr	r2, [pc, #176]	; (8002528 <TIM_OC2_SetConfig+0xe0>)
 8002476:	4013      	ands	r3, r2
 8002478:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	4a2b      	ldr	r2, [pc, #172]	; (800252c <TIM_OC2_SetConfig+0xe4>)
 800247e:	4013      	ands	r3, r2
 8002480:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	021b      	lsls	r3, r3, #8
 8002488:	68fa      	ldr	r2, [r7, #12]
 800248a:	4313      	orrs	r3, r2
 800248c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	2220      	movs	r2, #32
 8002492:	4393      	bics	r3, r2
 8002494:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	011b      	lsls	r3, r3, #4
 800249c:	697a      	ldr	r2, [r7, #20]
 800249e:	4313      	orrs	r3, r2
 80024a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a22      	ldr	r2, [pc, #136]	; (8002530 <TIM_OC2_SetConfig+0xe8>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d10d      	bne.n	80024c6 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	2280      	movs	r2, #128	; 0x80
 80024ae:	4393      	bics	r3, r2
 80024b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	011b      	lsls	r3, r3, #4
 80024b8:	697a      	ldr	r2, [r7, #20]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	2240      	movs	r2, #64	; 0x40
 80024c2:	4393      	bics	r3, r2
 80024c4:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a19      	ldr	r2, [pc, #100]	; (8002530 <TIM_OC2_SetConfig+0xe8>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d007      	beq.n	80024de <TIM_OC2_SetConfig+0x96>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a18      	ldr	r2, [pc, #96]	; (8002534 <TIM_OC2_SetConfig+0xec>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d003      	beq.n	80024de <TIM_OC2_SetConfig+0x96>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a17      	ldr	r2, [pc, #92]	; (8002538 <TIM_OC2_SetConfig+0xf0>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d113      	bne.n	8002506 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	4a16      	ldr	r2, [pc, #88]	; (800253c <TIM_OC2_SetConfig+0xf4>)
 80024e2:	4013      	ands	r3, r2
 80024e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	4a15      	ldr	r2, [pc, #84]	; (8002540 <TIM_OC2_SetConfig+0xf8>)
 80024ea:	4013      	ands	r3, r2
 80024ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	695b      	ldr	r3, [r3, #20]
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	693a      	ldr	r2, [r7, #16]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	699b      	ldr	r3, [r3, #24]
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	693a      	ldr	r2, [r7, #16]
 8002502:	4313      	orrs	r3, r2
 8002504:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	693a      	ldr	r2, [r7, #16]
 800250a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	68fa      	ldr	r2, [r7, #12]
 8002510:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685a      	ldr	r2, [r3, #4]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	697a      	ldr	r2, [r7, #20]
 800251e:	621a      	str	r2, [r3, #32]
}
 8002520:	46c0      	nop			; (mov r8, r8)
 8002522:	46bd      	mov	sp, r7
 8002524:	b006      	add	sp, #24
 8002526:	bd80      	pop	{r7, pc}
 8002528:	ffff8fff 	.word	0xffff8fff
 800252c:	fffffcff 	.word	0xfffffcff
 8002530:	40012c00 	.word	0x40012c00
 8002534:	40014400 	.word	0x40014400
 8002538:	40014800 	.word	0x40014800
 800253c:	fffffbff 	.word	0xfffffbff
 8002540:	fffff7ff 	.word	0xfffff7ff

08002544 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b086      	sub	sp, #24
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a1b      	ldr	r3, [r3, #32]
 8002552:	4a33      	ldr	r2, [pc, #204]	; (8002620 <TIM_OC3_SetConfig+0xdc>)
 8002554:	401a      	ands	r2, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a1b      	ldr	r3, [r3, #32]
 800255e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	69db      	ldr	r3, [r3, #28]
 800256a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2270      	movs	r2, #112	; 0x70
 8002570:	4393      	bics	r3, r2
 8002572:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2203      	movs	r2, #3
 8002578:	4393      	bics	r3, r2
 800257a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	68fa      	ldr	r2, [r7, #12]
 8002582:	4313      	orrs	r3, r2
 8002584:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	4a26      	ldr	r2, [pc, #152]	; (8002624 <TIM_OC3_SetConfig+0xe0>)
 800258a:	4013      	ands	r3, r2
 800258c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	021b      	lsls	r3, r3, #8
 8002594:	697a      	ldr	r2, [r7, #20]
 8002596:	4313      	orrs	r3, r2
 8002598:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a22      	ldr	r2, [pc, #136]	; (8002628 <TIM_OC3_SetConfig+0xe4>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d10d      	bne.n	80025be <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	4a21      	ldr	r2, [pc, #132]	; (800262c <TIM_OC3_SetConfig+0xe8>)
 80025a6:	4013      	ands	r3, r2
 80025a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	021b      	lsls	r3, r3, #8
 80025b0:	697a      	ldr	r2, [r7, #20]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	4a1d      	ldr	r2, [pc, #116]	; (8002630 <TIM_OC3_SetConfig+0xec>)
 80025ba:	4013      	ands	r3, r2
 80025bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a19      	ldr	r2, [pc, #100]	; (8002628 <TIM_OC3_SetConfig+0xe4>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d007      	beq.n	80025d6 <TIM_OC3_SetConfig+0x92>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a1a      	ldr	r2, [pc, #104]	; (8002634 <TIM_OC3_SetConfig+0xf0>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d003      	beq.n	80025d6 <TIM_OC3_SetConfig+0x92>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a19      	ldr	r2, [pc, #100]	; (8002638 <TIM_OC3_SetConfig+0xf4>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d113      	bne.n	80025fe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	4a18      	ldr	r2, [pc, #96]	; (800263c <TIM_OC3_SetConfig+0xf8>)
 80025da:	4013      	ands	r3, r2
 80025dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	4a17      	ldr	r2, [pc, #92]	; (8002640 <TIM_OC3_SetConfig+0xfc>)
 80025e2:	4013      	ands	r3, r2
 80025e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	695b      	ldr	r3, [r3, #20]
 80025ea:	011b      	lsls	r3, r3, #4
 80025ec:	693a      	ldr	r2, [r7, #16]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	699b      	ldr	r3, [r3, #24]
 80025f6:	011b      	lsls	r3, r3, #4
 80025f8:	693a      	ldr	r2, [r7, #16]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	693a      	ldr	r2, [r7, #16]
 8002602:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685a      	ldr	r2, [r3, #4]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	697a      	ldr	r2, [r7, #20]
 8002616:	621a      	str	r2, [r3, #32]
}
 8002618:	46c0      	nop			; (mov r8, r8)
 800261a:	46bd      	mov	sp, r7
 800261c:	b006      	add	sp, #24
 800261e:	bd80      	pop	{r7, pc}
 8002620:	fffffeff 	.word	0xfffffeff
 8002624:	fffffdff 	.word	0xfffffdff
 8002628:	40012c00 	.word	0x40012c00
 800262c:	fffff7ff 	.word	0xfffff7ff
 8002630:	fffffbff 	.word	0xfffffbff
 8002634:	40014400 	.word	0x40014400
 8002638:	40014800 	.word	0x40014800
 800263c:	ffffefff 	.word	0xffffefff
 8002640:	ffffdfff 	.word	0xffffdfff

08002644 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b086      	sub	sp, #24
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a1b      	ldr	r3, [r3, #32]
 8002652:	4a26      	ldr	r2, [pc, #152]	; (80026ec <TIM_OC4_SetConfig+0xa8>)
 8002654:	401a      	ands	r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a1b      	ldr	r3, [r3, #32]
 800265e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	69db      	ldr	r3, [r3, #28]
 800266a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	4a20      	ldr	r2, [pc, #128]	; (80026f0 <TIM_OC4_SetConfig+0xac>)
 8002670:	4013      	ands	r3, r2
 8002672:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	4a1f      	ldr	r2, [pc, #124]	; (80026f4 <TIM_OC4_SetConfig+0xb0>)
 8002678:	4013      	ands	r3, r2
 800267a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	021b      	lsls	r3, r3, #8
 8002682:	68fa      	ldr	r2, [r7, #12]
 8002684:	4313      	orrs	r3, r2
 8002686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	4a1b      	ldr	r2, [pc, #108]	; (80026f8 <TIM_OC4_SetConfig+0xb4>)
 800268c:	4013      	ands	r3, r2
 800268e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	031b      	lsls	r3, r3, #12
 8002696:	693a      	ldr	r2, [r7, #16]
 8002698:	4313      	orrs	r3, r2
 800269a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	4a17      	ldr	r2, [pc, #92]	; (80026fc <TIM_OC4_SetConfig+0xb8>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d007      	beq.n	80026b4 <TIM_OC4_SetConfig+0x70>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	4a16      	ldr	r2, [pc, #88]	; (8002700 <TIM_OC4_SetConfig+0xbc>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d003      	beq.n	80026b4 <TIM_OC4_SetConfig+0x70>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	4a15      	ldr	r2, [pc, #84]	; (8002704 <TIM_OC4_SetConfig+0xc0>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d109      	bne.n	80026c8 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	4a14      	ldr	r2, [pc, #80]	; (8002708 <TIM_OC4_SetConfig+0xc4>)
 80026b8:	4013      	ands	r3, r2
 80026ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	695b      	ldr	r3, [r3, #20]
 80026c0:	019b      	lsls	r3, r3, #6
 80026c2:	697a      	ldr	r2, [r7, #20]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	697a      	ldr	r2, [r7, #20]
 80026cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685a      	ldr	r2, [r3, #4]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	621a      	str	r2, [r3, #32]
}
 80026e2:	46c0      	nop			; (mov r8, r8)
 80026e4:	46bd      	mov	sp, r7
 80026e6:	b006      	add	sp, #24
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	46c0      	nop			; (mov r8, r8)
 80026ec:	ffffefff 	.word	0xffffefff
 80026f0:	ffff8fff 	.word	0xffff8fff
 80026f4:	fffffcff 	.word	0xfffffcff
 80026f8:	ffffdfff 	.word	0xffffdfff
 80026fc:	40012c00 	.word	0x40012c00
 8002700:	40014400 	.word	0x40014400
 8002704:	40014800 	.word	0x40014800
 8002708:	ffffbfff 	.word	0xffffbfff

0800270c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	223c      	movs	r2, #60	; 0x3c
 800271a:	5c9b      	ldrb	r3, [r3, r2]
 800271c:	2b01      	cmp	r3, #1
 800271e:	d101      	bne.n	8002724 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002720:	2302      	movs	r3, #2
 8002722:	e042      	b.n	80027aa <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	223c      	movs	r2, #60	; 0x3c
 8002728:	2101      	movs	r1, #1
 800272a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	223d      	movs	r2, #61	; 0x3d
 8002730:	2102      	movs	r1, #2
 8002732:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2270      	movs	r2, #112	; 0x70
 8002748:	4393      	bics	r3, r2
 800274a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	68fa      	ldr	r2, [r7, #12]
 8002752:	4313      	orrs	r3, r2
 8002754:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a14      	ldr	r2, [pc, #80]	; (80027b4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d00a      	beq.n	800277e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	2380      	movs	r3, #128	; 0x80
 800276e:	05db      	lsls	r3, r3, #23
 8002770:	429a      	cmp	r2, r3
 8002772:	d004      	beq.n	800277e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a0f      	ldr	r2, [pc, #60]	; (80027b8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d10c      	bne.n	8002798 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	2280      	movs	r2, #128	; 0x80
 8002782:	4393      	bics	r3, r2
 8002784:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	68ba      	ldr	r2, [r7, #8]
 800278c:	4313      	orrs	r3, r2
 800278e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	68ba      	ldr	r2, [r7, #8]
 8002796:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	223d      	movs	r2, #61	; 0x3d
 800279c:	2101      	movs	r1, #1
 800279e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	223c      	movs	r2, #60	; 0x3c
 80027a4:	2100      	movs	r1, #0
 80027a6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	0018      	movs	r0, r3
 80027ac:	46bd      	mov	sp, r7
 80027ae:	b004      	add	sp, #16
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	46c0      	nop			; (mov r8, r8)
 80027b4:	40012c00 	.word	0x40012c00
 80027b8:	40000400 	.word	0x40000400

080027bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80027c6:	2300      	movs	r3, #0
 80027c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	223c      	movs	r2, #60	; 0x3c
 80027ce:	5c9b      	ldrb	r3, [r3, r2]
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d101      	bne.n	80027d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80027d4:	2302      	movs	r3, #2
 80027d6:	e03e      	b.n	8002856 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	223c      	movs	r2, #60	; 0x3c
 80027dc:	2101      	movs	r1, #1
 80027de:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	22ff      	movs	r2, #255	; 0xff
 80027e4:	4393      	bics	r3, r2
 80027e6:	001a      	movs	r2, r3
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	4a1b      	ldr	r2, [pc, #108]	; (8002860 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 80027f4:	401a      	ands	r2, r3
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	4a18      	ldr	r2, [pc, #96]	; (8002864 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8002802:	401a      	ands	r2, r3
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	4313      	orrs	r3, r2
 800280a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	4a16      	ldr	r2, [pc, #88]	; (8002868 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8002810:	401a      	ands	r2, r3
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4313      	orrs	r3, r2
 8002818:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	4a13      	ldr	r2, [pc, #76]	; (800286c <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 800281e:	401a      	ands	r2, r3
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	691b      	ldr	r3, [r3, #16]
 8002824:	4313      	orrs	r3, r2
 8002826:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	4a11      	ldr	r2, [pc, #68]	; (8002870 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 800282c:	401a      	ands	r2, r3
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	695b      	ldr	r3, [r3, #20]
 8002832:	4313      	orrs	r3, r2
 8002834:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	4a0e      	ldr	r2, [pc, #56]	; (8002874 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 800283a:	401a      	ands	r2, r3
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	69db      	ldr	r3, [r3, #28]
 8002840:	4313      	orrs	r3, r2
 8002842:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	68fa      	ldr	r2, [r7, #12]
 800284a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	223c      	movs	r2, #60	; 0x3c
 8002850:	2100      	movs	r1, #0
 8002852:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002854:	2300      	movs	r3, #0
}
 8002856:	0018      	movs	r0, r3
 8002858:	46bd      	mov	sp, r7
 800285a:	b004      	add	sp, #16
 800285c:	bd80      	pop	{r7, pc}
 800285e:	46c0      	nop			; (mov r8, r8)
 8002860:	fffffcff 	.word	0xfffffcff
 8002864:	fffffbff 	.word	0xfffffbff
 8002868:	fffff7ff 	.word	0xfffff7ff
 800286c:	ffffefff 	.word	0xffffefff
 8002870:	ffffdfff 	.word	0xffffdfff
 8002874:	ffffbfff 	.word	0xffffbfff

08002878 <memset>:
 8002878:	0003      	movs	r3, r0
 800287a:	1882      	adds	r2, r0, r2
 800287c:	4293      	cmp	r3, r2
 800287e:	d100      	bne.n	8002882 <memset+0xa>
 8002880:	4770      	bx	lr
 8002882:	7019      	strb	r1, [r3, #0]
 8002884:	3301      	adds	r3, #1
 8002886:	e7f9      	b.n	800287c <memset+0x4>

08002888 <__libc_init_array>:
 8002888:	b570      	push	{r4, r5, r6, lr}
 800288a:	2600      	movs	r6, #0
 800288c:	4c0c      	ldr	r4, [pc, #48]	; (80028c0 <__libc_init_array+0x38>)
 800288e:	4d0d      	ldr	r5, [pc, #52]	; (80028c4 <__libc_init_array+0x3c>)
 8002890:	1b64      	subs	r4, r4, r5
 8002892:	10a4      	asrs	r4, r4, #2
 8002894:	42a6      	cmp	r6, r4
 8002896:	d109      	bne.n	80028ac <__libc_init_array+0x24>
 8002898:	2600      	movs	r6, #0
 800289a:	f000 f819 	bl	80028d0 <_init>
 800289e:	4c0a      	ldr	r4, [pc, #40]	; (80028c8 <__libc_init_array+0x40>)
 80028a0:	4d0a      	ldr	r5, [pc, #40]	; (80028cc <__libc_init_array+0x44>)
 80028a2:	1b64      	subs	r4, r4, r5
 80028a4:	10a4      	asrs	r4, r4, #2
 80028a6:	42a6      	cmp	r6, r4
 80028a8:	d105      	bne.n	80028b6 <__libc_init_array+0x2e>
 80028aa:	bd70      	pop	{r4, r5, r6, pc}
 80028ac:	00b3      	lsls	r3, r6, #2
 80028ae:	58eb      	ldr	r3, [r5, r3]
 80028b0:	4798      	blx	r3
 80028b2:	3601      	adds	r6, #1
 80028b4:	e7ee      	b.n	8002894 <__libc_init_array+0xc>
 80028b6:	00b3      	lsls	r3, r6, #2
 80028b8:	58eb      	ldr	r3, [r5, r3]
 80028ba:	4798      	blx	r3
 80028bc:	3601      	adds	r6, #1
 80028be:	e7f2      	b.n	80028a6 <__libc_init_array+0x1e>
 80028c0:	08002918 	.word	0x08002918
 80028c4:	08002918 	.word	0x08002918
 80028c8:	0800291c 	.word	0x0800291c
 80028cc:	08002918 	.word	0x08002918

080028d0 <_init>:
 80028d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028d2:	46c0      	nop			; (mov r8, r8)
 80028d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028d6:	bc08      	pop	{r3}
 80028d8:	469e      	mov	lr, r3
 80028da:	4770      	bx	lr

080028dc <_fini>:
 80028dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028de:	46c0      	nop			; (mov r8, r8)
 80028e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028e2:	bc08      	pop	{r3}
 80028e4:	469e      	mov	lr, r3
 80028e6:	4770      	bx	lr
